// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$87 {

    static final FunctionDescriptor pthread_once$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle pthread_once$MH = RuntimeHelper.downcallHandle(
        "pthread_once",
        constants$87.pthread_once$FUNC, false
    );
    static final FunctionDescriptor pthread_setcancelstate$FUNC = FunctionDescriptor.of(JAVA_INT,
        JAVA_INT,
        ADDRESS
    );
    static final MethodHandle pthread_setcancelstate$MH = RuntimeHelper.downcallHandle(
        "pthread_setcancelstate",
        constants$87.pthread_setcancelstate$FUNC, false
    );
    static final FunctionDescriptor pthread_setcanceltype$FUNC = FunctionDescriptor.of(JAVA_INT,
        JAVA_INT,
        ADDRESS
    );
    static final MethodHandle pthread_setcanceltype$MH = RuntimeHelper.downcallHandle(
        "pthread_setcanceltype",
        constants$87.pthread_setcanceltype$FUNC, false
    );
    static final FunctionDescriptor pthread_cancel$FUNC = FunctionDescriptor.of(JAVA_INT,
        JAVA_LONG
    );
    static final MethodHandle pthread_cancel$MH = RuntimeHelper.downcallHandle(
        "pthread_cancel",
        constants$87.pthread_cancel$FUNC, false
    );
    static final FunctionDescriptor pthread_testcancel$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle pthread_testcancel$MH = RuntimeHelper.downcallHandle(
        "pthread_testcancel",
        constants$87.pthread_testcancel$FUNC, false
    );
    static final FunctionDescriptor __pthread_register_cancel$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle __pthread_register_cancel$MH = RuntimeHelper.downcallHandle(
        "__pthread_register_cancel",
        constants$87.__pthread_register_cancel$FUNC, false
    );
}


