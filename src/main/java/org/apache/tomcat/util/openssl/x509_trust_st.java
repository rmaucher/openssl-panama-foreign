// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class x509_trust_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("trust"),
        JAVA_INT.withName("flags"),
        ADDRESS.withName("check_trust"),
        ADDRESS.withName("name"),
        JAVA_INT.withName("arg1"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("arg2")
    ).withName("x509_trust_st");
    public static MemoryLayout $LAYOUT() {
        return x509_trust_st.$struct$LAYOUT;
    }
    static final VarHandle trust$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("trust"));
    public static VarHandle trust$VH() {
        return x509_trust_st.trust$VH;
    }
    public static int trust$get(MemorySegment seg) {
        return (int)x509_trust_st.trust$VH.get(seg);
    }
    public static void trust$set( MemorySegment seg, int x) {
        x509_trust_st.trust$VH.set(seg, x);
    }
    public static int trust$get(MemorySegment seg, long index) {
        return (int)x509_trust_st.trust$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void trust$set(MemorySegment seg, long index, int x) {
        x509_trust_st.trust$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return x509_trust_st.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)x509_trust_st.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        x509_trust_st.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)x509_trust_st.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        x509_trust_st.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor check_trust$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle check_trust$MH = RuntimeHelper.downcallHandle(
        x509_trust_st.check_trust$FUNC, false
    );
    public interface check_trust {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        static NativeSymbol allocate(check_trust fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(check_trust.class, fi, x509_trust_st.check_trust$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static check_trust ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("check_trust::" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2) -> {
                try {
                    return (int)x509_trust_st.check_trust$MH.invokeExact(symbol, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle check_trust$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("check_trust"));
    public static VarHandle check_trust$VH() {
        return x509_trust_st.check_trust$VH;
    }
    public static MemoryAddress check_trust$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)x509_trust_st.check_trust$VH.get(seg);
    }
    public static void check_trust$set( MemorySegment seg, MemoryAddress x) {
        x509_trust_st.check_trust$VH.set(seg, x);
    }
    public static MemoryAddress check_trust$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)x509_trust_st.check_trust$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void check_trust$set(MemorySegment seg, long index, MemoryAddress x) {
        x509_trust_st.check_trust$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static check_trust check_trust (MemorySegment segment, ResourceScope scope) {
        return check_trust.ofAddress(check_trust$get(segment), scope);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return x509_trust_st.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)x509_trust_st.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        x509_trust_st.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)x509_trust_st.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        x509_trust_st.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle arg1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("arg1"));
    public static VarHandle arg1$VH() {
        return x509_trust_st.arg1$VH;
    }
    public static int arg1$get(MemorySegment seg) {
        return (int)x509_trust_st.arg1$VH.get(seg);
    }
    public static void arg1$set( MemorySegment seg, int x) {
        x509_trust_st.arg1$VH.set(seg, x);
    }
    public static int arg1$get(MemorySegment seg, long index) {
        return (int)x509_trust_st.arg1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void arg1$set(MemorySegment seg, long index, int x) {
        x509_trust_st.arg1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle arg2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("arg2"));
    public static VarHandle arg2$VH() {
        return x509_trust_st.arg2$VH;
    }
    public static MemoryAddress arg2$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)x509_trust_st.arg2$VH.get(seg);
    }
    public static void arg2$set( MemorySegment seg, MemoryAddress x) {
        x509_trust_st.arg2$VH.set(seg, x);
    }
    public static MemoryAddress arg2$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)x509_trust_st.arg2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void arg2$set(MemorySegment seg, long index, MemoryAddress x) {
        x509_trust_st.arg2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


