// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_7 extends openssl_h_6 {

    public static MethodHandle ASN1_TYPE_unpack_sequence$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ASN1_TYPE_unpack_sequence$MH,"ASN1_TYPE_unpack_sequence");
    }
    public static MemoryAddress ASN1_TYPE_unpack_sequence ( Addressable it,  Addressable t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.ASN1_TYPE_unpack_sequence$MH, "ASN1_TYPE_unpack_sequence");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(it, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OBJECT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ASN1_OBJECT_new$MH,"ASN1_OBJECT_new");
    }
    public static MemoryAddress ASN1_OBJECT_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.ASN1_OBJECT_new$MH, "ASN1_OBJECT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OBJECT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$207.ASN1_OBJECT_free$MH,"ASN1_OBJECT_free");
    }
    public static void ASN1_OBJECT_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.ASN1_OBJECT_free$MH, "ASN1_OBJECT_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_OBJECT$MH() {
        return RuntimeHelper.requireNonNull(constants$207.i2d_ASN1_OBJECT$MH,"i2d_ASN1_OBJECT");
    }
    public static int i2d_ASN1_OBJECT ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.i2d_ASN1_OBJECT$MH, "i2d_ASN1_OBJECT");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_OBJECT$MH() {
        return RuntimeHelper.requireNonNull(constants$207.d2i_ASN1_OBJECT$MH,"d2i_ASN1_OBJECT");
    }
    public static MemoryAddress d2i_ASN1_OBJECT ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.d2i_ASN1_OBJECT$MH, "d2i_ASN1_OBJECT");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_num$MH() {
        return RuntimeHelper.requireNonNull(constants$208.sk_ASN1_OBJECT_num$MH,"sk_ASN1_OBJECT_num");
    }
    public static int sk_ASN1_OBJECT_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.sk_ASN1_OBJECT_num$MH, "sk_ASN1_OBJECT_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_value$MH() {
        return RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_value$MH,"sk_ASN1_OBJECT_value");
    }
    public static MemoryAddress sk_ASN1_OBJECT_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_value$MH, "sk_ASN1_OBJECT_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_new$MH,"sk_ASN1_OBJECT_new");
    }
    public static MemoryAddress sk_ASN1_OBJECT_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_new$MH, "sk_ASN1_OBJECT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_new_null$MH,"sk_ASN1_OBJECT_new_null");
    }
    public static MemoryAddress sk_ASN1_OBJECT_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_new_null$MH, "sk_ASN1_OBJECT_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_new_reserve$MH,"sk_ASN1_OBJECT_new_reserve");
    }
    public static MemoryAddress sk_ASN1_OBJECT_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_new_reserve$MH, "sk_ASN1_OBJECT_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_reserve$MH,"sk_ASN1_OBJECT_reserve");
    }
    public static int sk_ASN1_OBJECT_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_reserve$MH, "sk_ASN1_OBJECT_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_free$MH,"sk_ASN1_OBJECT_free");
    }
    public static void sk_ASN1_OBJECT_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.sk_ASN1_OBJECT_free$MH, "sk_ASN1_OBJECT_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_zero$MH,"sk_ASN1_OBJECT_zero");
    }
    public static void sk_ASN1_OBJECT_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_zero$MH, "sk_ASN1_OBJECT_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_delete$MH,"sk_ASN1_OBJECT_delete");
    }
    public static MemoryAddress sk_ASN1_OBJECT_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_delete$MH, "sk_ASN1_OBJECT_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_delete_ptr$MH,"sk_ASN1_OBJECT_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_OBJECT_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_delete_ptr$MH, "sk_ASN1_OBJECT_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_push$MH() {
        return RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_push$MH,"sk_ASN1_OBJECT_push");
    }
    public static int sk_ASN1_OBJECT_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_push$MH, "sk_ASN1_OBJECT_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_unshift$MH,"sk_ASN1_OBJECT_unshift");
    }
    public static int sk_ASN1_OBJECT_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_unshift$MH, "sk_ASN1_OBJECT_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_pop$MH,"sk_ASN1_OBJECT_pop");
    }
    public static MemoryAddress sk_ASN1_OBJECT_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.sk_ASN1_OBJECT_pop$MH, "sk_ASN1_OBJECT_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_shift$MH,"sk_ASN1_OBJECT_shift");
    }
    public static MemoryAddress sk_ASN1_OBJECT_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_shift$MH, "sk_ASN1_OBJECT_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_pop_free$MH,"sk_ASN1_OBJECT_pop_free");
    }
    public static void sk_ASN1_OBJECT_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_pop_free$MH, "sk_ASN1_OBJECT_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_insert$MH,"sk_ASN1_OBJECT_insert");
    }
    public static int sk_ASN1_OBJECT_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_insert$MH, "sk_ASN1_OBJECT_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_set$MH() {
        return RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_set$MH,"sk_ASN1_OBJECT_set");
    }
    public static MemoryAddress sk_ASN1_OBJECT_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_set$MH, "sk_ASN1_OBJECT_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_find$MH() {
        return RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_find$MH,"sk_ASN1_OBJECT_find");
    }
    public static int sk_ASN1_OBJECT_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_find$MH, "sk_ASN1_OBJECT_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_find_ex$MH,"sk_ASN1_OBJECT_find_ex");
    }
    public static int sk_ASN1_OBJECT_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.sk_ASN1_OBJECT_find_ex$MH, "sk_ASN1_OBJECT_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_sort$MH,"sk_ASN1_OBJECT_sort");
    }
    public static void sk_ASN1_OBJECT_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_sort$MH, "sk_ASN1_OBJECT_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_is_sorted$MH,"sk_ASN1_OBJECT_is_sorted");
    }
    public static int sk_ASN1_OBJECT_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_is_sorted$MH, "sk_ASN1_OBJECT_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_dup$MH,"sk_ASN1_OBJECT_dup");
    }
    public static MemoryAddress sk_ASN1_OBJECT_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_dup$MH, "sk_ASN1_OBJECT_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_deep_copy$MH,"sk_ASN1_OBJECT_deep_copy");
    }
    public static MemoryAddress sk_ASN1_OBJECT_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_deep_copy$MH, "sk_ASN1_OBJECT_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_OBJECT_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_set_cmp_func$MH,"sk_ASN1_OBJECT_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_OBJECT_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.sk_ASN1_OBJECT_set_cmp_func$MH, "sk_ASN1_OBJECT_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$212.ASN1_STRING_new$MH,"ASN1_STRING_new");
    }
    public static MemoryAddress ASN1_STRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.ASN1_STRING_new$MH, "ASN1_STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_free$MH,"ASN1_STRING_free");
    }
    public static void ASN1_STRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_free$MH, "ASN1_STRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_clear_free$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_clear_free$MH,"ASN1_STRING_clear_free");
    }
    public static void ASN1_STRING_clear_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_clear_free$MH, "ASN1_STRING_clear_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_copy$MH,"ASN1_STRING_copy");
    }
    public static int ASN1_STRING_copy ( Addressable dst,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_copy$MH, "ASN1_STRING_copy");
        try {
            return (int)mh$.invokeExact(dst, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_dup$MH,"ASN1_STRING_dup");
    }
    public static MemoryAddress ASN1_STRING_dup ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_dup$MH, "ASN1_STRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_type_new$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_type_new$MH,"ASN1_STRING_type_new");
    }
    public static MemoryAddress ASN1_STRING_type_new ( int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_type_new$MH, "ASN1_STRING_type_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_cmp$MH,"ASN1_STRING_cmp");
    }
    public static int ASN1_STRING_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.ASN1_STRING_cmp$MH, "ASN1_STRING_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_set$MH,"ASN1_STRING_set");
    }
    public static int ASN1_STRING_set ( Addressable str,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_set$MH, "ASN1_STRING_set");
        try {
            return (int)mh$.invokeExact(str, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_set0$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_set0$MH,"ASN1_STRING_set0");
    }
    public static void ASN1_STRING_set0 ( Addressable str,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_set0$MH, "ASN1_STRING_set0");
        try {
            mh$.invokeExact(str, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_length$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_length$MH,"ASN1_STRING_length");
    }
    public static int ASN1_STRING_length ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_length$MH, "ASN1_STRING_length");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_length_set$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_length_set$MH,"ASN1_STRING_length_set");
    }
    public static void ASN1_STRING_length_set ( Addressable x,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_length_set$MH, "ASN1_STRING_length_set");
        try {
            mh$.invokeExact(x, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_type$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_type$MH,"ASN1_STRING_type");
    }
    public static int ASN1_STRING_type ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_type$MH, "ASN1_STRING_type");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_data$MH() {
        return RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_data$MH,"ASN1_STRING_data");
    }
    public static MemoryAddress ASN1_STRING_data ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.ASN1_STRING_data$MH, "ASN1_STRING_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_get0_data$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ASN1_STRING_get0_data$MH,"ASN1_STRING_get0_data");
    }
    public static MemoryAddress ASN1_STRING_get0_data ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.ASN1_STRING_get0_data$MH, "ASN1_STRING_get0_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ASN1_BIT_STRING_new$MH,"ASN1_BIT_STRING_new");
    }
    public static MemoryAddress ASN1_BIT_STRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.ASN1_BIT_STRING_new$MH, "ASN1_BIT_STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ASN1_BIT_STRING_free$MH,"ASN1_BIT_STRING_free");
    }
    public static void ASN1_BIT_STRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.ASN1_BIT_STRING_free$MH, "ASN1_BIT_STRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_BIT_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$215.d2i_ASN1_BIT_STRING$MH,"d2i_ASN1_BIT_STRING");
    }
    public static MemoryAddress d2i_ASN1_BIT_STRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.d2i_ASN1_BIT_STRING$MH, "d2i_ASN1_BIT_STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_BIT_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$215.i2d_ASN1_BIT_STRING$MH,"i2d_ASN1_BIT_STRING");
    }
    public static int i2d_ASN1_BIT_STRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.i2d_ASN1_BIT_STRING$MH, "i2d_ASN1_BIT_STRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$215.ASN1_BIT_STRING_set$MH,"ASN1_BIT_STRING_set");
    }
    public static int ASN1_BIT_STRING_set ( Addressable a,  Addressable d,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.ASN1_BIT_STRING_set$MH, "ASN1_BIT_STRING_set");
        try {
            return (int)mh$.invokeExact(a, d, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_set_bit$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_set_bit$MH,"ASN1_BIT_STRING_set_bit");
    }
    public static int ASN1_BIT_STRING_set_bit ( Addressable a,  int n,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_set_bit$MH, "ASN1_BIT_STRING_set_bit");
        try {
            return (int)mh$.invokeExact(a, n, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_get_bit$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_get_bit$MH,"ASN1_BIT_STRING_get_bit");
    }
    public static int ASN1_BIT_STRING_get_bit ( Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_get_bit$MH, "ASN1_BIT_STRING_get_bit");
        try {
            return (int)mh$.invokeExact(a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_check$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_check$MH,"ASN1_BIT_STRING_check");
    }
    public static int ASN1_BIT_STRING_check ( Addressable a,  Addressable flags,  int flags_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_check$MH, "ASN1_BIT_STRING_check");
        try {
            return (int)mh$.invokeExact(a, flags, flags_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_name_print$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_name_print$MH,"ASN1_BIT_STRING_name_print");
    }
    public static int ASN1_BIT_STRING_name_print ( Addressable out,  Addressable bs,  Addressable tbl,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_name_print$MH, "ASN1_BIT_STRING_name_print");
        try {
            return (int)mh$.invokeExact(out, bs, tbl, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_num_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_num_asc$MH,"ASN1_BIT_STRING_num_asc");
    }
    public static int ASN1_BIT_STRING_num_asc ( Addressable name,  Addressable tbl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_num_asc$MH, "ASN1_BIT_STRING_num_asc");
        try {
            return (int)mh$.invokeExact(name, tbl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BIT_STRING_set_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_set_asc$MH,"ASN1_BIT_STRING_set_asc");
    }
    public static int ASN1_BIT_STRING_set_asc ( Addressable bs,  Addressable name,  int value,  Addressable tbl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.ASN1_BIT_STRING_set_asc$MH, "ASN1_BIT_STRING_set_asc");
        try {
            return (int)mh$.invokeExact(bs, name, value, tbl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_new$MH() {
        return RuntimeHelper.requireNonNull(constants$217.ASN1_INTEGER_new$MH,"ASN1_INTEGER_new");
    }
    public static MemoryAddress ASN1_INTEGER_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.ASN1_INTEGER_new$MH, "ASN1_INTEGER_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_free$MH() {
        return RuntimeHelper.requireNonNull(constants$217.ASN1_INTEGER_free$MH,"ASN1_INTEGER_free");
    }
    public static void ASN1_INTEGER_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.ASN1_INTEGER_free$MH, "ASN1_INTEGER_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$217.d2i_ASN1_INTEGER$MH,"d2i_ASN1_INTEGER");
    }
    public static MemoryAddress d2i_ASN1_INTEGER ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.d2i_ASN1_INTEGER$MH, "d2i_ASN1_INTEGER");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$217.i2d_ASN1_INTEGER$MH,"i2d_ASN1_INTEGER");
    }
    public static int i2d_ASN1_INTEGER ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.i2d_ASN1_INTEGER$MH, "i2d_ASN1_INTEGER");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_UINTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$217.d2i_ASN1_UINTEGER$MH,"d2i_ASN1_UINTEGER");
    }
    public static MemoryAddress d2i_ASN1_UINTEGER ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.d2i_ASN1_UINTEGER$MH, "d2i_ASN1_UINTEGER");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$217.ASN1_INTEGER_dup$MH,"ASN1_INTEGER_dup");
    }
    public static MemoryAddress ASN1_INTEGER_dup ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.ASN1_INTEGER_dup$MH, "ASN1_INTEGER_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$218.ASN1_INTEGER_cmp$MH,"ASN1_INTEGER_cmp");
    }
    public static int ASN1_INTEGER_cmp ( Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.ASN1_INTEGER_cmp$MH, "ASN1_INTEGER_cmp");
        try {
            return (int)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_new$MH() {
        return RuntimeHelper.requireNonNull(constants$218.ASN1_ENUMERATED_new$MH,"ASN1_ENUMERATED_new");
    }
    public static MemoryAddress ASN1_ENUMERATED_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.ASN1_ENUMERATED_new$MH, "ASN1_ENUMERATED_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_free$MH() {
        return RuntimeHelper.requireNonNull(constants$218.ASN1_ENUMERATED_free$MH,"ASN1_ENUMERATED_free");
    }
    public static void ASN1_ENUMERATED_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.ASN1_ENUMERATED_free$MH, "ASN1_ENUMERATED_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_ENUMERATED$MH() {
        return RuntimeHelper.requireNonNull(constants$218.d2i_ASN1_ENUMERATED$MH,"d2i_ASN1_ENUMERATED");
    }
    public static MemoryAddress d2i_ASN1_ENUMERATED ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.d2i_ASN1_ENUMERATED$MH, "d2i_ASN1_ENUMERATED");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_ENUMERATED$MH() {
        return RuntimeHelper.requireNonNull(constants$218.i2d_ASN1_ENUMERATED$MH,"i2d_ASN1_ENUMERATED");
    }
    public static int i2d_ASN1_ENUMERATED ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.i2d_ASN1_ENUMERATED$MH, "i2d_ASN1_ENUMERATED");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_check$MH() {
        return RuntimeHelper.requireNonNull(constants$218.ASN1_UTCTIME_check$MH,"ASN1_UTCTIME_check");
    }
    public static int ASN1_UTCTIME_check ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.ASN1_UTCTIME_check$MH, "ASN1_UTCTIME_check");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_set$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_set$MH,"ASN1_UTCTIME_set");
    }
    public static MemoryAddress ASN1_UTCTIME_set ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_set$MH, "ASN1_UTCTIME_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_adj$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_adj$MH,"ASN1_UTCTIME_adj");
    }
    public static MemoryAddress ASN1_UTCTIME_adj ( Addressable s,  long t,  int offset_day,  long offset_sec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_adj$MH, "ASN1_UTCTIME_adj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, t, offset_day, offset_sec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_set_string$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_set_string$MH,"ASN1_UTCTIME_set_string");
    }
    public static int ASN1_UTCTIME_set_string ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_set_string$MH, "ASN1_UTCTIME_set_string");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_cmp_time_t$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_cmp_time_t$MH,"ASN1_UTCTIME_cmp_time_t");
    }
    public static int ASN1_UTCTIME_cmp_time_t ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.ASN1_UTCTIME_cmp_time_t$MH, "ASN1_UTCTIME_cmp_time_t");
        try {
            return (int)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_check$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ASN1_GENERALIZEDTIME_check$MH,"ASN1_GENERALIZEDTIME_check");
    }
    public static int ASN1_GENERALIZEDTIME_check ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.ASN1_GENERALIZEDTIME_check$MH, "ASN1_GENERALIZEDTIME_check");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_set$MH() {
        return RuntimeHelper.requireNonNull(constants$219.ASN1_GENERALIZEDTIME_set$MH,"ASN1_GENERALIZEDTIME_set");
    }
    public static MemoryAddress ASN1_GENERALIZEDTIME_set ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.ASN1_GENERALIZEDTIME_set$MH, "ASN1_GENERALIZEDTIME_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_adj$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ASN1_GENERALIZEDTIME_adj$MH,"ASN1_GENERALIZEDTIME_adj");
    }
    public static MemoryAddress ASN1_GENERALIZEDTIME_adj ( Addressable s,  long t,  int offset_day,  long offset_sec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.ASN1_GENERALIZEDTIME_adj$MH, "ASN1_GENERALIZEDTIME_adj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, t, offset_day, offset_sec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_set_string$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ASN1_GENERALIZEDTIME_set_string$MH,"ASN1_GENERALIZEDTIME_set_string");
    }
    public static int ASN1_GENERALIZEDTIME_set_string ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.ASN1_GENERALIZEDTIME_set_string$MH, "ASN1_GENERALIZEDTIME_set_string");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_diff$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ASN1_TIME_diff$MH,"ASN1_TIME_diff");
    }
    public static int ASN1_TIME_diff ( Addressable pday,  Addressable psec,  Addressable from,  Addressable to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.ASN1_TIME_diff$MH, "ASN1_TIME_diff");
        try {
            return (int)mh$.invokeExact(pday, psec, from, to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OCTET_STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ASN1_OCTET_STRING_new$MH,"ASN1_OCTET_STRING_new");
    }
    public static MemoryAddress ASN1_OCTET_STRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.ASN1_OCTET_STRING_new$MH, "ASN1_OCTET_STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OCTET_STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$220.ASN1_OCTET_STRING_free$MH,"ASN1_OCTET_STRING_free");
    }
    public static void ASN1_OCTET_STRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.ASN1_OCTET_STRING_free$MH, "ASN1_OCTET_STRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_OCTET_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$220.d2i_ASN1_OCTET_STRING$MH,"d2i_ASN1_OCTET_STRING");
    }
    public static MemoryAddress d2i_ASN1_OCTET_STRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.d2i_ASN1_OCTET_STRING$MH, "d2i_ASN1_OCTET_STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_OCTET_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$221.i2d_ASN1_OCTET_STRING$MH,"i2d_ASN1_OCTET_STRING");
    }
    public static int i2d_ASN1_OCTET_STRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.i2d_ASN1_OCTET_STRING$MH, "i2d_ASN1_OCTET_STRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OCTET_STRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ASN1_OCTET_STRING_dup$MH,"ASN1_OCTET_STRING_dup");
    }
    public static MemoryAddress ASN1_OCTET_STRING_dup ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.ASN1_OCTET_STRING_dup$MH, "ASN1_OCTET_STRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OCTET_STRING_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ASN1_OCTET_STRING_cmp$MH,"ASN1_OCTET_STRING_cmp");
    }
    public static int ASN1_OCTET_STRING_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.ASN1_OCTET_STRING_cmp$MH, "ASN1_OCTET_STRING_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OCTET_STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ASN1_OCTET_STRING_set$MH,"ASN1_OCTET_STRING_set");
    }
    public static int ASN1_OCTET_STRING_set ( Addressable str,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.ASN1_OCTET_STRING_set$MH, "ASN1_OCTET_STRING_set");
        try {
            return (int)mh$.invokeExact(str, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_VISIBLESTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ASN1_VISIBLESTRING_new$MH,"ASN1_VISIBLESTRING_new");
    }
    public static MemoryAddress ASN1_VISIBLESTRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.ASN1_VISIBLESTRING_new$MH, "ASN1_VISIBLESTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_VISIBLESTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$221.ASN1_VISIBLESTRING_free$MH,"ASN1_VISIBLESTRING_free");
    }
    public static void ASN1_VISIBLESTRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.ASN1_VISIBLESTRING_free$MH, "ASN1_VISIBLESTRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_VISIBLESTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$222.d2i_ASN1_VISIBLESTRING$MH,"d2i_ASN1_VISIBLESTRING");
    }
    public static MemoryAddress d2i_ASN1_VISIBLESTRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.d2i_ASN1_VISIBLESTRING$MH, "d2i_ASN1_VISIBLESTRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_VISIBLESTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$222.i2d_ASN1_VISIBLESTRING$MH,"i2d_ASN1_VISIBLESTRING");
    }
    public static int i2d_ASN1_VISIBLESTRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.i2d_ASN1_VISIBLESTRING$MH, "i2d_ASN1_VISIBLESTRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UNIVERSALSTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$222.ASN1_UNIVERSALSTRING_new$MH,"ASN1_UNIVERSALSTRING_new");
    }
    public static MemoryAddress ASN1_UNIVERSALSTRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.ASN1_UNIVERSALSTRING_new$MH, "ASN1_UNIVERSALSTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UNIVERSALSTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$222.ASN1_UNIVERSALSTRING_free$MH,"ASN1_UNIVERSALSTRING_free");
    }
    public static void ASN1_UNIVERSALSTRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.ASN1_UNIVERSALSTRING_free$MH, "ASN1_UNIVERSALSTRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_UNIVERSALSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$222.d2i_ASN1_UNIVERSALSTRING$MH,"d2i_ASN1_UNIVERSALSTRING");
    }
    public static MemoryAddress d2i_ASN1_UNIVERSALSTRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.d2i_ASN1_UNIVERSALSTRING$MH, "d2i_ASN1_UNIVERSALSTRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_UNIVERSALSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$222.i2d_ASN1_UNIVERSALSTRING$MH,"i2d_ASN1_UNIVERSALSTRING");
    }
    public static int i2d_ASN1_UNIVERSALSTRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.i2d_ASN1_UNIVERSALSTRING$MH, "i2d_ASN1_UNIVERSALSTRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTF8STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$223.ASN1_UTF8STRING_new$MH,"ASN1_UTF8STRING_new");
    }
    public static MemoryAddress ASN1_UTF8STRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.ASN1_UTF8STRING_new$MH, "ASN1_UTF8STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTF8STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$223.ASN1_UTF8STRING_free$MH,"ASN1_UTF8STRING_free");
    }
    public static void ASN1_UTF8STRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.ASN1_UTF8STRING_free$MH, "ASN1_UTF8STRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_UTF8STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$223.d2i_ASN1_UTF8STRING$MH,"d2i_ASN1_UTF8STRING");
    }
    public static MemoryAddress d2i_ASN1_UTF8STRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.d2i_ASN1_UTF8STRING$MH, "d2i_ASN1_UTF8STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_UTF8STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$223.i2d_ASN1_UTF8STRING$MH,"i2d_ASN1_UTF8STRING");
    }
    public static int i2d_ASN1_UTF8STRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.i2d_ASN1_UTF8STRING$MH, "i2d_ASN1_UTF8STRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_NULL_new$MH() {
        return RuntimeHelper.requireNonNull(constants$223.ASN1_NULL_new$MH,"ASN1_NULL_new");
    }
    public static MemoryAddress ASN1_NULL_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.ASN1_NULL_new$MH, "ASN1_NULL_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_NULL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$223.ASN1_NULL_free$MH,"ASN1_NULL_free");
    }
    public static void ASN1_NULL_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.ASN1_NULL_free$MH, "ASN1_NULL_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_NULL$MH() {
        return RuntimeHelper.requireNonNull(constants$224.d2i_ASN1_NULL$MH,"d2i_ASN1_NULL");
    }
    public static MemoryAddress d2i_ASN1_NULL ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.d2i_ASN1_NULL$MH, "d2i_ASN1_NULL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_NULL$MH() {
        return RuntimeHelper.requireNonNull(constants$224.i2d_ASN1_NULL$MH,"i2d_ASN1_NULL");
    }
    public static int i2d_ASN1_NULL ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.i2d_ASN1_NULL$MH, "i2d_ASN1_NULL");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BMPSTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$224.ASN1_BMPSTRING_new$MH,"ASN1_BMPSTRING_new");
    }
    public static MemoryAddress ASN1_BMPSTRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.ASN1_BMPSTRING_new$MH, "ASN1_BMPSTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_BMPSTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$224.ASN1_BMPSTRING_free$MH,"ASN1_BMPSTRING_free");
    }
    public static void ASN1_BMPSTRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.ASN1_BMPSTRING_free$MH, "ASN1_BMPSTRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_BMPSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$224.d2i_ASN1_BMPSTRING$MH,"d2i_ASN1_BMPSTRING");
    }
    public static MemoryAddress d2i_ASN1_BMPSTRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.d2i_ASN1_BMPSTRING$MH, "d2i_ASN1_BMPSTRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_BMPSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$224.i2d_ASN1_BMPSTRING$MH,"i2d_ASN1_BMPSTRING");
    }
    public static int i2d_ASN1_BMPSTRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.i2d_ASN1_BMPSTRING$MH, "i2d_ASN1_BMPSTRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UTF8_getc$MH() {
        return RuntimeHelper.requireNonNull(constants$225.UTF8_getc$MH,"UTF8_getc");
    }
    public static int UTF8_getc ( Addressable str,  int len,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.UTF8_getc$MH, "UTF8_getc");
        try {
            return (int)mh$.invokeExact(str, len, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UTF8_putc$MH() {
        return RuntimeHelper.requireNonNull(constants$225.UTF8_putc$MH,"UTF8_putc");
    }
    public static int UTF8_putc ( Addressable str,  int len,  long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.UTF8_putc$MH, "UTF8_putc");
        try {
            return (int)mh$.invokeExact(str, len, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PRINTABLE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$225.ASN1_PRINTABLE_new$MH,"ASN1_PRINTABLE_new");
    }
    public static MemoryAddress ASN1_PRINTABLE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.ASN1_PRINTABLE_new$MH, "ASN1_PRINTABLE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PRINTABLE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$225.ASN1_PRINTABLE_free$MH,"ASN1_PRINTABLE_free");
    }
    public static void ASN1_PRINTABLE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.ASN1_PRINTABLE_free$MH, "ASN1_PRINTABLE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_PRINTABLE$MH() {
        return RuntimeHelper.requireNonNull(constants$225.d2i_ASN1_PRINTABLE$MH,"d2i_ASN1_PRINTABLE");
    }
    public static MemoryAddress d2i_ASN1_PRINTABLE ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.d2i_ASN1_PRINTABLE$MH, "d2i_ASN1_PRINTABLE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_PRINTABLE$MH() {
        return RuntimeHelper.requireNonNull(constants$225.i2d_ASN1_PRINTABLE$MH,"i2d_ASN1_PRINTABLE");
    }
    public static int i2d_ASN1_PRINTABLE ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.i2d_ASN1_PRINTABLE$MH, "i2d_ASN1_PRINTABLE");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIRECTORYSTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$226.DIRECTORYSTRING_new$MH,"DIRECTORYSTRING_new");
    }
    public static MemoryAddress DIRECTORYSTRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.DIRECTORYSTRING_new$MH, "DIRECTORYSTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIRECTORYSTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$226.DIRECTORYSTRING_free$MH,"DIRECTORYSTRING_free");
    }
    public static void DIRECTORYSTRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.DIRECTORYSTRING_free$MH, "DIRECTORYSTRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DIRECTORYSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$226.d2i_DIRECTORYSTRING$MH,"d2i_DIRECTORYSTRING");
    }
    public static MemoryAddress d2i_DIRECTORYSTRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.d2i_DIRECTORYSTRING$MH, "d2i_DIRECTORYSTRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DIRECTORYSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$226.i2d_DIRECTORYSTRING$MH,"i2d_DIRECTORYSTRING");
    }
    public static int i2d_DIRECTORYSTRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.i2d_DIRECTORYSTRING$MH, "i2d_DIRECTORYSTRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DISPLAYTEXT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$226.DISPLAYTEXT_new$MH,"DISPLAYTEXT_new");
    }
    public static MemoryAddress DISPLAYTEXT_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.DISPLAYTEXT_new$MH, "DISPLAYTEXT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DISPLAYTEXT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$226.DISPLAYTEXT_free$MH,"DISPLAYTEXT_free");
    }
    public static void DISPLAYTEXT_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.DISPLAYTEXT_free$MH, "DISPLAYTEXT_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DISPLAYTEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$227.d2i_DISPLAYTEXT$MH,"d2i_DISPLAYTEXT");
    }
    public static MemoryAddress d2i_DISPLAYTEXT ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.d2i_DISPLAYTEXT$MH, "d2i_DISPLAYTEXT");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DISPLAYTEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$227.i2d_DISPLAYTEXT$MH,"i2d_DISPLAYTEXT");
    }
    public static int i2d_DISPLAYTEXT ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.i2d_DISPLAYTEXT$MH, "i2d_DISPLAYTEXT");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PRINTABLESTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$227.ASN1_PRINTABLESTRING_new$MH,"ASN1_PRINTABLESTRING_new");
    }
    public static MemoryAddress ASN1_PRINTABLESTRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.ASN1_PRINTABLESTRING_new$MH, "ASN1_PRINTABLESTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PRINTABLESTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$227.ASN1_PRINTABLESTRING_free$MH,"ASN1_PRINTABLESTRING_free");
    }
    public static void ASN1_PRINTABLESTRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.ASN1_PRINTABLESTRING_free$MH, "ASN1_PRINTABLESTRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_PRINTABLESTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$227.d2i_ASN1_PRINTABLESTRING$MH,"d2i_ASN1_PRINTABLESTRING");
    }
    public static MemoryAddress d2i_ASN1_PRINTABLESTRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.d2i_ASN1_PRINTABLESTRING$MH, "d2i_ASN1_PRINTABLESTRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_PRINTABLESTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$227.i2d_ASN1_PRINTABLESTRING$MH,"i2d_ASN1_PRINTABLESTRING");
    }
    public static int i2d_ASN1_PRINTABLESTRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.i2d_ASN1_PRINTABLESTRING$MH, "i2d_ASN1_PRINTABLESTRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_T61STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ASN1_T61STRING_new$MH,"ASN1_T61STRING_new");
    }
    public static MemoryAddress ASN1_T61STRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.ASN1_T61STRING_new$MH, "ASN1_T61STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_T61STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ASN1_T61STRING_free$MH,"ASN1_T61STRING_free");
    }
    public static void ASN1_T61STRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.ASN1_T61STRING_free$MH, "ASN1_T61STRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_T61STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$228.d2i_ASN1_T61STRING$MH,"d2i_ASN1_T61STRING");
    }
    public static MemoryAddress d2i_ASN1_T61STRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.d2i_ASN1_T61STRING$MH, "d2i_ASN1_T61STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_T61STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$228.i2d_ASN1_T61STRING$MH,"i2d_ASN1_T61STRING");
    }
    public static int i2d_ASN1_T61STRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.i2d_ASN1_T61STRING$MH, "i2d_ASN1_T61STRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_IA5STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ASN1_IA5STRING_new$MH,"ASN1_IA5STRING_new");
    }
    public static MemoryAddress ASN1_IA5STRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.ASN1_IA5STRING_new$MH, "ASN1_IA5STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_IA5STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$228.ASN1_IA5STRING_free$MH,"ASN1_IA5STRING_free");
    }
    public static void ASN1_IA5STRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.ASN1_IA5STRING_free$MH, "ASN1_IA5STRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_IA5STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$229.d2i_ASN1_IA5STRING$MH,"d2i_ASN1_IA5STRING");
    }
    public static MemoryAddress d2i_ASN1_IA5STRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.d2i_ASN1_IA5STRING$MH, "d2i_ASN1_IA5STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_IA5STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$229.i2d_ASN1_IA5STRING$MH,"i2d_ASN1_IA5STRING");
    }
    public static int i2d_ASN1_IA5STRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.i2d_ASN1_IA5STRING$MH, "i2d_ASN1_IA5STRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALSTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$229.ASN1_GENERALSTRING_new$MH,"ASN1_GENERALSTRING_new");
    }
    public static MemoryAddress ASN1_GENERALSTRING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.ASN1_GENERALSTRING_new$MH, "ASN1_GENERALSTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALSTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$229.ASN1_GENERALSTRING_free$MH,"ASN1_GENERALSTRING_free");
    }
    public static void ASN1_GENERALSTRING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.ASN1_GENERALSTRING_free$MH, "ASN1_GENERALSTRING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_GENERALSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$229.d2i_ASN1_GENERALSTRING$MH,"d2i_ASN1_GENERALSTRING");
    }
    public static MemoryAddress d2i_ASN1_GENERALSTRING ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.d2i_ASN1_GENERALSTRING$MH, "d2i_ASN1_GENERALSTRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_GENERALSTRING$MH() {
        return RuntimeHelper.requireNonNull(constants$229.i2d_ASN1_GENERALSTRING$MH,"i2d_ASN1_GENERALSTRING");
    }
    public static int i2d_ASN1_GENERALSTRING ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.i2d_ASN1_GENERALSTRING$MH, "i2d_ASN1_GENERALSTRING");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$230.ASN1_UTCTIME_new$MH,"ASN1_UTCTIME_new");
    }
    public static MemoryAddress ASN1_UTCTIME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.ASN1_UTCTIME_new$MH, "ASN1_UTCTIME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$230.ASN1_UTCTIME_free$MH,"ASN1_UTCTIME_free");
    }
    public static void ASN1_UTCTIME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.ASN1_UTCTIME_free$MH, "ASN1_UTCTIME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_UTCTIME$MH() {
        return RuntimeHelper.requireNonNull(constants$230.d2i_ASN1_UTCTIME$MH,"d2i_ASN1_UTCTIME");
    }
    public static MemoryAddress d2i_ASN1_UTCTIME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.d2i_ASN1_UTCTIME$MH, "d2i_ASN1_UTCTIME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_UTCTIME$MH() {
        return RuntimeHelper.requireNonNull(constants$230.i2d_ASN1_UTCTIME$MH,"i2d_ASN1_UTCTIME");
    }
    public static int i2d_ASN1_UTCTIME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.i2d_ASN1_UTCTIME$MH, "i2d_ASN1_UTCTIME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$230.ASN1_GENERALIZEDTIME_new$MH,"ASN1_GENERALIZEDTIME_new");
    }
    public static MemoryAddress ASN1_GENERALIZEDTIME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.ASN1_GENERALIZEDTIME_new$MH, "ASN1_GENERALIZEDTIME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$230.ASN1_GENERALIZEDTIME_free$MH,"ASN1_GENERALIZEDTIME_free");
    }
    public static void ASN1_GENERALIZEDTIME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.ASN1_GENERALIZEDTIME_free$MH, "ASN1_GENERALIZEDTIME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_GENERALIZEDTIME$MH() {
        return RuntimeHelper.requireNonNull(constants$231.d2i_ASN1_GENERALIZEDTIME$MH,"d2i_ASN1_GENERALIZEDTIME");
    }
    public static MemoryAddress d2i_ASN1_GENERALIZEDTIME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.d2i_ASN1_GENERALIZEDTIME$MH, "d2i_ASN1_GENERALIZEDTIME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_GENERALIZEDTIME$MH() {
        return RuntimeHelper.requireNonNull(constants$231.i2d_ASN1_GENERALIZEDTIME$MH,"i2d_ASN1_GENERALIZEDTIME");
    }
    public static int i2d_ASN1_GENERALIZEDTIME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.i2d_ASN1_GENERALIZEDTIME$MH, "i2d_ASN1_GENERALIZEDTIME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$231.ASN1_TIME_new$MH,"ASN1_TIME_new");
    }
    public static MemoryAddress ASN1_TIME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.ASN1_TIME_new$MH, "ASN1_TIME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$231.ASN1_TIME_free$MH,"ASN1_TIME_free");
    }
    public static void ASN1_TIME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.ASN1_TIME_free$MH, "ASN1_TIME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_TIME$MH() {
        return RuntimeHelper.requireNonNull(constants$231.d2i_ASN1_TIME$MH,"d2i_ASN1_TIME");
    }
    public static MemoryAddress d2i_ASN1_TIME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.d2i_ASN1_TIME$MH, "d2i_ASN1_TIME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_TIME$MH() {
        return RuntimeHelper.requireNonNull(constants$231.i2d_ASN1_TIME$MH,"i2d_ASN1_TIME");
    }
    public static int i2d_ASN1_TIME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.i2d_ASN1_TIME$MH, "i2d_ASN1_TIME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_set$MH() {
        return RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_set$MH,"ASN1_TIME_set");
    }
    public static MemoryAddress ASN1_TIME_set ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_set$MH, "ASN1_TIME_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_adj$MH() {
        return RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_adj$MH,"ASN1_TIME_adj");
    }
    public static MemoryAddress ASN1_TIME_adj ( Addressable s,  long t,  int offset_day,  long offset_sec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_adj$MH, "ASN1_TIME_adj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, t, offset_day, offset_sec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_check$MH() {
        return RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_check$MH,"ASN1_TIME_check");
    }
    public static int ASN1_TIME_check ( Addressable t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_check$MH, "ASN1_TIME_check");
        try {
            return (int)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_to_generalizedtime$MH() {
        return RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_to_generalizedtime$MH,"ASN1_TIME_to_generalizedtime");
    }
    public static MemoryAddress ASN1_TIME_to_generalizedtime ( Addressable t,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_to_generalizedtime$MH, "ASN1_TIME_to_generalizedtime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(t, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_set_string$MH() {
        return RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_set_string$MH,"ASN1_TIME_set_string");
    }
    public static int ASN1_TIME_set_string ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_set_string$MH, "ASN1_TIME_set_string");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_set_string_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_set_string_X509$MH,"ASN1_TIME_set_string_X509");
    }
    public static int ASN1_TIME_set_string_X509 ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.ASN1_TIME_set_string_X509$MH, "ASN1_TIME_set_string_X509");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_to_tm$MH() {
        return RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_to_tm$MH,"ASN1_TIME_to_tm");
    }
    public static int ASN1_TIME_to_tm ( Addressable s,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_to_tm$MH, "ASN1_TIME_to_tm");
        try {
            return (int)mh$.invokeExact(s, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_normalize$MH,"ASN1_TIME_normalize");
    }
    public static int ASN1_TIME_normalize ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_normalize$MH, "ASN1_TIME_normalize");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_cmp_time_t$MH() {
        return RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_cmp_time_t$MH,"ASN1_TIME_cmp_time_t");
    }
    public static int ASN1_TIME_cmp_time_t ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_cmp_time_t$MH, "ASN1_TIME_cmp_time_t");
        try {
            return (int)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_compare$MH,"ASN1_TIME_compare");
    }
    public static int ASN1_TIME_compare ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.ASN1_TIME_compare$MH, "ASN1_TIME_compare");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2a_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$233.i2a_ASN1_INTEGER$MH,"i2a_ASN1_INTEGER");
    }
    public static int i2a_ASN1_INTEGER ( Addressable bp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.i2a_ASN1_INTEGER$MH, "i2a_ASN1_INTEGER");
        try {
            return (int)mh$.invokeExact(bp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2i_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$233.a2i_ASN1_INTEGER$MH,"a2i_ASN1_INTEGER");
    }
    public static int a2i_ASN1_INTEGER ( Addressable bp,  Addressable bs,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.a2i_ASN1_INTEGER$MH, "a2i_ASN1_INTEGER");
        try {
            return (int)mh$.invokeExact(bp, bs, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2a_ASN1_ENUMERATED$MH() {
        return RuntimeHelper.requireNonNull(constants$234.i2a_ASN1_ENUMERATED$MH,"i2a_ASN1_ENUMERATED");
    }
    public static int i2a_ASN1_ENUMERATED ( Addressable bp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.i2a_ASN1_ENUMERATED$MH, "i2a_ASN1_ENUMERATED");
        try {
            return (int)mh$.invokeExact(bp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2i_ASN1_ENUMERATED$MH() {
        return RuntimeHelper.requireNonNull(constants$234.a2i_ASN1_ENUMERATED$MH,"a2i_ASN1_ENUMERATED");
    }
    public static int a2i_ASN1_ENUMERATED ( Addressable bp,  Addressable bs,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.a2i_ASN1_ENUMERATED$MH, "a2i_ASN1_ENUMERATED");
        try {
            return (int)mh$.invokeExact(bp, bs, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2a_ASN1_OBJECT$MH() {
        return RuntimeHelper.requireNonNull(constants$234.i2a_ASN1_OBJECT$MH,"i2a_ASN1_OBJECT");
    }
    public static int i2a_ASN1_OBJECT ( Addressable bp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.i2a_ASN1_OBJECT$MH, "i2a_ASN1_OBJECT");
        try {
            return (int)mh$.invokeExact(bp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2i_ASN1_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$234.a2i_ASN1_STRING$MH,"a2i_ASN1_STRING");
    }
    public static int a2i_ASN1_STRING ( Addressable bp,  Addressable bs,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.a2i_ASN1_STRING$MH, "a2i_ASN1_STRING");
        try {
            return (int)mh$.invokeExact(bp, bs, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2a_ASN1_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$234.i2a_ASN1_STRING$MH,"i2a_ASN1_STRING");
    }
    public static int i2a_ASN1_STRING ( Addressable bp,  Addressable a,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.i2a_ASN1_STRING$MH, "i2a_ASN1_STRING");
        try {
            return (int)mh$.invokeExact(bp, a, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2t_ASN1_OBJECT$MH() {
        return RuntimeHelper.requireNonNull(constants$234.i2t_ASN1_OBJECT$MH,"i2t_ASN1_OBJECT");
    }
    public static int i2t_ASN1_OBJECT ( Addressable buf,  int buf_len,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.i2t_ASN1_OBJECT$MH, "i2t_ASN1_OBJECT");
        try {
            return (int)mh$.invokeExact(buf, buf_len, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2d_ASN1_OBJECT$MH() {
        return RuntimeHelper.requireNonNull(constants$235.a2d_ASN1_OBJECT$MH,"a2d_ASN1_OBJECT");
    }
    public static int a2d_ASN1_OBJECT ( Addressable out,  int olen,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.a2d_ASN1_OBJECT$MH, "a2d_ASN1_OBJECT");
        try {
            return (int)mh$.invokeExact(out, olen, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_OBJECT_create$MH() {
        return RuntimeHelper.requireNonNull(constants$235.ASN1_OBJECT_create$MH,"ASN1_OBJECT_create");
    }
    public static MemoryAddress ASN1_OBJECT_create ( int nid,  Addressable data,  int len,  Addressable sn,  Addressable ln) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.ASN1_OBJECT_create$MH, "ASN1_OBJECT_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid, data, len, sn, ln);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_get_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_get_int64$MH,"ASN1_INTEGER_get_int64");
    }
    public static int ASN1_INTEGER_get_int64 ( Addressable pr,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_get_int64$MH, "ASN1_INTEGER_get_int64");
        try {
            return (int)mh$.invokeExact(pr, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_set_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_set_int64$MH,"ASN1_INTEGER_set_int64");
    }
    public static int ASN1_INTEGER_set_int64 ( Addressable a,  long r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_set_int64$MH, "ASN1_INTEGER_set_int64");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_get_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_get_uint64$MH,"ASN1_INTEGER_get_uint64");
    }
    public static int ASN1_INTEGER_get_uint64 ( Addressable pr,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_get_uint64$MH, "ASN1_INTEGER_get_uint64");
        try {
            return (int)mh$.invokeExact(pr, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_set_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_set_uint64$MH,"ASN1_INTEGER_set_uint64");
    }
    public static int ASN1_INTEGER_set_uint64 ( Addressable a,  long r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.ASN1_INTEGER_set_uint64$MH, "ASN1_INTEGER_set_uint64");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_set$MH() {
        return RuntimeHelper.requireNonNull(constants$236.ASN1_INTEGER_set$MH,"ASN1_INTEGER_set");
    }
    public static int ASN1_INTEGER_set ( Addressable a,  long v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.ASN1_INTEGER_set$MH, "ASN1_INTEGER_set");
        try {
            return (int)mh$.invokeExact(a, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_get$MH() {
        return RuntimeHelper.requireNonNull(constants$236.ASN1_INTEGER_get$MH,"ASN1_INTEGER_get");
    }
    public static long ASN1_INTEGER_get ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.ASN1_INTEGER_get$MH, "ASN1_INTEGER_get");
        try {
            return (long)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_to_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$236.BN_to_ASN1_INTEGER$MH,"BN_to_ASN1_INTEGER");
    }
    public static MemoryAddress BN_to_ASN1_INTEGER ( Addressable bn,  Addressable ai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.BN_to_ASN1_INTEGER$MH, "BN_to_ASN1_INTEGER");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn, ai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_INTEGER_to_BN$MH() {
        return RuntimeHelper.requireNonNull(constants$236.ASN1_INTEGER_to_BN$MH,"ASN1_INTEGER_to_BN");
    }
    public static MemoryAddress ASN1_INTEGER_to_BN ( Addressable ai,  Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.ASN1_INTEGER_to_BN$MH, "ASN1_INTEGER_to_BN");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ai, bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_get_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$236.ASN1_ENUMERATED_get_int64$MH,"ASN1_ENUMERATED_get_int64");
    }
    public static int ASN1_ENUMERATED_get_int64 ( Addressable pr,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.ASN1_ENUMERATED_get_int64$MH, "ASN1_ENUMERATED_get_int64");
        try {
            return (int)mh$.invokeExact(pr, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_set_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$236.ASN1_ENUMERATED_set_int64$MH,"ASN1_ENUMERATED_set_int64");
    }
    public static int ASN1_ENUMERATED_set_int64 ( Addressable a,  long r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.ASN1_ENUMERATED_set_int64$MH, "ASN1_ENUMERATED_set_int64");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_set$MH() {
        return RuntimeHelper.requireNonNull(constants$237.ASN1_ENUMERATED_set$MH,"ASN1_ENUMERATED_set");
    }
    public static int ASN1_ENUMERATED_set ( Addressable a,  long v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.ASN1_ENUMERATED_set$MH, "ASN1_ENUMERATED_set");
        try {
            return (int)mh$.invokeExact(a, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_get$MH() {
        return RuntimeHelper.requireNonNull(constants$237.ASN1_ENUMERATED_get$MH,"ASN1_ENUMERATED_get");
    }
    public static long ASN1_ENUMERATED_get ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.ASN1_ENUMERATED_get$MH, "ASN1_ENUMERATED_get");
        try {
            return (long)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_to_ASN1_ENUMERATED$MH() {
        return RuntimeHelper.requireNonNull(constants$237.BN_to_ASN1_ENUMERATED$MH,"BN_to_ASN1_ENUMERATED");
    }
    public static MemoryAddress BN_to_ASN1_ENUMERATED ( Addressable bn,  Addressable ai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.BN_to_ASN1_ENUMERATED$MH, "BN_to_ASN1_ENUMERATED");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn, ai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ENUMERATED_to_BN$MH() {
        return RuntimeHelper.requireNonNull(constants$237.ASN1_ENUMERATED_to_BN$MH,"ASN1_ENUMERATED_to_BN");
    }
    public static MemoryAddress ASN1_ENUMERATED_to_BN ( Addressable ai,  Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.ASN1_ENUMERATED_to_BN$MH, "ASN1_ENUMERATED_to_BN");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ai, bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PRINTABLE_type$MH() {
        return RuntimeHelper.requireNonNull(constants$237.ASN1_PRINTABLE_type$MH,"ASN1_PRINTABLE_type");
    }
    public static int ASN1_PRINTABLE_type ( Addressable s,  int max) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.ASN1_PRINTABLE_type$MH, "ASN1_PRINTABLE_type");
        try {
            return (int)mh$.invokeExact(s, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_tag2bit$MH() {
        return RuntimeHelper.requireNonNull(constants$237.ASN1_tag2bit$MH,"ASN1_tag2bit");
    }
    public static long ASN1_tag2bit ( int tag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.ASN1_tag2bit$MH, "ASN1_tag2bit");
        try {
            return (long)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_get_object$MH() {
        return RuntimeHelper.requireNonNull(constants$238.ASN1_get_object$MH,"ASN1_get_object");
    }
    public static int ASN1_get_object ( Addressable pp,  Addressable plength,  Addressable ptag,  Addressable pclass,  long omax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.ASN1_get_object$MH, "ASN1_get_object");
        try {
            return (int)mh$.invokeExact(pp, plength, ptag, pclass, omax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_check_infinite_end$MH() {
        return RuntimeHelper.requireNonNull(constants$238.ASN1_check_infinite_end$MH,"ASN1_check_infinite_end");
    }
    public static int ASN1_check_infinite_end ( Addressable p,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.ASN1_check_infinite_end$MH, "ASN1_check_infinite_end");
        try {
            return (int)mh$.invokeExact(p, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_const_check_infinite_end$MH() {
        return RuntimeHelper.requireNonNull(constants$238.ASN1_const_check_infinite_end$MH,"ASN1_const_check_infinite_end");
    }
    public static int ASN1_const_check_infinite_end ( Addressable p,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.ASN1_const_check_infinite_end$MH, "ASN1_const_check_infinite_end");
        try {
            return (int)mh$.invokeExact(p, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_put_object$MH() {
        return RuntimeHelper.requireNonNull(constants$238.ASN1_put_object$MH,"ASN1_put_object");
    }
    public static void ASN1_put_object ( Addressable pp,  int constructed,  int length,  int tag,  int xclass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.ASN1_put_object$MH, "ASN1_put_object");
        try {
            mh$.invokeExact(pp, constructed, length, tag, xclass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_put_eoc$MH() {
        return RuntimeHelper.requireNonNull(constants$238.ASN1_put_eoc$MH,"ASN1_put_eoc");
    }
    public static int ASN1_put_eoc ( Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.ASN1_put_eoc$MH, "ASN1_put_eoc");
        try {
            return (int)mh$.invokeExact(pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_object_size$MH() {
        return RuntimeHelper.requireNonNull(constants$238.ASN1_object_size$MH,"ASN1_object_size");
    }
    public static int ASN1_object_size ( int constructed,  int length,  int tag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.ASN1_object_size$MH, "ASN1_object_size");
        try {
            return (int)mh$.invokeExact(constructed, length, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$239.ASN1_dup$MH,"ASN1_dup");
    }
    public static MemoryAddress ASN1_dup ( Addressable i2d,  Addressable d2i,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.ASN1_dup$MH, "ASN1_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(i2d, d2i, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$239.ASN1_item_dup$MH,"ASN1_item_dup");
    }
    public static MemoryAddress ASN1_item_dup ( Addressable it,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.ASN1_item_dup$MH, "ASN1_item_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(it, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_d2i_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$239.ASN1_d2i_fp$MH,"ASN1_d2i_fp");
    }
    public static MemoryAddress ASN1_d2i_fp ( Addressable xnew,  Addressable d2i,  Addressable in,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.ASN1_d2i_fp$MH, "ASN1_d2i_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xnew, d2i, in, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_d2i_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$239.ASN1_item_d2i_fp$MH,"ASN1_item_d2i_fp");
    }
    public static MemoryAddress ASN1_item_d2i_fp ( Addressable it,  Addressable in,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.ASN1_item_d2i_fp$MH, "ASN1_item_d2i_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(it, in, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_i2d_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$240.ASN1_i2d_fp$MH,"ASN1_i2d_fp");
    }
    public static int ASN1_i2d_fp ( Addressable i2d,  Addressable out,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.ASN1_i2d_fp$MH, "ASN1_i2d_fp");
        try {
            return (int)mh$.invokeExact(i2d, out, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_i2d_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$240.ASN1_item_i2d_fp$MH,"ASN1_item_i2d_fp");
    }
    public static int ASN1_item_i2d_fp ( Addressable it,  Addressable out,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.ASN1_item_i2d_fp$MH, "ASN1_item_i2d_fp");
        try {
            return (int)mh$.invokeExact(it, out, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_print_ex_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$240.ASN1_STRING_print_ex_fp$MH,"ASN1_STRING_print_ex_fp");
    }
    public static int ASN1_STRING_print_ex_fp ( Addressable fp,  Addressable str,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.ASN1_STRING_print_ex_fp$MH, "ASN1_STRING_print_ex_fp");
        try {
            return (int)mh$.invokeExact(fp, str, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_to_UTF8$MH() {
        return RuntimeHelper.requireNonNull(constants$240.ASN1_STRING_to_UTF8$MH,"ASN1_STRING_to_UTF8");
    }
    public static int ASN1_STRING_to_UTF8 ( Addressable out,  Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.ASN1_STRING_to_UTF8$MH, "ASN1_STRING_to_UTF8");
        try {
            return (int)mh$.invokeExact(out, in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_d2i_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$241.ASN1_d2i_bio$MH,"ASN1_d2i_bio");
    }
    public static MemoryAddress ASN1_d2i_bio ( Addressable xnew,  Addressable d2i,  Addressable in,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.ASN1_d2i_bio$MH, "ASN1_d2i_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xnew, d2i, in, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_d2i_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$241.ASN1_item_d2i_bio$MH,"ASN1_item_d2i_bio");
    }
    public static MemoryAddress ASN1_item_d2i_bio ( Addressable it,  Addressable in,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.ASN1_item_d2i_bio$MH, "ASN1_item_d2i_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(it, in, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_i2d_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$241.ASN1_i2d_bio$MH,"ASN1_i2d_bio");
    }
    public static int ASN1_i2d_bio ( Addressable i2d,  Addressable out,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.ASN1_i2d_bio$MH, "ASN1_i2d_bio");
        try {
            return (int)mh$.invokeExact(i2d, out, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_i2d_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$241.ASN1_item_i2d_bio$MH,"ASN1_item_i2d_bio");
    }
    public static int ASN1_item_i2d_bio ( Addressable it,  Addressable out,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.ASN1_item_i2d_bio$MH, "ASN1_item_i2d_bio");
        try {
            return (int)mh$.invokeExact(it, out, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UTCTIME_print$MH() {
        return RuntimeHelper.requireNonNull(constants$241.ASN1_UTCTIME_print$MH,"ASN1_UTCTIME_print");
    }
    public static int ASN1_UTCTIME_print ( Addressable fp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.ASN1_UTCTIME_print$MH, "ASN1_UTCTIME_print");
        try {
            return (int)mh$.invokeExact(fp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_GENERALIZEDTIME_print$MH() {
        return RuntimeHelper.requireNonNull(constants$241.ASN1_GENERALIZEDTIME_print$MH,"ASN1_GENERALIZEDTIME_print");
    }
    public static int ASN1_GENERALIZEDTIME_print ( Addressable fp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.ASN1_GENERALIZEDTIME_print$MH, "ASN1_GENERALIZEDTIME_print");
        try {
            return (int)mh$.invokeExact(fp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TIME_print$MH() {
        return RuntimeHelper.requireNonNull(constants$242.ASN1_TIME_print$MH,"ASN1_TIME_print");
    }
    public static int ASN1_TIME_print ( Addressable fp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.ASN1_TIME_print$MH, "ASN1_TIME_print");
        try {
            return (int)mh$.invokeExact(fp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_print$MH() {
        return RuntimeHelper.requireNonNull(constants$242.ASN1_STRING_print$MH,"ASN1_STRING_print");
    }
    public static int ASN1_STRING_print ( Addressable bp,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.ASN1_STRING_print$MH, "ASN1_STRING_print");
        try {
            return (int)mh$.invokeExact(bp, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_print_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$242.ASN1_STRING_print_ex$MH,"ASN1_STRING_print_ex");
    }
    public static int ASN1_STRING_print_ex ( Addressable out,  Addressable str,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.ASN1_STRING_print_ex$MH, "ASN1_STRING_print_ex");
        try {
            return (int)mh$.invokeExact(out, str, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_buf_print$MH() {
        return RuntimeHelper.requireNonNull(constants$242.ASN1_buf_print$MH,"ASN1_buf_print");
    }
    public static int ASN1_buf_print ( Addressable bp,  Addressable buf,  long buflen,  int off) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.ASN1_buf_print$MH, "ASN1_buf_print");
        try {
            return (int)mh$.invokeExact(bp, buf, buflen, off);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_bn_print$MH() {
        return RuntimeHelper.requireNonNull(constants$242.ASN1_bn_print$MH,"ASN1_bn_print");
    }
    public static int ASN1_bn_print ( Addressable bp,  Addressable number,  Addressable num,  Addressable buf,  int off) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.ASN1_bn_print$MH, "ASN1_bn_print");
        try {
            return (int)mh$.invokeExact(bp, number, num, buf, off);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$242.ASN1_parse$MH,"ASN1_parse");
    }
    public static int ASN1_parse ( Addressable bp,  Addressable pp,  long len,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.ASN1_parse$MH, "ASN1_parse");
        try {
            return (int)mh$.invokeExact(bp, pp, len, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_parse_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$243.ASN1_parse_dump$MH,"ASN1_parse_dump");
    }
    public static int ASN1_parse_dump ( Addressable bp,  Addressable pp,  long len,  int indent,  int dump) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.ASN1_parse_dump$MH, "ASN1_parse_dump");
        try {
            return (int)mh$.invokeExact(bp, pp, len, indent, dump);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_tag2str$MH() {
        return RuntimeHelper.requireNonNull(constants$243.ASN1_tag2str$MH,"ASN1_tag2str");
    }
    public static MemoryAddress ASN1_tag2str ( int tag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.ASN1_tag2str$MH, "ASN1_tag2str");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_UNIVERSALSTRING_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$243.ASN1_UNIVERSALSTRING_to_string$MH,"ASN1_UNIVERSALSTRING_to_string");
    }
    public static int ASN1_UNIVERSALSTRING_to_string ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.ASN1_UNIVERSALSTRING_to_string$MH, "ASN1_UNIVERSALSTRING_to_string");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_set_octetstring$MH() {
        return RuntimeHelper.requireNonNull(constants$243.ASN1_TYPE_set_octetstring$MH,"ASN1_TYPE_set_octetstring");
    }
    public static int ASN1_TYPE_set_octetstring ( Addressable a,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.ASN1_TYPE_set_octetstring$MH, "ASN1_TYPE_set_octetstring");
        try {
            return (int)mh$.invokeExact(a, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_get_octetstring$MH() {
        return RuntimeHelper.requireNonNull(constants$243.ASN1_TYPE_get_octetstring$MH,"ASN1_TYPE_get_octetstring");
    }
    public static int ASN1_TYPE_get_octetstring ( Addressable a,  Addressable data,  int max_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.ASN1_TYPE_get_octetstring$MH, "ASN1_TYPE_get_octetstring");
        try {
            return (int)mh$.invokeExact(a, data, max_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_set_int_octetstring$MH() {
        return RuntimeHelper.requireNonNull(constants$243.ASN1_TYPE_set_int_octetstring$MH,"ASN1_TYPE_set_int_octetstring");
    }
    public static int ASN1_TYPE_set_int_octetstring ( Addressable a,  long num,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.ASN1_TYPE_set_int_octetstring$MH, "ASN1_TYPE_set_int_octetstring");
        try {
            return (int)mh$.invokeExact(a, num, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_get_int_octetstring$MH() {
        return RuntimeHelper.requireNonNull(constants$244.ASN1_TYPE_get_int_octetstring$MH,"ASN1_TYPE_get_int_octetstring");
    }
    public static int ASN1_TYPE_get_int_octetstring ( Addressable a,  Addressable num,  Addressable data,  int max_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.ASN1_TYPE_get_int_octetstring$MH, "ASN1_TYPE_get_int_octetstring");
        try {
            return (int)mh$.invokeExact(a, num, data, max_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_unpack$MH() {
        return RuntimeHelper.requireNonNull(constants$244.ASN1_item_unpack$MH,"ASN1_item_unpack");
    }
    public static MemoryAddress ASN1_item_unpack ( Addressable oct,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.ASN1_item_unpack$MH, "ASN1_item_unpack");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(oct, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_pack$MH() {
        return RuntimeHelper.requireNonNull(constants$244.ASN1_item_pack$MH,"ASN1_item_pack");
    }
    public static MemoryAddress ASN1_item_pack ( Addressable obj,  Addressable it,  Addressable oct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.ASN1_item_pack$MH, "ASN1_item_pack");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(obj, it, oct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_set_default_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$244.ASN1_STRING_set_default_mask$MH,"ASN1_STRING_set_default_mask");
    }
    public static void ASN1_STRING_set_default_mask ( long mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.ASN1_STRING_set_default_mask$MH, "ASN1_STRING_set_default_mask");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_set_default_mask_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$244.ASN1_STRING_set_default_mask_asc$MH,"ASN1_STRING_set_default_mask_asc");
    }
    public static int ASN1_STRING_set_default_mask_asc ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.ASN1_STRING_set_default_mask_asc$MH, "ASN1_STRING_set_default_mask_asc");
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_get_default_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$244.ASN1_STRING_get_default_mask$MH,"ASN1_STRING_get_default_mask");
    }
    public static long ASN1_STRING_get_default_mask () {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.ASN1_STRING_get_default_mask$MH, "ASN1_STRING_get_default_mask");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_mbstring_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$245.ASN1_mbstring_copy$MH,"ASN1_mbstring_copy");
    }
    public static int ASN1_mbstring_copy ( Addressable out,  Addressable in,  int len,  int inform,  long mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.ASN1_mbstring_copy$MH, "ASN1_mbstring_copy");
        try {
            return (int)mh$.invokeExact(out, in, len, inform, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_mbstring_ncopy$MH() {
        return RuntimeHelper.requireNonNull(constants$245.ASN1_mbstring_ncopy$MH,"ASN1_mbstring_ncopy");
    }
    public static int ASN1_mbstring_ncopy ( Addressable out,  Addressable in,  int len,  int inform,  long mask,  long minsize,  long maxsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.ASN1_mbstring_ncopy$MH, "ASN1_mbstring_ncopy");
        try {
            return (int)mh$.invokeExact(out, in, len, inform, mask, minsize, maxsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_set_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_set_by_NID$MH,"ASN1_STRING_set_by_NID");
    }
    public static MemoryAddress ASN1_STRING_set_by_NID ( Addressable out,  Addressable in,  int inlen,  int inform,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_set_by_NID$MH, "ASN1_STRING_set_by_NID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(out, in, inlen, inform, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_TABLE_get$MH() {
        return RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_TABLE_get$MH,"ASN1_STRING_TABLE_get");
    }
    public static MemoryAddress ASN1_STRING_TABLE_get ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_TABLE_get$MH, "ASN1_STRING_TABLE_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_TABLE_add$MH() {
        return RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_TABLE_add$MH,"ASN1_STRING_TABLE_add");
    }
    public static int ASN1_STRING_TABLE_add ( int x0,  long x1,  long x2,  long x3,  long x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_TABLE_add$MH, "ASN1_STRING_TABLE_add");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_TABLE_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_TABLE_cleanup$MH,"ASN1_STRING_TABLE_cleanup");
    }
    public static void ASN1_STRING_TABLE_cleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.ASN1_STRING_TABLE_cleanup$MH, "ASN1_STRING_TABLE_cleanup");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_new$MH() {
        return RuntimeHelper.requireNonNull(constants$246.ASN1_item_new$MH,"ASN1_item_new");
    }
    public static MemoryAddress ASN1_item_new ( Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.ASN1_item_new$MH, "ASN1_item_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_free$MH() {
        return RuntimeHelper.requireNonNull(constants$246.ASN1_item_free$MH,"ASN1_item_free");
    }
    public static void ASN1_item_free ( Addressable val,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.ASN1_item_free$MH, "ASN1_item_free");
        try {
            mh$.invokeExact(val, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$246.ASN1_item_d2i$MH,"ASN1_item_d2i");
    }
    public static MemoryAddress ASN1_item_d2i ( Addressable val,  Addressable in,  long len,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.ASN1_item_d2i$MH, "ASN1_item_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(val, in, len, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$246.ASN1_item_i2d$MH,"ASN1_item_i2d");
    }
    public static int ASN1_item_i2d ( Addressable val,  Addressable out,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.ASN1_item_i2d$MH, "ASN1_item_i2d");
        try {
            return (int)mh$.invokeExact(val, out, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_ndef_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$246.ASN1_item_ndef_i2d$MH,"ASN1_item_ndef_i2d");
    }
    public static int ASN1_item_ndef_i2d ( Addressable val,  Addressable out,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.ASN1_item_ndef_i2d$MH, "ASN1_item_ndef_i2d");
        try {
            return (int)mh$.invokeExact(val, out, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_add_oid_module$MH() {
        return RuntimeHelper.requireNonNull(constants$246.ASN1_add_oid_module$MH,"ASN1_add_oid_module");
    }
    public static void ASN1_add_oid_module () {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.ASN1_add_oid_module$MH, "ASN1_add_oid_module");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_add_stable_module$MH() {
        return RuntimeHelper.requireNonNull(constants$247.ASN1_add_stable_module$MH,"ASN1_add_stable_module");
    }
    public static void ASN1_add_stable_module () {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.ASN1_add_stable_module$MH, "ASN1_add_stable_module");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_generate_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$247.ASN1_generate_nconf$MH,"ASN1_generate_nconf");
    }
    public static MemoryAddress ASN1_generate_nconf ( Addressable str,  Addressable nconf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.ASN1_generate_nconf$MH, "ASN1_generate_nconf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, nconf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_generate_v3$MH() {
        return RuntimeHelper.requireNonNull(constants$247.ASN1_generate_v3$MH,"ASN1_generate_v3");
    }
    public static MemoryAddress ASN1_generate_v3 ( Addressable str,  Addressable cnf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.ASN1_generate_v3$MH, "ASN1_generate_v3");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, cnf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_str2mask$MH() {
        return RuntimeHelper.requireNonNull(constants$247.ASN1_str2mask$MH,"ASN1_str2mask");
    }
    public static int ASN1_str2mask ( Addressable str,  Addressable pmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.ASN1_str2mask$MH, "ASN1_str2mask");
        try {
            return (int)mh$.invokeExact(str, pmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_print$MH() {
        return RuntimeHelper.requireNonNull(constants$247.ASN1_item_print$MH,"ASN1_item_print");
    }
    public static int ASN1_item_print ( Addressable out,  Addressable ifld,  int indent,  Addressable it,  Addressable pctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.ASN1_item_print$MH, "ASN1_item_print");
        try {
            return (int)mh$.invokeExact(out, ifld, indent, it, pctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$247.ASN1_PCTX_new$MH,"ASN1_PCTX_new");
    }
    public static MemoryAddress ASN1_PCTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.ASN1_PCTX_new$MH, "ASN1_PCTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_free$MH,"ASN1_PCTX_free");
    }
    public static void ASN1_PCTX_free ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_free$MH, "ASN1_PCTX_free");
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_get_flags$MH,"ASN1_PCTX_get_flags");
    }
    public static long ASN1_PCTX_get_flags ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_get_flags$MH, "ASN1_PCTX_get_flags");
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_set_flags$MH,"ASN1_PCTX_set_flags");
    }
    public static void ASN1_PCTX_set_flags ( Addressable p,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_set_flags$MH, "ASN1_PCTX_set_flags");
        try {
            mh$.invokeExact(p, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_get_nm_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_get_nm_flags$MH,"ASN1_PCTX_get_nm_flags");
    }
    public static long ASN1_PCTX_get_nm_flags ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_get_nm_flags$MH, "ASN1_PCTX_get_nm_flags");
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_set_nm_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_set_nm_flags$MH,"ASN1_PCTX_set_nm_flags");
    }
    public static void ASN1_PCTX_set_nm_flags ( Addressable p,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_set_nm_flags$MH, "ASN1_PCTX_set_nm_flags");
        try {
            mh$.invokeExact(p, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_get_cert_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_get_cert_flags$MH,"ASN1_PCTX_get_cert_flags");
    }
    public static long ASN1_PCTX_get_cert_flags ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.ASN1_PCTX_get_cert_flags$MH, "ASN1_PCTX_get_cert_flags");
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_set_cert_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_set_cert_flags$MH,"ASN1_PCTX_set_cert_flags");
    }
    public static void ASN1_PCTX_set_cert_flags ( Addressable p,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_set_cert_flags$MH, "ASN1_PCTX_set_cert_flags");
        try {
            mh$.invokeExact(p, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_get_oid_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_get_oid_flags$MH,"ASN1_PCTX_get_oid_flags");
    }
    public static long ASN1_PCTX_get_oid_flags ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_get_oid_flags$MH, "ASN1_PCTX_get_oid_flags");
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_set_oid_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_set_oid_flags$MH,"ASN1_PCTX_set_oid_flags");
    }
    public static void ASN1_PCTX_set_oid_flags ( Addressable p,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_set_oid_flags$MH, "ASN1_PCTX_set_oid_flags");
        try {
            mh$.invokeExact(p, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_get_str_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_get_str_flags$MH,"ASN1_PCTX_get_str_flags");
    }
    public static long ASN1_PCTX_get_str_flags ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_get_str_flags$MH, "ASN1_PCTX_get_str_flags");
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_PCTX_set_str_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_set_str_flags$MH,"ASN1_PCTX_set_str_flags");
    }
    public static void ASN1_PCTX_set_str_flags ( Addressable p,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.ASN1_PCTX_set_str_flags$MH, "ASN1_PCTX_set_str_flags");
        try {
            mh$.invokeExact(p, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_new$MH,"ASN1_SCTX_new");
    }
    public static MemoryAddress ASN1_SCTX_new ( Addressable scan_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_new$MH, "ASN1_SCTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(scan_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_free$MH,"ASN1_SCTX_free");
    }
    public static void ASN1_SCTX_free ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_free$MH, "ASN1_SCTX_free");
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_get_item$MH,"ASN1_SCTX_get_item");
    }
    public static MemoryAddress ASN1_SCTX_get_item ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_get_item$MH, "ASN1_SCTX_get_item");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_get_template$MH() {
        return RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_get_template$MH,"ASN1_SCTX_get_template");
    }
    public static MemoryAddress ASN1_SCTX_get_template ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_get_template$MH, "ASN1_SCTX_get_template");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_get_flags$MH,"ASN1_SCTX_get_flags");
    }
    public static long ASN1_SCTX_get_flags ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.ASN1_SCTX_get_flags$MH, "ASN1_SCTX_get_flags");
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_set_app_data$MH() {
        return RuntimeHelper.requireNonNull(constants$251.ASN1_SCTX_set_app_data$MH,"ASN1_SCTX_set_app_data");
    }
    public static void ASN1_SCTX_set_app_data ( Addressable p,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.ASN1_SCTX_set_app_data$MH, "ASN1_SCTX_set_app_data");
        try {
            mh$.invokeExact(p, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_SCTX_get_app_data$MH() {
        return RuntimeHelper.requireNonNull(constants$251.ASN1_SCTX_get_app_data$MH,"ASN1_SCTX_get_app_data");
    }
    public static MemoryAddress ASN1_SCTX_get_app_data ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.ASN1_SCTX_get_app_data$MH, "ASN1_SCTX_get_app_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_asn1$MH() {
        return RuntimeHelper.requireNonNull(constants$251.BIO_f_asn1$MH,"BIO_f_asn1");
    }
    public static MemoryAddress BIO_f_asn1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.BIO_f_asn1$MH, "BIO_f_asn1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_NDEF$MH() {
        return RuntimeHelper.requireNonNull(constants$251.BIO_new_NDEF$MH,"BIO_new_NDEF");
    }
    public static MemoryAddress BIO_new_NDEF ( Addressable out,  Addressable val,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.BIO_new_NDEF$MH, "BIO_new_NDEF");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(out, val, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_bio_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$251.i2d_ASN1_bio_stream$MH,"i2d_ASN1_bio_stream");
    }
    public static int i2d_ASN1_bio_stream ( Addressable out,  Addressable val,  Addressable in,  int flags,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.i2d_ASN1_bio_stream$MH, "i2d_ASN1_bio_stream");
        try {
            return (int)mh$.invokeExact(out, val, in, flags, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_ASN1_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$251.PEM_write_bio_ASN1_stream$MH,"PEM_write_bio_ASN1_stream");
    }
    public static int PEM_write_bio_ASN1_stream ( Addressable out,  Addressable val,  Addressable in,  int flags,  Addressable hdr,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.PEM_write_bio_ASN1_stream$MH, "PEM_write_bio_ASN1_stream");
        try {
            return (int)mh$.invokeExact(out, val, in, flags, hdr, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SMIME_write_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$252.SMIME_write_ASN1$MH,"SMIME_write_ASN1");
    }
    public static int SMIME_write_ASN1 ( Addressable bio,  Addressable val,  Addressable data,  int flags,  int ctype_nid,  int econt_nid,  Addressable mdalgs,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.SMIME_write_ASN1$MH, "SMIME_write_ASN1");
        try {
            return (int)mh$.invokeExact(bio, val, data, flags, ctype_nid, econt_nid, mdalgs, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SMIME_read_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$252.SMIME_read_ASN1$MH,"SMIME_read_ASN1");
    }
    public static MemoryAddress SMIME_read_ASN1 ( Addressable bio,  Addressable bcont,  Addressable it) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.SMIME_read_ASN1$MH, "SMIME_read_ASN1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bio, bcont, it);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SMIME_crlf_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$252.SMIME_crlf_copy$MH,"SMIME_crlf_copy");
    }
    public static int SMIME_crlf_copy ( Addressable in,  Addressable out,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.SMIME_crlf_copy$MH, "SMIME_crlf_copy");
        try {
            return (int)mh$.invokeExact(in, out, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SMIME_text$MH() {
        return RuntimeHelper.requireNonNull(constants$252.SMIME_text$MH,"SMIME_text");
    }
    public static int SMIME_text ( Addressable in,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.SMIME_text$MH, "SMIME_text");
        try {
            return (int)mh$.invokeExact(in, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ITEM_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$252.ASN1_ITEM_lookup$MH,"ASN1_ITEM_lookup");
    }
    public static MemoryAddress ASN1_ITEM_lookup ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.ASN1_ITEM_lookup$MH, "ASN1_ITEM_lookup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_ITEM_get$MH() {
        return RuntimeHelper.requireNonNull(constants$252.ASN1_ITEM_get$MH,"ASN1_ITEM_get");
    }
    public static MemoryAddress ASN1_ITEM_get ( long i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.ASN1_ITEM_get$MH, "ASN1_ITEM_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_OBJ_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$253.ERR_load_OBJ_strings$MH,"ERR_load_OBJ_strings");
    }
    public static int ERR_load_OBJ_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.ERR_load_OBJ_strings$MH, "ERR_load_OBJ_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_init$MH() {
        return RuntimeHelper.requireNonNull(constants$253.OBJ_NAME_init$MH,"OBJ_NAME_init");
    }
    public static int OBJ_NAME_init () {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.OBJ_NAME_init$MH, "OBJ_NAME_init");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_new_index$MH() {
        return RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_new_index$MH,"OBJ_NAME_new_index");
    }
    public static int OBJ_NAME_new_index ( Addressable hash_func,  Addressable cmp_func,  Addressable free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_new_index$MH, "OBJ_NAME_new_index");
        try {
            return (int)mh$.invokeExact(hash_func, cmp_func, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_get$MH() {
        return RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_get$MH,"OBJ_NAME_get");
    }
    public static MemoryAddress OBJ_NAME_get ( Addressable name,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_get$MH, "OBJ_NAME_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_add$MH() {
        return RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_add$MH,"OBJ_NAME_add");
    }
    public static int OBJ_NAME_add ( Addressable name,  int type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_add$MH, "OBJ_NAME_add");
        try {
            return (int)mh$.invokeExact(name, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_remove$MH,"OBJ_NAME_remove");
    }
    public static int OBJ_NAME_remove ( Addressable name,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.OBJ_NAME_remove$MH, "OBJ_NAME_remove");
        try {
            return (int)mh$.invokeExact(name, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$255.OBJ_NAME_cleanup$MH,"OBJ_NAME_cleanup");
    }
    public static void OBJ_NAME_cleanup ( int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.OBJ_NAME_cleanup$MH, "OBJ_NAME_cleanup");
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_do_all$MH() {
        return RuntimeHelper.requireNonNull(constants$255.OBJ_NAME_do_all$MH,"OBJ_NAME_do_all");
    }
    public static void OBJ_NAME_do_all ( int type,  Addressable fn,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.OBJ_NAME_do_all$MH, "OBJ_NAME_do_all");
        try {
            mh$.invokeExact(type, fn, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_NAME_do_all_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$256.OBJ_NAME_do_all_sorted$MH,"OBJ_NAME_do_all_sorted");
    }
    public static void OBJ_NAME_do_all_sorted ( int type,  Addressable fn,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.OBJ_NAME_do_all_sorted$MH, "OBJ_NAME_do_all_sorted");
        try {
            mh$.invokeExact(type, fn, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$256.OBJ_dup$MH,"OBJ_dup");
    }
    public static MemoryAddress OBJ_dup ( Addressable o) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.OBJ_dup$MH, "OBJ_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(o);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_nid2obj$MH() {
        return RuntimeHelper.requireNonNull(constants$256.OBJ_nid2obj$MH,"OBJ_nid2obj");
    }
    public static MemoryAddress OBJ_nid2obj ( int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.OBJ_nid2obj$MH, "OBJ_nid2obj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_nid2ln$MH() {
        return RuntimeHelper.requireNonNull(constants$256.OBJ_nid2ln$MH,"OBJ_nid2ln");
    }
    public static MemoryAddress OBJ_nid2ln ( int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.OBJ_nid2ln$MH, "OBJ_nid2ln");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_nid2sn$MH() {
        return RuntimeHelper.requireNonNull(constants$256.OBJ_nid2sn$MH,"OBJ_nid2sn");
    }
    public static MemoryAddress OBJ_nid2sn ( int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.OBJ_nid2sn$MH, "OBJ_nid2sn");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_obj2nid$MH() {
        return RuntimeHelper.requireNonNull(constants$256.OBJ_obj2nid$MH,"OBJ_obj2nid");
    }
    public static int OBJ_obj2nid ( Addressable o) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.OBJ_obj2nid$MH, "OBJ_obj2nid");
        try {
            return (int)mh$.invokeExact(o);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_txt2obj$MH() {
        return RuntimeHelper.requireNonNull(constants$257.OBJ_txt2obj$MH,"OBJ_txt2obj");
    }
    public static MemoryAddress OBJ_txt2obj ( Addressable s,  int no_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.OBJ_txt2obj$MH, "OBJ_txt2obj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, no_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_obj2txt$MH() {
        return RuntimeHelper.requireNonNull(constants$257.OBJ_obj2txt$MH,"OBJ_obj2txt");
    }
    public static int OBJ_obj2txt ( Addressable buf,  int buf_len,  Addressable a,  int no_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.OBJ_obj2txt$MH, "OBJ_obj2txt");
        try {
            return (int)mh$.invokeExact(buf, buf_len, a, no_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_txt2nid$MH() {
        return RuntimeHelper.requireNonNull(constants$257.OBJ_txt2nid$MH,"OBJ_txt2nid");
    }
    public static int OBJ_txt2nid ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.OBJ_txt2nid$MH, "OBJ_txt2nid");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_ln2nid$MH() {
        return RuntimeHelper.requireNonNull(constants$257.OBJ_ln2nid$MH,"OBJ_ln2nid");
    }
    public static int OBJ_ln2nid ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.OBJ_ln2nid$MH, "OBJ_ln2nid");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_sn2nid$MH() {
        return RuntimeHelper.requireNonNull(constants$257.OBJ_sn2nid$MH,"OBJ_sn2nid");
    }
    public static int OBJ_sn2nid ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.OBJ_sn2nid$MH, "OBJ_sn2nid");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$257.OBJ_cmp$MH,"OBJ_cmp");
    }
    public static int OBJ_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.OBJ_cmp$MH, "OBJ_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_bsearch_$MH() {
        return RuntimeHelper.requireNonNull(constants$258.OBJ_bsearch_$MH,"OBJ_bsearch_");
    }
    public static MemoryAddress OBJ_bsearch_ ( Addressable key,  Addressable base,  int num,  int size,  Addressable cmp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.OBJ_bsearch_$MH, "OBJ_bsearch_");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, base, num, size, cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_bsearch_ex_$MH() {
        return RuntimeHelper.requireNonNull(constants$258.OBJ_bsearch_ex_$MH,"OBJ_bsearch_ex_");
    }
    public static MemoryAddress OBJ_bsearch_ex_ ( Addressable key,  Addressable base,  int num,  int size,  Addressable cmp,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.OBJ_bsearch_ex_$MH, "OBJ_bsearch_ex_");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, base, num, size, cmp, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_new_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$259.OBJ_new_nid$MH,"OBJ_new_nid");
    }
    public static int OBJ_new_nid ( int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.OBJ_new_nid$MH, "OBJ_new_nid");
        try {
            return (int)mh$.invokeExact(num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_add_object$MH() {
        return RuntimeHelper.requireNonNull(constants$259.OBJ_add_object$MH,"OBJ_add_object");
    }
    public static int OBJ_add_object ( Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.OBJ_add_object$MH, "OBJ_add_object");
        try {
            return (int)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_create$MH() {
        return RuntimeHelper.requireNonNull(constants$259.OBJ_create$MH,"OBJ_create");
    }
    public static int OBJ_create ( Addressable oid,  Addressable sn,  Addressable ln) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.OBJ_create$MH, "OBJ_create");
        try {
            return (int)mh$.invokeExact(oid, sn, ln);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_create_objects$MH() {
        return RuntimeHelper.requireNonNull(constants$259.OBJ_create_objects$MH,"OBJ_create_objects");
    }
    public static int OBJ_create_objects ( Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.OBJ_create_objects$MH, "OBJ_create_objects");
        try {
            return (int)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_length$MH() {
        return RuntimeHelper.requireNonNull(constants$259.OBJ_length$MH,"OBJ_length");
    }
    public static long OBJ_length ( Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.OBJ_length$MH, "OBJ_length");
        try {
            return (long)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_get0_data$MH() {
        return RuntimeHelper.requireNonNull(constants$259.OBJ_get0_data$MH,"OBJ_get0_data");
    }
    public static MemoryAddress OBJ_get0_data ( Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.OBJ_get0_data$MH, "OBJ_get0_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_find_sigid_algs$MH() {
        return RuntimeHelper.requireNonNull(constants$260.OBJ_find_sigid_algs$MH,"OBJ_find_sigid_algs");
    }
    public static int OBJ_find_sigid_algs ( int signid,  Addressable pdig_nid,  Addressable ppkey_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.OBJ_find_sigid_algs$MH, "OBJ_find_sigid_algs");
        try {
            return (int)mh$.invokeExact(signid, pdig_nid, ppkey_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_find_sigid_by_algs$MH() {
        return RuntimeHelper.requireNonNull(constants$260.OBJ_find_sigid_by_algs$MH,"OBJ_find_sigid_by_algs");
    }
    public static int OBJ_find_sigid_by_algs ( Addressable psignid,  int dig_nid,  int pkey_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.OBJ_find_sigid_by_algs$MH, "OBJ_find_sigid_by_algs");
        try {
            return (int)mh$.invokeExact(psignid, dig_nid, pkey_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_add_sigid$MH() {
        return RuntimeHelper.requireNonNull(constants$260.OBJ_add_sigid$MH,"OBJ_add_sigid");
    }
    public static int OBJ_add_sigid ( int signid,  int dig_id,  int pkey_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.OBJ_add_sigid$MH, "OBJ_add_sigid");
        try {
            return (int)mh$.invokeExact(signid, dig_id, pkey_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OBJ_sigid_free$MH() {
        return RuntimeHelper.requireNonNull(constants$260.OBJ_sigid_free$MH,"OBJ_sigid_free");
    }
    public static void OBJ_sigid_free () {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.OBJ_sigid_free$MH, "OBJ_sigid_free");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_new$MH() {
        return RuntimeHelper.requireNonNull(constants$260.EVP_MD_meth_new$MH,"EVP_MD_meth_new");
    }
    public static MemoryAddress EVP_MD_meth_new ( int md_type,  int pkey_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.EVP_MD_meth_new$MH, "EVP_MD_meth_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md_type, pkey_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$260.EVP_MD_meth_dup$MH,"EVP_MD_meth_dup");
    }
    public static MemoryAddress EVP_MD_meth_dup ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.EVP_MD_meth_dup$MH, "EVP_MD_meth_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_free$MH() {
        return RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_free$MH,"EVP_MD_meth_free");
    }
    public static void EVP_MD_meth_free ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_free$MH, "EVP_MD_meth_free");
        try {
            mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_input_blocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_input_blocksize$MH,"EVP_MD_meth_set_input_blocksize");
    }
    public static int EVP_MD_meth_set_input_blocksize ( Addressable md,  int blocksize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_input_blocksize$MH, "EVP_MD_meth_set_input_blocksize");
        try {
            return (int)mh$.invokeExact(md, blocksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_result_size$MH() {
        return RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_result_size$MH,"EVP_MD_meth_set_result_size");
    }
    public static int EVP_MD_meth_set_result_size ( Addressable md,  int resultsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_result_size$MH, "EVP_MD_meth_set_result_size");
        try {
            return (int)mh$.invokeExact(md, resultsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_app_datasize$MH() {
        return RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_app_datasize$MH,"EVP_MD_meth_set_app_datasize");
    }
    public static int EVP_MD_meth_set_app_datasize ( Addressable md,  int datasize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_app_datasize$MH, "EVP_MD_meth_set_app_datasize");
        try {
            return (int)mh$.invokeExact(md, datasize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_flags$MH,"EVP_MD_meth_set_flags");
    }
    public static int EVP_MD_meth_set_flags ( Addressable md,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.EVP_MD_meth_set_flags$MH, "EVP_MD_meth_set_flags");
        try {
            return (int)mh$.invokeExact(md, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_init$MH() {
        return RuntimeHelper.requireNonNull(constants$262.EVP_MD_meth_set_init$MH,"EVP_MD_meth_set_init");
    }
    public static int EVP_MD_meth_set_init ( Addressable md,  Addressable init) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.EVP_MD_meth_set_init$MH, "EVP_MD_meth_set_init");
        try {
            return (int)mh$.invokeExact(md, init);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_update$MH() {
        return RuntimeHelper.requireNonNull(constants$262.EVP_MD_meth_set_update$MH,"EVP_MD_meth_set_update");
    }
    public static int EVP_MD_meth_set_update ( Addressable md,  Addressable update) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.EVP_MD_meth_set_update$MH, "EVP_MD_meth_set_update");
        try {
            return (int)mh$.invokeExact(md, update);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_final$MH() {
        return RuntimeHelper.requireNonNull(constants$263.EVP_MD_meth_set_final$MH,"EVP_MD_meth_set_final");
    }
    public static int EVP_MD_meth_set_final ( Addressable md,  Addressable final_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.EVP_MD_meth_set_final$MH, "EVP_MD_meth_set_final");
        try {
            return (int)mh$.invokeExact(md, final_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$263.EVP_MD_meth_set_copy$MH,"EVP_MD_meth_set_copy");
    }
    public static int EVP_MD_meth_set_copy ( Addressable md,  Addressable copy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.EVP_MD_meth_set_copy$MH, "EVP_MD_meth_set_copy");
        try {
            return (int)mh$.invokeExact(md, copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$264.EVP_MD_meth_set_cleanup$MH,"EVP_MD_meth_set_cleanup");
    }
    public static int EVP_MD_meth_set_cleanup ( Addressable md,  Addressable cleanup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.EVP_MD_meth_set_cleanup$MH, "EVP_MD_meth_set_cleanup");
        try {
            return (int)mh$.invokeExact(md, cleanup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_set_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$264.EVP_MD_meth_set_ctrl$MH,"EVP_MD_meth_set_ctrl");
    }
    public static int EVP_MD_meth_set_ctrl ( Addressable md,  Addressable ctrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.EVP_MD_meth_set_ctrl$MH, "EVP_MD_meth_set_ctrl");
        try {
            return (int)mh$.invokeExact(md, ctrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_input_blocksize$MH() {
        return RuntimeHelper.requireNonNull(constants$264.EVP_MD_meth_get_input_blocksize$MH,"EVP_MD_meth_get_input_blocksize");
    }
    public static int EVP_MD_meth_get_input_blocksize ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.EVP_MD_meth_get_input_blocksize$MH, "EVP_MD_meth_get_input_blocksize");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_result_size$MH() {
        return RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_result_size$MH,"EVP_MD_meth_get_result_size");
    }
    public static int EVP_MD_meth_get_result_size ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_result_size$MH, "EVP_MD_meth_get_result_size");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_app_datasize$MH() {
        return RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_app_datasize$MH,"EVP_MD_meth_get_app_datasize");
    }
    public static int EVP_MD_meth_get_app_datasize ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_app_datasize$MH, "EVP_MD_meth_get_app_datasize");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_flags$MH,"EVP_MD_meth_get_flags");
    }
    public static long EVP_MD_meth_get_flags ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_flags$MH, "EVP_MD_meth_get_flags");
        try {
            return (long)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_init$MH() {
        return RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_init$MH,"EVP_MD_meth_get_init");
    }
    public static MemoryAddress EVP_MD_meth_get_init ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_init$MH, "EVP_MD_meth_get_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_update$MH() {
        return RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_update$MH,"EVP_MD_meth_get_update");
    }
    public static MemoryAddress EVP_MD_meth_get_update ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_update$MH, "EVP_MD_meth_get_update");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_final$MH() {
        return RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_final$MH,"EVP_MD_meth_get_final");
    }
    public static MemoryAddress EVP_MD_meth_get_final ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.EVP_MD_meth_get_final$MH, "EVP_MD_meth_get_final");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$266.EVP_MD_meth_get_copy$MH,"EVP_MD_meth_get_copy");
    }
    public static MemoryAddress EVP_MD_meth_get_copy ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.EVP_MD_meth_get_copy$MH, "EVP_MD_meth_get_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$266.EVP_MD_meth_get_cleanup$MH,"EVP_MD_meth_get_cleanup");
    }
    public static MemoryAddress EVP_MD_meth_get_cleanup ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.EVP_MD_meth_get_cleanup$MH, "EVP_MD_meth_get_cleanup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_meth_get_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$266.EVP_MD_meth_get_ctrl$MH,"EVP_MD_meth_get_ctrl");
    }
    public static MemoryAddress EVP_MD_meth_get_ctrl ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.EVP_MD_meth_get_ctrl$MH, "EVP_MD_meth_get_ctrl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_new$MH() {
        return RuntimeHelper.requireNonNull(constants$266.EVP_CIPHER_meth_new$MH,"EVP_CIPHER_meth_new");
    }
    public static MemoryAddress EVP_CIPHER_meth_new ( int cipher_type,  int block_size,  int key_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.EVP_CIPHER_meth_new$MH, "EVP_CIPHER_meth_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher_type, block_size, key_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$266.EVP_CIPHER_meth_dup$MH,"EVP_CIPHER_meth_dup");
    }
    public static MemoryAddress EVP_CIPHER_meth_dup ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.EVP_CIPHER_meth_dup$MH, "EVP_CIPHER_meth_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_free$MH() {
        return RuntimeHelper.requireNonNull(constants$266.EVP_CIPHER_meth_free$MH,"EVP_CIPHER_meth_free");
    }
    public static void EVP_CIPHER_meth_free ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.EVP_CIPHER_meth_free$MH, "EVP_CIPHER_meth_free");
        try {
            mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_iv_length$MH() {
        return RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_iv_length$MH,"EVP_CIPHER_meth_set_iv_length");
    }
    public static int EVP_CIPHER_meth_set_iv_length ( Addressable cipher,  int iv_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_iv_length$MH, "EVP_CIPHER_meth_set_iv_length");
        try {
            return (int)mh$.invokeExact(cipher, iv_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_flags$MH,"EVP_CIPHER_meth_set_flags");
    }
    public static int EVP_CIPHER_meth_set_flags ( Addressable cipher,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_flags$MH, "EVP_CIPHER_meth_set_flags");
        try {
            return (int)mh$.invokeExact(cipher, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_impl_ctx_size$MH() {
        return RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_impl_ctx_size$MH,"EVP_CIPHER_meth_set_impl_ctx_size");
    }
    public static int EVP_CIPHER_meth_set_impl_ctx_size ( Addressable cipher,  int ctx_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_impl_ctx_size$MH, "EVP_CIPHER_meth_set_impl_ctx_size");
        try {
            return (int)mh$.invokeExact(cipher, ctx_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_init$MH() {
        return RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_init$MH,"EVP_CIPHER_meth_set_init");
    }
    public static int EVP_CIPHER_meth_set_init ( Addressable cipher,  Addressable init) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.EVP_CIPHER_meth_set_init$MH, "EVP_CIPHER_meth_set_init");
        try {
            return (int)mh$.invokeExact(cipher, init);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_do_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$268.EVP_CIPHER_meth_set_do_cipher$MH,"EVP_CIPHER_meth_set_do_cipher");
    }
    public static int EVP_CIPHER_meth_set_do_cipher ( Addressable cipher,  Addressable do_cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.EVP_CIPHER_meth_set_do_cipher$MH, "EVP_CIPHER_meth_set_do_cipher");
        try {
            return (int)mh$.invokeExact(cipher, do_cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$268.EVP_CIPHER_meth_set_cleanup$MH,"EVP_CIPHER_meth_set_cleanup");
    }
    public static int EVP_CIPHER_meth_set_cleanup ( Addressable cipher,  Addressable cleanup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.EVP_CIPHER_meth_set_cleanup$MH, "EVP_CIPHER_meth_set_cleanup");
        try {
            return (int)mh$.invokeExact(cipher, cleanup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_set_asn1_params$MH() {
        return RuntimeHelper.requireNonNull(constants$269.EVP_CIPHER_meth_set_set_asn1_params$MH,"EVP_CIPHER_meth_set_set_asn1_params");
    }
    public static int EVP_CIPHER_meth_set_set_asn1_params ( Addressable cipher,  Addressable set_asn1_parameters) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.EVP_CIPHER_meth_set_set_asn1_params$MH, "EVP_CIPHER_meth_set_set_asn1_params");
        try {
            return (int)mh$.invokeExact(cipher, set_asn1_parameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_get_asn1_params$MH() {
        return RuntimeHelper.requireNonNull(constants$269.EVP_CIPHER_meth_set_get_asn1_params$MH,"EVP_CIPHER_meth_set_get_asn1_params");
    }
    public static int EVP_CIPHER_meth_set_get_asn1_params ( Addressable cipher,  Addressable get_asn1_parameters) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.EVP_CIPHER_meth_set_get_asn1_params$MH, "EVP_CIPHER_meth_set_get_asn1_params");
        try {
            return (int)mh$.invokeExact(cipher, get_asn1_parameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_set_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_set_ctrl$MH,"EVP_CIPHER_meth_set_ctrl");
    }
    public static int EVP_CIPHER_meth_set_ctrl ( Addressable cipher,  Addressable ctrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_set_ctrl$MH, "EVP_CIPHER_meth_set_ctrl");
        try {
            return (int)mh$.invokeExact(cipher, ctrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_get_init$MH() {
        return RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_get_init$MH,"EVP_CIPHER_meth_get_init");
    }
    public static MemoryAddress EVP_CIPHER_meth_get_init ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_get_init$MH, "EVP_CIPHER_meth_get_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_get_do_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_get_do_cipher$MH,"EVP_CIPHER_meth_get_do_cipher");
    }
    public static MemoryAddress EVP_CIPHER_meth_get_do_cipher ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_get_do_cipher$MH, "EVP_CIPHER_meth_get_do_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_get_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_get_cleanup$MH,"EVP_CIPHER_meth_get_cleanup");
    }
    public static MemoryAddress EVP_CIPHER_meth_get_cleanup ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.EVP_CIPHER_meth_get_cleanup$MH, "EVP_CIPHER_meth_get_cleanup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_get_set_asn1_params$MH() {
        return RuntimeHelper.requireNonNull(constants$271.EVP_CIPHER_meth_get_set_asn1_params$MH,"EVP_CIPHER_meth_get_set_asn1_params");
    }
    public static MemoryAddress EVP_CIPHER_meth_get_set_asn1_params ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.EVP_CIPHER_meth_get_set_asn1_params$MH, "EVP_CIPHER_meth_get_set_asn1_params");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_get_get_asn1_params$MH() {
        return RuntimeHelper.requireNonNull(constants$271.EVP_CIPHER_meth_get_get_asn1_params$MH,"EVP_CIPHER_meth_get_get_asn1_params");
    }
    public static MemoryAddress EVP_CIPHER_meth_get_get_asn1_params ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.EVP_CIPHER_meth_get_get_asn1_params$MH, "EVP_CIPHER_meth_get_get_asn1_params");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_meth_get_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$271.EVP_CIPHER_meth_get_ctrl$MH,"EVP_CIPHER_meth_get_ctrl");
    }
    public static MemoryAddress EVP_CIPHER_meth_get_ctrl ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.EVP_CIPHER_meth_get_ctrl$MH, "EVP_CIPHER_meth_get_ctrl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_type$MH() {
        return RuntimeHelper.requireNonNull(constants$271.EVP_MD_type$MH,"EVP_MD_type");
    }
    public static int EVP_MD_type ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.EVP_MD_type$MH, "EVP_MD_type");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_pkey_type$MH() {
        return RuntimeHelper.requireNonNull(constants$272.EVP_MD_pkey_type$MH,"EVP_MD_pkey_type");
    }
    public static int EVP_MD_pkey_type ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.EVP_MD_pkey_type$MH, "EVP_MD_pkey_type");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_size$MH() {
        return RuntimeHelper.requireNonNull(constants$272.EVP_MD_size$MH,"EVP_MD_size");
    }
    public static int EVP_MD_size ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.EVP_MD_size$MH, "EVP_MD_size");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_block_size$MH() {
        return RuntimeHelper.requireNonNull(constants$272.EVP_MD_block_size$MH,"EVP_MD_block_size");
    }
    public static int EVP_MD_block_size ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.EVP_MD_block_size$MH, "EVP_MD_block_size");
        try {
            return (int)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$272.EVP_MD_flags$MH,"EVP_MD_flags");
    }
    public static long EVP_MD_flags ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.EVP_MD_flags$MH, "EVP_MD_flags");
        try {
            return (long)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_md$MH() {
        return RuntimeHelper.requireNonNull(constants$272.EVP_MD_CTX_md$MH,"EVP_MD_CTX_md");
    }
    public static MemoryAddress EVP_MD_CTX_md ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.EVP_MD_CTX_md$MH, "EVP_MD_CTX_md");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_update_fn$MH() {
        return RuntimeHelper.requireNonNull(constants$272.EVP_MD_CTX_update_fn$MH,"EVP_MD_CTX_update_fn");
    }
    public static MemoryAddress EVP_MD_CTX_update_fn ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.EVP_MD_CTX_update_fn$MH, "EVP_MD_CTX_update_fn");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_set_update_fn$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_set_update_fn$MH,"EVP_MD_CTX_set_update_fn");
    }
    public static void EVP_MD_CTX_set_update_fn ( Addressable ctx,  Addressable update) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_set_update_fn$MH, "EVP_MD_CTX_set_update_fn");
        try {
            mh$.invokeExact(ctx, update);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_pkey_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_pkey_ctx$MH,"EVP_MD_CTX_pkey_ctx");
    }
    public static MemoryAddress EVP_MD_CTX_pkey_ctx ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_pkey_ctx$MH, "EVP_MD_CTX_pkey_ctx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_set_pkey_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_set_pkey_ctx$MH,"EVP_MD_CTX_set_pkey_ctx");
    }
    public static void EVP_MD_CTX_set_pkey_ctx ( Addressable ctx,  Addressable pctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_set_pkey_ctx$MH, "EVP_MD_CTX_set_pkey_ctx");
        try {
            mh$.invokeExact(ctx, pctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_md_data$MH() {
        return RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_md_data$MH,"EVP_MD_CTX_md_data");
    }
    public static MemoryAddress EVP_MD_CTX_md_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.EVP_MD_CTX_md_data$MH, "EVP_MD_CTX_md_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_nid$MH,"EVP_CIPHER_nid");
    }
    public static int EVP_CIPHER_nid ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_nid$MH, "EVP_CIPHER_nid");
        try {
            return (int)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_block_size$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_block_size$MH,"EVP_CIPHER_block_size");
    }
    public static int EVP_CIPHER_block_size ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_block_size$MH, "EVP_CIPHER_block_size");
        try {
            return (int)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_impl_ctx_size$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_impl_ctx_size$MH,"EVP_CIPHER_impl_ctx_size");
    }
    public static int EVP_CIPHER_impl_ctx_size ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_impl_ctx_size$MH, "EVP_CIPHER_impl_ctx_size");
        try {
            return (int)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_key_length$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_key_length$MH,"EVP_CIPHER_key_length");
    }
    public static int EVP_CIPHER_key_length ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_key_length$MH, "EVP_CIPHER_key_length");
        try {
            return (int)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_iv_length$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_iv_length$MH,"EVP_CIPHER_iv_length");
    }
    public static int EVP_CIPHER_iv_length ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_iv_length$MH, "EVP_CIPHER_iv_length");
        try {
            return (int)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_flags$MH,"EVP_CIPHER_flags");
    }
    public static long EVP_CIPHER_flags ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.EVP_CIPHER_flags$MH, "EVP_CIPHER_flags");
        try {
            return (long)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_cipher$MH,"EVP_CIPHER_CTX_cipher");
    }
    public static MemoryAddress EVP_CIPHER_CTX_cipher ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_cipher$MH, "EVP_CIPHER_CTX_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_encrypting$MH() {
        return RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_encrypting$MH,"EVP_CIPHER_CTX_encrypting");
    }
    public static int EVP_CIPHER_CTX_encrypting ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_encrypting$MH, "EVP_CIPHER_CTX_encrypting");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_nid$MH,"EVP_CIPHER_CTX_nid");
    }
    public static int EVP_CIPHER_CTX_nid ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_nid$MH, "EVP_CIPHER_CTX_nid");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_block_size$MH() {
        return RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_block_size$MH,"EVP_CIPHER_CTX_block_size");
    }
    public static int EVP_CIPHER_CTX_block_size ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_block_size$MH, "EVP_CIPHER_CTX_block_size");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_key_length$MH() {
        return RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_key_length$MH,"EVP_CIPHER_CTX_key_length");
    }
    public static int EVP_CIPHER_CTX_key_length ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_key_length$MH, "EVP_CIPHER_CTX_key_length");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_iv_length$MH() {
        return RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_iv_length$MH,"EVP_CIPHER_CTX_iv_length");
    }
    public static int EVP_CIPHER_CTX_iv_length ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.EVP_CIPHER_CTX_iv_length$MH, "EVP_CIPHER_CTX_iv_length");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_iv$MH() {
        return RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_iv$MH,"EVP_CIPHER_CTX_iv");
    }
    public static MemoryAddress EVP_CIPHER_CTX_iv ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_iv$MH, "EVP_CIPHER_CTX_iv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_original_iv$MH() {
        return RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_original_iv$MH,"EVP_CIPHER_CTX_original_iv");
    }
    public static MemoryAddress EVP_CIPHER_CTX_original_iv ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_original_iv$MH, "EVP_CIPHER_CTX_original_iv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_iv_noconst$MH() {
        return RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_iv_noconst$MH,"EVP_CIPHER_CTX_iv_noconst");
    }
    public static MemoryAddress EVP_CIPHER_CTX_iv_noconst ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_iv_noconst$MH, "EVP_CIPHER_CTX_iv_noconst");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_buf_noconst$MH() {
        return RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_buf_noconst$MH,"EVP_CIPHER_CTX_buf_noconst");
    }
    public static MemoryAddress EVP_CIPHER_CTX_buf_noconst ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_buf_noconst$MH, "EVP_CIPHER_CTX_buf_noconst");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_num$MH() {
        return RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_num$MH,"EVP_CIPHER_CTX_num");
    }
    public static int EVP_CIPHER_CTX_num ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_num$MH, "EVP_CIPHER_CTX_num");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_set_num$MH() {
        return RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_set_num$MH,"EVP_CIPHER_CTX_set_num");
    }
    public static void EVP_CIPHER_CTX_set_num ( Addressable ctx,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.EVP_CIPHER_CTX_set_num$MH, "EVP_CIPHER_CTX_set_num");
        try {
            mh$.invokeExact(ctx, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_copy$MH,"EVP_CIPHER_CTX_copy");
    }
    public static int EVP_CIPHER_CTX_copy ( Addressable out,  Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_copy$MH, "EVP_CIPHER_CTX_copy");
        try {
            return (int)mh$.invokeExact(out, in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_get_app_data$MH() {
        return RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_get_app_data$MH,"EVP_CIPHER_CTX_get_app_data");
    }
    public static MemoryAddress EVP_CIPHER_CTX_get_app_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_get_app_data$MH, "EVP_CIPHER_CTX_get_app_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_set_app_data$MH() {
        return RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_set_app_data$MH,"EVP_CIPHER_CTX_set_app_data");
    }
    public static void EVP_CIPHER_CTX_set_app_data ( Addressable ctx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_set_app_data$MH, "EVP_CIPHER_CTX_set_app_data");
        try {
            mh$.invokeExact(ctx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_get_cipher_data$MH() {
        return RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_get_cipher_data$MH,"EVP_CIPHER_CTX_get_cipher_data");
    }
    public static MemoryAddress EVP_CIPHER_CTX_get_cipher_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_get_cipher_data$MH, "EVP_CIPHER_CTX_get_cipher_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_set_cipher_data$MH() {
        return RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_set_cipher_data$MH,"EVP_CIPHER_CTX_set_cipher_data");
    }
    public static MemoryAddress EVP_CIPHER_CTX_set_cipher_data ( Addressable ctx,  Addressable cipher_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.EVP_CIPHER_CTX_set_cipher_data$MH, "EVP_CIPHER_CTX_set_cipher_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, cipher_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_Cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$277.EVP_Cipher$MH,"EVP_Cipher");
    }
    public static int EVP_Cipher ( Addressable c,  Addressable out,  Addressable in,  int inl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.EVP_Cipher$MH, "EVP_Cipher");
        try {
            return (int)mh$.invokeExact(c, out, in, inl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_ctrl$MH,"EVP_MD_CTX_ctrl");
    }
    public static int EVP_MD_CTX_ctrl ( Addressable ctx,  int cmd,  int p1,  Addressable p2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_ctrl$MH, "EVP_MD_CTX_ctrl");
        try {
            return (int)mh$.invokeExact(ctx, cmd, p1, p2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_new$MH,"EVP_MD_CTX_new");
    }
    public static MemoryAddress EVP_MD_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_new$MH, "EVP_MD_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_reset$MH,"EVP_MD_CTX_reset");
    }
    public static int EVP_MD_CTX_reset ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_reset$MH, "EVP_MD_CTX_reset");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_free$MH,"EVP_MD_CTX_free");
    }
    public static void EVP_MD_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_free$MH, "EVP_MD_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_copy_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_copy_ex$MH,"EVP_MD_CTX_copy_ex");
    }
    public static int EVP_MD_CTX_copy_ex ( Addressable out,  Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_copy_ex$MH, "EVP_MD_CTX_copy_ex");
        try {
            return (int)mh$.invokeExact(out, in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_set_flags$MH,"EVP_MD_CTX_set_flags");
    }
    public static void EVP_MD_CTX_set_flags ( Addressable ctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.EVP_MD_CTX_set_flags$MH, "EVP_MD_CTX_set_flags");
        try {
            mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$279.EVP_MD_CTX_clear_flags$MH,"EVP_MD_CTX_clear_flags");
    }
    public static void EVP_MD_CTX_clear_flags ( Addressable ctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.EVP_MD_CTX_clear_flags$MH, "EVP_MD_CTX_clear_flags");
        try {
            mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_test_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$279.EVP_MD_CTX_test_flags$MH,"EVP_MD_CTX_test_flags");
    }
    public static int EVP_MD_CTX_test_flags ( Addressable ctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.EVP_MD_CTX_test_flags$MH, "EVP_MD_CTX_test_flags");
        try {
            return (int)mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestInit_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$279.EVP_DigestInit_ex$MH,"EVP_DigestInit_ex");
    }
    public static int EVP_DigestInit_ex ( Addressable ctx,  Addressable type,  Addressable impl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.EVP_DigestInit_ex$MH, "EVP_DigestInit_ex");
        try {
            return (int)mh$.invokeExact(ctx, type, impl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$279.EVP_DigestUpdate$MH,"EVP_DigestUpdate");
    }
    public static int EVP_DigestUpdate ( Addressable ctx,  Addressable d,  long cnt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.EVP_DigestUpdate$MH, "EVP_DigestUpdate");
        try {
            return (int)mh$.invokeExact(ctx, d, cnt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestFinal_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$279.EVP_DigestFinal_ex$MH,"EVP_DigestFinal_ex");
    }
    public static int EVP_DigestFinal_ex ( Addressable ctx,  Addressable md,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.EVP_DigestFinal_ex$MH, "EVP_DigestFinal_ex");
        try {
            return (int)mh$.invokeExact(ctx, md, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_Digest$MH() {
        return RuntimeHelper.requireNonNull(constants$279.EVP_Digest$MH,"EVP_Digest");
    }
    public static int EVP_Digest ( Addressable data,  long count,  Addressable md,  Addressable size,  Addressable type,  Addressable impl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.EVP_Digest$MH, "EVP_Digest");
        try {
            return (int)mh$.invokeExact(data, count, md, size, type, impl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_CTX_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$280.EVP_MD_CTX_copy$MH,"EVP_MD_CTX_copy");
    }
    public static int EVP_MD_CTX_copy ( Addressable out,  Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.EVP_MD_CTX_copy$MH, "EVP_MD_CTX_copy");
        try {
            return (int)mh$.invokeExact(out, in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestInit$MH() {
        return RuntimeHelper.requireNonNull(constants$280.EVP_DigestInit$MH,"EVP_DigestInit");
    }
    public static int EVP_DigestInit ( Addressable ctx,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.EVP_DigestInit$MH, "EVP_DigestInit");
        try {
            return (int)mh$.invokeExact(ctx, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$280.EVP_DigestFinal$MH,"EVP_DigestFinal");
    }
    public static int EVP_DigestFinal ( Addressable ctx,  Addressable md,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.EVP_DigestFinal$MH, "EVP_DigestFinal");
        try {
            return (int)mh$.invokeExact(ctx, md, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestFinalXOF$MH() {
        return RuntimeHelper.requireNonNull(constants$280.EVP_DigestFinalXOF$MH,"EVP_DigestFinalXOF");
    }
    public static int EVP_DigestFinalXOF ( Addressable ctx,  Addressable md,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.EVP_DigestFinalXOF$MH, "EVP_DigestFinalXOF");
        try {
            return (int)mh$.invokeExact(ctx, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_read_pw_string$MH() {
        return RuntimeHelper.requireNonNull(constants$280.EVP_read_pw_string$MH,"EVP_read_pw_string");
    }
    public static int EVP_read_pw_string ( Addressable buf,  int length,  Addressable prompt,  int verify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.EVP_read_pw_string$MH, "EVP_read_pw_string");
        try {
            return (int)mh$.invokeExact(buf, length, prompt, verify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_read_pw_string_min$MH() {
        return RuntimeHelper.requireNonNull(constants$280.EVP_read_pw_string_min$MH,"EVP_read_pw_string_min");
    }
    public static int EVP_read_pw_string_min ( Addressable buf,  int minlen,  int maxlen,  Addressable prompt,  int verify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.EVP_read_pw_string_min$MH, "EVP_read_pw_string_min");
        try {
            return (int)mh$.invokeExact(buf, minlen, maxlen, prompt, verify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_set_pw_prompt$MH() {
        return RuntimeHelper.requireNonNull(constants$281.EVP_set_pw_prompt$MH,"EVP_set_pw_prompt");
    }
    public static void EVP_set_pw_prompt ( Addressable prompt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.EVP_set_pw_prompt$MH, "EVP_set_pw_prompt");
        try {
            mh$.invokeExact(prompt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_get_pw_prompt$MH() {
        return RuntimeHelper.requireNonNull(constants$281.EVP_get_pw_prompt$MH,"EVP_get_pw_prompt");
    }
    public static MemoryAddress EVP_get_pw_prompt () {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.EVP_get_pw_prompt$MH, "EVP_get_pw_prompt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_BytesToKey$MH() {
        return RuntimeHelper.requireNonNull(constants$281.EVP_BytesToKey$MH,"EVP_BytesToKey");
    }
    public static int EVP_BytesToKey ( Addressable type,  Addressable md,  Addressable salt,  Addressable data,  int datal,  int count,  Addressable key,  Addressable iv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.EVP_BytesToKey$MH, "EVP_BytesToKey");
        try {
            return (int)mh$.invokeExact(type, md, salt, data, datal, count, key, iv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$281.EVP_CIPHER_CTX_set_flags$MH,"EVP_CIPHER_CTX_set_flags");
    }
    public static void EVP_CIPHER_CTX_set_flags ( Addressable ctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.EVP_CIPHER_CTX_set_flags$MH, "EVP_CIPHER_CTX_set_flags");
        try {
            mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$281.EVP_CIPHER_CTX_clear_flags$MH,"EVP_CIPHER_CTX_clear_flags");
    }
    public static void EVP_CIPHER_CTX_clear_flags ( Addressable ctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.EVP_CIPHER_CTX_clear_flags$MH, "EVP_CIPHER_CTX_clear_flags");
        try {
            mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_test_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$281.EVP_CIPHER_CTX_test_flags$MH,"EVP_CIPHER_CTX_test_flags");
    }
    public static int EVP_CIPHER_CTX_test_flags ( Addressable ctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.EVP_CIPHER_CTX_test_flags$MH, "EVP_CIPHER_CTX_test_flags");
        try {
            return (int)mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncryptInit$MH() {
        return RuntimeHelper.requireNonNull(constants$282.EVP_EncryptInit$MH,"EVP_EncryptInit");
    }
    public static int EVP_EncryptInit ( Addressable ctx,  Addressable cipher,  Addressable key,  Addressable iv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.EVP_EncryptInit$MH, "EVP_EncryptInit");
        try {
            return (int)mh$.invokeExact(ctx, cipher, key, iv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncryptInit_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$282.EVP_EncryptInit_ex$MH,"EVP_EncryptInit_ex");
    }
    public static int EVP_EncryptInit_ex ( Addressable ctx,  Addressable cipher,  Addressable impl,  Addressable key,  Addressable iv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.EVP_EncryptInit_ex$MH, "EVP_EncryptInit_ex");
        try {
            return (int)mh$.invokeExact(ctx, cipher, impl, key, iv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncryptUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$282.EVP_EncryptUpdate$MH,"EVP_EncryptUpdate");
    }
    public static int EVP_EncryptUpdate ( Addressable ctx,  Addressable out,  Addressable outl,  Addressable in,  int inl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.EVP_EncryptUpdate$MH, "EVP_EncryptUpdate");
        try {
            return (int)mh$.invokeExact(ctx, out, outl, in, inl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncryptFinal_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$282.EVP_EncryptFinal_ex$MH,"EVP_EncryptFinal_ex");
    }
    public static int EVP_EncryptFinal_ex ( Addressable ctx,  Addressable out,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.EVP_EncryptFinal_ex$MH, "EVP_EncryptFinal_ex");
        try {
            return (int)mh$.invokeExact(ctx, out, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncryptFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$282.EVP_EncryptFinal$MH,"EVP_EncryptFinal");
    }
    public static int EVP_EncryptFinal ( Addressable ctx,  Addressable out,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.EVP_EncryptFinal$MH, "EVP_EncryptFinal");
        try {
            return (int)mh$.invokeExact(ctx, out, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecryptInit$MH() {
        return RuntimeHelper.requireNonNull(constants$282.EVP_DecryptInit$MH,"EVP_DecryptInit");
    }
    public static int EVP_DecryptInit ( Addressable ctx,  Addressable cipher,  Addressable key,  Addressable iv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.EVP_DecryptInit$MH, "EVP_DecryptInit");
        try {
            return (int)mh$.invokeExact(ctx, cipher, key, iv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecryptInit_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$283.EVP_DecryptInit_ex$MH,"EVP_DecryptInit_ex");
    }
    public static int EVP_DecryptInit_ex ( Addressable ctx,  Addressable cipher,  Addressable impl,  Addressable key,  Addressable iv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.EVP_DecryptInit_ex$MH, "EVP_DecryptInit_ex");
        try {
            return (int)mh$.invokeExact(ctx, cipher, impl, key, iv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecryptUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$283.EVP_DecryptUpdate$MH,"EVP_DecryptUpdate");
    }
    public static int EVP_DecryptUpdate ( Addressable ctx,  Addressable out,  Addressable outl,  Addressable in,  int inl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.EVP_DecryptUpdate$MH, "EVP_DecryptUpdate");
        try {
            return (int)mh$.invokeExact(ctx, out, outl, in, inl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecryptFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$283.EVP_DecryptFinal$MH,"EVP_DecryptFinal");
    }
    public static int EVP_DecryptFinal ( Addressable ctx,  Addressable outm,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.EVP_DecryptFinal$MH, "EVP_DecryptFinal");
        try {
            return (int)mh$.invokeExact(ctx, outm, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecryptFinal_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$283.EVP_DecryptFinal_ex$MH,"EVP_DecryptFinal_ex");
    }
    public static int EVP_DecryptFinal_ex ( Addressable ctx,  Addressable outm,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.EVP_DecryptFinal_ex$MH, "EVP_DecryptFinal_ex");
        try {
            return (int)mh$.invokeExact(ctx, outm, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CipherInit$MH() {
        return RuntimeHelper.requireNonNull(constants$283.EVP_CipherInit$MH,"EVP_CipherInit");
    }
    public static int EVP_CipherInit ( Addressable ctx,  Addressable cipher,  Addressable key,  Addressable iv,  int enc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.EVP_CipherInit$MH, "EVP_CipherInit");
        try {
            return (int)mh$.invokeExact(ctx, cipher, key, iv, enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CipherInit_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$283.EVP_CipherInit_ex$MH,"EVP_CipherInit_ex");
    }
    public static int EVP_CipherInit_ex ( Addressable ctx,  Addressable cipher,  Addressable impl,  Addressable key,  Addressable iv,  int enc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.EVP_CipherInit_ex$MH, "EVP_CipherInit_ex");
        try {
            return (int)mh$.invokeExact(ctx, cipher, impl, key, iv, enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CipherUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$284.EVP_CipherUpdate$MH,"EVP_CipherUpdate");
    }
    public static int EVP_CipherUpdate ( Addressable ctx,  Addressable out,  Addressable outl,  Addressable in,  int inl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.EVP_CipherUpdate$MH, "EVP_CipherUpdate");
        try {
            return (int)mh$.invokeExact(ctx, out, outl, in, inl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CipherFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$284.EVP_CipherFinal$MH,"EVP_CipherFinal");
    }
    public static int EVP_CipherFinal ( Addressable ctx,  Addressable outm,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.EVP_CipherFinal$MH, "EVP_CipherFinal");
        try {
            return (int)mh$.invokeExact(ctx, outm, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CipherFinal_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$284.EVP_CipherFinal_ex$MH,"EVP_CipherFinal_ex");
    }
    public static int EVP_CipherFinal_ex ( Addressable ctx,  Addressable outm,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.EVP_CipherFinal_ex$MH, "EVP_CipherFinal_ex");
        try {
            return (int)mh$.invokeExact(ctx, outm, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_SignFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$284.EVP_SignFinal$MH,"EVP_SignFinal");
    }
    public static int EVP_SignFinal ( Addressable ctx,  Addressable md,  Addressable s,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.EVP_SignFinal$MH, "EVP_SignFinal");
        try {
            return (int)mh$.invokeExact(ctx, md, s, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestSign$MH() {
        return RuntimeHelper.requireNonNull(constants$284.EVP_DigestSign$MH,"EVP_DigestSign");
    }
    public static int EVP_DigestSign ( Addressable ctx,  Addressable sigret,  Addressable siglen,  Addressable tbs,  long tbslen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.EVP_DigestSign$MH, "EVP_DigestSign");
        try {
            return (int)mh$.invokeExact(ctx, sigret, siglen, tbs, tbslen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_VerifyFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$284.EVP_VerifyFinal$MH,"EVP_VerifyFinal");
    }
    public static int EVP_VerifyFinal ( Addressable ctx,  Addressable sigbuf,  int siglen,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.EVP_VerifyFinal$MH, "EVP_VerifyFinal");
        try {
            return (int)mh$.invokeExact(ctx, sigbuf, siglen, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestVerify$MH() {
        return RuntimeHelper.requireNonNull(constants$285.EVP_DigestVerify$MH,"EVP_DigestVerify");
    }
    public static int EVP_DigestVerify ( Addressable ctx,  Addressable sigret,  long siglen,  Addressable tbs,  long tbslen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.EVP_DigestVerify$MH, "EVP_DigestVerify");
        try {
            return (int)mh$.invokeExact(ctx, sigret, siglen, tbs, tbslen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestSignInit$MH() {
        return RuntimeHelper.requireNonNull(constants$285.EVP_DigestSignInit$MH,"EVP_DigestSignInit");
    }
    public static int EVP_DigestSignInit ( Addressable ctx,  Addressable pctx,  Addressable type,  Addressable e,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.EVP_DigestSignInit$MH, "EVP_DigestSignInit");
        try {
            return (int)mh$.invokeExact(ctx, pctx, type, e, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestSignFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$285.EVP_DigestSignFinal$MH,"EVP_DigestSignFinal");
    }
    public static int EVP_DigestSignFinal ( Addressable ctx,  Addressable sigret,  Addressable siglen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.EVP_DigestSignFinal$MH, "EVP_DigestSignFinal");
        try {
            return (int)mh$.invokeExact(ctx, sigret, siglen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestVerifyInit$MH() {
        return RuntimeHelper.requireNonNull(constants$285.EVP_DigestVerifyInit$MH,"EVP_DigestVerifyInit");
    }
    public static int EVP_DigestVerifyInit ( Addressable ctx,  Addressable pctx,  Addressable type,  Addressable e,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.EVP_DigestVerifyInit$MH, "EVP_DigestVerifyInit");
        try {
            return (int)mh$.invokeExact(ctx, pctx, type, e, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DigestVerifyFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$285.EVP_DigestVerifyFinal$MH,"EVP_DigestVerifyFinal");
    }
    public static int EVP_DigestVerifyFinal ( Addressable ctx,  Addressable sig,  long siglen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.EVP_DigestVerifyFinal$MH, "EVP_DigestVerifyFinal");
        try {
            return (int)mh$.invokeExact(ctx, sig, siglen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_OpenInit$MH() {
        return RuntimeHelper.requireNonNull(constants$285.EVP_OpenInit$MH,"EVP_OpenInit");
    }
    public static int EVP_OpenInit ( Addressable ctx,  Addressable type,  Addressable ek,  int ekl,  Addressable iv,  Addressable priv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.EVP_OpenInit$MH, "EVP_OpenInit");
        try {
            return (int)mh$.invokeExact(ctx, type, ek, ekl, iv, priv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_OpenFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$286.EVP_OpenFinal$MH,"EVP_OpenFinal");
    }
    public static int EVP_OpenFinal ( Addressable ctx,  Addressable out,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.EVP_OpenFinal$MH, "EVP_OpenFinal");
        try {
            return (int)mh$.invokeExact(ctx, out, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_SealInit$MH() {
        return RuntimeHelper.requireNonNull(constants$286.EVP_SealInit$MH,"EVP_SealInit");
    }
    public static int EVP_SealInit ( Addressable ctx,  Addressable type,  Addressable ek,  Addressable ekl,  Addressable iv,  Addressable pubk,  int npubk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.EVP_SealInit$MH, "EVP_SealInit");
        try {
            return (int)mh$.invokeExact(ctx, type, ek, ekl, iv, pubk, npubk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_SealFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$286.EVP_SealFinal$MH,"EVP_SealFinal");
    }
    public static int EVP_SealFinal ( Addressable ctx,  Addressable out,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.EVP_SealFinal$MH, "EVP_SealFinal");
        try {
            return (int)mh$.invokeExact(ctx, out, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_ENCODE_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$286.EVP_ENCODE_CTX_new$MH,"EVP_ENCODE_CTX_new");
    }
    public static MemoryAddress EVP_ENCODE_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.EVP_ENCODE_CTX_new$MH, "EVP_ENCODE_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_ENCODE_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$286.EVP_ENCODE_CTX_free$MH,"EVP_ENCODE_CTX_free");
    }
    public static void EVP_ENCODE_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.EVP_ENCODE_CTX_free$MH, "EVP_ENCODE_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_ENCODE_CTX_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$286.EVP_ENCODE_CTX_copy$MH,"EVP_ENCODE_CTX_copy");
    }
    public static int EVP_ENCODE_CTX_copy ( Addressable dctx,  Addressable sctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.EVP_ENCODE_CTX_copy$MH, "EVP_ENCODE_CTX_copy");
        try {
            return (int)mh$.invokeExact(dctx, sctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_ENCODE_CTX_num$MH() {
        return RuntimeHelper.requireNonNull(constants$287.EVP_ENCODE_CTX_num$MH,"EVP_ENCODE_CTX_num");
    }
    public static int EVP_ENCODE_CTX_num ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.EVP_ENCODE_CTX_num$MH, "EVP_ENCODE_CTX_num");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncodeInit$MH() {
        return RuntimeHelper.requireNonNull(constants$287.EVP_EncodeInit$MH,"EVP_EncodeInit");
    }
    public static void EVP_EncodeInit ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.EVP_EncodeInit$MH, "EVP_EncodeInit");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncodeUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$287.EVP_EncodeUpdate$MH,"EVP_EncodeUpdate");
    }
    public static int EVP_EncodeUpdate ( Addressable ctx,  Addressable out,  Addressable outl,  Addressable in,  int inl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.EVP_EncodeUpdate$MH, "EVP_EncodeUpdate");
        try {
            return (int)mh$.invokeExact(ctx, out, outl, in, inl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncodeFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$287.EVP_EncodeFinal$MH,"EVP_EncodeFinal");
    }
    public static void EVP_EncodeFinal ( Addressable ctx,  Addressable out,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.EVP_EncodeFinal$MH, "EVP_EncodeFinal");
        try {
            mh$.invokeExact(ctx, out, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_EncodeBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$287.EVP_EncodeBlock$MH,"EVP_EncodeBlock");
    }
    public static int EVP_EncodeBlock ( Addressable t,  Addressable f,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.EVP_EncodeBlock$MH, "EVP_EncodeBlock");
        try {
            return (int)mh$.invokeExact(t, f, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecodeInit$MH() {
        return RuntimeHelper.requireNonNull(constants$287.EVP_DecodeInit$MH,"EVP_DecodeInit");
    }
    public static void EVP_DecodeInit ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.EVP_DecodeInit$MH, "EVP_DecodeInit");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecodeUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$288.EVP_DecodeUpdate$MH,"EVP_DecodeUpdate");
    }
    public static int EVP_DecodeUpdate ( Addressable ctx,  Addressable out,  Addressable outl,  Addressable in,  int inl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.EVP_DecodeUpdate$MH, "EVP_DecodeUpdate");
        try {
            return (int)mh$.invokeExact(ctx, out, outl, in, inl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecodeFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$288.EVP_DecodeFinal$MH,"EVP_DecodeFinal");
    }
    public static int EVP_DecodeFinal ( Addressable ctx,  Addressable out,  Addressable outl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.EVP_DecodeFinal$MH, "EVP_DecodeFinal");
        try {
            return (int)mh$.invokeExact(ctx, out, outl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_DecodeBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$288.EVP_DecodeBlock$MH,"EVP_DecodeBlock");
    }
    public static int EVP_DecodeBlock ( Addressable t,  Addressable f,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.EVP_DecodeBlock$MH, "EVP_DecodeBlock");
        try {
            return (int)mh$.invokeExact(t, f, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$288.EVP_CIPHER_CTX_new$MH,"EVP_CIPHER_CTX_new");
    }
    public static MemoryAddress EVP_CIPHER_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.EVP_CIPHER_CTX_new$MH, "EVP_CIPHER_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$288.EVP_CIPHER_CTX_reset$MH,"EVP_CIPHER_CTX_reset");
    }
    public static int EVP_CIPHER_CTX_reset ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.EVP_CIPHER_CTX_reset$MH, "EVP_CIPHER_CTX_reset");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$288.EVP_CIPHER_CTX_free$MH,"EVP_CIPHER_CTX_free");
    }
    public static void EVP_CIPHER_CTX_free ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.EVP_CIPHER_CTX_free$MH, "EVP_CIPHER_CTX_free");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_set_key_length$MH() {
        return RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_set_key_length$MH,"EVP_CIPHER_CTX_set_key_length");
    }
    public static int EVP_CIPHER_CTX_set_key_length ( Addressable x,  int keylen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_set_key_length$MH, "EVP_CIPHER_CTX_set_key_length");
        try {
            return (int)mh$.invokeExact(x, keylen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_set_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_set_padding$MH,"EVP_CIPHER_CTX_set_padding");
    }
    public static int EVP_CIPHER_CTX_set_padding ( Addressable c,  int pad) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_set_padding$MH, "EVP_CIPHER_CTX_set_padding");
        try {
            return (int)mh$.invokeExact(c, pad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_ctrl$MH,"EVP_CIPHER_CTX_ctrl");
    }
    public static int EVP_CIPHER_CTX_ctrl ( Addressable ctx,  int type,  int arg,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_ctrl$MH, "EVP_CIPHER_CTX_ctrl");
        try {
            return (int)mh$.invokeExact(ctx, type, arg, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_CTX_rand_key$MH() {
        return RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_rand_key$MH,"EVP_CIPHER_CTX_rand_key");
    }
    public static int EVP_CIPHER_CTX_rand_key ( Addressable ctx,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.EVP_CIPHER_CTX_rand_key$MH, "EVP_CIPHER_CTX_rand_key");
        try {
            return (int)mh$.invokeExact(ctx, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_md$MH() {
        return RuntimeHelper.requireNonNull(constants$289.BIO_f_md$MH,"BIO_f_md");
    }
    public static MemoryAddress BIO_f_md () {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.BIO_f_md$MH, "BIO_f_md");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_base64$MH() {
        return RuntimeHelper.requireNonNull(constants$289.BIO_f_base64$MH,"BIO_f_base64");
    }
    public static MemoryAddress BIO_f_base64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.BIO_f_base64$MH, "BIO_f_base64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$290.BIO_f_cipher$MH,"BIO_f_cipher");
    }
    public static MemoryAddress BIO_f_cipher () {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.BIO_f_cipher$MH, "BIO_f_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_reliable$MH() {
        return RuntimeHelper.requireNonNull(constants$290.BIO_f_reliable$MH,"BIO_f_reliable");
    }
    public static MemoryAddress BIO_f_reliable () {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.BIO_f_reliable$MH, "BIO_f_reliable");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$290.BIO_set_cipher$MH,"BIO_set_cipher");
    }
    public static int BIO_set_cipher ( Addressable b,  Addressable c,  Addressable k,  Addressable i,  int enc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.BIO_set_cipher$MH, "BIO_set_cipher");
        try {
            return (int)mh$.invokeExact(b, c, k, i, enc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_md_null$MH() {
        return RuntimeHelper.requireNonNull(constants$290.EVP_md_null$MH,"EVP_md_null");
    }
    public static MemoryAddress EVP_md_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.EVP_md_null$MH, "EVP_md_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_md2$MH() {
        return RuntimeHelper.requireNonNull(constants$290.EVP_md2$MH,"EVP_md2");
    }
    public static MemoryAddress EVP_md2 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.EVP_md2$MH, "EVP_md2");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_md4$MH() {
        return RuntimeHelper.requireNonNull(constants$290.EVP_md4$MH,"EVP_md4");
    }
    public static MemoryAddress EVP_md4 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.EVP_md4$MH, "EVP_md4");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_md5$MH() {
        return RuntimeHelper.requireNonNull(constants$291.EVP_md5$MH,"EVP_md5");
    }
    public static MemoryAddress EVP_md5 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.EVP_md5$MH, "EVP_md5");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_md5_sha1$MH() {
        return RuntimeHelper.requireNonNull(constants$291.EVP_md5_sha1$MH,"EVP_md5_sha1");
    }
    public static MemoryAddress EVP_md5_sha1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.EVP_md5_sha1$MH, "EVP_md5_sha1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_blake2b512$MH() {
        return RuntimeHelper.requireNonNull(constants$291.EVP_blake2b512$MH,"EVP_blake2b512");
    }
    public static MemoryAddress EVP_blake2b512 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.EVP_blake2b512$MH, "EVP_blake2b512");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_blake2s256$MH() {
        return RuntimeHelper.requireNonNull(constants$291.EVP_blake2s256$MH,"EVP_blake2s256");
    }
    public static MemoryAddress EVP_blake2s256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.EVP_blake2s256$MH, "EVP_blake2s256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha1$MH() {
        return RuntimeHelper.requireNonNull(constants$291.EVP_sha1$MH,"EVP_sha1");
    }
    public static MemoryAddress EVP_sha1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.EVP_sha1$MH, "EVP_sha1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha224$MH() {
        return RuntimeHelper.requireNonNull(constants$291.EVP_sha224$MH,"EVP_sha224");
    }
    public static MemoryAddress EVP_sha224 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.EVP_sha224$MH, "EVP_sha224");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha256$MH() {
        return RuntimeHelper.requireNonNull(constants$292.EVP_sha256$MH,"EVP_sha256");
    }
    public static MemoryAddress EVP_sha256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.EVP_sha256$MH, "EVP_sha256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha384$MH() {
        return RuntimeHelper.requireNonNull(constants$292.EVP_sha384$MH,"EVP_sha384");
    }
    public static MemoryAddress EVP_sha384 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.EVP_sha384$MH, "EVP_sha384");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha512$MH() {
        return RuntimeHelper.requireNonNull(constants$292.EVP_sha512$MH,"EVP_sha512");
    }
    public static MemoryAddress EVP_sha512 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.EVP_sha512$MH, "EVP_sha512");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha512_224$MH() {
        return RuntimeHelper.requireNonNull(constants$292.EVP_sha512_224$MH,"EVP_sha512_224");
    }
    public static MemoryAddress EVP_sha512_224 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.EVP_sha512_224$MH, "EVP_sha512_224");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha512_256$MH() {
        return RuntimeHelper.requireNonNull(constants$292.EVP_sha512_256$MH,"EVP_sha512_256");
    }
    public static MemoryAddress EVP_sha512_256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.EVP_sha512_256$MH, "EVP_sha512_256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha3_224$MH() {
        return RuntimeHelper.requireNonNull(constants$292.EVP_sha3_224$MH,"EVP_sha3_224");
    }
    public static MemoryAddress EVP_sha3_224 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.EVP_sha3_224$MH, "EVP_sha3_224");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha3_256$MH() {
        return RuntimeHelper.requireNonNull(constants$293.EVP_sha3_256$MH,"EVP_sha3_256");
    }
    public static MemoryAddress EVP_sha3_256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.EVP_sha3_256$MH, "EVP_sha3_256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha3_384$MH() {
        return RuntimeHelper.requireNonNull(constants$293.EVP_sha3_384$MH,"EVP_sha3_384");
    }
    public static MemoryAddress EVP_sha3_384 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.EVP_sha3_384$MH, "EVP_sha3_384");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sha3_512$MH() {
        return RuntimeHelper.requireNonNull(constants$293.EVP_sha3_512$MH,"EVP_sha3_512");
    }
    public static MemoryAddress EVP_sha3_512 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.EVP_sha3_512$MH, "EVP_sha3_512");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_shake128$MH() {
        return RuntimeHelper.requireNonNull(constants$293.EVP_shake128$MH,"EVP_shake128");
    }
    public static MemoryAddress EVP_shake128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.EVP_shake128$MH, "EVP_shake128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_shake256$MH() {
        return RuntimeHelper.requireNonNull(constants$293.EVP_shake256$MH,"EVP_shake256");
    }
    public static MemoryAddress EVP_shake256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.EVP_shake256$MH, "EVP_shake256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_ripemd160$MH() {
        return RuntimeHelper.requireNonNull(constants$293.EVP_ripemd160$MH,"EVP_ripemd160");
    }
    public static MemoryAddress EVP_ripemd160 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.EVP_ripemd160$MH, "EVP_ripemd160");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_whirlpool$MH() {
        return RuntimeHelper.requireNonNull(constants$294.EVP_whirlpool$MH,"EVP_whirlpool");
    }
    public static MemoryAddress EVP_whirlpool () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.EVP_whirlpool$MH, "EVP_whirlpool");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_sm3$MH() {
        return RuntimeHelper.requireNonNull(constants$294.EVP_sm3$MH,"EVP_sm3");
    }
    public static MemoryAddress EVP_sm3 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.EVP_sm3$MH, "EVP_sm3");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_enc_null$MH() {
        return RuntimeHelper.requireNonNull(constants$294.EVP_enc_null$MH,"EVP_enc_null");
    }
    public static MemoryAddress EVP_enc_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.EVP_enc_null$MH, "EVP_enc_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$294.EVP_des_ecb$MH,"EVP_des_ecb");
    }
    public static MemoryAddress EVP_des_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.EVP_des_ecb$MH, "EVP_des_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede$MH() {
        return RuntimeHelper.requireNonNull(constants$294.EVP_des_ede$MH,"EVP_des_ede");
    }
    public static MemoryAddress EVP_des_ede () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.EVP_des_ede$MH, "EVP_des_ede");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3$MH() {
        return RuntimeHelper.requireNonNull(constants$294.EVP_des_ede3$MH,"EVP_des_ede3");
    }
    public static MemoryAddress EVP_des_ede3 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.EVP_des_ede3$MH, "EVP_des_ede3");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$295.EVP_des_ede_ecb$MH,"EVP_des_ede_ecb");
    }
    public static MemoryAddress EVP_des_ede_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.EVP_des_ede_ecb$MH, "EVP_des_ede_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$295.EVP_des_ede3_ecb$MH,"EVP_des_ede3_ecb");
    }
    public static MemoryAddress EVP_des_ede3_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.EVP_des_ede3_ecb$MH, "EVP_des_ede3_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$295.EVP_des_cfb64$MH,"EVP_des_cfb64");
    }
    public static MemoryAddress EVP_des_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.EVP_des_cfb64$MH, "EVP_des_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$295.EVP_des_cfb1$MH,"EVP_des_cfb1");
    }
    public static MemoryAddress EVP_des_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.EVP_des_cfb1$MH, "EVP_des_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$295.EVP_des_cfb8$MH,"EVP_des_cfb8");
    }
    public static MemoryAddress EVP_des_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.EVP_des_cfb8$MH, "EVP_des_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$295.EVP_des_ede_cfb64$MH,"EVP_des_ede_cfb64");
    }
    public static MemoryAddress EVP_des_ede_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.EVP_des_ede_cfb64$MH, "EVP_des_ede_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_cfb64$MH,"EVP_des_ede3_cfb64");
    }
    public static MemoryAddress EVP_des_ede3_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_cfb64$MH, "EVP_des_ede3_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_cfb1$MH,"EVP_des_ede3_cfb1");
    }
    public static MemoryAddress EVP_des_ede3_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_cfb1$MH, "EVP_des_ede3_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_cfb8$MH,"EVP_des_ede3_cfb8");
    }
    public static MemoryAddress EVP_des_ede3_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_cfb8$MH, "EVP_des_ede3_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$296.EVP_des_ofb$MH,"EVP_des_ofb");
    }
    public static MemoryAddress EVP_des_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.EVP_des_ofb$MH, "EVP_des_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$296.EVP_des_ede_ofb$MH,"EVP_des_ede_ofb");
    }
    public static MemoryAddress EVP_des_ede_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.EVP_des_ede_ofb$MH, "EVP_des_ede_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_ofb$MH,"EVP_des_ede3_ofb");
    }
    public static MemoryAddress EVP_des_ede3_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.EVP_des_ede3_ofb$MH, "EVP_des_ede3_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$297.EVP_des_cbc$MH,"EVP_des_cbc");
    }
    public static MemoryAddress EVP_des_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.EVP_des_cbc$MH, "EVP_des_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$297.EVP_des_ede_cbc$MH,"EVP_des_ede_cbc");
    }
    public static MemoryAddress EVP_des_ede_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.EVP_des_ede_cbc$MH, "EVP_des_ede_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$297.EVP_des_ede3_cbc$MH,"EVP_des_ede3_cbc");
    }
    public static MemoryAddress EVP_des_ede3_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.EVP_des_ede3_cbc$MH, "EVP_des_ede3_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_desx_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$297.EVP_desx_cbc$MH,"EVP_desx_cbc");
    }
    public static MemoryAddress EVP_desx_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.EVP_desx_cbc$MH, "EVP_desx_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_des_ede3_wrap$MH() {
        return RuntimeHelper.requireNonNull(constants$297.EVP_des_ede3_wrap$MH,"EVP_des_ede3_wrap");
    }
    public static MemoryAddress EVP_des_ede3_wrap () {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.EVP_des_ede3_wrap$MH, "EVP_des_ede3_wrap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc4$MH() {
        return RuntimeHelper.requireNonNull(constants$297.EVP_rc4$MH,"EVP_rc4");
    }
    public static MemoryAddress EVP_rc4 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.EVP_rc4$MH, "EVP_rc4");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc4_40$MH() {
        return RuntimeHelper.requireNonNull(constants$298.EVP_rc4_40$MH,"EVP_rc4_40");
    }
    public static MemoryAddress EVP_rc4_40 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.EVP_rc4_40$MH, "EVP_rc4_40");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc4_hmac_md5$MH() {
        return RuntimeHelper.requireNonNull(constants$298.EVP_rc4_hmac_md5$MH,"EVP_rc4_hmac_md5");
    }
    public static MemoryAddress EVP_rc4_hmac_md5 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.EVP_rc4_hmac_md5$MH, "EVP_rc4_hmac_md5");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_idea_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$298.EVP_idea_ecb$MH,"EVP_idea_ecb");
    }
    public static MemoryAddress EVP_idea_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.EVP_idea_ecb$MH, "EVP_idea_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_idea_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$298.EVP_idea_cfb64$MH,"EVP_idea_cfb64");
    }
    public static MemoryAddress EVP_idea_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.EVP_idea_cfb64$MH, "EVP_idea_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_idea_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$298.EVP_idea_ofb$MH,"EVP_idea_ofb");
    }
    public static MemoryAddress EVP_idea_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.EVP_idea_ofb$MH, "EVP_idea_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_idea_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$298.EVP_idea_cbc$MH,"EVP_idea_cbc");
    }
    public static MemoryAddress EVP_idea_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$298.EVP_idea_cbc$MH, "EVP_idea_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc2_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$299.EVP_rc2_ecb$MH,"EVP_rc2_ecb");
    }
    public static MemoryAddress EVP_rc2_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.EVP_rc2_ecb$MH, "EVP_rc2_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc2_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$299.EVP_rc2_cbc$MH,"EVP_rc2_cbc");
    }
    public static MemoryAddress EVP_rc2_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.EVP_rc2_cbc$MH, "EVP_rc2_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc2_40_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$299.EVP_rc2_40_cbc$MH,"EVP_rc2_40_cbc");
    }
    public static MemoryAddress EVP_rc2_40_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.EVP_rc2_40_cbc$MH, "EVP_rc2_40_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc2_64_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$299.EVP_rc2_64_cbc$MH,"EVP_rc2_64_cbc");
    }
    public static MemoryAddress EVP_rc2_64_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.EVP_rc2_64_cbc$MH, "EVP_rc2_64_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc2_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$299.EVP_rc2_cfb64$MH,"EVP_rc2_cfb64");
    }
    public static MemoryAddress EVP_rc2_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.EVP_rc2_cfb64$MH, "EVP_rc2_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc2_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$299.EVP_rc2_ofb$MH,"EVP_rc2_ofb");
    }
    public static MemoryAddress EVP_rc2_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$299.EVP_rc2_ofb$MH, "EVP_rc2_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_bf_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$300.EVP_bf_ecb$MH,"EVP_bf_ecb");
    }
    public static MemoryAddress EVP_bf_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.EVP_bf_ecb$MH, "EVP_bf_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_bf_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$300.EVP_bf_cbc$MH,"EVP_bf_cbc");
    }
    public static MemoryAddress EVP_bf_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.EVP_bf_cbc$MH, "EVP_bf_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_bf_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$300.EVP_bf_cfb64$MH,"EVP_bf_cfb64");
    }
    public static MemoryAddress EVP_bf_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.EVP_bf_cfb64$MH, "EVP_bf_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_bf_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$300.EVP_bf_ofb$MH,"EVP_bf_ofb");
    }
    public static MemoryAddress EVP_bf_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.EVP_bf_ofb$MH, "EVP_bf_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_cast5_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$300.EVP_cast5_ecb$MH,"EVP_cast5_ecb");
    }
    public static MemoryAddress EVP_cast5_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.EVP_cast5_ecb$MH, "EVP_cast5_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_cast5_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$300.EVP_cast5_cbc$MH,"EVP_cast5_cbc");
    }
    public static MemoryAddress EVP_cast5_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$300.EVP_cast5_cbc$MH, "EVP_cast5_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_cast5_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$301.EVP_cast5_cfb64$MH,"EVP_cast5_cfb64");
    }
    public static MemoryAddress EVP_cast5_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.EVP_cast5_cfb64$MH, "EVP_cast5_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_cast5_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$301.EVP_cast5_ofb$MH,"EVP_cast5_ofb");
    }
    public static MemoryAddress EVP_cast5_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.EVP_cast5_ofb$MH, "EVP_cast5_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc5_32_12_16_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_cbc$MH,"EVP_rc5_32_12_16_cbc");
    }
    public static MemoryAddress EVP_rc5_32_12_16_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_cbc$MH, "EVP_rc5_32_12_16_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc5_32_12_16_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_ecb$MH,"EVP_rc5_32_12_16_ecb");
    }
    public static MemoryAddress EVP_rc5_32_12_16_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_ecb$MH, "EVP_rc5_32_12_16_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc5_32_12_16_cfb64$MH() {
        return RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_cfb64$MH,"EVP_rc5_32_12_16_cfb64");
    }
    public static MemoryAddress EVP_rc5_32_12_16_cfb64 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_cfb64$MH, "EVP_rc5_32_12_16_cfb64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_rc5_32_12_16_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_ofb$MH,"EVP_rc5_32_12_16_ofb");
    }
    public static MemoryAddress EVP_rc5_32_12_16_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$301.EVP_rc5_32_12_16_ofb$MH, "EVP_rc5_32_12_16_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_ecb$MH,"EVP_aes_128_ecb");
    }
    public static MemoryAddress EVP_aes_128_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_ecb$MH, "EVP_aes_128_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cbc$MH,"EVP_aes_128_cbc");
    }
    public static MemoryAddress EVP_aes_128_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cbc$MH, "EVP_aes_128_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cfb1$MH,"EVP_aes_128_cfb1");
    }
    public static MemoryAddress EVP_aes_128_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cfb1$MH, "EVP_aes_128_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cfb8$MH,"EVP_aes_128_cfb8");
    }
    public static MemoryAddress EVP_aes_128_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cfb8$MH, "EVP_aes_128_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cfb128$MH,"EVP_aes_128_cfb128");
    }
    public static MemoryAddress EVP_aes_128_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_cfb128$MH, "EVP_aes_128_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_ofb$MH,"EVP_aes_128_ofb");
    }
    public static MemoryAddress EVP_aes_128_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$302.EVP_aes_128_ofb$MH, "EVP_aes_128_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_ctr$MH,"EVP_aes_128_ctr");
    }
    public static MemoryAddress EVP_aes_128_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_ctr$MH, "EVP_aes_128_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_ccm$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_ccm$MH,"EVP_aes_128_ccm");
    }
    public static MemoryAddress EVP_aes_128_ccm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_ccm$MH, "EVP_aes_128_ccm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_gcm$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_gcm$MH,"EVP_aes_128_gcm");
    }
    public static MemoryAddress EVP_aes_128_gcm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_gcm$MH, "EVP_aes_128_gcm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_xts$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_xts$MH,"EVP_aes_128_xts");
    }
    public static MemoryAddress EVP_aes_128_xts () {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_xts$MH, "EVP_aes_128_xts");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_wrap$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_wrap$MH,"EVP_aes_128_wrap");
    }
    public static MemoryAddress EVP_aes_128_wrap () {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_wrap$MH, "EVP_aes_128_wrap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_wrap_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_wrap_pad$MH,"EVP_aes_128_wrap_pad");
    }
    public static MemoryAddress EVP_aes_128_wrap_pad () {
        var mh$ = RuntimeHelper.requireNonNull(constants$303.EVP_aes_128_wrap_pad$MH, "EVP_aes_128_wrap_pad");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_ocb$MH() {
        return RuntimeHelper.requireNonNull(constants$304.EVP_aes_128_ocb$MH,"EVP_aes_128_ocb");
    }
    public static MemoryAddress EVP_aes_128_ocb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.EVP_aes_128_ocb$MH, "EVP_aes_128_ocb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_ecb$MH,"EVP_aes_192_ecb");
    }
    public static MemoryAddress EVP_aes_192_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_ecb$MH, "EVP_aes_192_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cbc$MH,"EVP_aes_192_cbc");
    }
    public static MemoryAddress EVP_aes_192_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cbc$MH, "EVP_aes_192_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cfb1$MH,"EVP_aes_192_cfb1");
    }
    public static MemoryAddress EVP_aes_192_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cfb1$MH, "EVP_aes_192_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cfb8$MH,"EVP_aes_192_cfb8");
    }
    public static MemoryAddress EVP_aes_192_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cfb8$MH, "EVP_aes_192_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cfb128$MH,"EVP_aes_192_cfb128");
    }
    public static MemoryAddress EVP_aes_192_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$304.EVP_aes_192_cfb128$MH, "EVP_aes_192_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_ofb$MH,"EVP_aes_192_ofb");
    }
    public static MemoryAddress EVP_aes_192_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_ofb$MH, "EVP_aes_192_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_ctr$MH,"EVP_aes_192_ctr");
    }
    public static MemoryAddress EVP_aes_192_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_ctr$MH, "EVP_aes_192_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_ccm$MH() {
        return RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_ccm$MH,"EVP_aes_192_ccm");
    }
    public static MemoryAddress EVP_aes_192_ccm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_ccm$MH, "EVP_aes_192_ccm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_gcm$MH() {
        return RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_gcm$MH,"EVP_aes_192_gcm");
    }
    public static MemoryAddress EVP_aes_192_gcm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_gcm$MH, "EVP_aes_192_gcm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_wrap$MH() {
        return RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_wrap$MH,"EVP_aes_192_wrap");
    }
    public static MemoryAddress EVP_aes_192_wrap () {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_wrap$MH, "EVP_aes_192_wrap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_wrap_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_wrap_pad$MH,"EVP_aes_192_wrap_pad");
    }
    public static MemoryAddress EVP_aes_192_wrap_pad () {
        var mh$ = RuntimeHelper.requireNonNull(constants$305.EVP_aes_192_wrap_pad$MH, "EVP_aes_192_wrap_pad");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_192_ocb$MH() {
        return RuntimeHelper.requireNonNull(constants$306.EVP_aes_192_ocb$MH,"EVP_aes_192_ocb");
    }
    public static MemoryAddress EVP_aes_192_ocb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.EVP_aes_192_ocb$MH, "EVP_aes_192_ocb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_ecb$MH,"EVP_aes_256_ecb");
    }
    public static MemoryAddress EVP_aes_256_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_ecb$MH, "EVP_aes_256_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cbc$MH,"EVP_aes_256_cbc");
    }
    public static MemoryAddress EVP_aes_256_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cbc$MH, "EVP_aes_256_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cfb1$MH,"EVP_aes_256_cfb1");
    }
    public static MemoryAddress EVP_aes_256_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cfb1$MH, "EVP_aes_256_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cfb8$MH,"EVP_aes_256_cfb8");
    }
    public static MemoryAddress EVP_aes_256_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cfb8$MH, "EVP_aes_256_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cfb128$MH,"EVP_aes_256_cfb128");
    }
    public static MemoryAddress EVP_aes_256_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$306.EVP_aes_256_cfb128$MH, "EVP_aes_256_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_ofb$MH,"EVP_aes_256_ofb");
    }
    public static MemoryAddress EVP_aes_256_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_ofb$MH, "EVP_aes_256_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_ctr$MH,"EVP_aes_256_ctr");
    }
    public static MemoryAddress EVP_aes_256_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_ctr$MH, "EVP_aes_256_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_ccm$MH() {
        return RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_ccm$MH,"EVP_aes_256_ccm");
    }
    public static MemoryAddress EVP_aes_256_ccm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_ccm$MH, "EVP_aes_256_ccm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_gcm$MH() {
        return RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_gcm$MH,"EVP_aes_256_gcm");
    }
    public static MemoryAddress EVP_aes_256_gcm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_gcm$MH, "EVP_aes_256_gcm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_xts$MH() {
        return RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_xts$MH,"EVP_aes_256_xts");
    }
    public static MemoryAddress EVP_aes_256_xts () {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_xts$MH, "EVP_aes_256_xts");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_wrap$MH() {
        return RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_wrap$MH,"EVP_aes_256_wrap");
    }
    public static MemoryAddress EVP_aes_256_wrap () {
        var mh$ = RuntimeHelper.requireNonNull(constants$307.EVP_aes_256_wrap$MH, "EVP_aes_256_wrap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_wrap_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_wrap_pad$MH,"EVP_aes_256_wrap_pad");
    }
    public static MemoryAddress EVP_aes_256_wrap_pad () {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_wrap_pad$MH, "EVP_aes_256_wrap_pad");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_ocb$MH() {
        return RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_ocb$MH,"EVP_aes_256_ocb");
    }
    public static MemoryAddress EVP_aes_256_ocb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_ocb$MH, "EVP_aes_256_ocb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_cbc_hmac_sha1$MH() {
        return RuntimeHelper.requireNonNull(constants$308.EVP_aes_128_cbc_hmac_sha1$MH,"EVP_aes_128_cbc_hmac_sha1");
    }
    public static MemoryAddress EVP_aes_128_cbc_hmac_sha1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.EVP_aes_128_cbc_hmac_sha1$MH, "EVP_aes_128_cbc_hmac_sha1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_cbc_hmac_sha1$MH() {
        return RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_cbc_hmac_sha1$MH,"EVP_aes_256_cbc_hmac_sha1");
    }
    public static MemoryAddress EVP_aes_256_cbc_hmac_sha1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_cbc_hmac_sha1$MH, "EVP_aes_256_cbc_hmac_sha1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_128_cbc_hmac_sha256$MH() {
        return RuntimeHelper.requireNonNull(constants$308.EVP_aes_128_cbc_hmac_sha256$MH,"EVP_aes_128_cbc_hmac_sha256");
    }
    public static MemoryAddress EVP_aes_128_cbc_hmac_sha256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.EVP_aes_128_cbc_hmac_sha256$MH, "EVP_aes_128_cbc_hmac_sha256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aes_256_cbc_hmac_sha256$MH() {
        return RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_cbc_hmac_sha256$MH,"EVP_aes_256_cbc_hmac_sha256");
    }
    public static MemoryAddress EVP_aes_256_cbc_hmac_sha256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$308.EVP_aes_256_cbc_hmac_sha256$MH, "EVP_aes_256_cbc_hmac_sha256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_ecb$MH,"EVP_aria_128_ecb");
    }
    public static MemoryAddress EVP_aria_128_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_ecb$MH, "EVP_aria_128_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cbc$MH,"EVP_aria_128_cbc");
    }
    public static MemoryAddress EVP_aria_128_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cbc$MH, "EVP_aria_128_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cfb1$MH,"EVP_aria_128_cfb1");
    }
    public static MemoryAddress EVP_aria_128_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cfb1$MH, "EVP_aria_128_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cfb8$MH,"EVP_aria_128_cfb8");
    }
    public static MemoryAddress EVP_aria_128_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cfb8$MH, "EVP_aria_128_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cfb128$MH,"EVP_aria_128_cfb128");
    }
    public static MemoryAddress EVP_aria_128_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_cfb128$MH, "EVP_aria_128_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_ctr$MH,"EVP_aria_128_ctr");
    }
    public static MemoryAddress EVP_aria_128_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$309.EVP_aria_128_ctr$MH, "EVP_aria_128_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EVP_aria_128_ofb$MH,"EVP_aria_128_ofb");
    }
    public static MemoryAddress EVP_aria_128_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.EVP_aria_128_ofb$MH, "EVP_aria_128_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_gcm$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EVP_aria_128_gcm$MH,"EVP_aria_128_gcm");
    }
    public static MemoryAddress EVP_aria_128_gcm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.EVP_aria_128_gcm$MH, "EVP_aria_128_gcm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_128_ccm$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EVP_aria_128_ccm$MH,"EVP_aria_128_ccm");
    }
    public static MemoryAddress EVP_aria_128_ccm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.EVP_aria_128_ccm$MH, "EVP_aria_128_ccm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EVP_aria_192_ecb$MH,"EVP_aria_192_ecb");
    }
    public static MemoryAddress EVP_aria_192_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.EVP_aria_192_ecb$MH, "EVP_aria_192_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EVP_aria_192_cbc$MH,"EVP_aria_192_cbc");
    }
    public static MemoryAddress EVP_aria_192_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.EVP_aria_192_cbc$MH, "EVP_aria_192_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$310.EVP_aria_192_cfb1$MH,"EVP_aria_192_cfb1");
    }
    public static MemoryAddress EVP_aria_192_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$310.EVP_aria_192_cfb1$MH, "EVP_aria_192_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_cfb8$MH,"EVP_aria_192_cfb8");
    }
    public static MemoryAddress EVP_aria_192_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_cfb8$MH, "EVP_aria_192_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_cfb128$MH,"EVP_aria_192_cfb128");
    }
    public static MemoryAddress EVP_aria_192_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_cfb128$MH, "EVP_aria_192_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_ctr$MH,"EVP_aria_192_ctr");
    }
    public static MemoryAddress EVP_aria_192_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_ctr$MH, "EVP_aria_192_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_ofb$MH,"EVP_aria_192_ofb");
    }
    public static MemoryAddress EVP_aria_192_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_ofb$MH, "EVP_aria_192_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_gcm$MH() {
        return RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_gcm$MH,"EVP_aria_192_gcm");
    }
    public static MemoryAddress EVP_aria_192_gcm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_gcm$MH, "EVP_aria_192_gcm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_192_ccm$MH() {
        return RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_ccm$MH,"EVP_aria_192_ccm");
    }
    public static MemoryAddress EVP_aria_192_ccm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$311.EVP_aria_192_ccm$MH, "EVP_aria_192_ccm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_ecb$MH,"EVP_aria_256_ecb");
    }
    public static MemoryAddress EVP_aria_256_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_ecb$MH, "EVP_aria_256_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cbc$MH,"EVP_aria_256_cbc");
    }
    public static MemoryAddress EVP_aria_256_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cbc$MH, "EVP_aria_256_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cfb1$MH,"EVP_aria_256_cfb1");
    }
    public static MemoryAddress EVP_aria_256_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cfb1$MH, "EVP_aria_256_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cfb8$MH,"EVP_aria_256_cfb8");
    }
    public static MemoryAddress EVP_aria_256_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cfb8$MH, "EVP_aria_256_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cfb128$MH,"EVP_aria_256_cfb128");
    }
    public static MemoryAddress EVP_aria_256_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_cfb128$MH, "EVP_aria_256_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_ctr$MH,"EVP_aria_256_ctr");
    }
    public static MemoryAddress EVP_aria_256_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$312.EVP_aria_256_ctr$MH, "EVP_aria_256_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$313.EVP_aria_256_ofb$MH,"EVP_aria_256_ofb");
    }
    public static MemoryAddress EVP_aria_256_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.EVP_aria_256_ofb$MH, "EVP_aria_256_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_gcm$MH() {
        return RuntimeHelper.requireNonNull(constants$313.EVP_aria_256_gcm$MH,"EVP_aria_256_gcm");
    }
    public static MemoryAddress EVP_aria_256_gcm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.EVP_aria_256_gcm$MH, "EVP_aria_256_gcm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_aria_256_ccm$MH() {
        return RuntimeHelper.requireNonNull(constants$313.EVP_aria_256_ccm$MH,"EVP_aria_256_ccm");
    }
    public static MemoryAddress EVP_aria_256_ccm () {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.EVP_aria_256_ccm$MH, "EVP_aria_256_ccm");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$313.EVP_camellia_128_ecb$MH,"EVP_camellia_128_ecb");
    }
    public static MemoryAddress EVP_camellia_128_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.EVP_camellia_128_ecb$MH, "EVP_camellia_128_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$313.EVP_camellia_128_cbc$MH,"EVP_camellia_128_cbc");
    }
    public static MemoryAddress EVP_camellia_128_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.EVP_camellia_128_cbc$MH, "EVP_camellia_128_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$313.EVP_camellia_128_cfb1$MH,"EVP_camellia_128_cfb1");
    }
    public static MemoryAddress EVP_camellia_128_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$313.EVP_camellia_128_cfb1$MH, "EVP_camellia_128_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_cfb8$MH,"EVP_camellia_128_cfb8");
    }
    public static MemoryAddress EVP_camellia_128_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_cfb8$MH, "EVP_camellia_128_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_cfb128$MH,"EVP_camellia_128_cfb128");
    }
    public static MemoryAddress EVP_camellia_128_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_cfb128$MH, "EVP_camellia_128_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_ofb$MH,"EVP_camellia_128_ofb");
    }
    public static MemoryAddress EVP_camellia_128_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_ofb$MH, "EVP_camellia_128_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_128_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_ctr$MH,"EVP_camellia_128_ctr");
    }
    public static MemoryAddress EVP_camellia_128_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$314.EVP_camellia_128_ctr$MH, "EVP_camellia_128_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$314.EVP_camellia_192_ecb$MH,"EVP_camellia_192_ecb");
    }
    public static MemoryAddress EVP_camellia_192_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$314.EVP_camellia_192_ecb$MH, "EVP_camellia_192_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$314.EVP_camellia_192_cbc$MH,"EVP_camellia_192_cbc");
    }
    public static MemoryAddress EVP_camellia_192_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$314.EVP_camellia_192_cbc$MH, "EVP_camellia_192_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_cfb1$MH,"EVP_camellia_192_cfb1");
    }
    public static MemoryAddress EVP_camellia_192_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_cfb1$MH, "EVP_camellia_192_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_cfb8$MH,"EVP_camellia_192_cfb8");
    }
    public static MemoryAddress EVP_camellia_192_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_cfb8$MH, "EVP_camellia_192_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_cfb128$MH,"EVP_camellia_192_cfb128");
    }
    public static MemoryAddress EVP_camellia_192_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_cfb128$MH, "EVP_camellia_192_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_ofb$MH,"EVP_camellia_192_ofb");
    }
    public static MemoryAddress EVP_camellia_192_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_ofb$MH, "EVP_camellia_192_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_192_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_ctr$MH,"EVP_camellia_192_ctr");
    }
    public static MemoryAddress EVP_camellia_192_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$315.EVP_camellia_192_ctr$MH, "EVP_camellia_192_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$315.EVP_camellia_256_ecb$MH,"EVP_camellia_256_ecb");
    }
    public static MemoryAddress EVP_camellia_256_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$315.EVP_camellia_256_ecb$MH, "EVP_camellia_256_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cbc$MH,"EVP_camellia_256_cbc");
    }
    public static MemoryAddress EVP_camellia_256_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cbc$MH, "EVP_camellia_256_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_cfb1$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cfb1$MH,"EVP_camellia_256_cfb1");
    }
    public static MemoryAddress EVP_camellia_256_cfb1 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cfb1$MH, "EVP_camellia_256_cfb1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_cfb8$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cfb8$MH,"EVP_camellia_256_cfb8");
    }
    public static MemoryAddress EVP_camellia_256_cfb8 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cfb8$MH, "EVP_camellia_256_cfb8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cfb128$MH,"EVP_camellia_256_cfb128");
    }
    public static MemoryAddress EVP_camellia_256_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_cfb128$MH, "EVP_camellia_256_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_ofb$MH,"EVP_camellia_256_ofb");
    }
    public static MemoryAddress EVP_camellia_256_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_ofb$MH, "EVP_camellia_256_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_camellia_256_ctr$MH() {
        return RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_ctr$MH,"EVP_camellia_256_ctr");
    }
    public static MemoryAddress EVP_camellia_256_ctr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$316.EVP_camellia_256_ctr$MH, "EVP_camellia_256_ctr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_chacha20$MH() {
        return RuntimeHelper.requireNonNull(constants$317.EVP_chacha20$MH,"EVP_chacha20");
    }
    public static MemoryAddress EVP_chacha20 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.EVP_chacha20$MH, "EVP_chacha20");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_chacha20_poly1305$MH() {
        return RuntimeHelper.requireNonNull(constants$317.EVP_chacha20_poly1305$MH,"EVP_chacha20_poly1305");
    }
    public static MemoryAddress EVP_chacha20_poly1305 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.EVP_chacha20_poly1305$MH, "EVP_chacha20_poly1305");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_seed_ecb$MH() {
        return RuntimeHelper.requireNonNull(constants$317.EVP_seed_ecb$MH,"EVP_seed_ecb");
    }
    public static MemoryAddress EVP_seed_ecb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.EVP_seed_ecb$MH, "EVP_seed_ecb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_seed_cbc$MH() {
        return RuntimeHelper.requireNonNull(constants$317.EVP_seed_cbc$MH,"EVP_seed_cbc");
    }
    public static MemoryAddress EVP_seed_cbc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.EVP_seed_cbc$MH, "EVP_seed_cbc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_seed_cfb128$MH() {
        return RuntimeHelper.requireNonNull(constants$317.EVP_seed_cfb128$MH,"EVP_seed_cfb128");
    }
    public static MemoryAddress EVP_seed_cfb128 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.EVP_seed_cfb128$MH, "EVP_seed_cfb128");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_seed_ofb$MH() {
        return RuntimeHelper.requireNonNull(constants$317.EVP_seed_ofb$MH,"EVP_seed_ofb");
    }
    public static MemoryAddress EVP_seed_ofb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$317.EVP_seed_ofb$MH, "EVP_seed_ofb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_add_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$318.EVP_add_cipher$MH,"EVP_add_cipher");
    }
    public static int EVP_add_cipher ( Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.EVP_add_cipher$MH, "EVP_add_cipher");
        try {
            return (int)mh$.invokeExact(cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_add_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$318.EVP_add_digest$MH,"EVP_add_digest");
    }
    public static int EVP_add_digest ( Addressable digest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.EVP_add_digest$MH, "EVP_add_digest");
        try {
            return (int)mh$.invokeExact(digest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_get_cipherbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$318.EVP_get_cipherbyname$MH,"EVP_get_cipherbyname");
    }
    public static MemoryAddress EVP_get_cipherbyname ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.EVP_get_cipherbyname$MH, "EVP_get_cipherbyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_get_digestbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$318.EVP_get_digestbyname$MH,"EVP_get_digestbyname");
    }
    public static MemoryAddress EVP_get_digestbyname ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$318.EVP_get_digestbyname$MH, "EVP_get_digestbyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_do_all$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EVP_CIPHER_do_all$MH,"EVP_CIPHER_do_all");
    }
    public static void EVP_CIPHER_do_all ( Addressable fn,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EVP_CIPHER_do_all$MH, "EVP_CIPHER_do_all");
        try {
            mh$.invokeExact(fn, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_do_all_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$319.EVP_CIPHER_do_all_sorted$MH,"EVP_CIPHER_do_all_sorted");
    }
    public static void EVP_CIPHER_do_all_sorted ( Addressable fn,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$319.EVP_CIPHER_do_all_sorted$MH, "EVP_CIPHER_do_all_sorted");
        try {
            mh$.invokeExact(fn, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_do_all$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EVP_MD_do_all$MH,"EVP_MD_do_all");
    }
    public static void EVP_MD_do_all ( Addressable fn,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EVP_MD_do_all$MH, "EVP_MD_do_all");
        try {
            mh$.invokeExact(fn, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_MD_do_all_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EVP_MD_do_all_sorted$MH,"EVP_MD_do_all_sorted");
    }
    public static void EVP_MD_do_all_sorted ( Addressable fn,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EVP_MD_do_all_sorted$MH, "EVP_MD_do_all_sorted");
        try {
            mh$.invokeExact(fn, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_decrypt_old$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EVP_PKEY_decrypt_old$MH,"EVP_PKEY_decrypt_old");
    }
    public static int EVP_PKEY_decrypt_old ( Addressable dec_key,  Addressable enc_key,  int enc_key_len,  Addressable private_key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EVP_PKEY_decrypt_old$MH, "EVP_PKEY_decrypt_old");
        try {
            return (int)mh$.invokeExact(dec_key, enc_key, enc_key_len, private_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_encrypt_old$MH() {
        return RuntimeHelper.requireNonNull(constants$320.EVP_PKEY_encrypt_old$MH,"EVP_PKEY_encrypt_old");
    }
    public static int EVP_PKEY_encrypt_old ( Addressable enc_key,  Addressable key,  int key_len,  Addressable pub_key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$320.EVP_PKEY_encrypt_old$MH, "EVP_PKEY_encrypt_old");
        try {
            return (int)mh$.invokeExact(enc_key, key, key_len, pub_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_type$MH() {
        return RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_type$MH,"EVP_PKEY_type");
    }
    public static int EVP_PKEY_type ( int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_type$MH, "EVP_PKEY_type");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_id$MH() {
        return RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_id$MH,"EVP_PKEY_id");
    }
    public static int EVP_PKEY_id ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_id$MH, "EVP_PKEY_id");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_base_id$MH() {
        return RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_base_id$MH,"EVP_PKEY_base_id");
    }
    public static int EVP_PKEY_base_id ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_base_id$MH, "EVP_PKEY_base_id");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_bits$MH,"EVP_PKEY_bits");
    }
    public static int EVP_PKEY_bits ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_bits$MH, "EVP_PKEY_bits");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_security_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_security_bits$MH,"EVP_PKEY_security_bits");
    }
    public static int EVP_PKEY_security_bits ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_security_bits$MH, "EVP_PKEY_security_bits");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_size$MH() {
        return RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_size$MH,"EVP_PKEY_size");
    }
    public static int EVP_PKEY_size ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$321.EVP_PKEY_size$MH, "EVP_PKEY_size");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set_type$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set_type$MH,"EVP_PKEY_set_type");
    }
    public static int EVP_PKEY_set_type ( Addressable pkey,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set_type$MH, "EVP_PKEY_set_type");
        try {
            return (int)mh$.invokeExact(pkey, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set_type_str$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set_type_str$MH,"EVP_PKEY_set_type_str");
    }
    public static int EVP_PKEY_set_type_str ( Addressable pkey,  Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set_type_str$MH, "EVP_PKEY_set_type_str");
        try {
            return (int)mh$.invokeExact(pkey, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set_alias_type$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set_alias_type$MH,"EVP_PKEY_set_alias_type");
    }
    public static int EVP_PKEY_set_alias_type ( Addressable pkey,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set_alias_type$MH, "EVP_PKEY_set_alias_type");
        try {
            return (int)mh$.invokeExact(pkey, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set1_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set1_engine$MH,"EVP_PKEY_set1_engine");
    }
    public static int EVP_PKEY_set1_engine ( Addressable pkey,  Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_set1_engine$MH, "EVP_PKEY_set1_engine");
        try {
            return (int)mh$.invokeExact(pkey, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_get0_engine$MH,"EVP_PKEY_get0_engine");
    }
    public static MemoryAddress EVP_PKEY_get0_engine ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_get0_engine$MH, "EVP_PKEY_get0_engine");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_assign$MH() {
        return RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_assign$MH,"EVP_PKEY_assign");
    }
    public static int EVP_PKEY_assign ( Addressable pkey,  int type,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$322.EVP_PKEY_assign$MH, "EVP_PKEY_assign");
        try {
            return (int)mh$.invokeExact(pkey, type, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0$MH,"EVP_PKEY_get0");
    }
    public static MemoryAddress EVP_PKEY_get0 ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0$MH, "EVP_PKEY_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_hmac$MH() {
        return RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_hmac$MH,"EVP_PKEY_get0_hmac");
    }
    public static MemoryAddress EVP_PKEY_get0_hmac ( Addressable pkey,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_hmac$MH, "EVP_PKEY_get0_hmac");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_poly1305$MH() {
        return RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_poly1305$MH,"EVP_PKEY_get0_poly1305");
    }
    public static MemoryAddress EVP_PKEY_get0_poly1305 ( Addressable pkey,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_poly1305$MH, "EVP_PKEY_get0_poly1305");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_siphash$MH() {
        return RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_siphash$MH,"EVP_PKEY_get0_siphash");
    }
    public static MemoryAddress EVP_PKEY_get0_siphash ( Addressable pkey,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_siphash$MH, "EVP_PKEY_get0_siphash");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set1_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_set1_RSA$MH,"EVP_PKEY_set1_RSA");
    }
    public static int EVP_PKEY_set1_RSA ( Addressable pkey,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_set1_RSA$MH, "EVP_PKEY_set1_RSA");
        try {
            return (int)mh$.invokeExact(pkey, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_RSA$MH,"EVP_PKEY_get0_RSA");
    }
    public static MemoryAddress EVP_PKEY_get0_RSA ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$323.EVP_PKEY_get0_RSA$MH, "EVP_PKEY_get0_RSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get1_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get1_RSA$MH,"EVP_PKEY_get1_RSA");
    }
    public static MemoryAddress EVP_PKEY_get1_RSA ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get1_RSA$MH, "EVP_PKEY_get1_RSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set1_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_set1_DSA$MH,"EVP_PKEY_set1_DSA");
    }
    public static int EVP_PKEY_set1_DSA ( Addressable pkey,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_set1_DSA$MH, "EVP_PKEY_set1_DSA");
        try {
            return (int)mh$.invokeExact(pkey, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get0_DSA$MH,"EVP_PKEY_get0_DSA");
    }
    public static MemoryAddress EVP_PKEY_get0_DSA ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get0_DSA$MH, "EVP_PKEY_get0_DSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get1_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get1_DSA$MH,"EVP_PKEY_get1_DSA");
    }
    public static MemoryAddress EVP_PKEY_get1_DSA ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get1_DSA$MH, "EVP_PKEY_get1_DSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set1_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_set1_DH$MH,"EVP_PKEY_set1_DH");
    }
    public static int EVP_PKEY_set1_DH ( Addressable pkey,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_set1_DH$MH, "EVP_PKEY_set1_DH");
        try {
            return (int)mh$.invokeExact(pkey, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get0_DH$MH,"EVP_PKEY_get0_DH");
    }
    public static MemoryAddress EVP_PKEY_get0_DH ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$324.EVP_PKEY_get0_DH$MH, "EVP_PKEY_get0_DH");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get1_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_get1_DH$MH,"EVP_PKEY_get1_DH");
    }
    public static MemoryAddress EVP_PKEY_get1_DH ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_get1_DH$MH, "EVP_PKEY_get1_DH");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set1_EC_KEY$MH() {
        return RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_set1_EC_KEY$MH,"EVP_PKEY_set1_EC_KEY");
    }
    public static int EVP_PKEY_set1_EC_KEY ( Addressable pkey,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_set1_EC_KEY$MH, "EVP_PKEY_set1_EC_KEY");
        try {
            return (int)mh$.invokeExact(pkey, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_EC_KEY$MH() {
        return RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_get0_EC_KEY$MH,"EVP_PKEY_get0_EC_KEY");
    }
    public static MemoryAddress EVP_PKEY_get0_EC_KEY ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_get0_EC_KEY$MH, "EVP_PKEY_get0_EC_KEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get1_EC_KEY$MH() {
        return RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_get1_EC_KEY$MH,"EVP_PKEY_get1_EC_KEY");
    }
    public static MemoryAddress EVP_PKEY_get1_EC_KEY ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_get1_EC_KEY$MH, "EVP_PKEY_get1_EC_KEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_new$MH,"EVP_PKEY_new");
    }
    public static MemoryAddress EVP_PKEY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_new$MH, "EVP_PKEY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_up_ref$MH,"EVP_PKEY_up_ref");
    }
    public static int EVP_PKEY_up_ref ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$325.EVP_PKEY_up_ref$MH, "EVP_PKEY_up_ref");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$326.EVP_PKEY_free$MH,"EVP_PKEY_free");
    }
    public static void EVP_PKEY_free ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.EVP_PKEY_free$MH, "EVP_PKEY_free");
        try {
            mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$326.d2i_PublicKey$MH,"d2i_PublicKey");
    }
    public static MemoryAddress d2i_PublicKey ( int type,  Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.d2i_PublicKey$MH, "d2i_PublicKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$326.i2d_PublicKey$MH,"i2d_PublicKey");
    }
    public static int i2d_PublicKey ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.i2d_PublicKey$MH, "i2d_PublicKey");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$326.d2i_PrivateKey$MH,"d2i_PrivateKey");
    }
    public static MemoryAddress d2i_PrivateKey ( int type,  Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.d2i_PrivateKey$MH, "d2i_PrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_AutoPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$326.d2i_AutoPrivateKey$MH,"d2i_AutoPrivateKey");
    }
    public static MemoryAddress d2i_AutoPrivateKey ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.d2i_AutoPrivateKey$MH, "d2i_AutoPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$326.i2d_PrivateKey$MH,"i2d_PrivateKey");
    }
    public static int i2d_PrivateKey ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$326.i2d_PrivateKey$MH, "i2d_PrivateKey");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_copy_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_copy_parameters$MH,"EVP_PKEY_copy_parameters");
    }
    public static int EVP_PKEY_copy_parameters ( Addressable to,  Addressable from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_copy_parameters$MH, "EVP_PKEY_copy_parameters");
        try {
            return (int)mh$.invokeExact(to, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_missing_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_missing_parameters$MH,"EVP_PKEY_missing_parameters");
    }
    public static int EVP_PKEY_missing_parameters ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_missing_parameters$MH, "EVP_PKEY_missing_parameters");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_save_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_save_parameters$MH,"EVP_PKEY_save_parameters");
    }
    public static int EVP_PKEY_save_parameters ( Addressable pkey,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_save_parameters$MH, "EVP_PKEY_save_parameters");
        try {
            return (int)mh$.invokeExact(pkey, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_cmp_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_cmp_parameters$MH,"EVP_PKEY_cmp_parameters");
    }
    public static int EVP_PKEY_cmp_parameters ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_cmp_parameters$MH, "EVP_PKEY_cmp_parameters");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_cmp$MH,"EVP_PKEY_cmp");
    }
    public static int EVP_PKEY_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_cmp$MH, "EVP_PKEY_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_print_public$MH() {
        return RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_print_public$MH,"EVP_PKEY_print_public");
    }
    public static int EVP_PKEY_print_public ( Addressable out,  Addressable pkey,  int indent,  Addressable pctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$327.EVP_PKEY_print_public$MH, "EVP_PKEY_print_public");
        try {
            return (int)mh$.invokeExact(out, pkey, indent, pctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_print_private$MH() {
        return RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_print_private$MH,"EVP_PKEY_print_private");
    }
    public static int EVP_PKEY_print_private ( Addressable out,  Addressable pkey,  int indent,  Addressable pctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_print_private$MH, "EVP_PKEY_print_private");
        try {
            return (int)mh$.invokeExact(out, pkey, indent, pctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_print_params$MH() {
        return RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_print_params$MH,"EVP_PKEY_print_params");
    }
    public static int EVP_PKEY_print_params ( Addressable out,  Addressable pkey,  int indent,  Addressable pctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_print_params$MH, "EVP_PKEY_print_params");
        try {
            return (int)mh$.invokeExact(out, pkey, indent, pctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_default_digest_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_get_default_digest_nid$MH,"EVP_PKEY_get_default_digest_nid");
    }
    public static int EVP_PKEY_get_default_digest_nid ( Addressable pkey,  Addressable pnid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_get_default_digest_nid$MH, "EVP_PKEY_get_default_digest_nid");
        try {
            return (int)mh$.invokeExact(pkey, pnid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_set1_tls_encodedpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_set1_tls_encodedpoint$MH,"EVP_PKEY_set1_tls_encodedpoint");
    }
    public static int EVP_PKEY_set1_tls_encodedpoint ( Addressable pkey,  Addressable pt,  long ptlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_set1_tls_encodedpoint$MH, "EVP_PKEY_set1_tls_encodedpoint");
        try {
            return (int)mh$.invokeExact(pkey, pt, ptlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get1_tls_encodedpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_get1_tls_encodedpoint$MH,"EVP_PKEY_get1_tls_encodedpoint");
    }
    public static long EVP_PKEY_get1_tls_encodedpoint ( Addressable pkey,  Addressable ppt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.EVP_PKEY_get1_tls_encodedpoint$MH, "EVP_PKEY_get1_tls_encodedpoint");
        try {
            return (long)mh$.invokeExact(pkey, ppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_type$MH() {
        return RuntimeHelper.requireNonNull(constants$328.EVP_CIPHER_type$MH,"EVP_CIPHER_type");
    }
    public static int EVP_CIPHER_type ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$328.EVP_CIPHER_type$MH, "EVP_CIPHER_type");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_param_to_asn1$MH() {
        return RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_param_to_asn1$MH,"EVP_CIPHER_param_to_asn1");
    }
    public static int EVP_CIPHER_param_to_asn1 ( Addressable c,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_param_to_asn1$MH, "EVP_CIPHER_param_to_asn1");
        try {
            return (int)mh$.invokeExact(c, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_asn1_to_param$MH() {
        return RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_asn1_to_param$MH,"EVP_CIPHER_asn1_to_param");
    }
    public static int EVP_CIPHER_asn1_to_param ( Addressable c,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_asn1_to_param$MH, "EVP_CIPHER_asn1_to_param");
        try {
            return (int)mh$.invokeExact(c, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_set_asn1_iv$MH() {
        return RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_set_asn1_iv$MH,"EVP_CIPHER_set_asn1_iv");
    }
    public static int EVP_CIPHER_set_asn1_iv ( Addressable c,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_set_asn1_iv$MH, "EVP_CIPHER_set_asn1_iv");
        try {
            return (int)mh$.invokeExact(c, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_CIPHER_get_asn1_iv$MH() {
        return RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_get_asn1_iv$MH,"EVP_CIPHER_get_asn1_iv");
    }
    public static int EVP_CIPHER_get_asn1_iv ( Addressable c,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.EVP_CIPHER_get_asn1_iv$MH, "EVP_CIPHER_get_asn1_iv");
        try {
            return (int)mh$.invokeExact(c, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_PBE_keyivgen$MH() {
        return RuntimeHelper.requireNonNull(constants$329.PKCS5_PBE_keyivgen$MH,"PKCS5_PBE_keyivgen");
    }
    public static int PKCS5_PBE_keyivgen ( Addressable ctx,  Addressable pass,  int passlen,  Addressable param,  Addressable cipher,  Addressable md,  int en_de) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.PKCS5_PBE_keyivgen$MH, "PKCS5_PBE_keyivgen");
        try {
            return (int)mh$.invokeExact(ctx, pass, passlen, param, cipher, md, en_de);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_PBKDF2_HMAC_SHA1$MH() {
        return RuntimeHelper.requireNonNull(constants$329.PKCS5_PBKDF2_HMAC_SHA1$MH,"PKCS5_PBKDF2_HMAC_SHA1");
    }
    public static int PKCS5_PBKDF2_HMAC_SHA1 ( Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int iter,  int keylen,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$329.PKCS5_PBKDF2_HMAC_SHA1$MH, "PKCS5_PBKDF2_HMAC_SHA1");
        try {
            return (int)mh$.invokeExact(pass, passlen, salt, saltlen, iter, keylen, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_PBKDF2_HMAC$MH() {
        return RuntimeHelper.requireNonNull(constants$330.PKCS5_PBKDF2_HMAC$MH,"PKCS5_PBKDF2_HMAC");
    }
    public static int PKCS5_PBKDF2_HMAC ( Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int iter,  Addressable digest,  int keylen,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.PKCS5_PBKDF2_HMAC$MH, "PKCS5_PBKDF2_HMAC");
        try {
            return (int)mh$.invokeExact(pass, passlen, salt, saltlen, iter, digest, keylen, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_v2_PBE_keyivgen$MH() {
        return RuntimeHelper.requireNonNull(constants$330.PKCS5_v2_PBE_keyivgen$MH,"PKCS5_v2_PBE_keyivgen");
    }
    public static int PKCS5_v2_PBE_keyivgen ( Addressable ctx,  Addressable pass,  int passlen,  Addressable param,  Addressable cipher,  Addressable md,  int en_de) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.PKCS5_v2_PBE_keyivgen$MH, "PKCS5_v2_PBE_keyivgen");
        try {
            return (int)mh$.invokeExact(ctx, pass, passlen, param, cipher, md, en_de);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_scrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$330.EVP_PBE_scrypt$MH,"EVP_PBE_scrypt");
    }
    public static int EVP_PBE_scrypt ( Addressable pass,  long passlen,  Addressable salt,  long saltlen,  long N,  long r,  long p,  long maxmem,  Addressable key,  long keylen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.EVP_PBE_scrypt$MH, "EVP_PBE_scrypt");
        try {
            return (int)mh$.invokeExact(pass, passlen, salt, saltlen, N, r, p, maxmem, key, keylen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_v2_scrypt_keyivgen$MH() {
        return RuntimeHelper.requireNonNull(constants$330.PKCS5_v2_scrypt_keyivgen$MH,"PKCS5_v2_scrypt_keyivgen");
    }
    public static int PKCS5_v2_scrypt_keyivgen ( Addressable ctx,  Addressable pass,  int passlen,  Addressable param,  Addressable c,  Addressable md,  int en_de) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.PKCS5_v2_scrypt_keyivgen$MH, "PKCS5_v2_scrypt_keyivgen");
        try {
            return (int)mh$.invokeExact(ctx, pass, passlen, param, c, md, en_de);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_PBE_add$MH() {
        return RuntimeHelper.requireNonNull(constants$330.PKCS5_PBE_add$MH,"PKCS5_PBE_add");
    }
    public static void PKCS5_PBE_add () {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.PKCS5_PBE_add$MH, "PKCS5_PBE_add");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_CipherInit$MH() {
        return RuntimeHelper.requireNonNull(constants$330.EVP_PBE_CipherInit$MH,"EVP_PBE_CipherInit");
    }
    public static int EVP_PBE_CipherInit ( Addressable pbe_obj,  Addressable pass,  int passlen,  Addressable param,  Addressable ctx,  int en_de) {
        var mh$ = RuntimeHelper.requireNonNull(constants$330.EVP_PBE_CipherInit$MH, "EVP_PBE_CipherInit");
        try {
            return (int)mh$.invokeExact(pbe_obj, pass, passlen, param, ctx, en_de);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_alg_add_type$MH() {
        return RuntimeHelper.requireNonNull(constants$331.EVP_PBE_alg_add_type$MH,"EVP_PBE_alg_add_type");
    }
    public static int EVP_PBE_alg_add_type ( int pbe_type,  int pbe_nid,  int cipher_nid,  int md_nid,  Addressable keygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.EVP_PBE_alg_add_type$MH, "EVP_PBE_alg_add_type");
        try {
            return (int)mh$.invokeExact(pbe_type, pbe_nid, cipher_nid, md_nid, keygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_alg_add$MH() {
        return RuntimeHelper.requireNonNull(constants$331.EVP_PBE_alg_add$MH,"EVP_PBE_alg_add");
    }
    public static int EVP_PBE_alg_add ( int nid,  Addressable cipher,  Addressable md,  Addressable keygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.EVP_PBE_alg_add$MH, "EVP_PBE_alg_add");
        try {
            return (int)mh$.invokeExact(nid, cipher, md, keygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$331.EVP_PBE_find$MH,"EVP_PBE_find");
    }
    public static int EVP_PBE_find ( int type,  int pbe_nid,  Addressable pcnid,  Addressable pmnid,  Addressable pkeygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.EVP_PBE_find$MH, "EVP_PBE_find");
        try {
            return (int)mh$.invokeExact(type, pbe_nid, pcnid, pmnid, pkeygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$331.EVP_PBE_cleanup$MH,"EVP_PBE_cleanup");
    }
    public static void EVP_PBE_cleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.EVP_PBE_cleanup$MH, "EVP_PBE_cleanup");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PBE_get$MH() {
        return RuntimeHelper.requireNonNull(constants$331.EVP_PBE_get$MH,"EVP_PBE_get");
    }
    public static int EVP_PBE_get ( Addressable ptype,  Addressable ppbe_nid,  long num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.EVP_PBE_get$MH, "EVP_PBE_get");
        try {
            return (int)mh$.invokeExact(ptype, ppbe_nid, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_get_count$MH() {
        return RuntimeHelper.requireNonNull(constants$331.EVP_PKEY_asn1_get_count$MH,"EVP_PKEY_asn1_get_count");
    }
    public static int EVP_PKEY_asn1_get_count () {
        var mh$ = RuntimeHelper.requireNonNull(constants$331.EVP_PKEY_asn1_get_count$MH, "EVP_PKEY_asn1_get_count");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_get0$MH,"EVP_PKEY_asn1_get0");
    }
    public static MemoryAddress EVP_PKEY_asn1_get0 ( int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_get0$MH, "EVP_PKEY_asn1_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_find$MH() {
        return RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_find$MH,"EVP_PKEY_asn1_find");
    }
    public static MemoryAddress EVP_PKEY_asn1_find ( Addressable pe,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_find$MH, "EVP_PKEY_asn1_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pe, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_find_str$MH() {
        return RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_find_str$MH,"EVP_PKEY_asn1_find_str");
    }
    public static MemoryAddress EVP_PKEY_asn1_find_str ( Addressable pe,  Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_find_str$MH, "EVP_PKEY_asn1_find_str");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pe, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_add0$MH() {
        return RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_add0$MH,"EVP_PKEY_asn1_add0");
    }
    public static int EVP_PKEY_asn1_add0 ( Addressable ameth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_add0$MH, "EVP_PKEY_asn1_add0");
        try {
            return (int)mh$.invokeExact(ameth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_add_alias$MH() {
        return RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_add_alias$MH,"EVP_PKEY_asn1_add_alias");
    }
    public static int EVP_PKEY_asn1_add_alias ( int to,  int from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_add_alias$MH, "EVP_PKEY_asn1_add_alias");
        try {
            return (int)mh$.invokeExact(to, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_get0_info$MH() {
        return RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_get0_info$MH,"EVP_PKEY_asn1_get0_info");
    }
    public static int EVP_PKEY_asn1_get0_info ( Addressable ppkey_id,  Addressable pkey_base_id,  Addressable ppkey_flags,  Addressable pinfo,  Addressable ppem_str,  Addressable ameth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$332.EVP_PKEY_asn1_get0_info$MH, "EVP_PKEY_asn1_get0_info");
        try {
            return (int)mh$.invokeExact(ppkey_id, pkey_base_id, ppkey_flags, pinfo, ppem_str, ameth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get0_asn1$MH() {
        return RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_get0_asn1$MH,"EVP_PKEY_get0_asn1");
    }
    public static MemoryAddress EVP_PKEY_get0_asn1 ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_get0_asn1$MH, "EVP_PKEY_get0_asn1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_new$MH() {
        return RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_asn1_new$MH,"EVP_PKEY_asn1_new");
    }
    public static MemoryAddress EVP_PKEY_asn1_new ( int id,  int flags,  Addressable pem_str,  Addressable info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_asn1_new$MH, "EVP_PKEY_asn1_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(id, flags, pem_str, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_asn1_copy$MH,"EVP_PKEY_asn1_copy");
    }
    public static void EVP_PKEY_asn1_copy ( Addressable dst,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_asn1_copy$MH, "EVP_PKEY_asn1_copy");
        try {
            mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_free$MH() {
        return RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_asn1_free$MH,"EVP_PKEY_asn1_free");
    }
    public static void EVP_PKEY_asn1_free ( Addressable ameth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$333.EVP_PKEY_asn1_free$MH, "EVP_PKEY_asn1_free");
        try {
            mh$.invokeExact(ameth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_public$MH() {
        return RuntimeHelper.requireNonNull(constants$335.EVP_PKEY_asn1_set_public$MH,"EVP_PKEY_asn1_set_public");
    }
    public static void EVP_PKEY_asn1_set_public ( Addressable ameth,  Addressable pub_decode,  Addressable pub_encode,  Addressable pub_cmp,  Addressable pub_print,  Addressable pkey_size,  Addressable pkey_bits) {
        var mh$ = RuntimeHelper.requireNonNull(constants$335.EVP_PKEY_asn1_set_public$MH, "EVP_PKEY_asn1_set_public");
        try {
            mh$.invokeExact(ameth, pub_decode, pub_encode, pub_cmp, pub_print, pkey_size, pkey_bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_private$MH() {
        return RuntimeHelper.requireNonNull(constants$336.EVP_PKEY_asn1_set_private$MH,"EVP_PKEY_asn1_set_private");
    }
    public static void EVP_PKEY_asn1_set_private ( Addressable ameth,  Addressable priv_decode,  Addressable priv_encode,  Addressable priv_print) {
        var mh$ = RuntimeHelper.requireNonNull(constants$336.EVP_PKEY_asn1_set_private$MH, "EVP_PKEY_asn1_set_private");
        try {
            mh$.invokeExact(ameth, priv_decode, priv_encode, priv_print);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_param$MH() {
        return RuntimeHelper.requireNonNull(constants$339.EVP_PKEY_asn1_set_param$MH,"EVP_PKEY_asn1_set_param");
    }
    public static void EVP_PKEY_asn1_set_param ( Addressable ameth,  Addressable param_decode,  Addressable param_encode,  Addressable param_missing,  Addressable param_copy,  Addressable param_cmp,  Addressable param_print) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.EVP_PKEY_asn1_set_param$MH, "EVP_PKEY_asn1_set_param");
        try {
            mh$.invokeExact(ameth, param_decode, param_encode, param_missing, param_copy, param_cmp, param_print);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_free$MH() {
        return RuntimeHelper.requireNonNull(constants$339.EVP_PKEY_asn1_set_free$MH,"EVP_PKEY_asn1_set_free");
    }
    public static void EVP_PKEY_asn1_set_free ( Addressable ameth,  Addressable pkey_free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$339.EVP_PKEY_asn1_set_free$MH, "EVP_PKEY_asn1_set_free");
        try {
            mh$.invokeExact(ameth, pkey_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$340.EVP_PKEY_asn1_set_ctrl$MH,"EVP_PKEY_asn1_set_ctrl");
    }
    public static void EVP_PKEY_asn1_set_ctrl ( Addressable ameth,  Addressable pkey_ctrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.EVP_PKEY_asn1_set_ctrl$MH, "EVP_PKEY_asn1_set_ctrl");
        try {
            mh$.invokeExact(ameth, pkey_ctrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$340.EVP_PKEY_asn1_set_item$MH,"EVP_PKEY_asn1_set_item");
    }
    public static void EVP_PKEY_asn1_set_item ( Addressable ameth,  Addressable item_verify,  Addressable item_sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$340.EVP_PKEY_asn1_set_item$MH, "EVP_PKEY_asn1_set_item");
        try {
            mh$.invokeExact(ameth, item_verify, item_sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_siginf$MH() {
        return RuntimeHelper.requireNonNull(constants$341.EVP_PKEY_asn1_set_siginf$MH,"EVP_PKEY_asn1_set_siginf");
    }
    public static void EVP_PKEY_asn1_set_siginf ( Addressable ameth,  Addressable siginf_set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.EVP_PKEY_asn1_set_siginf$MH, "EVP_PKEY_asn1_set_siginf");
        try {
            mh$.invokeExact(ameth, siginf_set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_check$MH() {
        return RuntimeHelper.requireNonNull(constants$341.EVP_PKEY_asn1_set_check$MH,"EVP_PKEY_asn1_set_check");
    }
    public static void EVP_PKEY_asn1_set_check ( Addressable ameth,  Addressable pkey_check) {
        var mh$ = RuntimeHelper.requireNonNull(constants$341.EVP_PKEY_asn1_set_check$MH, "EVP_PKEY_asn1_set_check");
        try {
            mh$.invokeExact(ameth, pkey_check);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_public_check$MH() {
        return RuntimeHelper.requireNonNull(constants$342.EVP_PKEY_asn1_set_public_check$MH,"EVP_PKEY_asn1_set_public_check");
    }
    public static void EVP_PKEY_asn1_set_public_check ( Addressable ameth,  Addressable pkey_pub_check) {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.EVP_PKEY_asn1_set_public_check$MH, "EVP_PKEY_asn1_set_public_check");
        try {
            mh$.invokeExact(ameth, pkey_pub_check);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_param_check$MH() {
        return RuntimeHelper.requireNonNull(constants$342.EVP_PKEY_asn1_set_param_check$MH,"EVP_PKEY_asn1_set_param_check");
    }
    public static void EVP_PKEY_asn1_set_param_check ( Addressable ameth,  Addressable pkey_param_check) {
        var mh$ = RuntimeHelper.requireNonNull(constants$342.EVP_PKEY_asn1_set_param_check$MH, "EVP_PKEY_asn1_set_param_check");
        try {
            mh$.invokeExact(ameth, pkey_param_check);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_set_priv_key$MH() {
        return RuntimeHelper.requireNonNull(constants$343.EVP_PKEY_asn1_set_set_priv_key$MH,"EVP_PKEY_asn1_set_set_priv_key");
    }
    public static void EVP_PKEY_asn1_set_set_priv_key ( Addressable ameth,  Addressable set_priv_key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.EVP_PKEY_asn1_set_set_priv_key$MH, "EVP_PKEY_asn1_set_set_priv_key");
        try {
            mh$.invokeExact(ameth, set_priv_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_set_pub_key$MH() {
        return RuntimeHelper.requireNonNull(constants$343.EVP_PKEY_asn1_set_set_pub_key$MH,"EVP_PKEY_asn1_set_set_pub_key");
    }
    public static void EVP_PKEY_asn1_set_set_pub_key ( Addressable ameth,  Addressable set_pub_key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$343.EVP_PKEY_asn1_set_set_pub_key$MH, "EVP_PKEY_asn1_set_set_pub_key");
        try {
            mh$.invokeExact(ameth, set_pub_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_get_priv_key$MH() {
        return RuntimeHelper.requireNonNull(constants$344.EVP_PKEY_asn1_set_get_priv_key$MH,"EVP_PKEY_asn1_set_get_priv_key");
    }
    public static void EVP_PKEY_asn1_set_get_priv_key ( Addressable ameth,  Addressable get_priv_key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.EVP_PKEY_asn1_set_get_priv_key$MH, "EVP_PKEY_asn1_set_get_priv_key");
        try {
            mh$.invokeExact(ameth, get_priv_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_get_pub_key$MH() {
        return RuntimeHelper.requireNonNull(constants$344.EVP_PKEY_asn1_set_get_pub_key$MH,"EVP_PKEY_asn1_set_get_pub_key");
    }
    public static void EVP_PKEY_asn1_set_get_pub_key ( Addressable ameth,  Addressable get_pub_key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$344.EVP_PKEY_asn1_set_get_pub_key$MH, "EVP_PKEY_asn1_set_get_pub_key");
        try {
            mh$.invokeExact(ameth, get_pub_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_asn1_set_security_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_asn1_set_security_bits$MH,"EVP_PKEY_asn1_set_security_bits");
    }
    public static void EVP_PKEY_asn1_set_security_bits ( Addressable ameth,  Addressable pkey_security_bits) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_asn1_set_security_bits$MH, "EVP_PKEY_asn1_set_security_bits");
        try {
            mh$.invokeExact(ameth, pkey_security_bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_find$MH() {
        return RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_meth_find$MH,"EVP_PKEY_meth_find");
    }
    public static MemoryAddress EVP_PKEY_meth_find ( int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_meth_find$MH, "EVP_PKEY_meth_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_new$MH() {
        return RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_meth_new$MH,"EVP_PKEY_meth_new");
    }
    public static MemoryAddress EVP_PKEY_meth_new ( int id,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_meth_new$MH, "EVP_PKEY_meth_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(id, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get0_info$MH() {
        return RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_meth_get0_info$MH,"EVP_PKEY_meth_get0_info");
    }
    public static void EVP_PKEY_meth_get0_info ( Addressable ppkey_id,  Addressable pflags,  Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$345.EVP_PKEY_meth_get0_info$MH, "EVP_PKEY_meth_get0_info");
        try {
            mh$.invokeExact(ppkey_id, pflags, meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_copy$MH,"EVP_PKEY_meth_copy");
    }
    public static void EVP_PKEY_meth_copy ( Addressable dst,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_copy$MH, "EVP_PKEY_meth_copy");
        try {
            mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_free$MH() {
        return RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_free$MH,"EVP_PKEY_meth_free");
    }
    public static void EVP_PKEY_meth_free ( Addressable pmeth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_free$MH, "EVP_PKEY_meth_free");
        try {
            mh$.invokeExact(pmeth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_add0$MH() {
        return RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_add0$MH,"EVP_PKEY_meth_add0");
    }
    public static int EVP_PKEY_meth_add0 ( Addressable pmeth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_add0$MH, "EVP_PKEY_meth_add0");
        try {
            return (int)mh$.invokeExact(pmeth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_remove$MH,"EVP_PKEY_meth_remove");
    }
    public static int EVP_PKEY_meth_remove ( Addressable pmeth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_remove$MH, "EVP_PKEY_meth_remove");
        try {
            return (int)mh$.invokeExact(pmeth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_count$MH() {
        return RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_get_count$MH,"EVP_PKEY_meth_get_count");
    }
    public static long EVP_PKEY_meth_get_count () {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_get_count$MH, "EVP_PKEY_meth_get_count");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_get0$MH,"EVP_PKEY_meth_get0");
    }
    public static MemoryAddress EVP_PKEY_meth_get0 ( long idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$346.EVP_PKEY_meth_get0$MH, "EVP_PKEY_meth_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_new$MH,"EVP_PKEY_CTX_new");
    }
    public static MemoryAddress EVP_PKEY_CTX_new ( Addressable pkey,  Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_new$MH, "EVP_PKEY_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_new_id$MH() {
        return RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_new_id$MH,"EVP_PKEY_CTX_new_id");
    }
    public static MemoryAddress EVP_PKEY_CTX_new_id ( int id,  Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_new_id$MH, "EVP_PKEY_CTX_new_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(id, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_dup$MH,"EVP_PKEY_CTX_dup");
    }
    public static MemoryAddress EVP_PKEY_CTX_dup ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_dup$MH, "EVP_PKEY_CTX_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_free$MH,"EVP_PKEY_CTX_free");
    }
    public static void EVP_PKEY_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_free$MH, "EVP_PKEY_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_ctrl$MH,"EVP_PKEY_CTX_ctrl");
    }
    public static int EVP_PKEY_CTX_ctrl ( Addressable ctx,  int keytype,  int optype,  int cmd,  int p1,  Addressable p2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_ctrl$MH, "EVP_PKEY_CTX_ctrl");
        try {
            return (int)mh$.invokeExact(ctx, keytype, optype, cmd, p1, p2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_ctrl_str$MH() {
        return RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_ctrl_str$MH,"EVP_PKEY_CTX_ctrl_str");
    }
    public static int EVP_PKEY_CTX_ctrl_str ( Addressable ctx,  Addressable type,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$347.EVP_PKEY_CTX_ctrl_str$MH, "EVP_PKEY_CTX_ctrl_str");
        try {
            return (int)mh$.invokeExact(ctx, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_ctrl_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_ctrl_uint64$MH,"EVP_PKEY_CTX_ctrl_uint64");
    }
    public static int EVP_PKEY_CTX_ctrl_uint64 ( Addressable ctx,  int keytype,  int optype,  int cmd,  long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_ctrl_uint64$MH, "EVP_PKEY_CTX_ctrl_uint64");
        try {
            return (int)mh$.invokeExact(ctx, keytype, optype, cmd, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_str2ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_str2ctrl$MH,"EVP_PKEY_CTX_str2ctrl");
    }
    public static int EVP_PKEY_CTX_str2ctrl ( Addressable ctx,  int cmd,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_str2ctrl$MH, "EVP_PKEY_CTX_str2ctrl");
        try {
            return (int)mh$.invokeExact(ctx, cmd, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_hex2ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_hex2ctrl$MH,"EVP_PKEY_CTX_hex2ctrl");
    }
    public static int EVP_PKEY_CTX_hex2ctrl ( Addressable ctx,  int cmd,  Addressable hex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_hex2ctrl$MH, "EVP_PKEY_CTX_hex2ctrl");
        try {
            return (int)mh$.invokeExact(ctx, cmd, hex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_md$MH() {
        return RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_md$MH,"EVP_PKEY_CTX_md");
    }
    public static int EVP_PKEY_CTX_md ( Addressable ctx,  int optype,  int cmd,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_md$MH, "EVP_PKEY_CTX_md");
        try {
            return (int)mh$.invokeExact(ctx, optype, cmd, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get_operation$MH() {
        return RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_get_operation$MH,"EVP_PKEY_CTX_get_operation");
    }
    public static int EVP_PKEY_CTX_get_operation ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_get_operation$MH, "EVP_PKEY_CTX_get_operation");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_set0_keygen_info$MH() {
        return RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_set0_keygen_info$MH,"EVP_PKEY_CTX_set0_keygen_info");
    }
    public static void EVP_PKEY_CTX_set0_keygen_info ( Addressable ctx,  Addressable dat,  int datlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$348.EVP_PKEY_CTX_set0_keygen_info$MH, "EVP_PKEY_CTX_set0_keygen_info");
        try {
            mh$.invokeExact(ctx, dat, datlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_new_mac_key$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_mac_key$MH,"EVP_PKEY_new_mac_key");
    }
    public static MemoryAddress EVP_PKEY_new_mac_key ( int type,  Addressable e,  Addressable key,  int keylen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_mac_key$MH, "EVP_PKEY_new_mac_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, e, key, keylen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_new_raw_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_raw_private_key$MH,"EVP_PKEY_new_raw_private_key");
    }
    public static MemoryAddress EVP_PKEY_new_raw_private_key ( int type,  Addressable e,  Addressable priv,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_raw_private_key$MH, "EVP_PKEY_new_raw_private_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, e, priv, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_new_raw_public_key$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_raw_public_key$MH,"EVP_PKEY_new_raw_public_key");
    }
    public static MemoryAddress EVP_PKEY_new_raw_public_key ( int type,  Addressable e,  Addressable pub,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_raw_public_key$MH, "EVP_PKEY_new_raw_public_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, e, pub, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_raw_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_get_raw_private_key$MH,"EVP_PKEY_get_raw_private_key");
    }
    public static int EVP_PKEY_get_raw_private_key ( Addressable pkey,  Addressable priv,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_get_raw_private_key$MH, "EVP_PKEY_get_raw_private_key");
        try {
            return (int)mh$.invokeExact(pkey, priv, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_raw_public_key$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_get_raw_public_key$MH,"EVP_PKEY_get_raw_public_key");
    }
    public static int EVP_PKEY_get_raw_public_key ( Addressable pkey,  Addressable pub,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_get_raw_public_key$MH, "EVP_PKEY_get_raw_public_key");
        try {
            return (int)mh$.invokeExact(pkey, pub, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_new_CMAC_key$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_CMAC_key$MH,"EVP_PKEY_new_CMAC_key");
    }
    public static MemoryAddress EVP_PKEY_new_CMAC_key ( Addressable e,  Addressable priv,  long len,  Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$349.EVP_PKEY_new_CMAC_key$MH, "EVP_PKEY_new_CMAC_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, priv, len, cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_set_data$MH,"EVP_PKEY_CTX_set_data");
    }
    public static void EVP_PKEY_CTX_set_data ( Addressable ctx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_set_data$MH, "EVP_PKEY_CTX_set_data");
        try {
            mh$.invokeExact(ctx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get_data$MH,"EVP_PKEY_CTX_get_data");
    }
    public static MemoryAddress EVP_PKEY_CTX_get_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get_data$MH, "EVP_PKEY_CTX_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get0_pkey$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get0_pkey$MH,"EVP_PKEY_CTX_get0_pkey");
    }
    public static MemoryAddress EVP_PKEY_CTX_get0_pkey ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get0_pkey$MH, "EVP_PKEY_CTX_get0_pkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get0_peerkey$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get0_peerkey$MH,"EVP_PKEY_CTX_get0_peerkey");
    }
    public static MemoryAddress EVP_PKEY_CTX_get0_peerkey ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get0_peerkey$MH, "EVP_PKEY_CTX_get0_peerkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_set_app_data$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_set_app_data$MH,"EVP_PKEY_CTX_set_app_data");
    }
    public static void EVP_PKEY_CTX_set_app_data ( Addressable ctx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_set_app_data$MH, "EVP_PKEY_CTX_set_app_data");
        try {
            mh$.invokeExact(ctx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get_app_data$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get_app_data$MH,"EVP_PKEY_CTX_get_app_data");
    }
    public static MemoryAddress EVP_PKEY_CTX_get_app_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$350.EVP_PKEY_CTX_get_app_data$MH, "EVP_PKEY_CTX_get_app_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_sign_init$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_sign_init$MH,"EVP_PKEY_sign_init");
    }
    public static int EVP_PKEY_sign_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_sign_init$MH, "EVP_PKEY_sign_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_sign$MH,"EVP_PKEY_sign");
    }
    public static int EVP_PKEY_sign ( Addressable ctx,  Addressable sig,  Addressable siglen,  Addressable tbs,  long tbslen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_sign$MH, "EVP_PKEY_sign");
        try {
            return (int)mh$.invokeExact(ctx, sig, siglen, tbs, tbslen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_verify_init$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify_init$MH,"EVP_PKEY_verify_init");
    }
    public static int EVP_PKEY_verify_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify_init$MH, "EVP_PKEY_verify_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify$MH,"EVP_PKEY_verify");
    }
    public static int EVP_PKEY_verify ( Addressable ctx,  Addressable sig,  long siglen,  Addressable tbs,  long tbslen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify$MH, "EVP_PKEY_verify");
        try {
            return (int)mh$.invokeExact(ctx, sig, siglen, tbs, tbslen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_verify_recover_init$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify_recover_init$MH,"EVP_PKEY_verify_recover_init");
    }
    public static int EVP_PKEY_verify_recover_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify_recover_init$MH, "EVP_PKEY_verify_recover_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_verify_recover$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify_recover$MH,"EVP_PKEY_verify_recover");
    }
    public static int EVP_PKEY_verify_recover ( Addressable ctx,  Addressable rout,  Addressable routlen,  Addressable sig,  long siglen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$351.EVP_PKEY_verify_recover$MH, "EVP_PKEY_verify_recover");
        try {
            return (int)mh$.invokeExact(ctx, rout, routlen, sig, siglen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_encrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_encrypt_init$MH,"EVP_PKEY_encrypt_init");
    }
    public static int EVP_PKEY_encrypt_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_encrypt_init$MH, "EVP_PKEY_encrypt_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_encrypt$MH,"EVP_PKEY_encrypt");
    }
    public static int EVP_PKEY_encrypt ( Addressable ctx,  Addressable out,  Addressable outlen,  Addressable in,  long inlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_encrypt$MH, "EVP_PKEY_encrypt");
        try {
            return (int)mh$.invokeExact(ctx, out, outlen, in, inlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_decrypt_init$MH() {
        return RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_decrypt_init$MH,"EVP_PKEY_decrypt_init");
    }
    public static int EVP_PKEY_decrypt_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_decrypt_init$MH, "EVP_PKEY_decrypt_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_decrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_decrypt$MH,"EVP_PKEY_decrypt");
    }
    public static int EVP_PKEY_decrypt ( Addressable ctx,  Addressable out,  Addressable outlen,  Addressable in,  long inlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_decrypt$MH, "EVP_PKEY_decrypt");
        try {
            return (int)mh$.invokeExact(ctx, out, outlen, in, inlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_derive_init$MH() {
        return RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_derive_init$MH,"EVP_PKEY_derive_init");
    }
    public static int EVP_PKEY_derive_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_derive_init$MH, "EVP_PKEY_derive_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_derive_set_peer$MH() {
        return RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_derive_set_peer$MH,"EVP_PKEY_derive_set_peer");
    }
    public static int EVP_PKEY_derive_set_peer ( Addressable ctx,  Addressable peer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$352.EVP_PKEY_derive_set_peer$MH, "EVP_PKEY_derive_set_peer");
        try {
            return (int)mh$.invokeExact(ctx, peer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_derive$MH() {
        return RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_derive$MH,"EVP_PKEY_derive");
    }
    public static int EVP_PKEY_derive ( Addressable ctx,  Addressable key,  Addressable keylen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_derive$MH, "EVP_PKEY_derive");
        try {
            return (int)mh$.invokeExact(ctx, key, keylen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_paramgen_init$MH() {
        return RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_paramgen_init$MH,"EVP_PKEY_paramgen_init");
    }
    public static int EVP_PKEY_paramgen_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_paramgen_init$MH, "EVP_PKEY_paramgen_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_paramgen$MH() {
        return RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_paramgen$MH,"EVP_PKEY_paramgen");
    }
    public static int EVP_PKEY_paramgen ( Addressable ctx,  Addressable ppkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_paramgen$MH, "EVP_PKEY_paramgen");
        try {
            return (int)mh$.invokeExact(ctx, ppkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_keygen_init$MH() {
        return RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_keygen_init$MH,"EVP_PKEY_keygen_init");
    }
    public static int EVP_PKEY_keygen_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$353.EVP_PKEY_keygen_init$MH, "EVP_PKEY_keygen_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_keygen$MH() {
        return RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_keygen$MH,"EVP_PKEY_keygen");
    }
    public static int EVP_PKEY_keygen ( Addressable ctx,  Addressable ppkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_keygen$MH, "EVP_PKEY_keygen");
        try {
            return (int)mh$.invokeExact(ctx, ppkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_check$MH() {
        return RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_check$MH,"EVP_PKEY_check");
    }
    public static int EVP_PKEY_check ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_check$MH, "EVP_PKEY_check");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_public_check$MH() {
        return RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_public_check$MH,"EVP_PKEY_public_check");
    }
    public static int EVP_PKEY_public_check ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_public_check$MH, "EVP_PKEY_public_check");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_param_check$MH() {
        return RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_param_check$MH,"EVP_PKEY_param_check");
    }
    public static int EVP_PKEY_param_check ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_param_check$MH, "EVP_PKEY_param_check");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_set_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_CTX_set_cb$MH,"EVP_PKEY_CTX_set_cb");
    }
    public static void EVP_PKEY_CTX_set_cb ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_CTX_set_cb$MH, "EVP_PKEY_CTX_set_cb");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_CTX_get_cb$MH,"EVP_PKEY_CTX_get_cb");
    }
    public static MemoryAddress EVP_PKEY_CTX_get_cb ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$354.EVP_PKEY_CTX_get_cb$MH, "EVP_PKEY_CTX_get_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_CTX_get_keygen_info$MH() {
        return RuntimeHelper.requireNonNull(constants$355.EVP_PKEY_CTX_get_keygen_info$MH,"EVP_PKEY_CTX_get_keygen_info");
    }
    public static int EVP_PKEY_CTX_get_keygen_info ( Addressable ctx,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$355.EVP_PKEY_CTX_get_keygen_info$MH, "EVP_PKEY_CTX_get_keygen_info");
        try {
            return (int)mh$.invokeExact(ctx, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_init$MH() {
        return RuntimeHelper.requireNonNull(constants$355.EVP_PKEY_meth_set_init$MH,"EVP_PKEY_meth_set_init");
    }
    public static void EVP_PKEY_meth_set_init ( Addressable pmeth,  Addressable init) {
        var mh$ = RuntimeHelper.requireNonNull(constants$355.EVP_PKEY_meth_set_init$MH, "EVP_PKEY_meth_set_init");
        try {
            mh$.invokeExact(pmeth, init);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$356.EVP_PKEY_meth_set_copy$MH,"EVP_PKEY_meth_set_copy");
    }
    public static void EVP_PKEY_meth_set_copy ( Addressable pmeth,  Addressable copy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$356.EVP_PKEY_meth_set_copy$MH, "EVP_PKEY_meth_set_copy");
        try {
            mh$.invokeExact(pmeth, copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$356.EVP_PKEY_meth_set_cleanup$MH,"EVP_PKEY_meth_set_cleanup");
    }
    public static void EVP_PKEY_meth_set_cleanup ( Addressable pmeth,  Addressable cleanup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$356.EVP_PKEY_meth_set_cleanup$MH, "EVP_PKEY_meth_set_cleanup");
        try {
            mh$.invokeExact(pmeth, cleanup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_paramgen$MH() {
        return RuntimeHelper.requireNonNull(constants$357.EVP_PKEY_meth_set_paramgen$MH,"EVP_PKEY_meth_set_paramgen");
    }
    public static void EVP_PKEY_meth_set_paramgen ( Addressable pmeth,  Addressable paramgen_init,  Addressable paramgen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$357.EVP_PKEY_meth_set_paramgen$MH, "EVP_PKEY_meth_set_paramgen");
        try {
            mh$.invokeExact(pmeth, paramgen_init, paramgen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_keygen$MH() {
        return RuntimeHelper.requireNonNull(constants$358.EVP_PKEY_meth_set_keygen$MH,"EVP_PKEY_meth_set_keygen");
    }
    public static void EVP_PKEY_meth_set_keygen ( Addressable pmeth,  Addressable keygen_init,  Addressable keygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$358.EVP_PKEY_meth_set_keygen$MH, "EVP_PKEY_meth_set_keygen");
        try {
            mh$.invokeExact(pmeth, keygen_init, keygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$359.EVP_PKEY_meth_set_sign$MH,"EVP_PKEY_meth_set_sign");
    }
    public static void EVP_PKEY_meth_set_sign ( Addressable pmeth,  Addressable sign_init,  Addressable sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$359.EVP_PKEY_meth_set_sign$MH, "EVP_PKEY_meth_set_sign");
        try {
            mh$.invokeExact(pmeth, sign_init, sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$359.EVP_PKEY_meth_set_verify$MH,"EVP_PKEY_meth_set_verify");
    }
    public static void EVP_PKEY_meth_set_verify ( Addressable pmeth,  Addressable verify_init,  Addressable verify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$359.EVP_PKEY_meth_set_verify$MH, "EVP_PKEY_meth_set_verify");
        try {
            mh$.invokeExact(pmeth, verify_init, verify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_verify_recover$MH() {
        return RuntimeHelper.requireNonNull(constants$360.EVP_PKEY_meth_set_verify_recover$MH,"EVP_PKEY_meth_set_verify_recover");
    }
    public static void EVP_PKEY_meth_set_verify_recover ( Addressable pmeth,  Addressable verify_recover_init,  Addressable verify_recover) {
        var mh$ = RuntimeHelper.requireNonNull(constants$360.EVP_PKEY_meth_set_verify_recover$MH, "EVP_PKEY_meth_set_verify_recover");
        try {
            mh$.invokeExact(pmeth, verify_recover_init, verify_recover);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_signctx$MH() {
        return RuntimeHelper.requireNonNull(constants$361.EVP_PKEY_meth_set_signctx$MH,"EVP_PKEY_meth_set_signctx");
    }
    public static void EVP_PKEY_meth_set_signctx ( Addressable pmeth,  Addressable signctx_init,  Addressable signctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$361.EVP_PKEY_meth_set_signctx$MH, "EVP_PKEY_meth_set_signctx");
        try {
            mh$.invokeExact(pmeth, signctx_init, signctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_verifyctx$MH() {
        return RuntimeHelper.requireNonNull(constants$362.EVP_PKEY_meth_set_verifyctx$MH,"EVP_PKEY_meth_set_verifyctx");
    }
    public static void EVP_PKEY_meth_set_verifyctx ( Addressable pmeth,  Addressable verifyctx_init,  Addressable verifyctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$362.EVP_PKEY_meth_set_verifyctx$MH, "EVP_PKEY_meth_set_verifyctx");
        try {
            mh$.invokeExact(pmeth, verifyctx_init, verifyctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$363.EVP_PKEY_meth_set_encrypt$MH,"EVP_PKEY_meth_set_encrypt");
    }
    public static void EVP_PKEY_meth_set_encrypt ( Addressable pmeth,  Addressable encrypt_init,  Addressable encryptfn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$363.EVP_PKEY_meth_set_encrypt$MH, "EVP_PKEY_meth_set_encrypt");
        try {
            mh$.invokeExact(pmeth, encrypt_init, encryptfn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_decrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$364.EVP_PKEY_meth_set_decrypt$MH,"EVP_PKEY_meth_set_decrypt");
    }
    public static void EVP_PKEY_meth_set_decrypt ( Addressable pmeth,  Addressable decrypt_init,  Addressable decrypt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$364.EVP_PKEY_meth_set_decrypt$MH, "EVP_PKEY_meth_set_decrypt");
        try {
            mh$.invokeExact(pmeth, decrypt_init, decrypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_derive$MH() {
        return RuntimeHelper.requireNonNull(constants$364.EVP_PKEY_meth_set_derive$MH,"EVP_PKEY_meth_set_derive");
    }
    public static void EVP_PKEY_meth_set_derive ( Addressable pmeth,  Addressable derive_init,  Addressable derive) {
        var mh$ = RuntimeHelper.requireNonNull(constants$364.EVP_PKEY_meth_set_derive$MH, "EVP_PKEY_meth_set_derive");
        try {
            mh$.invokeExact(pmeth, derive_init, derive);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$365.EVP_PKEY_meth_set_ctrl$MH,"EVP_PKEY_meth_set_ctrl");
    }
    public static void EVP_PKEY_meth_set_ctrl ( Addressable pmeth,  Addressable ctrl,  Addressable ctrl_str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$365.EVP_PKEY_meth_set_ctrl$MH, "EVP_PKEY_meth_set_ctrl");
        try {
            mh$.invokeExact(pmeth, ctrl, ctrl_str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_digestsign$MH() {
        return RuntimeHelper.requireNonNull(constants$366.EVP_PKEY_meth_set_digestsign$MH,"EVP_PKEY_meth_set_digestsign");
    }
    public static void EVP_PKEY_meth_set_digestsign ( Addressable pmeth,  Addressable digestsign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$366.EVP_PKEY_meth_set_digestsign$MH, "EVP_PKEY_meth_set_digestsign");
        try {
            mh$.invokeExact(pmeth, digestsign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_digestverify$MH() {
        return RuntimeHelper.requireNonNull(constants$366.EVP_PKEY_meth_set_digestverify$MH,"EVP_PKEY_meth_set_digestverify");
    }
    public static void EVP_PKEY_meth_set_digestverify ( Addressable pmeth,  Addressable digestverify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$366.EVP_PKEY_meth_set_digestverify$MH, "EVP_PKEY_meth_set_digestverify");
        try {
            mh$.invokeExact(pmeth, digestverify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_check$MH() {
        return RuntimeHelper.requireNonNull(constants$367.EVP_PKEY_meth_set_check$MH,"EVP_PKEY_meth_set_check");
    }
    public static void EVP_PKEY_meth_set_check ( Addressable pmeth,  Addressable check) {
        var mh$ = RuntimeHelper.requireNonNull(constants$367.EVP_PKEY_meth_set_check$MH, "EVP_PKEY_meth_set_check");
        try {
            mh$.invokeExact(pmeth, check);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_public_check$MH() {
        return RuntimeHelper.requireNonNull(constants$367.EVP_PKEY_meth_set_public_check$MH,"EVP_PKEY_meth_set_public_check");
    }
    public static void EVP_PKEY_meth_set_public_check ( Addressable pmeth,  Addressable check) {
        var mh$ = RuntimeHelper.requireNonNull(constants$367.EVP_PKEY_meth_set_public_check$MH, "EVP_PKEY_meth_set_public_check");
        try {
            mh$.invokeExact(pmeth, check);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_param_check$MH() {
        return RuntimeHelper.requireNonNull(constants$368.EVP_PKEY_meth_set_param_check$MH,"EVP_PKEY_meth_set_param_check");
    }
    public static void EVP_PKEY_meth_set_param_check ( Addressable pmeth,  Addressable check) {
        var mh$ = RuntimeHelper.requireNonNull(constants$368.EVP_PKEY_meth_set_param_check$MH, "EVP_PKEY_meth_set_param_check");
        try {
            mh$.invokeExact(pmeth, check);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_set_digest_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$368.EVP_PKEY_meth_set_digest_custom$MH,"EVP_PKEY_meth_set_digest_custom");
    }
    public static void EVP_PKEY_meth_set_digest_custom ( Addressable pmeth,  Addressable digest_custom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$368.EVP_PKEY_meth_set_digest_custom$MH, "EVP_PKEY_meth_set_digest_custom");
        try {
            mh$.invokeExact(pmeth, digest_custom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_init$MH() {
        return RuntimeHelper.requireNonNull(constants$369.EVP_PKEY_meth_get_init$MH,"EVP_PKEY_meth_get_init");
    }
    public static void EVP_PKEY_meth_get_init ( Addressable pmeth,  Addressable pinit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$369.EVP_PKEY_meth_get_init$MH, "EVP_PKEY_meth_get_init");
        try {
            mh$.invokeExact(pmeth, pinit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$369.EVP_PKEY_meth_get_copy$MH,"EVP_PKEY_meth_get_copy");
    }
    public static void EVP_PKEY_meth_get_copy ( Addressable pmeth,  Addressable pcopy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$369.EVP_PKEY_meth_get_copy$MH, "EVP_PKEY_meth_get_copy");
        try {
            mh$.invokeExact(pmeth, pcopy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$370.EVP_PKEY_meth_get_cleanup$MH,"EVP_PKEY_meth_get_cleanup");
    }
    public static void EVP_PKEY_meth_get_cleanup ( Addressable pmeth,  Addressable pcleanup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$370.EVP_PKEY_meth_get_cleanup$MH, "EVP_PKEY_meth_get_cleanup");
        try {
            mh$.invokeExact(pmeth, pcleanup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_paramgen$MH() {
        return RuntimeHelper.requireNonNull(constants$371.EVP_PKEY_meth_get_paramgen$MH,"EVP_PKEY_meth_get_paramgen");
    }
    public static void EVP_PKEY_meth_get_paramgen ( Addressable pmeth,  Addressable pparamgen_init,  Addressable pparamgen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$371.EVP_PKEY_meth_get_paramgen$MH, "EVP_PKEY_meth_get_paramgen");
        try {
            mh$.invokeExact(pmeth, pparamgen_init, pparamgen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_keygen$MH() {
        return RuntimeHelper.requireNonNull(constants$371.EVP_PKEY_meth_get_keygen$MH,"EVP_PKEY_meth_get_keygen");
    }
    public static void EVP_PKEY_meth_get_keygen ( Addressable pmeth,  Addressable pkeygen_init,  Addressable pkeygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$371.EVP_PKEY_meth_get_keygen$MH, "EVP_PKEY_meth_get_keygen");
        try {
            mh$.invokeExact(pmeth, pkeygen_init, pkeygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$372.EVP_PKEY_meth_get_sign$MH,"EVP_PKEY_meth_get_sign");
    }
    public static void EVP_PKEY_meth_get_sign ( Addressable pmeth,  Addressable psign_init,  Addressable psign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$372.EVP_PKEY_meth_get_sign$MH, "EVP_PKEY_meth_get_sign");
        try {
            mh$.invokeExact(pmeth, psign_init, psign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$373.EVP_PKEY_meth_get_verify$MH,"EVP_PKEY_meth_get_verify");
    }
    public static void EVP_PKEY_meth_get_verify ( Addressable pmeth,  Addressable pverify_init,  Addressable pverify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$373.EVP_PKEY_meth_get_verify$MH, "EVP_PKEY_meth_get_verify");
        try {
            mh$.invokeExact(pmeth, pverify_init, pverify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_verify_recover$MH() {
        return RuntimeHelper.requireNonNull(constants$374.EVP_PKEY_meth_get_verify_recover$MH,"EVP_PKEY_meth_get_verify_recover");
    }
    public static void EVP_PKEY_meth_get_verify_recover ( Addressable pmeth,  Addressable pverify_recover_init,  Addressable pverify_recover) {
        var mh$ = RuntimeHelper.requireNonNull(constants$374.EVP_PKEY_meth_get_verify_recover$MH, "EVP_PKEY_meth_get_verify_recover");
        try {
            mh$.invokeExact(pmeth, pverify_recover_init, pverify_recover);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_signctx$MH() {
        return RuntimeHelper.requireNonNull(constants$375.EVP_PKEY_meth_get_signctx$MH,"EVP_PKEY_meth_get_signctx");
    }
    public static void EVP_PKEY_meth_get_signctx ( Addressable pmeth,  Addressable psignctx_init,  Addressable psignctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$375.EVP_PKEY_meth_get_signctx$MH, "EVP_PKEY_meth_get_signctx");
        try {
            mh$.invokeExact(pmeth, psignctx_init, psignctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_verifyctx$MH() {
        return RuntimeHelper.requireNonNull(constants$376.EVP_PKEY_meth_get_verifyctx$MH,"EVP_PKEY_meth_get_verifyctx");
    }
    public static void EVP_PKEY_meth_get_verifyctx ( Addressable pmeth,  Addressable pverifyctx_init,  Addressable pverifyctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$376.EVP_PKEY_meth_get_verifyctx$MH, "EVP_PKEY_meth_get_verifyctx");
        try {
            mh$.invokeExact(pmeth, pverifyctx_init, pverifyctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$376.EVP_PKEY_meth_get_encrypt$MH,"EVP_PKEY_meth_get_encrypt");
    }
    public static void EVP_PKEY_meth_get_encrypt ( Addressable pmeth,  Addressable pencrypt_init,  Addressable pencryptfn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$376.EVP_PKEY_meth_get_encrypt$MH, "EVP_PKEY_meth_get_encrypt");
        try {
            mh$.invokeExact(pmeth, pencrypt_init, pencryptfn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_decrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$377.EVP_PKEY_meth_get_decrypt$MH,"EVP_PKEY_meth_get_decrypt");
    }
    public static void EVP_PKEY_meth_get_decrypt ( Addressable pmeth,  Addressable pdecrypt_init,  Addressable pdecrypt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$377.EVP_PKEY_meth_get_decrypt$MH, "EVP_PKEY_meth_get_decrypt");
        try {
            mh$.invokeExact(pmeth, pdecrypt_init, pdecrypt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_derive$MH() {
        return RuntimeHelper.requireNonNull(constants$378.EVP_PKEY_meth_get_derive$MH,"EVP_PKEY_meth_get_derive");
    }
    public static void EVP_PKEY_meth_get_derive ( Addressable pmeth,  Addressable pderive_init,  Addressable pderive) {
        var mh$ = RuntimeHelper.requireNonNull(constants$378.EVP_PKEY_meth_get_derive$MH, "EVP_PKEY_meth_get_derive");
        try {
            mh$.invokeExact(pmeth, pderive_init, pderive);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$379.EVP_PKEY_meth_get_ctrl$MH,"EVP_PKEY_meth_get_ctrl");
    }
    public static void EVP_PKEY_meth_get_ctrl ( Addressable pmeth,  Addressable pctrl,  Addressable pctrl_str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$379.EVP_PKEY_meth_get_ctrl$MH, "EVP_PKEY_meth_get_ctrl");
        try {
            mh$.invokeExact(pmeth, pctrl, pctrl_str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_digestsign$MH() {
        return RuntimeHelper.requireNonNull(constants$379.EVP_PKEY_meth_get_digestsign$MH,"EVP_PKEY_meth_get_digestsign");
    }
    public static void EVP_PKEY_meth_get_digestsign ( Addressable pmeth,  Addressable digestsign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$379.EVP_PKEY_meth_get_digestsign$MH, "EVP_PKEY_meth_get_digestsign");
        try {
            mh$.invokeExact(pmeth, digestsign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_digestverify$MH() {
        return RuntimeHelper.requireNonNull(constants$380.EVP_PKEY_meth_get_digestverify$MH,"EVP_PKEY_meth_get_digestverify");
    }
    public static void EVP_PKEY_meth_get_digestverify ( Addressable pmeth,  Addressable digestverify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$380.EVP_PKEY_meth_get_digestverify$MH, "EVP_PKEY_meth_get_digestverify");
        try {
            mh$.invokeExact(pmeth, digestverify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_check$MH() {
        return RuntimeHelper.requireNonNull(constants$380.EVP_PKEY_meth_get_check$MH,"EVP_PKEY_meth_get_check");
    }
    public static void EVP_PKEY_meth_get_check ( Addressable pmeth,  Addressable pcheck) {
        var mh$ = RuntimeHelper.requireNonNull(constants$380.EVP_PKEY_meth_get_check$MH, "EVP_PKEY_meth_get_check");
        try {
            mh$.invokeExact(pmeth, pcheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_public_check$MH() {
        return RuntimeHelper.requireNonNull(constants$381.EVP_PKEY_meth_get_public_check$MH,"EVP_PKEY_meth_get_public_check");
    }
    public static void EVP_PKEY_meth_get_public_check ( Addressable pmeth,  Addressable pcheck) {
        var mh$ = RuntimeHelper.requireNonNull(constants$381.EVP_PKEY_meth_get_public_check$MH, "EVP_PKEY_meth_get_public_check");
        try {
            mh$.invokeExact(pmeth, pcheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_param_check$MH() {
        return RuntimeHelper.requireNonNull(constants$381.EVP_PKEY_meth_get_param_check$MH,"EVP_PKEY_meth_get_param_check");
    }
    public static void EVP_PKEY_meth_get_param_check ( Addressable pmeth,  Addressable pcheck) {
        var mh$ = RuntimeHelper.requireNonNull(constants$381.EVP_PKEY_meth_get_param_check$MH, "EVP_PKEY_meth_get_param_check");
        try {
            mh$.invokeExact(pmeth, pcheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_meth_get_digest_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$382.EVP_PKEY_meth_get_digest_custom$MH,"EVP_PKEY_meth_get_digest_custom");
    }
    public static void EVP_PKEY_meth_get_digest_custom ( Addressable pmeth,  Addressable pdigest_custom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$382.EVP_PKEY_meth_get_digest_custom$MH, "EVP_PKEY_meth_get_digest_custom");
        try {
            mh$.invokeExact(pmeth, pdigest_custom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_add_alg_module$MH() {
        return RuntimeHelper.requireNonNull(constants$382.EVP_add_alg_module$MH,"EVP_add_alg_module");
    }
    public static void EVP_add_alg_module () {
        var mh$ = RuntimeHelper.requireNonNull(constants$382.EVP_add_alg_module$MH, "EVP_add_alg_module");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_EC_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$382.ERR_load_EC_strings$MH,"ERR_load_EC_strings");
    }
    public static int ERR_load_EC_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$382.ERR_load_EC_strings$MH, "ERR_load_EC_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int POINT_CONVERSION_COMPRESSED() {
        return (int)2L;
    }
    public static int POINT_CONVERSION_UNCOMPRESSED() {
        return (int)4L;
    }
    public static int POINT_CONVERSION_HYBRID() {
        return (int)6L;
    }
    public static MethodHandle EC_GFp_simple_method$MH() {
        return RuntimeHelper.requireNonNull(constants$382.EC_GFp_simple_method$MH,"EC_GFp_simple_method");
    }
    public static MemoryAddress EC_GFp_simple_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$382.EC_GFp_simple_method$MH, "EC_GFp_simple_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GFp_mont_method$MH() {
        return RuntimeHelper.requireNonNull(constants$383.EC_GFp_mont_method$MH,"EC_GFp_mont_method");
    }
    public static MemoryAddress EC_GFp_mont_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$383.EC_GFp_mont_method$MH, "EC_GFp_mont_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GFp_nist_method$MH() {
        return RuntimeHelper.requireNonNull(constants$383.EC_GFp_nist_method$MH,"EC_GFp_nist_method");
    }
    public static MemoryAddress EC_GFp_nist_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$383.EC_GFp_nist_method$MH, "EC_GFp_nist_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GFp_nistp224_method$MH() {
        return RuntimeHelper.requireNonNull(constants$383.EC_GFp_nistp224_method$MH,"EC_GFp_nistp224_method");
    }
    public static MemoryAddress EC_GFp_nistp224_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$383.EC_GFp_nistp224_method$MH, "EC_GFp_nistp224_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GFp_nistp256_method$MH() {
        return RuntimeHelper.requireNonNull(constants$383.EC_GFp_nistp256_method$MH,"EC_GFp_nistp256_method");
    }
    public static MemoryAddress EC_GFp_nistp256_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$383.EC_GFp_nistp256_method$MH, "EC_GFp_nistp256_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GFp_nistp521_method$MH() {
        return RuntimeHelper.requireNonNull(constants$383.EC_GFp_nistp521_method$MH,"EC_GFp_nistp521_method");
    }
    public static MemoryAddress EC_GFp_nistp521_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$383.EC_GFp_nistp521_method$MH, "EC_GFp_nistp521_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_new$MH() {
        return RuntimeHelper.requireNonNull(constants$383.EC_GROUP_new$MH,"EC_GROUP_new");
    }
    public static MemoryAddress EC_GROUP_new ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$383.EC_GROUP_new$MH, "EC_GROUP_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_free$MH() {
        return RuntimeHelper.requireNonNull(constants$384.EC_GROUP_free$MH,"EC_GROUP_free");
    }
    public static void EC_GROUP_free ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$384.EC_GROUP_free$MH, "EC_GROUP_free");
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_clear_free$MH() {
        return RuntimeHelper.requireNonNull(constants$384.EC_GROUP_clear_free$MH,"EC_GROUP_clear_free");
    }
    public static void EC_GROUP_clear_free ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$384.EC_GROUP_clear_free$MH, "EC_GROUP_clear_free");
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$384.EC_GROUP_copy$MH,"EC_GROUP_copy");
    }
    public static int EC_GROUP_copy ( Addressable dst,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$384.EC_GROUP_copy$MH, "EC_GROUP_copy");
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$384.EC_GROUP_dup$MH,"EC_GROUP_dup");
    }
    public static MemoryAddress EC_GROUP_dup ( Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$384.EC_GROUP_dup$MH, "EC_GROUP_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_method_of$MH() {
        return RuntimeHelper.requireNonNull(constants$384.EC_GROUP_method_of$MH,"EC_GROUP_method_of");
    }
    public static MemoryAddress EC_GROUP_method_of ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$384.EC_GROUP_method_of$MH, "EC_GROUP_method_of");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_METHOD_get_field_type$MH() {
        return RuntimeHelper.requireNonNull(constants$384.EC_METHOD_get_field_type$MH,"EC_METHOD_get_field_type");
    }
    public static int EC_METHOD_get_field_type ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$384.EC_METHOD_get_field_type$MH, "EC_METHOD_get_field_type");
        try {
            return (int)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_generator$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EC_GROUP_set_generator$MH,"EC_GROUP_set_generator");
    }
    public static int EC_GROUP_set_generator ( Addressable group,  Addressable generator,  Addressable order,  Addressable cofactor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$385.EC_GROUP_set_generator$MH, "EC_GROUP_set_generator");
        try {
            return (int)mh$.invokeExact(group, generator, order, cofactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get0_generator$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get0_generator$MH,"EC_GROUP_get0_generator");
    }
    public static MemoryAddress EC_GROUP_get0_generator ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get0_generator$MH, "EC_GROUP_get0_generator");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_mont_data$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get_mont_data$MH,"EC_GROUP_get_mont_data");
    }
    public static MemoryAddress EC_GROUP_get_mont_data ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get_mont_data$MH, "EC_GROUP_get_mont_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_order$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get_order$MH,"EC_GROUP_get_order");
    }
    public static int EC_GROUP_get_order ( Addressable group,  Addressable order,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get_order$MH, "EC_GROUP_get_order");
        try {
            return (int)mh$.invokeExact(group, order, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get0_order$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get0_order$MH,"EC_GROUP_get0_order");
    }
    public static MemoryAddress EC_GROUP_get0_order ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$385.EC_GROUP_get0_order$MH, "EC_GROUP_get0_order");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_order_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$385.EC_GROUP_order_bits$MH,"EC_GROUP_order_bits");
    }
    public static int EC_GROUP_order_bits ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$385.EC_GROUP_order_bits$MH, "EC_GROUP_order_bits");
        try {
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_cofactor$MH() {
        return RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get_cofactor$MH,"EC_GROUP_get_cofactor");
    }
    public static int EC_GROUP_get_cofactor ( Addressable group,  Addressable cofactor,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get_cofactor$MH, "EC_GROUP_get_cofactor");
        try {
            return (int)mh$.invokeExact(group, cofactor, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get0_cofactor$MH() {
        return RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get0_cofactor$MH,"EC_GROUP_get0_cofactor");
    }
    public static MemoryAddress EC_GROUP_get0_cofactor ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get0_cofactor$MH, "EC_GROUP_get0_cofactor");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_curve_name$MH() {
        return RuntimeHelper.requireNonNull(constants$386.EC_GROUP_set_curve_name$MH,"EC_GROUP_set_curve_name");
    }
    public static void EC_GROUP_set_curve_name ( Addressable group,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$386.EC_GROUP_set_curve_name$MH, "EC_GROUP_set_curve_name");
        try {
            mh$.invokeExact(group, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_curve_name$MH() {
        return RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get_curve_name$MH,"EC_GROUP_get_curve_name");
    }
    public static int EC_GROUP_get_curve_name ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get_curve_name$MH, "EC_GROUP_get_curve_name");
        try {
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_asn1_flag$MH() {
        return RuntimeHelper.requireNonNull(constants$386.EC_GROUP_set_asn1_flag$MH,"EC_GROUP_set_asn1_flag");
    }
    public static void EC_GROUP_set_asn1_flag ( Addressable group,  int flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$386.EC_GROUP_set_asn1_flag$MH, "EC_GROUP_set_asn1_flag");
        try {
            mh$.invokeExact(group, flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_asn1_flag$MH() {
        return RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get_asn1_flag$MH,"EC_GROUP_get_asn1_flag");
    }
    public static int EC_GROUP_get_asn1_flag ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$386.EC_GROUP_get_asn1_flag$MH, "EC_GROUP_get_asn1_flag");
        try {
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_point_conversion_form$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EC_GROUP_set_point_conversion_form$MH,"EC_GROUP_set_point_conversion_form");
    }
    public static void EC_GROUP_set_point_conversion_form ( Addressable group,  int form) {
        var mh$ = RuntimeHelper.requireNonNull(constants$387.EC_GROUP_set_point_conversion_form$MH, "EC_GROUP_set_point_conversion_form");
        try {
            mh$.invokeExact(group, form);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_point_conversion_form$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EC_GROUP_get_point_conversion_form$MH,"EC_GROUP_get_point_conversion_form");
    }
    public static int EC_GROUP_get_point_conversion_form ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$387.EC_GROUP_get_point_conversion_form$MH, "EC_GROUP_get_point_conversion_form");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get0_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EC_GROUP_get0_seed$MH,"EC_GROUP_get0_seed");
    }
    public static MemoryAddress EC_GROUP_get0_seed ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$387.EC_GROUP_get0_seed$MH, "EC_GROUP_get0_seed");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_seed_len$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EC_GROUP_get_seed_len$MH,"EC_GROUP_get_seed_len");
    }
    public static long EC_GROUP_get_seed_len ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$387.EC_GROUP_get_seed_len$MH, "EC_GROUP_get_seed_len");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EC_GROUP_set_seed$MH,"EC_GROUP_set_seed");
    }
    public static long EC_GROUP_set_seed ( Addressable x0,  Addressable x1,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$387.EC_GROUP_set_seed$MH, "EC_GROUP_set_seed");
        try {
            return (long)mh$.invokeExact(x0, x1, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_curve$MH() {
        return RuntimeHelper.requireNonNull(constants$387.EC_GROUP_set_curve$MH,"EC_GROUP_set_curve");
    }
    public static int EC_GROUP_set_curve ( Addressable group,  Addressable p,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$387.EC_GROUP_set_curve$MH, "EC_GROUP_set_curve");
        try {
            return (int)mh$.invokeExact(group, p, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_curve$MH() {
        return RuntimeHelper.requireNonNull(constants$388.EC_GROUP_get_curve$MH,"EC_GROUP_get_curve");
    }
    public static int EC_GROUP_get_curve ( Addressable group,  Addressable p,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$388.EC_GROUP_get_curve$MH, "EC_GROUP_get_curve");
        try {
            return (int)mh$.invokeExact(group, p, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_set_curve_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$388.EC_GROUP_set_curve_GFp$MH,"EC_GROUP_set_curve_GFp");
    }
    public static int EC_GROUP_set_curve_GFp ( Addressable group,  Addressable p,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$388.EC_GROUP_set_curve_GFp$MH, "EC_GROUP_set_curve_GFp");
        try {
            return (int)mh$.invokeExact(group, p, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_curve_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$388.EC_GROUP_get_curve_GFp$MH,"EC_GROUP_get_curve_GFp");
    }
    public static int EC_GROUP_get_curve_GFp ( Addressable group,  Addressable p,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$388.EC_GROUP_get_curve_GFp$MH, "EC_GROUP_get_curve_GFp");
        try {
            return (int)mh$.invokeExact(group, p, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_degree$MH() {
        return RuntimeHelper.requireNonNull(constants$388.EC_GROUP_get_degree$MH,"EC_GROUP_get_degree");
    }
    public static int EC_GROUP_get_degree ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$388.EC_GROUP_get_degree$MH, "EC_GROUP_get_degree");
        try {
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_check$MH() {
        return RuntimeHelper.requireNonNull(constants$388.EC_GROUP_check$MH,"EC_GROUP_check");
    }
    public static int EC_GROUP_check ( Addressable group,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$388.EC_GROUP_check$MH, "EC_GROUP_check");
        try {
            return (int)mh$.invokeExact(group, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_check_discriminant$MH() {
        return RuntimeHelper.requireNonNull(constants$388.EC_GROUP_check_discriminant$MH,"EC_GROUP_check_discriminant");
    }
    public static int EC_GROUP_check_discriminant ( Addressable group,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$388.EC_GROUP_check_discriminant$MH, "EC_GROUP_check_discriminant");
        try {
            return (int)mh$.invokeExact(group, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EC_GROUP_cmp$MH,"EC_GROUP_cmp");
    }
    public static int EC_GROUP_cmp ( Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$389.EC_GROUP_cmp$MH, "EC_GROUP_cmp");
        try {
            return (int)mh$.invokeExact(a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_new_curve_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_curve_GFp$MH,"EC_GROUP_new_curve_GFp");
    }
    public static MemoryAddress EC_GROUP_new_curve_GFp ( Addressable p,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_curve_GFp$MH, "EC_GROUP_new_curve_GFp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_new_by_curve_name$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_by_curve_name$MH,"EC_GROUP_new_by_curve_name");
    }
    public static MemoryAddress EC_GROUP_new_by_curve_name ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_by_curve_name$MH, "EC_GROUP_new_by_curve_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_new_from_ecparameters$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_from_ecparameters$MH,"EC_GROUP_new_from_ecparameters");
    }
    public static MemoryAddress EC_GROUP_new_from_ecparameters ( Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_from_ecparameters$MH, "EC_GROUP_new_from_ecparameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_ecparameters$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EC_GROUP_get_ecparameters$MH,"EC_GROUP_get_ecparameters");
    }
    public static MemoryAddress EC_GROUP_get_ecparameters ( Addressable group,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$389.EC_GROUP_get_ecparameters$MH, "EC_GROUP_get_ecparameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_new_from_ecpkparameters$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_from_ecpkparameters$MH,"EC_GROUP_new_from_ecpkparameters");
    }
    public static MemoryAddress EC_GROUP_new_from_ecpkparameters ( Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$389.EC_GROUP_new_from_ecpkparameters$MH, "EC_GROUP_new_from_ecpkparameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_ecpkparameters$MH() {
        return RuntimeHelper.requireNonNull(constants$390.EC_GROUP_get_ecpkparameters$MH,"EC_GROUP_get_ecpkparameters");
    }
    public static MemoryAddress EC_GROUP_get_ecpkparameters ( Addressable group,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$390.EC_GROUP_get_ecpkparameters$MH, "EC_GROUP_get_ecpkparameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_get_builtin_curves$MH() {
        return RuntimeHelper.requireNonNull(constants$390.EC_get_builtin_curves$MH,"EC_get_builtin_curves");
    }
    public static long EC_get_builtin_curves ( Addressable r,  long nitems) {
        var mh$ = RuntimeHelper.requireNonNull(constants$390.EC_get_builtin_curves$MH, "EC_get_builtin_curves");
        try {
            return (long)mh$.invokeExact(r, nitems);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_curve_nid2nist$MH() {
        return RuntimeHelper.requireNonNull(constants$390.EC_curve_nid2nist$MH,"EC_curve_nid2nist");
    }
    public static MemoryAddress EC_curve_nid2nist ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$390.EC_curve_nid2nist$MH, "EC_curve_nid2nist");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_curve_nist2nid$MH() {
        return RuntimeHelper.requireNonNull(constants$390.EC_curve_nist2nid$MH,"EC_curve_nist2nid");
    }
    public static int EC_curve_nist2nid ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$390.EC_curve_nist2nid$MH, "EC_curve_nist2nid");
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$390.EC_POINT_new$MH,"EC_POINT_new");
    }
    public static MemoryAddress EC_POINT_new ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$390.EC_POINT_new$MH, "EC_POINT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$390.EC_POINT_free$MH,"EC_POINT_free");
    }
    public static void EC_POINT_free ( Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$390.EC_POINT_free$MH, "EC_POINT_free");
        try {
            mh$.invokeExact(point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_clear_free$MH() {
        return RuntimeHelper.requireNonNull(constants$391.EC_POINT_clear_free$MH,"EC_POINT_clear_free");
    }
    public static void EC_POINT_clear_free ( Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$391.EC_POINT_clear_free$MH, "EC_POINT_clear_free");
        try {
            mh$.invokeExact(point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$391.EC_POINT_copy$MH,"EC_POINT_copy");
    }
    public static int EC_POINT_copy ( Addressable dst,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$391.EC_POINT_copy$MH, "EC_POINT_copy");
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$391.EC_POINT_dup$MH,"EC_POINT_dup");
    }
    public static MemoryAddress EC_POINT_dup ( Addressable src,  Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$391.EC_POINT_dup$MH, "EC_POINT_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(src, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_method_of$MH() {
        return RuntimeHelper.requireNonNull(constants$391.EC_POINT_method_of$MH,"EC_POINT_method_of");
    }
    public static MemoryAddress EC_POINT_method_of ( Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$391.EC_POINT_method_of$MH, "EC_POINT_method_of");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_set_to_infinity$MH() {
        return RuntimeHelper.requireNonNull(constants$391.EC_POINT_set_to_infinity$MH,"EC_POINT_set_to_infinity");
    }
    public static int EC_POINT_set_to_infinity ( Addressable group,  Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$391.EC_POINT_set_to_infinity$MH, "EC_POINT_set_to_infinity");
        try {
            return (int)mh$.invokeExact(group, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_set_Jprojective_coordinates_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$391.EC_POINT_set_Jprojective_coordinates_GFp$MH,"EC_POINT_set_Jprojective_coordinates_GFp");
    }
    public static int EC_POINT_set_Jprojective_coordinates_GFp ( Addressable group,  Addressable p,  Addressable x,  Addressable y,  Addressable z,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$391.EC_POINT_set_Jprojective_coordinates_GFp$MH, "EC_POINT_set_Jprojective_coordinates_GFp");
        try {
            return (int)mh$.invokeExact(group, p, x, y, z, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_get_Jprojective_coordinates_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EC_POINT_get_Jprojective_coordinates_GFp$MH,"EC_POINT_get_Jprojective_coordinates_GFp");
    }
    public static int EC_POINT_get_Jprojective_coordinates_GFp ( Addressable group,  Addressable p,  Addressable x,  Addressable y,  Addressable z,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$392.EC_POINT_get_Jprojective_coordinates_GFp$MH, "EC_POINT_get_Jprojective_coordinates_GFp");
        try {
            return (int)mh$.invokeExact(group, p, x, y, z, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_set_affine_coordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EC_POINT_set_affine_coordinates$MH,"EC_POINT_set_affine_coordinates");
    }
    public static int EC_POINT_set_affine_coordinates ( Addressable group,  Addressable p,  Addressable x,  Addressable y,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$392.EC_POINT_set_affine_coordinates$MH, "EC_POINT_set_affine_coordinates");
        try {
            return (int)mh$.invokeExact(group, p, x, y, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_get_affine_coordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EC_POINT_get_affine_coordinates$MH,"EC_POINT_get_affine_coordinates");
    }
    public static int EC_POINT_get_affine_coordinates ( Addressable group,  Addressable p,  Addressable x,  Addressable y,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$392.EC_POINT_get_affine_coordinates$MH, "EC_POINT_get_affine_coordinates");
        try {
            return (int)mh$.invokeExact(group, p, x, y, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_set_affine_coordinates_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EC_POINT_set_affine_coordinates_GFp$MH,"EC_POINT_set_affine_coordinates_GFp");
    }
    public static int EC_POINT_set_affine_coordinates_GFp ( Addressable group,  Addressable p,  Addressable x,  Addressable y,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$392.EC_POINT_set_affine_coordinates_GFp$MH, "EC_POINT_set_affine_coordinates_GFp");
        try {
            return (int)mh$.invokeExact(group, p, x, y, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_get_affine_coordinates_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EC_POINT_get_affine_coordinates_GFp$MH,"EC_POINT_get_affine_coordinates_GFp");
    }
    public static int EC_POINT_get_affine_coordinates_GFp ( Addressable group,  Addressable p,  Addressable x,  Addressable y,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$392.EC_POINT_get_affine_coordinates_GFp$MH, "EC_POINT_get_affine_coordinates_GFp");
        try {
            return (int)mh$.invokeExact(group, p, x, y, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_set_compressed_coordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$392.EC_POINT_set_compressed_coordinates$MH,"EC_POINT_set_compressed_coordinates");
    }
    public static int EC_POINT_set_compressed_coordinates ( Addressable group,  Addressable p,  Addressable x,  int y_bit,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$392.EC_POINT_set_compressed_coordinates$MH, "EC_POINT_set_compressed_coordinates");
        try {
            return (int)mh$.invokeExact(group, p, x, y_bit, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_set_compressed_coordinates_GFp$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EC_POINT_set_compressed_coordinates_GFp$MH,"EC_POINT_set_compressed_coordinates_GFp");
    }
    public static int EC_POINT_set_compressed_coordinates_GFp ( Addressable group,  Addressable p,  Addressable x,  int y_bit,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$393.EC_POINT_set_compressed_coordinates_GFp$MH, "EC_POINT_set_compressed_coordinates_GFp");
        try {
            return (int)mh$.invokeExact(group, p, x, y_bit, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_point2oct$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EC_POINT_point2oct$MH,"EC_POINT_point2oct");
    }
    public static long EC_POINT_point2oct ( Addressable group,  Addressable p,  int form,  Addressable buf,  long len,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$393.EC_POINT_point2oct$MH, "EC_POINT_point2oct");
        try {
            return (long)mh$.invokeExact(group, p, form, buf, len, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_oct2point$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EC_POINT_oct2point$MH,"EC_POINT_oct2point");
    }
    public static int EC_POINT_oct2point ( Addressable group,  Addressable p,  Addressable buf,  long len,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$393.EC_POINT_oct2point$MH, "EC_POINT_oct2point");
        try {
            return (int)mh$.invokeExact(group, p, buf, len, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_point2buf$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EC_POINT_point2buf$MH,"EC_POINT_point2buf");
    }
    public static long EC_POINT_point2buf ( Addressable group,  Addressable point,  int form,  Addressable pbuf,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$393.EC_POINT_point2buf$MH, "EC_POINT_point2buf");
        try {
            return (long)mh$.invokeExact(group, point, form, pbuf, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_point2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EC_POINT_point2bn$MH,"EC_POINT_point2bn");
    }
    public static MemoryAddress EC_POINT_point2bn ( Addressable x0,  Addressable x1,  int form,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$393.EC_POINT_point2bn$MH, "EC_POINT_point2bn");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, form, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_bn2point$MH() {
        return RuntimeHelper.requireNonNull(constants$393.EC_POINT_bn2point$MH,"EC_POINT_bn2point");
    }
    public static MemoryAddress EC_POINT_bn2point ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$393.EC_POINT_bn2point$MH, "EC_POINT_bn2point");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_point2hex$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EC_POINT_point2hex$MH,"EC_POINT_point2hex");
    }
    public static MemoryAddress EC_POINT_point2hex ( Addressable x0,  Addressable x1,  int form,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$394.EC_POINT_point2hex$MH, "EC_POINT_point2hex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, form, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_hex2point$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EC_POINT_hex2point$MH,"EC_POINT_hex2point");
    }
    public static MemoryAddress EC_POINT_hex2point ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$394.EC_POINT_hex2point$MH, "EC_POINT_hex2point");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_add$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EC_POINT_add$MH,"EC_POINT_add");
    }
    public static int EC_POINT_add ( Addressable group,  Addressable r,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$394.EC_POINT_add$MH, "EC_POINT_add");
        try {
            return (int)mh$.invokeExact(group, r, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_dbl$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EC_POINT_dbl$MH,"EC_POINT_dbl");
    }
    public static int EC_POINT_dbl ( Addressable group,  Addressable r,  Addressable a,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$394.EC_POINT_dbl$MH, "EC_POINT_dbl");
        try {
            return (int)mh$.invokeExact(group, r, a, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_invert$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EC_POINT_invert$MH,"EC_POINT_invert");
    }
    public static int EC_POINT_invert ( Addressable group,  Addressable a,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$394.EC_POINT_invert$MH, "EC_POINT_invert");
        try {
            return (int)mh$.invokeExact(group, a, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_is_at_infinity$MH() {
        return RuntimeHelper.requireNonNull(constants$394.EC_POINT_is_at_infinity$MH,"EC_POINT_is_at_infinity");
    }
    public static int EC_POINT_is_at_infinity ( Addressable group,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$394.EC_POINT_is_at_infinity$MH, "EC_POINT_is_at_infinity");
        try {
            return (int)mh$.invokeExact(group, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_is_on_curve$MH() {
        return RuntimeHelper.requireNonNull(constants$395.EC_POINT_is_on_curve$MH,"EC_POINT_is_on_curve");
    }
    public static int EC_POINT_is_on_curve ( Addressable group,  Addressable point,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$395.EC_POINT_is_on_curve$MH, "EC_POINT_is_on_curve");
        try {
            return (int)mh$.invokeExact(group, point, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$395.EC_POINT_cmp$MH,"EC_POINT_cmp");
    }
    public static int EC_POINT_cmp ( Addressable group,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$395.EC_POINT_cmp$MH, "EC_POINT_cmp");
        try {
            return (int)mh$.invokeExact(group, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_make_affine$MH() {
        return RuntimeHelper.requireNonNull(constants$395.EC_POINT_make_affine$MH,"EC_POINT_make_affine");
    }
    public static int EC_POINT_make_affine ( Addressable group,  Addressable point,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$395.EC_POINT_make_affine$MH, "EC_POINT_make_affine");
        try {
            return (int)mh$.invokeExact(group, point, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINTs_make_affine$MH() {
        return RuntimeHelper.requireNonNull(constants$395.EC_POINTs_make_affine$MH,"EC_POINTs_make_affine");
    }
    public static int EC_POINTs_make_affine ( Addressable group,  long num,  Addressable points,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$395.EC_POINTs_make_affine$MH, "EC_POINTs_make_affine");
        try {
            return (int)mh$.invokeExact(group, num, points, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINTs_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$395.EC_POINTs_mul$MH,"EC_POINTs_mul");
    }
    public static int EC_POINTs_mul ( Addressable group,  Addressable r,  Addressable n,  long num,  Addressable p,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$395.EC_POINTs_mul$MH, "EC_POINTs_mul");
        try {
            return (int)mh$.invokeExact(group, r, n, num, p, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_POINT_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$395.EC_POINT_mul$MH,"EC_POINT_mul");
    }
    public static int EC_POINT_mul ( Addressable group,  Addressable r,  Addressable n,  Addressable q,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$395.EC_POINT_mul$MH, "EC_POINT_mul");
        try {
            return (int)mh$.invokeExact(group, r, n, q, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_precompute_mult$MH() {
        return RuntimeHelper.requireNonNull(constants$396.EC_GROUP_precompute_mult$MH,"EC_GROUP_precompute_mult");
    }
    public static int EC_GROUP_precompute_mult ( Addressable group,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$396.EC_GROUP_precompute_mult$MH, "EC_GROUP_precompute_mult");
        try {
            return (int)mh$.invokeExact(group, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_have_precompute_mult$MH() {
        return RuntimeHelper.requireNonNull(constants$396.EC_GROUP_have_precompute_mult$MH,"EC_GROUP_have_precompute_mult");
    }
    public static int EC_GROUP_have_precompute_mult ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$396.EC_GROUP_have_precompute_mult$MH, "EC_GROUP_have_precompute_mult");
        try {
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECPKPARAMETERS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$396.ECPKPARAMETERS_new$MH,"ECPKPARAMETERS_new");
    }
    public static MemoryAddress ECPKPARAMETERS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$396.ECPKPARAMETERS_new$MH, "ECPKPARAMETERS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECPKPARAMETERS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$396.ECPKPARAMETERS_free$MH,"ECPKPARAMETERS_free");
    }
    public static void ECPKPARAMETERS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$396.ECPKPARAMETERS_free$MH, "ECPKPARAMETERS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECPARAMETERS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$396.ECPARAMETERS_new$MH,"ECPARAMETERS_new");
    }
    public static MemoryAddress ECPARAMETERS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$396.ECPARAMETERS_new$MH, "ECPARAMETERS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECPARAMETERS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$396.ECPARAMETERS_free$MH,"ECPARAMETERS_free");
    }
    public static void ECPARAMETERS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$396.ECPARAMETERS_free$MH, "ECPARAMETERS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_basis_type$MH() {
        return RuntimeHelper.requireNonNull(constants$397.EC_GROUP_get_basis_type$MH,"EC_GROUP_get_basis_type");
    }
    public static int EC_GROUP_get_basis_type ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$397.EC_GROUP_get_basis_type$MH, "EC_GROUP_get_basis_type");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$397.d2i_ECPKParameters$MH,"d2i_ECPKParameters");
    }
    public static MemoryAddress d2i_ECPKParameters ( Addressable x0,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$397.d2i_ECPKParameters$MH, "d2i_ECPKParameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$397.i2d_ECPKParameters$MH,"i2d_ECPKParameters");
    }
    public static int i2d_ECPKParameters ( Addressable x0,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$397.i2d_ECPKParameters$MH, "i2d_ECPKParameters");
        try {
            return (int)mh$.invokeExact(x0, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECPKParameters_print$MH() {
        return RuntimeHelper.requireNonNull(constants$397.ECPKParameters_print$MH,"ECPKParameters_print");
    }
    public static int ECPKParameters_print ( Addressable bp,  Addressable x,  int off) {
        var mh$ = RuntimeHelper.requireNonNull(constants$397.ECPKParameters_print$MH, "ECPKParameters_print");
        try {
            return (int)mh$.invokeExact(bp, x, off);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECPKParameters_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$397.ECPKParameters_print_fp$MH,"ECPKParameters_print_fp");
    }
    public static int ECPKParameters_print_fp ( Addressable fp,  Addressable x,  int off) {
        var mh$ = RuntimeHelper.requireNonNull(constants$397.ECPKParameters_print_fp$MH, "ECPKParameters_print_fp");
        try {
            return (int)mh$.invokeExact(fp, x, off);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$397.EC_KEY_new$MH,"EC_KEY_new");
    }
    public static MemoryAddress EC_KEY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$397.EC_KEY_new$MH, "EC_KEY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$398.EC_KEY_get_flags$MH,"EC_KEY_get_flags");
    }
    public static int EC_KEY_get_flags ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$398.EC_KEY_get_flags$MH, "EC_KEY_get_flags");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$398.EC_KEY_set_flags$MH,"EC_KEY_set_flags");
    }
    public static void EC_KEY_set_flags ( Addressable key,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$398.EC_KEY_set_flags$MH, "EC_KEY_set_flags");
        try {
            mh$.invokeExact(key, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$398.EC_KEY_clear_flags$MH,"EC_KEY_clear_flags");
    }
    public static void EC_KEY_clear_flags ( Addressable key,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$398.EC_KEY_clear_flags$MH, "EC_KEY_clear_flags");
        try {
            mh$.invokeExact(key, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_decoded_from_explicit_params$MH() {
        return RuntimeHelper.requireNonNull(constants$398.EC_KEY_decoded_from_explicit_params$MH,"EC_KEY_decoded_from_explicit_params");
    }
    public static int EC_KEY_decoded_from_explicit_params ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$398.EC_KEY_decoded_from_explicit_params$MH, "EC_KEY_decoded_from_explicit_params");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_new_by_curve_name$MH() {
        return RuntimeHelper.requireNonNull(constants$398.EC_KEY_new_by_curve_name$MH,"EC_KEY_new_by_curve_name");
    }
    public static MemoryAddress EC_KEY_new_by_curve_name ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$398.EC_KEY_new_by_curve_name$MH, "EC_KEY_new_by_curve_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$398.EC_KEY_free$MH,"EC_KEY_free");
    }
    public static void EC_KEY_free ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$398.EC_KEY_free$MH, "EC_KEY_free");
        try {
            mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$399.EC_KEY_copy$MH,"EC_KEY_copy");
    }
    public static MemoryAddress EC_KEY_copy ( Addressable dst,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$399.EC_KEY_copy$MH, "EC_KEY_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$399.EC_KEY_dup$MH,"EC_KEY_dup");
    }
    public static MemoryAddress EC_KEY_dup ( Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$399.EC_KEY_dup$MH, "EC_KEY_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$399.EC_KEY_up_ref$MH,"EC_KEY_up_ref");
    }
    public static int EC_KEY_up_ref ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$399.EC_KEY_up_ref$MH, "EC_KEY_up_ref");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get0_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$399.EC_KEY_get0_engine$MH,"EC_KEY_get0_engine");
    }
    public static MemoryAddress EC_KEY_get0_engine ( Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$399.EC_KEY_get0_engine$MH, "EC_KEY_get0_engine");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get0_group$MH() {
        return RuntimeHelper.requireNonNull(constants$399.EC_KEY_get0_group$MH,"EC_KEY_get0_group");
    }
    public static MemoryAddress EC_KEY_get0_group ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$399.EC_KEY_get0_group$MH, "EC_KEY_get0_group");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_group$MH() {
        return RuntimeHelper.requireNonNull(constants$399.EC_KEY_set_group$MH,"EC_KEY_set_group");
    }
    public static int EC_KEY_set_group ( Addressable key,  Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$399.EC_KEY_set_group$MH, "EC_KEY_set_group");
        try {
            return (int)mh$.invokeExact(key, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get0_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$400.EC_KEY_get0_private_key$MH,"EC_KEY_get0_private_key");
    }
    public static MemoryAddress EC_KEY_get0_private_key ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$400.EC_KEY_get0_private_key$MH, "EC_KEY_get0_private_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$400.EC_KEY_set_private_key$MH,"EC_KEY_set_private_key");
    }
    public static int EC_KEY_set_private_key ( Addressable key,  Addressable prv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$400.EC_KEY_set_private_key$MH, "EC_KEY_set_private_key");
        try {
            return (int)mh$.invokeExact(key, prv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get0_public_key$MH() {
        return RuntimeHelper.requireNonNull(constants$400.EC_KEY_get0_public_key$MH,"EC_KEY_get0_public_key");
    }
    public static MemoryAddress EC_KEY_get0_public_key ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$400.EC_KEY_get0_public_key$MH, "EC_KEY_get0_public_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_public_key$MH() {
        return RuntimeHelper.requireNonNull(constants$400.EC_KEY_set_public_key$MH,"EC_KEY_set_public_key");
    }
    public static int EC_KEY_set_public_key ( Addressable key,  Addressable pub) {
        var mh$ = RuntimeHelper.requireNonNull(constants$400.EC_KEY_set_public_key$MH, "EC_KEY_set_public_key");
        try {
            return (int)mh$.invokeExact(key, pub);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get_enc_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$400.EC_KEY_get_enc_flags$MH,"EC_KEY_get_enc_flags");
    }
    public static int EC_KEY_get_enc_flags ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$400.EC_KEY_get_enc_flags$MH, "EC_KEY_get_enc_flags");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_enc_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$400.EC_KEY_set_enc_flags$MH,"EC_KEY_set_enc_flags");
    }
    public static void EC_KEY_set_enc_flags ( Addressable eckey,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$400.EC_KEY_set_enc_flags$MH, "EC_KEY_set_enc_flags");
        try {
            mh$.invokeExact(eckey, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get_conv_form$MH() {
        return RuntimeHelper.requireNonNull(constants$401.EC_KEY_get_conv_form$MH,"EC_KEY_get_conv_form");
    }
    public static int EC_KEY_get_conv_form ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$401.EC_KEY_get_conv_form$MH, "EC_KEY_get_conv_form");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_conv_form$MH() {
        return RuntimeHelper.requireNonNull(constants$401.EC_KEY_set_conv_form$MH,"EC_KEY_set_conv_form");
    }
    public static void EC_KEY_set_conv_form ( Addressable eckey,  int cform) {
        var mh$ = RuntimeHelper.requireNonNull(constants$401.EC_KEY_set_conv_form$MH, "EC_KEY_set_conv_form");
        try {
            mh$.invokeExact(eckey, cform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$401.EC_KEY_set_ex_data$MH,"EC_KEY_set_ex_data");
    }
    public static int EC_KEY_set_ex_data ( Addressable key,  int idx,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$401.EC_KEY_set_ex_data$MH, "EC_KEY_set_ex_data");
        try {
            return (int)mh$.invokeExact(key, idx, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$401.EC_KEY_get_ex_data$MH,"EC_KEY_get_ex_data");
    }
    public static MemoryAddress EC_KEY_get_ex_data ( Addressable key,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$401.EC_KEY_get_ex_data$MH, "EC_KEY_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_asn1_flag$MH() {
        return RuntimeHelper.requireNonNull(constants$401.EC_KEY_set_asn1_flag$MH,"EC_KEY_set_asn1_flag");
    }
    public static void EC_KEY_set_asn1_flag ( Addressable eckey,  int asn1_flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$401.EC_KEY_set_asn1_flag$MH, "EC_KEY_set_asn1_flag");
        try {
            mh$.invokeExact(eckey, asn1_flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_precompute_mult$MH() {
        return RuntimeHelper.requireNonNull(constants$401.EC_KEY_precompute_mult$MH,"EC_KEY_precompute_mult");
    }
    public static int EC_KEY_precompute_mult ( Addressable key,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$401.EC_KEY_precompute_mult$MH, "EC_KEY_precompute_mult");
        try {
            return (int)mh$.invokeExact(key, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_generate_key$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EC_KEY_generate_key$MH,"EC_KEY_generate_key");
    }
    public static int EC_KEY_generate_key ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$402.EC_KEY_generate_key$MH, "EC_KEY_generate_key");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_check_key$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EC_KEY_check_key$MH,"EC_KEY_check_key");
    }
    public static int EC_KEY_check_key ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$402.EC_KEY_check_key$MH, "EC_KEY_check_key");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_can_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EC_KEY_can_sign$MH,"EC_KEY_can_sign");
    }
    public static int EC_KEY_can_sign ( Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$402.EC_KEY_can_sign$MH, "EC_KEY_can_sign");
        try {
            return (int)mh$.invokeExact(eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_public_key_affine_coordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EC_KEY_set_public_key_affine_coordinates$MH,"EC_KEY_set_public_key_affine_coordinates");
    }
    public static int EC_KEY_set_public_key_affine_coordinates ( Addressable key,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(constants$402.EC_KEY_set_public_key_affine_coordinates$MH, "EC_KEY_set_public_key_affine_coordinates");
        try {
            return (int)mh$.invokeExact(key, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_key2buf$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EC_KEY_key2buf$MH,"EC_KEY_key2buf");
    }
    public static long EC_KEY_key2buf ( Addressable key,  int form,  Addressable pbuf,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$402.EC_KEY_key2buf$MH, "EC_KEY_key2buf");
        try {
            return (long)mh$.invokeExact(key, form, pbuf, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_oct2key$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EC_KEY_oct2key$MH,"EC_KEY_oct2key");
    }
    public static int EC_KEY_oct2key ( Addressable key,  Addressable buf,  long len,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$402.EC_KEY_oct2key$MH, "EC_KEY_oct2key");
        try {
            return (int)mh$.invokeExact(key, buf, len, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_oct2priv$MH() {
        return RuntimeHelper.requireNonNull(constants$403.EC_KEY_oct2priv$MH,"EC_KEY_oct2priv");
    }
    public static int EC_KEY_oct2priv ( Addressable key,  Addressable buf,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$403.EC_KEY_oct2priv$MH, "EC_KEY_oct2priv");
        try {
            return (int)mh$.invokeExact(key, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_priv2oct$MH() {
        return RuntimeHelper.requireNonNull(constants$403.EC_KEY_priv2oct$MH,"EC_KEY_priv2oct");
    }
    public static long EC_KEY_priv2oct ( Addressable key,  Addressable buf,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$403.EC_KEY_priv2oct$MH, "EC_KEY_priv2oct");
        try {
            return (long)mh$.invokeExact(key, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_priv2buf$MH() {
        return RuntimeHelper.requireNonNull(constants$403.EC_KEY_priv2buf$MH,"EC_KEY_priv2buf");
    }
    public static long EC_KEY_priv2buf ( Addressable eckey,  Addressable pbuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$403.EC_KEY_priv2buf$MH, "EC_KEY_priv2buf");
        try {
            return (long)mh$.invokeExact(eckey, pbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ECPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$403.d2i_ECPrivateKey$MH,"d2i_ECPrivateKey");
    }
    public static MemoryAddress d2i_ECPrivateKey ( Addressable key,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$403.d2i_ECPrivateKey$MH, "d2i_ECPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ECPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$403.i2d_ECPrivateKey$MH,"i2d_ECPrivateKey");
    }
    public static int i2d_ECPrivateKey ( Addressable key,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$403.i2d_ECPrivateKey$MH, "i2d_ECPrivateKey");
        try {
            return (int)mh$.invokeExact(key, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ECParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$403.d2i_ECParameters$MH,"d2i_ECParameters");
    }
    public static MemoryAddress d2i_ECParameters ( Addressable key,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$403.d2i_ECParameters$MH, "d2i_ECParameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ECParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$404.i2d_ECParameters$MH,"i2d_ECParameters");
    }
    public static int i2d_ECParameters ( Addressable key,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$404.i2d_ECParameters$MH, "i2d_ECParameters");
        try {
            return (int)mh$.invokeExact(key, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle o2i_ECPublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$404.o2i_ECPublicKey$MH,"o2i_ECPublicKey");
    }
    public static MemoryAddress o2i_ECPublicKey ( Addressable key,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$404.o2i_ECPublicKey$MH, "o2i_ECPublicKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2o_ECPublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$404.i2o_ECPublicKey$MH,"i2o_ECPublicKey");
    }
    public static int i2o_ECPublicKey ( Addressable key,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$404.i2o_ECPublicKey$MH, "i2o_ECPublicKey");
        try {
            return (int)mh$.invokeExact(key, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECParameters_print$MH() {
        return RuntimeHelper.requireNonNull(constants$404.ECParameters_print$MH,"ECParameters_print");
    }
    public static int ECParameters_print ( Addressable bp,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$404.ECParameters_print$MH, "ECParameters_print");
        try {
            return (int)mh$.invokeExact(bp, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_print$MH() {
        return RuntimeHelper.requireNonNull(constants$404.EC_KEY_print$MH,"EC_KEY_print");
    }
    public static int EC_KEY_print ( Addressable bp,  Addressable key,  int off) {
        var mh$ = RuntimeHelper.requireNonNull(constants$404.EC_KEY_print$MH, "EC_KEY_print");
        try {
            return (int)mh$.invokeExact(bp, key, off);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECParameters_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$404.ECParameters_print_fp$MH,"ECParameters_print_fp");
    }
    public static int ECParameters_print_fp ( Addressable fp,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$404.ECParameters_print_fp$MH, "ECParameters_print_fp");
        try {
            return (int)mh$.invokeExact(fp, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$405.EC_KEY_print_fp$MH,"EC_KEY_print_fp");
    }
    public static int EC_KEY_print_fp ( Addressable fp,  Addressable key,  int off) {
        var mh$ = RuntimeHelper.requireNonNull(constants$405.EC_KEY_print_fp$MH, "EC_KEY_print_fp");
        try {
            return (int)mh$.invokeExact(fp, key, off);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_OpenSSL$MH() {
        return RuntimeHelper.requireNonNull(constants$405.EC_KEY_OpenSSL$MH,"EC_KEY_OpenSSL");
    }
    public static MemoryAddress EC_KEY_OpenSSL () {
        var mh$ = RuntimeHelper.requireNonNull(constants$405.EC_KEY_OpenSSL$MH, "EC_KEY_OpenSSL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get_default_method$MH() {
        return RuntimeHelper.requireNonNull(constants$405.EC_KEY_get_default_method$MH,"EC_KEY_get_default_method");
    }
    public static MemoryAddress EC_KEY_get_default_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$405.EC_KEY_get_default_method$MH, "EC_KEY_get_default_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_default_method$MH() {
        return RuntimeHelper.requireNonNull(constants$405.EC_KEY_set_default_method$MH,"EC_KEY_set_default_method");
    }
    public static void EC_KEY_set_default_method ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$405.EC_KEY_set_default_method$MH, "EC_KEY_set_default_method");
        try {
            mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_get_method$MH() {
        return RuntimeHelper.requireNonNull(constants$405.EC_KEY_get_method$MH,"EC_KEY_get_method");
    }
    public static MemoryAddress EC_KEY_get_method ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$405.EC_KEY_get_method$MH, "EC_KEY_get_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_set_method$MH() {
        return RuntimeHelper.requireNonNull(constants$405.EC_KEY_set_method$MH,"EC_KEY_set_method");
    }
    public static int EC_KEY_set_method ( Addressable key,  Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$405.EC_KEY_set_method$MH, "EC_KEY_set_method");
        try {
            return (int)mh$.invokeExact(key, meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_new_method$MH() {
        return RuntimeHelper.requireNonNull(constants$406.EC_KEY_new_method$MH,"EC_KEY_new_method");
    }
    public static MemoryAddress EC_KEY_new_method ( Addressable engine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$406.EC_KEY_new_method$MH, "EC_KEY_new_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDH_KDF_X9_62$MH() {
        return RuntimeHelper.requireNonNull(constants$406.ECDH_KDF_X9_62$MH,"ECDH_KDF_X9_62");
    }
    public static int ECDH_KDF_X9_62 ( Addressable out,  long outlen,  Addressable Z,  long Zlen,  Addressable sinfo,  long sinfolen,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$406.ECDH_KDF_X9_62$MH, "ECDH_KDF_X9_62");
        try {
            return (int)mh$.invokeExact(out, outlen, Z, Zlen, sinfo, sinfolen, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDH_compute_key$MH() {
        return RuntimeHelper.requireNonNull(constants$406.ECDH_compute_key$MH,"ECDH_compute_key");
    }
    public static int ECDH_compute_key ( Addressable out,  long outlen,  Addressable pub_key,  Addressable ecdh,  Addressable KDF) {
        var mh$ = RuntimeHelper.requireNonNull(constants$406.ECDH_compute_key$MH, "ECDH_compute_key");
        try {
            return (int)mh$.invokeExact(out, outlen, pub_key, ecdh, KDF);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_SIG_new$MH() {
        return RuntimeHelper.requireNonNull(constants$406.ECDSA_SIG_new$MH,"ECDSA_SIG_new");
    }
    public static MemoryAddress ECDSA_SIG_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$406.ECDSA_SIG_new$MH, "ECDSA_SIG_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_SIG_free$MH() {
        return RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_free$MH,"ECDSA_SIG_free");
    }
    public static void ECDSA_SIG_free ( Addressable sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_free$MH, "ECDSA_SIG_free");
        try {
            mh$.invokeExact(sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ECDSA_SIG$MH() {
        return RuntimeHelper.requireNonNull(constants$407.i2d_ECDSA_SIG$MH,"i2d_ECDSA_SIG");
    }
    public static int i2d_ECDSA_SIG ( Addressable sig,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$407.i2d_ECDSA_SIG$MH, "i2d_ECDSA_SIG");
        try {
            return (int)mh$.invokeExact(sig, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ECDSA_SIG$MH() {
        return RuntimeHelper.requireNonNull(constants$407.d2i_ECDSA_SIG$MH,"d2i_ECDSA_SIG");
    }
    public static MemoryAddress d2i_ECDSA_SIG ( Addressable sig,  Addressable pp,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$407.d2i_ECDSA_SIG$MH, "d2i_ECDSA_SIG");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sig, pp, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_SIG_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_get0$MH,"ECDSA_SIG_get0");
    }
    public static void ECDSA_SIG_get0 ( Addressable sig,  Addressable pr,  Addressable ps) {
        var mh$ = RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_get0$MH, "ECDSA_SIG_get0");
        try {
            mh$.invokeExact(sig, pr, ps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_SIG_get0_r$MH() {
        return RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_get0_r$MH,"ECDSA_SIG_get0_r");
    }
    public static MemoryAddress ECDSA_SIG_get0_r ( Addressable sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_get0_r$MH, "ECDSA_SIG_get0_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_SIG_get0_s$MH() {
        return RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_get0_s$MH,"ECDSA_SIG_get0_s");
    }
    public static MemoryAddress ECDSA_SIG_get0_s ( Addressable sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$407.ECDSA_SIG_get0_s$MH, "ECDSA_SIG_get0_s");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_SIG_set0$MH() {
        return RuntimeHelper.requireNonNull(constants$408.ECDSA_SIG_set0$MH,"ECDSA_SIG_set0");
    }
    public static int ECDSA_SIG_set0 ( Addressable sig,  Addressable r,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$408.ECDSA_SIG_set0$MH, "ECDSA_SIG_set0");
        try {
            return (int)mh$.invokeExact(sig, r, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_do_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$408.ECDSA_do_sign$MH,"ECDSA_do_sign");
    }
    public static MemoryAddress ECDSA_do_sign ( Addressable dgst,  int dgst_len,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$408.ECDSA_do_sign$MH, "ECDSA_do_sign");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dgst, dgst_len, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_do_sign_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$408.ECDSA_do_sign_ex$MH,"ECDSA_do_sign_ex");
    }
    public static MemoryAddress ECDSA_do_sign_ex ( Addressable dgst,  int dgstlen,  Addressable kinv,  Addressable rp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$408.ECDSA_do_sign_ex$MH, "ECDSA_do_sign_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dgst, dgstlen, kinv, rp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_do_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$408.ECDSA_do_verify$MH,"ECDSA_do_verify");
    }
    public static int ECDSA_do_verify ( Addressable dgst,  int dgst_len,  Addressable sig,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$408.ECDSA_do_verify$MH, "ECDSA_do_verify");
        try {
            return (int)mh$.invokeExact(dgst, dgst_len, sig, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_sign_setup$MH() {
        return RuntimeHelper.requireNonNull(constants$408.ECDSA_sign_setup$MH,"ECDSA_sign_setup");
    }
    public static int ECDSA_sign_setup ( Addressable eckey,  Addressable ctx,  Addressable kinv,  Addressable rp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$408.ECDSA_sign_setup$MH, "ECDSA_sign_setup");
        try {
            return (int)mh$.invokeExact(eckey, ctx, kinv, rp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$408.ECDSA_sign$MH,"ECDSA_sign");
    }
    public static int ECDSA_sign ( int type,  Addressable dgst,  int dgstlen,  Addressable sig,  Addressable siglen,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$408.ECDSA_sign$MH, "ECDSA_sign");
        try {
            return (int)mh$.invokeExact(type, dgst, dgstlen, sig, siglen, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_sign_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$409.ECDSA_sign_ex$MH,"ECDSA_sign_ex");
    }
    public static int ECDSA_sign_ex ( int type,  Addressable dgst,  int dgstlen,  Addressable sig,  Addressable siglen,  Addressable kinv,  Addressable rp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$409.ECDSA_sign_ex$MH, "ECDSA_sign_ex");
        try {
            return (int)mh$.invokeExact(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$409.ECDSA_verify$MH,"ECDSA_verify");
    }
    public static int ECDSA_verify ( int type,  Addressable dgst,  int dgstlen,  Addressable sig,  int siglen,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$409.ECDSA_verify$MH, "ECDSA_verify");
        try {
            return (int)mh$.invokeExact(type, dgst, dgstlen, sig, siglen, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECDSA_size$MH() {
        return RuntimeHelper.requireNonNull(constants$409.ECDSA_size$MH,"ECDSA_size");
    }
    public static int ECDSA_size ( Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$409.ECDSA_size$MH, "ECDSA_size");
        try {
            return (int)mh$.invokeExact(eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_new$MH() {
        return RuntimeHelper.requireNonNull(constants$409.EC_KEY_METHOD_new$MH,"EC_KEY_METHOD_new");
    }
    public static MemoryAddress EC_KEY_METHOD_new ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$409.EC_KEY_METHOD_new$MH, "EC_KEY_METHOD_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_free$MH() {
        return RuntimeHelper.requireNonNull(constants$409.EC_KEY_METHOD_free$MH,"EC_KEY_METHOD_free");
    }
    public static void EC_KEY_METHOD_free ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$409.EC_KEY_METHOD_free$MH, "EC_KEY_METHOD_free");
        try {
            mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_set_init$MH() {
        return RuntimeHelper.requireNonNull(constants$411.EC_KEY_METHOD_set_init$MH,"EC_KEY_METHOD_set_init");
    }
    public static void EC_KEY_METHOD_set_init ( Addressable meth,  Addressable init,  Addressable finish,  Addressable copy,  Addressable set_group,  Addressable set_private,  Addressable set_public) {
        var mh$ = RuntimeHelper.requireNonNull(constants$411.EC_KEY_METHOD_set_init$MH, "EC_KEY_METHOD_set_init");
        try {
            mh$.invokeExact(meth, init, finish, copy, set_group, set_private, set_public);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_set_keygen$MH() {
        return RuntimeHelper.requireNonNull(constants$412.EC_KEY_METHOD_set_keygen$MH,"EC_KEY_METHOD_set_keygen");
    }
    public static void EC_KEY_METHOD_set_keygen ( Addressable meth,  Addressable keygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$412.EC_KEY_METHOD_set_keygen$MH, "EC_KEY_METHOD_set_keygen");
        try {
            mh$.invokeExact(meth, keygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_set_compute_key$MH() {
        return RuntimeHelper.requireNonNull(constants$412.EC_KEY_METHOD_set_compute_key$MH,"EC_KEY_METHOD_set_compute_key");
    }
    public static void EC_KEY_METHOD_set_compute_key ( Addressable meth,  Addressable ckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$412.EC_KEY_METHOD_set_compute_key$MH, "EC_KEY_METHOD_set_compute_key");
        try {
            mh$.invokeExact(meth, ckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_set_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$414.EC_KEY_METHOD_set_sign$MH,"EC_KEY_METHOD_set_sign");
    }
    public static void EC_KEY_METHOD_set_sign ( Addressable meth,  Addressable sign,  Addressable sign_setup,  Addressable sign_sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$414.EC_KEY_METHOD_set_sign$MH, "EC_KEY_METHOD_set_sign");
        try {
            mh$.invokeExact(meth, sign, sign_setup, sign_sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_set_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$414.EC_KEY_METHOD_set_verify$MH,"EC_KEY_METHOD_set_verify");
    }
    public static void EC_KEY_METHOD_set_verify ( Addressable meth,  Addressable verify,  Addressable verify_sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$414.EC_KEY_METHOD_set_verify$MH, "EC_KEY_METHOD_set_verify");
        try {
            mh$.invokeExact(meth, verify, verify_sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_get_init$MH() {
        return RuntimeHelper.requireNonNull(constants$417.EC_KEY_METHOD_get_init$MH,"EC_KEY_METHOD_get_init");
    }
    public static void EC_KEY_METHOD_get_init ( Addressable meth,  Addressable pinit,  Addressable pfinish,  Addressable pcopy,  Addressable pset_group,  Addressable pset_private,  Addressable pset_public) {
        var mh$ = RuntimeHelper.requireNonNull(constants$417.EC_KEY_METHOD_get_init$MH, "EC_KEY_METHOD_get_init");
        try {
            mh$.invokeExact(meth, pinit, pfinish, pcopy, pset_group, pset_private, pset_public);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_get_keygen$MH() {
        return RuntimeHelper.requireNonNull(constants$417.EC_KEY_METHOD_get_keygen$MH,"EC_KEY_METHOD_get_keygen");
    }
    public static void EC_KEY_METHOD_get_keygen ( Addressable meth,  Addressable pkeygen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$417.EC_KEY_METHOD_get_keygen$MH, "EC_KEY_METHOD_get_keygen");
        try {
            mh$.invokeExact(meth, pkeygen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_get_compute_key$MH() {
        return RuntimeHelper.requireNonNull(constants$418.EC_KEY_METHOD_get_compute_key$MH,"EC_KEY_METHOD_get_compute_key");
    }
    public static void EC_KEY_METHOD_get_compute_key ( Addressable meth,  Addressable pck) {
        var mh$ = RuntimeHelper.requireNonNull(constants$418.EC_KEY_METHOD_get_compute_key$MH, "EC_KEY_METHOD_get_compute_key");
        try {
            mh$.invokeExact(meth, pck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_get_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$419.EC_KEY_METHOD_get_sign$MH,"EC_KEY_METHOD_get_sign");
    }
    public static void EC_KEY_METHOD_get_sign ( Addressable meth,  Addressable psign,  Addressable psign_setup,  Addressable psign_sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$419.EC_KEY_METHOD_get_sign$MH, "EC_KEY_METHOD_get_sign");
        try {
            mh$.invokeExact(meth, psign, psign_setup, psign_sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_METHOD_get_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$420.EC_KEY_METHOD_get_verify$MH,"EC_KEY_METHOD_get_verify");
    }
    public static void EC_KEY_METHOD_get_verify ( Addressable meth,  Addressable pverify,  Addressable pverify_sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$420.EC_KEY_METHOD_get_verify$MH, "EC_KEY_METHOD_get_verify");
        try {
            mh$.invokeExact(meth, pverify, pverify_sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_RSA_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$420.ERR_load_RSA_strings$MH,"ERR_load_RSA_strings");
    }
    public static int ERR_load_RSA_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$420.ERR_load_RSA_strings$MH, "ERR_load_RSA_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_new$MH() {
        return RuntimeHelper.requireNonNull(constants$420.RSA_new$MH,"RSA_new");
    }
    public static MemoryAddress RSA_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$420.RSA_new$MH, "RSA_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_new_method$MH() {
        return RuntimeHelper.requireNonNull(constants$420.RSA_new_method$MH,"RSA_new_method");
    }
    public static MemoryAddress RSA_new_method ( Addressable engine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$420.RSA_new_method$MH, "RSA_new_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$420.RSA_bits$MH,"RSA_bits");
    }
    public static int RSA_bits ( Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$420.RSA_bits$MH, "RSA_bits");
        try {
            return (int)mh$.invokeExact(rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_size$MH() {
        return RuntimeHelper.requireNonNull(constants$420.RSA_size$MH,"RSA_size");
    }
    public static int RSA_size ( Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$420.RSA_size$MH, "RSA_size");
        try {
            return (int)mh$.invokeExact(rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_security_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$421.RSA_security_bits$MH,"RSA_security_bits");
    }
    public static int RSA_security_bits ( Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$421.RSA_security_bits$MH, "RSA_security_bits");
        try {
            return (int)mh$.invokeExact(rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_set0_key$MH() {
        return RuntimeHelper.requireNonNull(constants$421.RSA_set0_key$MH,"RSA_set0_key");
    }
    public static int RSA_set0_key ( Addressable r,  Addressable n,  Addressable e,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$421.RSA_set0_key$MH, "RSA_set0_key");
        try {
            return (int)mh$.invokeExact(r, n, e, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_set0_factors$MH() {
        return RuntimeHelper.requireNonNull(constants$421.RSA_set0_factors$MH,"RSA_set0_factors");
    }
    public static int RSA_set0_factors ( Addressable r,  Addressable p,  Addressable q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$421.RSA_set0_factors$MH, "RSA_set0_factors");
        try {
            return (int)mh$.invokeExact(r, p, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_set0_crt_params$MH() {
        return RuntimeHelper.requireNonNull(constants$421.RSA_set0_crt_params$MH,"RSA_set0_crt_params");
    }
    public static int RSA_set0_crt_params ( Addressable r,  Addressable dmp1,  Addressable dmq1,  Addressable iqmp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$421.RSA_set0_crt_params$MH, "RSA_set0_crt_params");
        try {
            return (int)mh$.invokeExact(r, dmp1, dmq1, iqmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_set0_multi_prime_params$MH() {
        return RuntimeHelper.requireNonNull(constants$421.RSA_set0_multi_prime_params$MH,"RSA_set0_multi_prime_params");
    }
    public static int RSA_set0_multi_prime_params ( Addressable r,  Addressable primes,  Addressable exps,  Addressable coeffs,  int pnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$421.RSA_set0_multi_prime_params$MH, "RSA_set0_multi_prime_params");
        try {
            return (int)mh$.invokeExact(r, primes, exps, coeffs, pnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_get0_key$MH() {
        return RuntimeHelper.requireNonNull(constants$421.RSA_get0_key$MH,"RSA_get0_key");
    }
    public static void RSA_get0_key ( Addressable r,  Addressable n,  Addressable e,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$421.RSA_get0_key$MH, "RSA_get0_key");
        try {
            mh$.invokeExact(r, n, e, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_get0_factors$MH() {
        return RuntimeHelper.requireNonNull(constants$422.RSA_get0_factors$MH,"RSA_get0_factors");
    }
    public static void RSA_get0_factors ( Addressable r,  Addressable p,  Addressable q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$422.RSA_get0_factors$MH, "RSA_get0_factors");
        try {
            mh$.invokeExact(r, p, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_get_multi_prime_extra_count$MH() {
        return RuntimeHelper.requireNonNull(constants$422.RSA_get_multi_prime_extra_count$MH,"RSA_get_multi_prime_extra_count");
    }
    public static int RSA_get_multi_prime_extra_count ( Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$422.RSA_get_multi_prime_extra_count$MH, "RSA_get_multi_prime_extra_count");
        try {
            return (int)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_get0_multi_prime_factors$MH() {
        return RuntimeHelper.requireNonNull(constants$422.RSA_get0_multi_prime_factors$MH,"RSA_get0_multi_prime_factors");
    }
    public static int RSA_get0_multi_prime_factors ( Addressable r,  Addressable primes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$422.RSA_get0_multi_prime_factors$MH, "RSA_get0_multi_prime_factors");
        try {
            return (int)mh$.invokeExact(r, primes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_get0_crt_params$MH() {
        return RuntimeHelper.requireNonNull(constants$422.RSA_get0_crt_params$MH,"RSA_get0_crt_params");
    }
    public static void RSA_get0_crt_params ( Addressable r,  Addressable dmp1,  Addressable dmq1,  Addressable iqmp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$422.RSA_get0_crt_params$MH, "RSA_get0_crt_params");
        try {
            mh$.invokeExact(r, dmp1, dmq1, iqmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RSA_get0_multi_prime_crt_params$MH() {
        return RuntimeHelper.requireNonNull(constants$422.RSA_get0_multi_prime_crt_params$MH,"RSA_get0_multi_prime_crt_params");
    }
    public static int RSA_get0_multi_prime_crt_params ( Addressable r,  Addressable exps,  Addressable coeffs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$422.RSA_get0_multi_prime_crt_params$MH, "RSA_get0_multi_prime_crt_params");
        try {
            return (int)mh$.invokeExact(r, exps, coeffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


