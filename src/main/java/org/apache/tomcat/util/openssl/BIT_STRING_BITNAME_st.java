// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class BIT_STRING_BITNAME_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("bitnum"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("lname"),
        ADDRESS.withName("sname")
    ).withName("BIT_STRING_BITNAME_st");
    public static MemoryLayout $LAYOUT() {
        return BIT_STRING_BITNAME_st.$struct$LAYOUT;
    }
    static final VarHandle bitnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bitnum"));
    public static VarHandle bitnum$VH() {
        return BIT_STRING_BITNAME_st.bitnum$VH;
    }
    public static int bitnum$get(MemorySegment seg) {
        return (int)BIT_STRING_BITNAME_st.bitnum$VH.get(seg);
    }
    public static void bitnum$set( MemorySegment seg, int x) {
        BIT_STRING_BITNAME_st.bitnum$VH.set(seg, x);
    }
    public static int bitnum$get(MemorySegment seg, long index) {
        return (int)BIT_STRING_BITNAME_st.bitnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bitnum$set(MemorySegment seg, long index, int x) {
        BIT_STRING_BITNAME_st.bitnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lname"));
    public static VarHandle lname$VH() {
        return BIT_STRING_BITNAME_st.lname$VH;
    }
    public static MemoryAddress lname$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)BIT_STRING_BITNAME_st.lname$VH.get(seg);
    }
    public static void lname$set( MemorySegment seg, MemoryAddress x) {
        BIT_STRING_BITNAME_st.lname$VH.set(seg, x);
    }
    public static MemoryAddress lname$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)BIT_STRING_BITNAME_st.lname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lname$set(MemorySegment seg, long index, MemoryAddress x) {
        BIT_STRING_BITNAME_st.lname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sname"));
    public static VarHandle sname$VH() {
        return BIT_STRING_BITNAME_st.sname$VH;
    }
    public static MemoryAddress sname$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)BIT_STRING_BITNAME_st.sname$VH.get(seg);
    }
    public static void sname$set( MemorySegment seg, MemoryAddress x) {
        BIT_STRING_BITNAME_st.sname$VH.set(seg, x);
    }
    public static MemoryAddress sname$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)BIT_STRING_BITNAME_st.sname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sname$set(MemorySegment seg, long index, MemoryAddress x) {
        BIT_STRING_BITNAME_st.sname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


