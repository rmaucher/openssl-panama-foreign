// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_11 extends openssl_h_10 {

    public static MethodHandle i2v_ASN1_BIT_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$993.i2v_ASN1_BIT_STRING$MH,"i2v_ASN1_BIT_STRING");
    }
    public static MemoryAddress i2v_ASN1_BIT_STRING ( Addressable method,  Addressable bits,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$993.i2v_ASN1_BIT_STRING$MH, "i2v_ASN1_BIT_STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, bits, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2s_ASN1_IA5STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$993.i2s_ASN1_IA5STRING$MH,"i2s_ASN1_IA5STRING");
    }
    public static MemoryAddress i2s_ASN1_IA5STRING ( Addressable method,  Addressable ia5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$993.i2s_ASN1_IA5STRING$MH, "i2s_ASN1_IA5STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ia5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle s2i_ASN1_IA5STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$993.s2i_ASN1_IA5STRING$MH,"s2i_ASN1_IA5STRING");
    }
    public static MemoryAddress s2i_ASN1_IA5STRING ( Addressable method,  Addressable ctx,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$993.s2i_ASN1_IA5STRING$MH, "s2i_ASN1_IA5STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ctx, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2v_GENERAL_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$993.i2v_GENERAL_NAME$MH,"i2v_GENERAL_NAME");
    }
    public static MemoryAddress i2v_GENERAL_NAME ( Addressable method,  Addressable gen,  Addressable ret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$993.i2v_GENERAL_NAME$MH, "i2v_GENERAL_NAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, gen, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_print$MH() {
        return RuntimeHelper.requireNonNull(constants$993.GENERAL_NAME_print$MH,"GENERAL_NAME_print");
    }
    public static int GENERAL_NAME_print ( Addressable out,  Addressable gen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$993.GENERAL_NAME_print$MH, "GENERAL_NAME_print");
        try {
            return (int)mh$.invokeExact(out, gen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAMES_new$MH() {
        return RuntimeHelper.requireNonNull(constants$993.GENERAL_NAMES_new$MH,"GENERAL_NAMES_new");
    }
    public static MemoryAddress GENERAL_NAMES_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$993.GENERAL_NAMES_new$MH, "GENERAL_NAMES_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAMES_free$MH() {
        return RuntimeHelper.requireNonNull(constants$994.GENERAL_NAMES_free$MH,"GENERAL_NAMES_free");
    }
    public static void GENERAL_NAMES_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$994.GENERAL_NAMES_free$MH, "GENERAL_NAMES_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_GENERAL_NAMES$MH() {
        return RuntimeHelper.requireNonNull(constants$994.d2i_GENERAL_NAMES$MH,"d2i_GENERAL_NAMES");
    }
    public static MemoryAddress d2i_GENERAL_NAMES ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$994.d2i_GENERAL_NAMES$MH, "d2i_GENERAL_NAMES");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_GENERAL_NAMES$MH() {
        return RuntimeHelper.requireNonNull(constants$994.i2d_GENERAL_NAMES$MH,"i2d_GENERAL_NAMES");
    }
    public static int i2d_GENERAL_NAMES ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$994.i2d_GENERAL_NAMES$MH, "i2d_GENERAL_NAMES");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2v_GENERAL_NAMES$MH() {
        return RuntimeHelper.requireNonNull(constants$994.i2v_GENERAL_NAMES$MH,"i2v_GENERAL_NAMES");
    }
    public static MemoryAddress i2v_GENERAL_NAMES ( Addressable method,  Addressable gen,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$994.i2v_GENERAL_NAMES$MH, "i2v_GENERAL_NAMES");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, gen, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle v2i_GENERAL_NAMES$MH() {
        return RuntimeHelper.requireNonNull(constants$994.v2i_GENERAL_NAMES$MH,"v2i_GENERAL_NAMES");
    }
    public static MemoryAddress v2i_GENERAL_NAMES ( Addressable method,  Addressable ctx,  Addressable nval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$994.v2i_GENERAL_NAMES$MH, "v2i_GENERAL_NAMES");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ctx, nval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OTHERNAME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$994.OTHERNAME_new$MH,"OTHERNAME_new");
    }
    public static MemoryAddress OTHERNAME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$994.OTHERNAME_new$MH, "OTHERNAME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OTHERNAME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$995.OTHERNAME_free$MH,"OTHERNAME_free");
    }
    public static void OTHERNAME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$995.OTHERNAME_free$MH, "OTHERNAME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_OTHERNAME$MH() {
        return RuntimeHelper.requireNonNull(constants$995.d2i_OTHERNAME$MH,"d2i_OTHERNAME");
    }
    public static MemoryAddress d2i_OTHERNAME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$995.d2i_OTHERNAME$MH, "d2i_OTHERNAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_OTHERNAME$MH() {
        return RuntimeHelper.requireNonNull(constants$995.i2d_OTHERNAME$MH,"i2d_OTHERNAME");
    }
    public static int i2d_OTHERNAME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$995.i2d_OTHERNAME$MH, "i2d_OTHERNAME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EDIPARTYNAME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$995.EDIPARTYNAME_new$MH,"EDIPARTYNAME_new");
    }
    public static MemoryAddress EDIPARTYNAME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$995.EDIPARTYNAME_new$MH, "EDIPARTYNAME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EDIPARTYNAME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$995.EDIPARTYNAME_free$MH,"EDIPARTYNAME_free");
    }
    public static void EDIPARTYNAME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$995.EDIPARTYNAME_free$MH, "EDIPARTYNAME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_EDIPARTYNAME$MH() {
        return RuntimeHelper.requireNonNull(constants$995.d2i_EDIPARTYNAME$MH,"d2i_EDIPARTYNAME");
    }
    public static MemoryAddress d2i_EDIPARTYNAME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$995.d2i_EDIPARTYNAME$MH, "d2i_EDIPARTYNAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_EDIPARTYNAME$MH() {
        return RuntimeHelper.requireNonNull(constants$996.i2d_EDIPARTYNAME$MH,"i2d_EDIPARTYNAME");
    }
    public static int i2d_EDIPARTYNAME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$996.i2d_EDIPARTYNAME$MH, "i2d_EDIPARTYNAME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OTHERNAME_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$996.OTHERNAME_cmp$MH,"OTHERNAME_cmp");
    }
    public static int OTHERNAME_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$996.OTHERNAME_cmp$MH, "OTHERNAME_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_set0_value$MH() {
        return RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_set0_value$MH,"GENERAL_NAME_set0_value");
    }
    public static void GENERAL_NAME_set0_value ( Addressable a,  int type,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_set0_value$MH, "GENERAL_NAME_set0_value");
        try {
            mh$.invokeExact(a, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_get0_value$MH() {
        return RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_get0_value$MH,"GENERAL_NAME_get0_value");
    }
    public static MemoryAddress GENERAL_NAME_get0_value ( Addressable a,  Addressable ptype) {
        var mh$ = RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_get0_value$MH, "GENERAL_NAME_get0_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, ptype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_set0_othername$MH() {
        return RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_set0_othername$MH,"GENERAL_NAME_set0_othername");
    }
    public static int GENERAL_NAME_set0_othername ( Addressable gen,  Addressable oid,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_set0_othername$MH, "GENERAL_NAME_set0_othername");
        try {
            return (int)mh$.invokeExact(gen, oid, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_get0_otherName$MH() {
        return RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_get0_otherName$MH,"GENERAL_NAME_get0_otherName");
    }
    public static int GENERAL_NAME_get0_otherName ( Addressable gen,  Addressable poid,  Addressable pvalue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$996.GENERAL_NAME_get0_otherName$MH, "GENERAL_NAME_get0_otherName");
        try {
            return (int)mh$.invokeExact(gen, poid, pvalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2s_ASN1_OCTET_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$997.i2s_ASN1_OCTET_STRING$MH,"i2s_ASN1_OCTET_STRING");
    }
    public static MemoryAddress i2s_ASN1_OCTET_STRING ( Addressable method,  Addressable ia5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$997.i2s_ASN1_OCTET_STRING$MH, "i2s_ASN1_OCTET_STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ia5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle s2i_ASN1_OCTET_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$997.s2i_ASN1_OCTET_STRING$MH,"s2i_ASN1_OCTET_STRING");
    }
    public static MemoryAddress s2i_ASN1_OCTET_STRING ( Addressable method,  Addressable ctx,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$997.s2i_ASN1_OCTET_STRING$MH, "s2i_ASN1_OCTET_STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ctx, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EXTENDED_KEY_USAGE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$997.EXTENDED_KEY_USAGE_new$MH,"EXTENDED_KEY_USAGE_new");
    }
    public static MemoryAddress EXTENDED_KEY_USAGE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$997.EXTENDED_KEY_USAGE_new$MH, "EXTENDED_KEY_USAGE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EXTENDED_KEY_USAGE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$997.EXTENDED_KEY_USAGE_free$MH,"EXTENDED_KEY_USAGE_free");
    }
    public static void EXTENDED_KEY_USAGE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$997.EXTENDED_KEY_USAGE_free$MH, "EXTENDED_KEY_USAGE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_EXTENDED_KEY_USAGE$MH() {
        return RuntimeHelper.requireNonNull(constants$997.d2i_EXTENDED_KEY_USAGE$MH,"d2i_EXTENDED_KEY_USAGE");
    }
    public static MemoryAddress d2i_EXTENDED_KEY_USAGE ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$997.d2i_EXTENDED_KEY_USAGE$MH, "d2i_EXTENDED_KEY_USAGE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_EXTENDED_KEY_USAGE$MH() {
        return RuntimeHelper.requireNonNull(constants$997.i2d_EXTENDED_KEY_USAGE$MH,"i2d_EXTENDED_KEY_USAGE");
    }
    public static int i2d_EXTENDED_KEY_USAGE ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$997.i2d_EXTENDED_KEY_USAGE$MH, "i2d_EXTENDED_KEY_USAGE");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2a_ACCESS_DESCRIPTION$MH() {
        return RuntimeHelper.requireNonNull(constants$998.i2a_ACCESS_DESCRIPTION$MH,"i2a_ACCESS_DESCRIPTION");
    }
    public static int i2a_ACCESS_DESCRIPTION ( Addressable bp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$998.i2a_ACCESS_DESCRIPTION$MH, "i2a_ACCESS_DESCRIPTION");
        try {
            return (int)mh$.invokeExact(bp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLS_FEATURE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$998.TLS_FEATURE_new$MH,"TLS_FEATURE_new");
    }
    public static MemoryAddress TLS_FEATURE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$998.TLS_FEATURE_new$MH, "TLS_FEATURE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLS_FEATURE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$998.TLS_FEATURE_free$MH,"TLS_FEATURE_free");
    }
    public static void TLS_FEATURE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$998.TLS_FEATURE_free$MH, "TLS_FEATURE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CERTIFICATEPOLICIES_new$MH() {
        return RuntimeHelper.requireNonNull(constants$998.CERTIFICATEPOLICIES_new$MH,"CERTIFICATEPOLICIES_new");
    }
    public static MemoryAddress CERTIFICATEPOLICIES_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$998.CERTIFICATEPOLICIES_new$MH, "CERTIFICATEPOLICIES_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CERTIFICATEPOLICIES_free$MH() {
        return RuntimeHelper.requireNonNull(constants$998.CERTIFICATEPOLICIES_free$MH,"CERTIFICATEPOLICIES_free");
    }
    public static void CERTIFICATEPOLICIES_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$998.CERTIFICATEPOLICIES_free$MH, "CERTIFICATEPOLICIES_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_CERTIFICATEPOLICIES$MH() {
        return RuntimeHelper.requireNonNull(constants$998.d2i_CERTIFICATEPOLICIES$MH,"d2i_CERTIFICATEPOLICIES");
    }
    public static MemoryAddress d2i_CERTIFICATEPOLICIES ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$998.d2i_CERTIFICATEPOLICIES$MH, "d2i_CERTIFICATEPOLICIES");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_CERTIFICATEPOLICIES$MH() {
        return RuntimeHelper.requireNonNull(constants$999.i2d_CERTIFICATEPOLICIES$MH,"i2d_CERTIFICATEPOLICIES");
    }
    public static int i2d_CERTIFICATEPOLICIES ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$999.i2d_CERTIFICATEPOLICIES$MH, "i2d_CERTIFICATEPOLICIES");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICYINFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$999.POLICYINFO_new$MH,"POLICYINFO_new");
    }
    public static MemoryAddress POLICYINFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$999.POLICYINFO_new$MH, "POLICYINFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICYINFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$999.POLICYINFO_free$MH,"POLICYINFO_free");
    }
    public static void POLICYINFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$999.POLICYINFO_free$MH, "POLICYINFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_POLICYINFO$MH() {
        return RuntimeHelper.requireNonNull(constants$999.d2i_POLICYINFO$MH,"d2i_POLICYINFO");
    }
    public static MemoryAddress d2i_POLICYINFO ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$999.d2i_POLICYINFO$MH, "d2i_POLICYINFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_POLICYINFO$MH() {
        return RuntimeHelper.requireNonNull(constants$999.i2d_POLICYINFO$MH,"i2d_POLICYINFO");
    }
    public static int i2d_POLICYINFO ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$999.i2d_POLICYINFO$MH, "i2d_POLICYINFO");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICYQUALINFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$999.POLICYQUALINFO_new$MH,"POLICYQUALINFO_new");
    }
    public static MemoryAddress POLICYQUALINFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$999.POLICYQUALINFO_new$MH, "POLICYQUALINFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICYQUALINFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.POLICYQUALINFO_free$MH,"POLICYQUALINFO_free");
    }
    public static void POLICYQUALINFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1000.POLICYQUALINFO_free$MH, "POLICYQUALINFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_POLICYQUALINFO$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.d2i_POLICYQUALINFO$MH,"d2i_POLICYQUALINFO");
    }
    public static MemoryAddress d2i_POLICYQUALINFO ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1000.d2i_POLICYQUALINFO$MH, "d2i_POLICYQUALINFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_POLICYQUALINFO$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.i2d_POLICYQUALINFO$MH,"i2d_POLICYQUALINFO");
    }
    public static int i2d_POLICYQUALINFO ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1000.i2d_POLICYQUALINFO$MH, "i2d_POLICYQUALINFO");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle USERNOTICE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.USERNOTICE_new$MH,"USERNOTICE_new");
    }
    public static MemoryAddress USERNOTICE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1000.USERNOTICE_new$MH, "USERNOTICE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle USERNOTICE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.USERNOTICE_free$MH,"USERNOTICE_free");
    }
    public static void USERNOTICE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1000.USERNOTICE_free$MH, "USERNOTICE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_USERNOTICE$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.d2i_USERNOTICE$MH,"d2i_USERNOTICE");
    }
    public static MemoryAddress d2i_USERNOTICE ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1000.d2i_USERNOTICE$MH, "d2i_USERNOTICE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_USERNOTICE$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.i2d_USERNOTICE$MH,"i2d_USERNOTICE");
    }
    public static int i2d_USERNOTICE ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1001.i2d_USERNOTICE$MH, "i2d_USERNOTICE");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NOTICEREF_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.NOTICEREF_new$MH,"NOTICEREF_new");
    }
    public static MemoryAddress NOTICEREF_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1001.NOTICEREF_new$MH, "NOTICEREF_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NOTICEREF_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.NOTICEREF_free$MH,"NOTICEREF_free");
    }
    public static void NOTICEREF_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1001.NOTICEREF_free$MH, "NOTICEREF_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_NOTICEREF$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.d2i_NOTICEREF$MH,"d2i_NOTICEREF");
    }
    public static MemoryAddress d2i_NOTICEREF ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1001.d2i_NOTICEREF$MH, "d2i_NOTICEREF");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_NOTICEREF$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.i2d_NOTICEREF$MH,"i2d_NOTICEREF");
    }
    public static int i2d_NOTICEREF ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1001.i2d_NOTICEREF$MH, "i2d_NOTICEREF");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRL_DIST_POINTS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.CRL_DIST_POINTS_new$MH,"CRL_DIST_POINTS_new");
    }
    public static MemoryAddress CRL_DIST_POINTS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1001.CRL_DIST_POINTS_new$MH, "CRL_DIST_POINTS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRL_DIST_POINTS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.CRL_DIST_POINTS_free$MH,"CRL_DIST_POINTS_free");
    }
    public static void CRL_DIST_POINTS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1002.CRL_DIST_POINTS_free$MH, "CRL_DIST_POINTS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_CRL_DIST_POINTS$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.d2i_CRL_DIST_POINTS$MH,"d2i_CRL_DIST_POINTS");
    }
    public static MemoryAddress d2i_CRL_DIST_POINTS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1002.d2i_CRL_DIST_POINTS$MH, "d2i_CRL_DIST_POINTS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_CRL_DIST_POINTS$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.i2d_CRL_DIST_POINTS$MH,"i2d_CRL_DIST_POINTS");
    }
    public static int i2d_CRL_DIST_POINTS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1002.i2d_CRL_DIST_POINTS$MH, "i2d_CRL_DIST_POINTS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIST_POINT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.DIST_POINT_new$MH,"DIST_POINT_new");
    }
    public static MemoryAddress DIST_POINT_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1002.DIST_POINT_new$MH, "DIST_POINT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIST_POINT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.DIST_POINT_free$MH,"DIST_POINT_free");
    }
    public static void DIST_POINT_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1002.DIST_POINT_free$MH, "DIST_POINT_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DIST_POINT$MH() {
        return RuntimeHelper.requireNonNull(constants$1002.d2i_DIST_POINT$MH,"d2i_DIST_POINT");
    }
    public static MemoryAddress d2i_DIST_POINT ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1002.d2i_DIST_POINT$MH, "d2i_DIST_POINT");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DIST_POINT$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.i2d_DIST_POINT$MH,"i2d_DIST_POINT");
    }
    public static int i2d_DIST_POINT ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1003.i2d_DIST_POINT$MH, "i2d_DIST_POINT");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIST_POINT_NAME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.DIST_POINT_NAME_new$MH,"DIST_POINT_NAME_new");
    }
    public static MemoryAddress DIST_POINT_NAME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1003.DIST_POINT_NAME_new$MH, "DIST_POINT_NAME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIST_POINT_NAME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.DIST_POINT_NAME_free$MH,"DIST_POINT_NAME_free");
    }
    public static void DIST_POINT_NAME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1003.DIST_POINT_NAME_free$MH, "DIST_POINT_NAME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DIST_POINT_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.d2i_DIST_POINT_NAME$MH,"d2i_DIST_POINT_NAME");
    }
    public static MemoryAddress d2i_DIST_POINT_NAME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1003.d2i_DIST_POINT_NAME$MH, "d2i_DIST_POINT_NAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DIST_POINT_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.i2d_DIST_POINT_NAME$MH,"i2d_DIST_POINT_NAME");
    }
    public static int i2d_DIST_POINT_NAME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1003.i2d_DIST_POINT_NAME$MH, "i2d_DIST_POINT_NAME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISSUING_DIST_POINT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1003.ISSUING_DIST_POINT_new$MH,"ISSUING_DIST_POINT_new");
    }
    public static MemoryAddress ISSUING_DIST_POINT_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1003.ISSUING_DIST_POINT_new$MH, "ISSUING_DIST_POINT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ISSUING_DIST_POINT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.ISSUING_DIST_POINT_free$MH,"ISSUING_DIST_POINT_free");
    }
    public static void ISSUING_DIST_POINT_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1004.ISSUING_DIST_POINT_free$MH, "ISSUING_DIST_POINT_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ISSUING_DIST_POINT$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.d2i_ISSUING_DIST_POINT$MH,"d2i_ISSUING_DIST_POINT");
    }
    public static MemoryAddress d2i_ISSUING_DIST_POINT ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1004.d2i_ISSUING_DIST_POINT$MH, "d2i_ISSUING_DIST_POINT");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ISSUING_DIST_POINT$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.i2d_ISSUING_DIST_POINT$MH,"i2d_ISSUING_DIST_POINT");
    }
    public static int i2d_ISSUING_DIST_POINT ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1004.i2d_ISSUING_DIST_POINT$MH, "i2d_ISSUING_DIST_POINT");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DIST_POINT_set_dpname$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.DIST_POINT_set_dpname$MH,"DIST_POINT_set_dpname");
    }
    public static int DIST_POINT_set_dpname ( Addressable dpn,  Addressable iname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1004.DIST_POINT_set_dpname$MH, "DIST_POINT_set_dpname");
        try {
            return (int)mh$.invokeExact(dpn, iname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAME_CONSTRAINTS_check$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.NAME_CONSTRAINTS_check$MH,"NAME_CONSTRAINTS_check");
    }
    public static int NAME_CONSTRAINTS_check ( Addressable x,  Addressable nc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1004.NAME_CONSTRAINTS_check$MH, "NAME_CONSTRAINTS_check");
        try {
            return (int)mh$.invokeExact(x, nc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAME_CONSTRAINTS_check_CN$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.NAME_CONSTRAINTS_check_CN$MH,"NAME_CONSTRAINTS_check_CN");
    }
    public static int NAME_CONSTRAINTS_check_CN ( Addressable x,  Addressable nc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1004.NAME_CONSTRAINTS_check_CN$MH, "NAME_CONSTRAINTS_check_CN");
        try {
            return (int)mh$.invokeExact(x, nc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ACCESS_DESCRIPTION_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.ACCESS_DESCRIPTION_new$MH,"ACCESS_DESCRIPTION_new");
    }
    public static MemoryAddress ACCESS_DESCRIPTION_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1005.ACCESS_DESCRIPTION_new$MH, "ACCESS_DESCRIPTION_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ACCESS_DESCRIPTION_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.ACCESS_DESCRIPTION_free$MH,"ACCESS_DESCRIPTION_free");
    }
    public static void ACCESS_DESCRIPTION_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1005.ACCESS_DESCRIPTION_free$MH, "ACCESS_DESCRIPTION_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ACCESS_DESCRIPTION$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.d2i_ACCESS_DESCRIPTION$MH,"d2i_ACCESS_DESCRIPTION");
    }
    public static MemoryAddress d2i_ACCESS_DESCRIPTION ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1005.d2i_ACCESS_DESCRIPTION$MH, "d2i_ACCESS_DESCRIPTION");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ACCESS_DESCRIPTION$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.i2d_ACCESS_DESCRIPTION$MH,"i2d_ACCESS_DESCRIPTION");
    }
    public static int i2d_ACCESS_DESCRIPTION ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1005.i2d_ACCESS_DESCRIPTION$MH, "i2d_ACCESS_DESCRIPTION");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AUTHORITY_INFO_ACCESS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.AUTHORITY_INFO_ACCESS_new$MH,"AUTHORITY_INFO_ACCESS_new");
    }
    public static MemoryAddress AUTHORITY_INFO_ACCESS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1005.AUTHORITY_INFO_ACCESS_new$MH, "AUTHORITY_INFO_ACCESS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AUTHORITY_INFO_ACCESS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.AUTHORITY_INFO_ACCESS_free$MH,"AUTHORITY_INFO_ACCESS_free");
    }
    public static void AUTHORITY_INFO_ACCESS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1005.AUTHORITY_INFO_ACCESS_free$MH, "AUTHORITY_INFO_ACCESS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_AUTHORITY_INFO_ACCESS$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.d2i_AUTHORITY_INFO_ACCESS$MH,"d2i_AUTHORITY_INFO_ACCESS");
    }
    public static MemoryAddress d2i_AUTHORITY_INFO_ACCESS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1006.d2i_AUTHORITY_INFO_ACCESS$MH, "d2i_AUTHORITY_INFO_ACCESS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_AUTHORITY_INFO_ACCESS$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.i2d_AUTHORITY_INFO_ACCESS$MH,"i2d_AUTHORITY_INFO_ACCESS");
    }
    public static int i2d_AUTHORITY_INFO_ACCESS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1006.i2d_AUTHORITY_INFO_ACCESS$MH, "i2d_AUTHORITY_INFO_ACCESS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICY_MAPPING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.POLICY_MAPPING_new$MH,"POLICY_MAPPING_new");
    }
    public static MemoryAddress POLICY_MAPPING_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1006.POLICY_MAPPING_new$MH, "POLICY_MAPPING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICY_MAPPING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.POLICY_MAPPING_free$MH,"POLICY_MAPPING_free");
    }
    public static void POLICY_MAPPING_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1006.POLICY_MAPPING_free$MH, "POLICY_MAPPING_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_SUBTREE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.GENERAL_SUBTREE_new$MH,"GENERAL_SUBTREE_new");
    }
    public static MemoryAddress GENERAL_SUBTREE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1006.GENERAL_SUBTREE_new$MH, "GENERAL_SUBTREE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_SUBTREE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.GENERAL_SUBTREE_free$MH,"GENERAL_SUBTREE_free");
    }
    public static void GENERAL_SUBTREE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1006.GENERAL_SUBTREE_free$MH, "GENERAL_SUBTREE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAME_CONSTRAINTS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.NAME_CONSTRAINTS_new$MH,"NAME_CONSTRAINTS_new");
    }
    public static MemoryAddress NAME_CONSTRAINTS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1007.NAME_CONSTRAINTS_new$MH, "NAME_CONSTRAINTS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAME_CONSTRAINTS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.NAME_CONSTRAINTS_free$MH,"NAME_CONSTRAINTS_free");
    }
    public static void NAME_CONSTRAINTS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1007.NAME_CONSTRAINTS_free$MH, "NAME_CONSTRAINTS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICY_CONSTRAINTS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.POLICY_CONSTRAINTS_new$MH,"POLICY_CONSTRAINTS_new");
    }
    public static MemoryAddress POLICY_CONSTRAINTS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1007.POLICY_CONSTRAINTS_new$MH, "POLICY_CONSTRAINTS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle POLICY_CONSTRAINTS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.POLICY_CONSTRAINTS_free$MH,"POLICY_CONSTRAINTS_free");
    }
    public static void POLICY_CONSTRAINTS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1007.POLICY_CONSTRAINTS_free$MH, "POLICY_CONSTRAINTS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2i_GENERAL_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.a2i_GENERAL_NAME$MH,"a2i_GENERAL_NAME");
    }
    public static MemoryAddress a2i_GENERAL_NAME ( Addressable out,  Addressable method,  Addressable ctx,  int gen_type,  Addressable value,  int is_nc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1007.a2i_GENERAL_NAME$MH, "a2i_GENERAL_NAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(out, method, ctx, gen_type, value, is_nc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle v2i_GENERAL_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$1007.v2i_GENERAL_NAME$MH,"v2i_GENERAL_NAME");
    }
    public static MemoryAddress v2i_GENERAL_NAME ( Addressable method,  Addressable ctx,  Addressable cnf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1007.v2i_GENERAL_NAME$MH, "v2i_GENERAL_NAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ctx, cnf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle v2i_GENERAL_NAME_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.v2i_GENERAL_NAME_ex$MH,"v2i_GENERAL_NAME_ex");
    }
    public static MemoryAddress v2i_GENERAL_NAME_ex ( Addressable out,  Addressable method,  Addressable ctx,  Addressable cnf,  int is_nc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1008.v2i_GENERAL_NAME_ex$MH, "v2i_GENERAL_NAME_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(out, method, ctx, cnf, is_nc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_conf_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.X509V3_conf_free$MH,"X509V3_conf_free");
    }
    public static void X509V3_conf_free ( Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1008.X509V3_conf_free$MH, "X509V3_conf_free");
        try {
            mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_nconf_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_nconf_nid$MH,"X509V3_EXT_nconf_nid");
    }
    public static MemoryAddress X509V3_EXT_nconf_nid ( Addressable conf,  Addressable ctx,  int ext_nid,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_nconf_nid$MH, "X509V3_EXT_nconf_nid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, ctx, ext_nid, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_nconf$MH,"X509V3_EXT_nconf");
    }
    public static MemoryAddress X509V3_EXT_nconf ( Addressable conf,  Addressable ctx,  Addressable name,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_nconf$MH, "X509V3_EXT_nconf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, ctx, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_add_nconf_sk$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_add_nconf_sk$MH,"X509V3_EXT_add_nconf_sk");
    }
    public static int X509V3_EXT_add_nconf_sk ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_add_nconf_sk$MH, "X509V3_EXT_add_nconf_sk");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_add_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_add_nconf$MH,"X509V3_EXT_add_nconf");
    }
    public static int X509V3_EXT_add_nconf ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable cert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1008.X509V3_EXT_add_nconf$MH, "X509V3_EXT_add_nconf");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, cert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_REQ_add_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_REQ_add_nconf$MH,"X509V3_EXT_REQ_add_nconf");
    }
    public static int X509V3_EXT_REQ_add_nconf ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_REQ_add_nconf$MH, "X509V3_EXT_REQ_add_nconf");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_CRL_add_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_CRL_add_nconf$MH,"X509V3_EXT_CRL_add_nconf");
    }
    public static int X509V3_EXT_CRL_add_nconf ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_CRL_add_nconf$MH, "X509V3_EXT_CRL_add_nconf");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_conf_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_conf_nid$MH,"X509V3_EXT_conf_nid");
    }
    public static MemoryAddress X509V3_EXT_conf_nid ( Addressable conf,  Addressable ctx,  int ext_nid,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_conf_nid$MH, "X509V3_EXT_conf_nid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, ctx, ext_nid, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_conf$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_conf$MH,"X509V3_EXT_conf");
    }
    public static MemoryAddress X509V3_EXT_conf ( Addressable conf,  Addressable ctx,  Addressable name,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_conf$MH, "X509V3_EXT_conf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, ctx, name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_add_conf$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_add_conf$MH,"X509V3_EXT_add_conf");
    }
    public static int X509V3_EXT_add_conf ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable cert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_add_conf$MH, "X509V3_EXT_add_conf");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, cert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_REQ_add_conf$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_REQ_add_conf$MH,"X509V3_EXT_REQ_add_conf");
    }
    public static int X509V3_EXT_REQ_add_conf ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1009.X509V3_EXT_REQ_add_conf$MH, "X509V3_EXT_REQ_add_conf");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_CRL_add_conf$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.X509V3_EXT_CRL_add_conf$MH,"X509V3_EXT_CRL_add_conf");
    }
    public static int X509V3_EXT_CRL_add_conf ( Addressable conf,  Addressable ctx,  Addressable section,  Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1010.X509V3_EXT_CRL_add_conf$MH, "X509V3_EXT_CRL_add_conf");
        try {
            return (int)mh$.invokeExact(conf, ctx, section, crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add_value_bool_nf$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.X509V3_add_value_bool_nf$MH,"X509V3_add_value_bool_nf");
    }
    public static int X509V3_add_value_bool_nf ( Addressable name,  int asn1_bool,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1010.X509V3_add_value_bool_nf$MH, "X509V3_add_value_bool_nf");
        try {
            return (int)mh$.invokeExact(name, asn1_bool, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_get_value_bool$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.X509V3_get_value_bool$MH,"X509V3_get_value_bool");
    }
    public static int X509V3_get_value_bool ( Addressable value,  Addressable asn1_bool) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1010.X509V3_get_value_bool$MH, "X509V3_get_value_bool");
        try {
            return (int)mh$.invokeExact(value, asn1_bool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_get_value_int$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.X509V3_get_value_int$MH,"X509V3_get_value_int");
    }
    public static int X509V3_get_value_int ( Addressable value,  Addressable aint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1010.X509V3_get_value_int$MH, "X509V3_get_value_int");
        try {
            return (int)mh$.invokeExact(value, aint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_set_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.X509V3_set_nconf$MH,"X509V3_set_nconf");
    }
    public static void X509V3_set_nconf ( Addressable ctx,  Addressable conf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1010.X509V3_set_nconf$MH, "X509V3_set_nconf");
        try {
            mh$.invokeExact(ctx, conf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_set_conf_lhash$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.X509V3_set_conf_lhash$MH,"X509V3_set_conf_lhash");
    }
    public static void X509V3_set_conf_lhash ( Addressable ctx,  Addressable lhash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1010.X509V3_set_conf_lhash$MH, "X509V3_set_conf_lhash");
        try {
            mh$.invokeExact(ctx, lhash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.X509V3_get_string$MH,"X509V3_get_string");
    }
    public static MemoryAddress X509V3_get_string ( Addressable ctx,  Addressable name,  Addressable section) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1011.X509V3_get_string$MH, "X509V3_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, name, section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_get_section$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.X509V3_get_section$MH,"X509V3_get_section");
    }
    public static MemoryAddress X509V3_get_section ( Addressable ctx,  Addressable section) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1011.X509V3_get_section$MH, "X509V3_get_section");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_string_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.X509V3_string_free$MH,"X509V3_string_free");
    }
    public static void X509V3_string_free ( Addressable ctx,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1011.X509V3_string_free$MH, "X509V3_string_free");
        try {
            mh$.invokeExact(ctx, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_section_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.X509V3_section_free$MH,"X509V3_section_free");
    }
    public static void X509V3_section_free ( Addressable ctx,  Addressable section) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1011.X509V3_section_free$MH, "X509V3_section_free");
        try {
            mh$.invokeExact(ctx, section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_set_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.X509V3_set_ctx$MH,"X509V3_set_ctx");
    }
    public static void X509V3_set_ctx ( Addressable ctx,  Addressable issuer,  Addressable subject,  Addressable req,  Addressable crl,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1011.X509V3_set_ctx$MH, "X509V3_set_ctx");
        try {
            mh$.invokeExact(ctx, issuer, subject, req, crl, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.X509V3_add_value$MH,"X509V3_add_value");
    }
    public static int X509V3_add_value ( Addressable name,  Addressable value,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1011.X509V3_add_value$MH, "X509V3_add_value");
        try {
            return (int)mh$.invokeExact(name, value, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add_value_uchar$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.X509V3_add_value_uchar$MH,"X509V3_add_value_uchar");
    }
    public static int X509V3_add_value_uchar ( Addressable name,  Addressable value,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1012.X509V3_add_value_uchar$MH, "X509V3_add_value_uchar");
        try {
            return (int)mh$.invokeExact(name, value, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add_value_bool$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.X509V3_add_value_bool$MH,"X509V3_add_value_bool");
    }
    public static int X509V3_add_value_bool ( Addressable name,  int asn1_bool,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1012.X509V3_add_value_bool$MH, "X509V3_add_value_bool");
        try {
            return (int)mh$.invokeExact(name, asn1_bool, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add_value_int$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.X509V3_add_value_int$MH,"X509V3_add_value_int");
    }
    public static int X509V3_add_value_int ( Addressable name,  Addressable aint,  Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1012.X509V3_add_value_int$MH, "X509V3_add_value_int");
        try {
            return (int)mh$.invokeExact(name, aint, extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2s_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.i2s_ASN1_INTEGER$MH,"i2s_ASN1_INTEGER");
    }
    public static MemoryAddress i2s_ASN1_INTEGER ( Addressable meth,  Addressable aint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1012.i2s_ASN1_INTEGER$MH, "i2s_ASN1_INTEGER");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth, aint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle s2i_ASN1_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.s2i_ASN1_INTEGER$MH,"s2i_ASN1_INTEGER");
    }
    public static MemoryAddress s2i_ASN1_INTEGER ( Addressable meth,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1012.s2i_ASN1_INTEGER$MH, "s2i_ASN1_INTEGER");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2s_ASN1_ENUMERATED$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.i2s_ASN1_ENUMERATED$MH,"i2s_ASN1_ENUMERATED");
    }
    public static MemoryAddress i2s_ASN1_ENUMERATED ( Addressable meth,  Addressable aint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1012.i2s_ASN1_ENUMERATED$MH, "i2s_ASN1_ENUMERATED");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth, aint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2s_ASN1_ENUMERATED_TABLE$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.i2s_ASN1_ENUMERATED_TABLE$MH,"i2s_ASN1_ENUMERATED_TABLE");
    }
    public static MemoryAddress i2s_ASN1_ENUMERATED_TABLE ( Addressable meth,  Addressable aint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1013.i2s_ASN1_ENUMERATED_TABLE$MH, "i2s_ASN1_ENUMERATED_TABLE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth, aint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_add$MH,"X509V3_EXT_add");
    }
    public static int X509V3_EXT_add ( Addressable ext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_add$MH, "X509V3_EXT_add");
        try {
            return (int)mh$.invokeExact(ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_add_list$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_add_list$MH,"X509V3_EXT_add_list");
    }
    public static int X509V3_EXT_add_list ( Addressable extlist) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_add_list$MH, "X509V3_EXT_add_list");
        try {
            return (int)mh$.invokeExact(extlist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_add_alias$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_add_alias$MH,"X509V3_EXT_add_alias");
    }
    public static int X509V3_EXT_add_alias ( int nid_to,  int nid_from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_add_alias$MH, "X509V3_EXT_add_alias");
        try {
            return (int)mh$.invokeExact(nid_to, nid_from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_cleanup$MH,"X509V3_EXT_cleanup");
    }
    public static void X509V3_EXT_cleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_cleanup$MH, "X509V3_EXT_cleanup");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_get$MH,"X509V3_EXT_get");
    }
    public static MemoryAddress X509V3_EXT_get ( Addressable ext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1013.X509V3_EXT_get$MH, "X509V3_EXT_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_get_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.X509V3_EXT_get_nid$MH,"X509V3_EXT_get_nid");
    }
    public static MemoryAddress X509V3_EXT_get_nid ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.X509V3_EXT_get_nid$MH, "X509V3_EXT_get_nid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add_standard_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.X509V3_add_standard_extensions$MH,"X509V3_add_standard_extensions");
    }
    public static int X509V3_add_standard_extensions () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.X509V3_add_standard_extensions$MH, "X509V3_add_standard_extensions");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_parse_list$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.X509V3_parse_list$MH,"X509V3_parse_list");
    }
    public static MemoryAddress X509V3_parse_list ( Addressable line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.X509V3_parse_list$MH, "X509V3_parse_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.X509V3_EXT_d2i$MH,"X509V3_EXT_d2i");
    }
    public static MemoryAddress X509V3_EXT_d2i ( Addressable ext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.X509V3_EXT_d2i$MH, "X509V3_EXT_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_get_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.X509V3_get_d2i$MH,"X509V3_get_d2i");
    }
    public static MemoryAddress X509V3_get_d2i ( Addressable x,  int nid,  Addressable crit,  Addressable idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.X509V3_get_d2i$MH, "X509V3_get_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, nid, crit, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.X509V3_EXT_i2d$MH,"X509V3_EXT_i2d");
    }
    public static MemoryAddress X509V3_EXT_i2d ( int ext_nid,  int crit,  Addressable ext_struc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.X509V3_EXT_i2d$MH, "X509V3_EXT_i2d");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ext_nid, crit, ext_struc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_add1_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.X509V3_add1_i2d$MH,"X509V3_add1_i2d");
    }
    public static int X509V3_add1_i2d ( Addressable x,  int nid,  Addressable value,  int crit,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.X509V3_add1_i2d$MH, "X509V3_add1_i2d");
        try {
            return (int)mh$.invokeExact(x, nid, value, crit, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_val_prn$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.X509V3_EXT_val_prn$MH,"X509V3_EXT_val_prn");
    }
    public static void X509V3_EXT_val_prn ( Addressable out,  Addressable val,  int indent,  int ml) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.X509V3_EXT_val_prn$MH, "X509V3_EXT_val_prn");
        try {
            mh$.invokeExact(out, val, indent, ml);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_print$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.X509V3_EXT_print$MH,"X509V3_EXT_print");
    }
    public static int X509V3_EXT_print ( Addressable out,  Addressable ext,  long flag,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.X509V3_EXT_print$MH, "X509V3_EXT_print");
        try {
            return (int)mh$.invokeExact(out, ext, flag, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_EXT_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.X509V3_EXT_print_fp$MH,"X509V3_EXT_print_fp");
    }
    public static int X509V3_EXT_print_fp ( Addressable out,  Addressable ext,  int flag,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.X509V3_EXT_print_fp$MH, "X509V3_EXT_print_fp");
        try {
            return (int)mh$.invokeExact(out, ext, flag, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_extensions_print$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.X509V3_extensions_print$MH,"X509V3_extensions_print");
    }
    public static int X509V3_extensions_print ( Addressable out,  Addressable title,  Addressable exts,  long flag,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.X509V3_extensions_print$MH, "X509V3_extensions_print");
        try {
            return (int)mh$.invokeExact(out, title, exts, flag, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_ca$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.X509_check_ca$MH,"X509_check_ca");
    }
    public static int X509_check_ca ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.X509_check_ca$MH, "X509_check_ca");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_purpose$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.X509_check_purpose$MH,"X509_check_purpose");
    }
    public static int X509_check_purpose ( Addressable x,  int id,  int ca) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.X509_check_purpose$MH, "X509_check_purpose");
        try {
            return (int)mh$.invokeExact(x, id, ca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_supported_extension$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.X509_supported_extension$MH,"X509_supported_extension");
    }
    public static int X509_supported_extension ( Addressable ex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.X509_supported_extension$MH, "X509_supported_extension");
        try {
            return (int)mh$.invokeExact(ex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.X509_PURPOSE_set$MH,"X509_PURPOSE_set");
    }
    public static int X509_PURPOSE_set ( Addressable p,  int purpose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.X509_PURPOSE_set$MH, "X509_PURPOSE_set");
        try {
            return (int)mh$.invokeExact(p, purpose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_issued$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.X509_check_issued$MH,"X509_check_issued");
    }
    public static int X509_check_issued ( Addressable issuer,  Addressable subject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.X509_check_issued$MH, "X509_check_issued");
        try {
            return (int)mh$.invokeExact(issuer, subject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_akid$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.X509_check_akid$MH,"X509_check_akid");
    }
    public static int X509_check_akid ( Addressable issuer,  Addressable akid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.X509_check_akid$MH, "X509_check_akid");
        try {
            return (int)mh$.invokeExact(issuer, akid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_proxy_flag$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.X509_set_proxy_flag$MH,"X509_set_proxy_flag");
    }
    public static void X509_set_proxy_flag ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.X509_set_proxy_flag$MH, "X509_set_proxy_flag");
        try {
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_proxy_pathlen$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.X509_set_proxy_pathlen$MH,"X509_set_proxy_pathlen");
    }
    public static void X509_set_proxy_pathlen ( Addressable x,  long l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.X509_set_proxy_pathlen$MH, "X509_set_proxy_pathlen");
        try {
            mh$.invokeExact(x, l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_proxy_pathlen$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.X509_get_proxy_pathlen$MH,"X509_get_proxy_pathlen");
    }
    public static long X509_get_proxy_pathlen ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.X509_get_proxy_pathlen$MH, "X509_get_proxy_pathlen");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_extension_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.X509_get_extension_flags$MH,"X509_get_extension_flags");
    }
    public static int X509_get_extension_flags ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.X509_get_extension_flags$MH, "X509_get_extension_flags");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_key_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.X509_get_key_usage$MH,"X509_get_key_usage");
    }
    public static int X509_get_key_usage ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.X509_get_key_usage$MH, "X509_get_key_usage");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_extended_key_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.X509_get_extended_key_usage$MH,"X509_get_extended_key_usage");
    }
    public static int X509_get_extended_key_usage ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.X509_get_extended_key_usage$MH, "X509_get_extended_key_usage");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_subject_key_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.X509_get0_subject_key_id$MH,"X509_get0_subject_key_id");
    }
    public static MemoryAddress X509_get0_subject_key_id ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.X509_get0_subject_key_id$MH, "X509_get0_subject_key_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_authority_key_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.X509_get0_authority_key_id$MH,"X509_get0_authority_key_id");
    }
    public static MemoryAddress X509_get0_authority_key_id ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.X509_get0_authority_key_id$MH, "X509_get0_authority_key_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_authority_issuer$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.X509_get0_authority_issuer$MH,"X509_get0_authority_issuer");
    }
    public static MemoryAddress X509_get0_authority_issuer ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.X509_get0_authority_issuer$MH, "X509_get0_authority_issuer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_authority_serial$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.X509_get0_authority_serial$MH,"X509_get0_authority_serial");
    }
    public static MemoryAddress X509_get0_authority_serial ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.X509_get0_authority_serial$MH, "X509_get0_authority_serial");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get_count$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.X509_PURPOSE_get_count$MH,"X509_PURPOSE_get_count");
    }
    public static int X509_PURPOSE_get_count () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.X509_PURPOSE_get_count$MH, "X509_PURPOSE_get_count");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.X509_PURPOSE_get0$MH,"X509_PURPOSE_get0");
    }
    public static MemoryAddress X509_PURPOSE_get0 ( int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.X509_PURPOSE_get0$MH, "X509_PURPOSE_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get_by_sname$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.X509_PURPOSE_get_by_sname$MH,"X509_PURPOSE_get_by_sname");
    }
    public static int X509_PURPOSE_get_by_sname ( Addressable sname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.X509_PURPOSE_get_by_sname$MH, "X509_PURPOSE_get_by_sname");
        try {
            return (int)mh$.invokeExact(sname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_get_by_id$MH,"X509_PURPOSE_get_by_id");
    }
    public static int X509_PURPOSE_get_by_id ( int id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_get_by_id$MH, "X509_PURPOSE_get_by_id");
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_add$MH,"X509_PURPOSE_add");
    }
    public static int X509_PURPOSE_add ( int id,  int trust,  int flags,  Addressable ck,  Addressable name,  Addressable sname,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_add$MH, "X509_PURPOSE_add");
        try {
            return (int)mh$.invokeExact(id, trust, flags, ck, name, sname, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get0_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_get0_name$MH,"X509_PURPOSE_get0_name");
    }
    public static MemoryAddress X509_PURPOSE_get0_name ( Addressable xp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_get0_name$MH, "X509_PURPOSE_get0_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get0_sname$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_get0_sname$MH,"X509_PURPOSE_get0_sname");
    }
    public static MemoryAddress X509_PURPOSE_get0_sname ( Addressable xp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.X509_PURPOSE_get0_sname$MH, "X509_PURPOSE_get0_sname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get_trust$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.X509_PURPOSE_get_trust$MH,"X509_PURPOSE_get_trust");
    }
    public static int X509_PURPOSE_get_trust ( Addressable xp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.X509_PURPOSE_get_trust$MH, "X509_PURPOSE_get_trust");
        try {
            return (int)mh$.invokeExact(xp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.X509_PURPOSE_cleanup$MH,"X509_PURPOSE_cleanup");
    }
    public static void X509_PURPOSE_cleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.X509_PURPOSE_cleanup$MH, "X509_PURPOSE_cleanup");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PURPOSE_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.X509_PURPOSE_get_id$MH,"X509_PURPOSE_get_id");
    }
    public static int X509_PURPOSE_get_id ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.X509_PURPOSE_get_id$MH, "X509_PURPOSE_get_id");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get1_email$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.X509_get1_email$MH,"X509_get1_email");
    }
    public static MemoryAddress X509_get1_email ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.X509_get1_email$MH, "X509_get1_email");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get1_email$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.X509_REQ_get1_email$MH,"X509_REQ_get1_email");
    }
    public static MemoryAddress X509_REQ_get1_email ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.X509_REQ_get1_email$MH, "X509_REQ_get1_email");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_email_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.X509_email_free$MH,"X509_email_free");
    }
    public static void X509_email_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.X509_email_free$MH, "X509_email_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get1_ocsp$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.X509_get1_ocsp$MH,"X509_get1_ocsp");
    }
    public static MemoryAddress X509_get1_ocsp ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.X509_get1_ocsp$MH, "X509_get1_ocsp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_host$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.X509_check_host$MH,"X509_check_host");
    }
    public static int X509_check_host ( Addressable x,  Addressable chk,  long chklen,  int flags,  Addressable peername) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.X509_check_host$MH, "X509_check_host");
        try {
            return (int)mh$.invokeExact(x, chk, chklen, flags, peername);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_email$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.X509_check_email$MH,"X509_check_email");
    }
    public static int X509_check_email ( Addressable x,  Addressable chk,  long chklen,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.X509_check_email$MH, "X509_check_email");
        try {
            return (int)mh$.invokeExact(x, chk, chklen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_ip$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.X509_check_ip$MH,"X509_check_ip");
    }
    public static int X509_check_ip ( Addressable x,  Addressable chk,  long chklen,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.X509_check_ip$MH, "X509_check_ip");
        try {
            return (int)mh$.invokeExact(x, chk, chklen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_ip_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.X509_check_ip_asc$MH,"X509_check_ip_asc");
    }
    public static int X509_check_ip_asc ( Addressable x,  Addressable ipasc,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.X509_check_ip_asc$MH, "X509_check_ip_asc");
        try {
            return (int)mh$.invokeExact(x, ipasc, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2i_IPADDRESS$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.a2i_IPADDRESS$MH,"a2i_IPADDRESS");
    }
    public static MemoryAddress a2i_IPADDRESS ( Addressable ipasc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.a2i_IPADDRESS$MH, "a2i_IPADDRESS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ipasc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a2i_IPADDRESS_NC$MH() {
        return RuntimeHelper.requireNonNull(constants$1022.a2i_IPADDRESS_NC$MH,"a2i_IPADDRESS_NC");
    }
    public static MemoryAddress a2i_IPADDRESS_NC ( Addressable ipasc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1022.a2i_IPADDRESS_NC$MH, "a2i_IPADDRESS_NC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ipasc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509V3_NAME_from_section$MH() {
        return RuntimeHelper.requireNonNull(constants$1022.X509V3_NAME_from_section$MH,"X509V3_NAME_from_section");
    }
    public static int X509V3_NAME_from_section ( Addressable nm,  Addressable dn_sk,  long chtype) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1022.X509V3_NAME_from_section$MH, "X509V3_NAME_from_section");
        try {
            return (int)mh$.invokeExact(nm, dn_sk, chtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_POLICY_NODE_print$MH() {
        return RuntimeHelper.requireNonNull(constants$1022.X509_POLICY_NODE_print$MH,"X509_POLICY_NODE_print");
    }
    public static void X509_POLICY_NODE_print ( Addressable out,  Addressable node,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1022.X509_POLICY_NODE_print$MH, "X509_POLICY_NODE_print");
        try {
            mh$.invokeExact(out, node, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.sk_X509_POLICY_NODE_num$MH,"sk_X509_POLICY_NODE_num");
    }
    public static int sk_X509_POLICY_NODE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1023.sk_X509_POLICY_NODE_num$MH, "sk_X509_POLICY_NODE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.sk_X509_POLICY_NODE_value$MH,"sk_X509_POLICY_NODE_value");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1023.sk_X509_POLICY_NODE_value$MH, "sk_X509_POLICY_NODE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1023.sk_X509_POLICY_NODE_new$MH,"sk_X509_POLICY_NODE_new");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1023.sk_X509_POLICY_NODE_new$MH, "sk_X509_POLICY_NODE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_new_null$MH,"sk_X509_POLICY_NODE_new_null");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_new_null$MH, "sk_X509_POLICY_NODE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_new_reserve$MH,"sk_X509_POLICY_NODE_new_reserve");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_new_reserve$MH, "sk_X509_POLICY_NODE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_reserve$MH,"sk_X509_POLICY_NODE_reserve");
    }
    public static int sk_X509_POLICY_NODE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_reserve$MH, "sk_X509_POLICY_NODE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_free$MH,"sk_X509_POLICY_NODE_free");
    }
    public static void sk_X509_POLICY_NODE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_free$MH, "sk_X509_POLICY_NODE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_zero$MH,"sk_X509_POLICY_NODE_zero");
    }
    public static void sk_X509_POLICY_NODE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_zero$MH, "sk_X509_POLICY_NODE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_delete$MH,"sk_X509_POLICY_NODE_delete");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1024.sk_X509_POLICY_NODE_delete$MH, "sk_X509_POLICY_NODE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_delete_ptr$MH,"sk_X509_POLICY_NODE_delete_ptr");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_delete_ptr$MH, "sk_X509_POLICY_NODE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_push$MH,"sk_X509_POLICY_NODE_push");
    }
    public static int sk_X509_POLICY_NODE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_push$MH, "sk_X509_POLICY_NODE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_unshift$MH,"sk_X509_POLICY_NODE_unshift");
    }
    public static int sk_X509_POLICY_NODE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_unshift$MH, "sk_X509_POLICY_NODE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_pop$MH,"sk_X509_POLICY_NODE_pop");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_pop$MH, "sk_X509_POLICY_NODE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_shift$MH,"sk_X509_POLICY_NODE_shift");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_shift$MH, "sk_X509_POLICY_NODE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_pop_free$MH,"sk_X509_POLICY_NODE_pop_free");
    }
    public static void sk_X509_POLICY_NODE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1025.sk_X509_POLICY_NODE_pop_free$MH, "sk_X509_POLICY_NODE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_insert$MH,"sk_X509_POLICY_NODE_insert");
    }
    public static int sk_X509_POLICY_NODE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_insert$MH, "sk_X509_POLICY_NODE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_set$MH,"sk_X509_POLICY_NODE_set");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_set$MH, "sk_X509_POLICY_NODE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_find$MH,"sk_X509_POLICY_NODE_find");
    }
    public static int sk_X509_POLICY_NODE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_find$MH, "sk_X509_POLICY_NODE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_find_ex$MH,"sk_X509_POLICY_NODE_find_ex");
    }
    public static int sk_X509_POLICY_NODE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_find_ex$MH, "sk_X509_POLICY_NODE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_sort$MH,"sk_X509_POLICY_NODE_sort");
    }
    public static void sk_X509_POLICY_NODE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_sort$MH, "sk_X509_POLICY_NODE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_is_sorted$MH,"sk_X509_POLICY_NODE_is_sorted");
    }
    public static int sk_X509_POLICY_NODE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1026.sk_X509_POLICY_NODE_is_sorted$MH, "sk_X509_POLICY_NODE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.sk_X509_POLICY_NODE_dup$MH,"sk_X509_POLICY_NODE_dup");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1027.sk_X509_POLICY_NODE_dup$MH, "sk_X509_POLICY_NODE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.sk_X509_POLICY_NODE_deep_copy$MH,"sk_X509_POLICY_NODE_deep_copy");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1027.sk_X509_POLICY_NODE_deep_copy$MH, "sk_X509_POLICY_NODE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_POLICY_NODE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.sk_X509_POLICY_NODE_set_cmp_func$MH,"sk_X509_POLICY_NODE_set_cmp_func");
    }
    public static MemoryAddress sk_X509_POLICY_NODE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1027.sk_X509_POLICY_NODE_set_cmp_func$MH, "sk_X509_POLICY_NODE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.sk_ASIdOrRange_num$MH,"sk_ASIdOrRange_num");
    }
    public static int sk_ASIdOrRange_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1028.sk_ASIdOrRange_num$MH, "sk_ASIdOrRange_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.sk_ASIdOrRange_value$MH,"sk_ASIdOrRange_value");
    }
    public static MemoryAddress sk_ASIdOrRange_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1028.sk_ASIdOrRange_value$MH, "sk_ASIdOrRange_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.sk_ASIdOrRange_new$MH,"sk_ASIdOrRange_new");
    }
    public static MemoryAddress sk_ASIdOrRange_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1028.sk_ASIdOrRange_new$MH, "sk_ASIdOrRange_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_new_null$MH,"sk_ASIdOrRange_new_null");
    }
    public static MemoryAddress sk_ASIdOrRange_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_new_null$MH, "sk_ASIdOrRange_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_new_reserve$MH,"sk_ASIdOrRange_new_reserve");
    }
    public static MemoryAddress sk_ASIdOrRange_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_new_reserve$MH, "sk_ASIdOrRange_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_reserve$MH,"sk_ASIdOrRange_reserve");
    }
    public static int sk_ASIdOrRange_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_reserve$MH, "sk_ASIdOrRange_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_free$MH,"sk_ASIdOrRange_free");
    }
    public static void sk_ASIdOrRange_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_free$MH, "sk_ASIdOrRange_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_zero$MH,"sk_ASIdOrRange_zero");
    }
    public static void sk_ASIdOrRange_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_zero$MH, "sk_ASIdOrRange_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_delete$MH,"sk_ASIdOrRange_delete");
    }
    public static MemoryAddress sk_ASIdOrRange_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1029.sk_ASIdOrRange_delete$MH, "sk_ASIdOrRange_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_delete_ptr$MH,"sk_ASIdOrRange_delete_ptr");
    }
    public static MemoryAddress sk_ASIdOrRange_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_delete_ptr$MH, "sk_ASIdOrRange_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_push$MH,"sk_ASIdOrRange_push");
    }
    public static int sk_ASIdOrRange_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_push$MH, "sk_ASIdOrRange_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_unshift$MH,"sk_ASIdOrRange_unshift");
    }
    public static int sk_ASIdOrRange_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_unshift$MH, "sk_ASIdOrRange_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_pop$MH,"sk_ASIdOrRange_pop");
    }
    public static MemoryAddress sk_ASIdOrRange_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_pop$MH, "sk_ASIdOrRange_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_shift$MH,"sk_ASIdOrRange_shift");
    }
    public static MemoryAddress sk_ASIdOrRange_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_shift$MH, "sk_ASIdOrRange_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_pop_free$MH,"sk_ASIdOrRange_pop_free");
    }
    public static void sk_ASIdOrRange_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1030.sk_ASIdOrRange_pop_free$MH, "sk_ASIdOrRange_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_insert$MH,"sk_ASIdOrRange_insert");
    }
    public static int sk_ASIdOrRange_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_insert$MH, "sk_ASIdOrRange_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_set$MH,"sk_ASIdOrRange_set");
    }
    public static MemoryAddress sk_ASIdOrRange_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_set$MH, "sk_ASIdOrRange_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_find$MH,"sk_ASIdOrRange_find");
    }
    public static int sk_ASIdOrRange_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_find$MH, "sk_ASIdOrRange_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_find_ex$MH,"sk_ASIdOrRange_find_ex");
    }
    public static int sk_ASIdOrRange_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_find_ex$MH, "sk_ASIdOrRange_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_sort$MH,"sk_ASIdOrRange_sort");
    }
    public static void sk_ASIdOrRange_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_sort$MH, "sk_ASIdOrRange_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_is_sorted$MH,"sk_ASIdOrRange_is_sorted");
    }
    public static int sk_ASIdOrRange_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1031.sk_ASIdOrRange_is_sorted$MH, "sk_ASIdOrRange_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.sk_ASIdOrRange_dup$MH,"sk_ASIdOrRange_dup");
    }
    public static MemoryAddress sk_ASIdOrRange_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1032.sk_ASIdOrRange_dup$MH, "sk_ASIdOrRange_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.sk_ASIdOrRange_deep_copy$MH,"sk_ASIdOrRange_deep_copy");
    }
    public static MemoryAddress sk_ASIdOrRange_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1032.sk_ASIdOrRange_deep_copy$MH, "sk_ASIdOrRange_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASIdOrRange_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.sk_ASIdOrRange_set_cmp_func$MH,"sk_ASIdOrRange_set_cmp_func");
    }
    public static MemoryAddress sk_ASIdOrRange_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1032.sk_ASIdOrRange_set_cmp_func$MH, "sk_ASIdOrRange_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASRange_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.ASRange_new$MH,"ASRange_new");
    }
    public static MemoryAddress ASRange_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1032.ASRange_new$MH, "ASRange_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASRange_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.ASRange_free$MH,"ASRange_free");
    }
    public static void ASRange_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1032.ASRange_free$MH, "ASRange_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.d2i_ASRange$MH,"d2i_ASRange");
    }
    public static MemoryAddress d2i_ASRange ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1032.d2i_ASRange$MH, "d2i_ASRange");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.i2d_ASRange$MH,"i2d_ASRange");
    }
    public static int i2d_ASRange ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1033.i2d_ASRange$MH, "i2d_ASRange");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASIdOrRange_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.ASIdOrRange_new$MH,"ASIdOrRange_new");
    }
    public static MemoryAddress ASIdOrRange_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1033.ASIdOrRange_new$MH, "ASIdOrRange_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASIdOrRange_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.ASIdOrRange_free$MH,"ASIdOrRange_free");
    }
    public static void ASIdOrRange_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1033.ASIdOrRange_free$MH, "ASIdOrRange_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASIdOrRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.d2i_ASIdOrRange$MH,"d2i_ASIdOrRange");
    }
    public static MemoryAddress d2i_ASIdOrRange ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1033.d2i_ASIdOrRange$MH, "d2i_ASIdOrRange");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASIdOrRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.i2d_ASIdOrRange$MH,"i2d_ASIdOrRange");
    }
    public static int i2d_ASIdOrRange ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1033.i2d_ASIdOrRange$MH, "i2d_ASIdOrRange");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASIdentifierChoice_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.ASIdentifierChoice_new$MH,"ASIdentifierChoice_new");
    }
    public static MemoryAddress ASIdentifierChoice_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1033.ASIdentifierChoice_new$MH, "ASIdentifierChoice_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASIdentifierChoice_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.ASIdentifierChoice_free$MH,"ASIdentifierChoice_free");
    }
    public static void ASIdentifierChoice_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1034.ASIdentifierChoice_free$MH, "ASIdentifierChoice_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASIdentifierChoice$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.d2i_ASIdentifierChoice$MH,"d2i_ASIdentifierChoice");
    }
    public static MemoryAddress d2i_ASIdentifierChoice ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1034.d2i_ASIdentifierChoice$MH, "d2i_ASIdentifierChoice");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASIdentifierChoice$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.i2d_ASIdentifierChoice$MH,"i2d_ASIdentifierChoice");
    }
    public static int i2d_ASIdentifierChoice ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1034.i2d_ASIdentifierChoice$MH, "i2d_ASIdentifierChoice");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASIdentifiers_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.ASIdentifiers_new$MH,"ASIdentifiers_new");
    }
    public static MemoryAddress ASIdentifiers_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1034.ASIdentifiers_new$MH, "ASIdentifiers_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASIdentifiers_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.ASIdentifiers_free$MH,"ASIdentifiers_free");
    }
    public static void ASIdentifiers_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1034.ASIdentifiers_free$MH, "ASIdentifiers_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASIdentifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.d2i_ASIdentifiers$MH,"d2i_ASIdentifiers");
    }
    public static MemoryAddress d2i_ASIdentifiers ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1034.d2i_ASIdentifiers$MH, "d2i_ASIdentifiers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASIdentifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$1035.i2d_ASIdentifiers$MH,"i2d_ASIdentifiers");
    }
    public static int i2d_ASIdentifiers ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1035.i2d_ASIdentifiers$MH, "i2d_ASIdentifiers");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_num$MH,"sk_IPAddressOrRange_num");
    }
    public static int sk_IPAddressOrRange_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_num$MH, "sk_IPAddressOrRange_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_value$MH,"sk_IPAddressOrRange_value");
    }
    public static MemoryAddress sk_IPAddressOrRange_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_value$MH, "sk_IPAddressOrRange_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_new$MH,"sk_IPAddressOrRange_new");
    }
    public static MemoryAddress sk_IPAddressOrRange_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_new$MH, "sk_IPAddressOrRange_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_new_null$MH,"sk_IPAddressOrRange_new_null");
    }
    public static MemoryAddress sk_IPAddressOrRange_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_new_null$MH, "sk_IPAddressOrRange_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_new_reserve$MH,"sk_IPAddressOrRange_new_reserve");
    }
    public static MemoryAddress sk_IPAddressOrRange_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1036.sk_IPAddressOrRange_new_reserve$MH, "sk_IPAddressOrRange_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_reserve$MH,"sk_IPAddressOrRange_reserve");
    }
    public static int sk_IPAddressOrRange_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_reserve$MH, "sk_IPAddressOrRange_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_free$MH,"sk_IPAddressOrRange_free");
    }
    public static void sk_IPAddressOrRange_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_free$MH, "sk_IPAddressOrRange_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_zero$MH,"sk_IPAddressOrRange_zero");
    }
    public static void sk_IPAddressOrRange_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_zero$MH, "sk_IPAddressOrRange_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_delete$MH,"sk_IPAddressOrRange_delete");
    }
    public static MemoryAddress sk_IPAddressOrRange_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_delete$MH, "sk_IPAddressOrRange_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_delete_ptr$MH,"sk_IPAddressOrRange_delete_ptr");
    }
    public static MemoryAddress sk_IPAddressOrRange_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_delete_ptr$MH, "sk_IPAddressOrRange_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_push$MH,"sk_IPAddressOrRange_push");
    }
    public static int sk_IPAddressOrRange_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1037.sk_IPAddressOrRange_push$MH, "sk_IPAddressOrRange_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_unshift$MH,"sk_IPAddressOrRange_unshift");
    }
    public static int sk_IPAddressOrRange_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_unshift$MH, "sk_IPAddressOrRange_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_pop$MH,"sk_IPAddressOrRange_pop");
    }
    public static MemoryAddress sk_IPAddressOrRange_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_pop$MH, "sk_IPAddressOrRange_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_shift$MH,"sk_IPAddressOrRange_shift");
    }
    public static MemoryAddress sk_IPAddressOrRange_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_shift$MH, "sk_IPAddressOrRange_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_pop_free$MH,"sk_IPAddressOrRange_pop_free");
    }
    public static void sk_IPAddressOrRange_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_pop_free$MH, "sk_IPAddressOrRange_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_insert$MH,"sk_IPAddressOrRange_insert");
    }
    public static int sk_IPAddressOrRange_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_insert$MH, "sk_IPAddressOrRange_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_set$MH,"sk_IPAddressOrRange_set");
    }
    public static MemoryAddress sk_IPAddressOrRange_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1038.sk_IPAddressOrRange_set$MH, "sk_IPAddressOrRange_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_find$MH,"sk_IPAddressOrRange_find");
    }
    public static int sk_IPAddressOrRange_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_find$MH, "sk_IPAddressOrRange_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_find_ex$MH,"sk_IPAddressOrRange_find_ex");
    }
    public static int sk_IPAddressOrRange_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_find_ex$MH, "sk_IPAddressOrRange_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_sort$MH,"sk_IPAddressOrRange_sort");
    }
    public static void sk_IPAddressOrRange_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_sort$MH, "sk_IPAddressOrRange_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_is_sorted$MH,"sk_IPAddressOrRange_is_sorted");
    }
    public static int sk_IPAddressOrRange_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_is_sorted$MH, "sk_IPAddressOrRange_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_dup$MH,"sk_IPAddressOrRange_dup");
    }
    public static MemoryAddress sk_IPAddressOrRange_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_dup$MH, "sk_IPAddressOrRange_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_deep_copy$MH,"sk_IPAddressOrRange_deep_copy");
    }
    public static MemoryAddress sk_IPAddressOrRange_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1039.sk_IPAddressOrRange_deep_copy$MH, "sk_IPAddressOrRange_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressOrRange_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.sk_IPAddressOrRange_set_cmp_func$MH,"sk_IPAddressOrRange_set_cmp_func");
    }
    public static MemoryAddress sk_IPAddressOrRange_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1040.sk_IPAddressOrRange_set_cmp_func$MH, "sk_IPAddressOrRange_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_num$MH,"sk_IPAddressFamily_num");
    }
    public static int sk_IPAddressFamily_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_num$MH, "sk_IPAddressFamily_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_value$MH,"sk_IPAddressFamily_value");
    }
    public static MemoryAddress sk_IPAddressFamily_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_value$MH, "sk_IPAddressFamily_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_new$MH,"sk_IPAddressFamily_new");
    }
    public static MemoryAddress sk_IPAddressFamily_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_new$MH, "sk_IPAddressFamily_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_new_null$MH,"sk_IPAddressFamily_new_null");
    }
    public static MemoryAddress sk_IPAddressFamily_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_new_null$MH, "sk_IPAddressFamily_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_new_reserve$MH,"sk_IPAddressFamily_new_reserve");
    }
    public static MemoryAddress sk_IPAddressFamily_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1041.sk_IPAddressFamily_new_reserve$MH, "sk_IPAddressFamily_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_reserve$MH,"sk_IPAddressFamily_reserve");
    }
    public static int sk_IPAddressFamily_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_reserve$MH, "sk_IPAddressFamily_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_free$MH,"sk_IPAddressFamily_free");
    }
    public static void sk_IPAddressFamily_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_free$MH, "sk_IPAddressFamily_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_zero$MH,"sk_IPAddressFamily_zero");
    }
    public static void sk_IPAddressFamily_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_zero$MH, "sk_IPAddressFamily_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_delete$MH,"sk_IPAddressFamily_delete");
    }
    public static MemoryAddress sk_IPAddressFamily_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_delete$MH, "sk_IPAddressFamily_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_delete_ptr$MH,"sk_IPAddressFamily_delete_ptr");
    }
    public static MemoryAddress sk_IPAddressFamily_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_delete_ptr$MH, "sk_IPAddressFamily_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_push$MH,"sk_IPAddressFamily_push");
    }
    public static int sk_IPAddressFamily_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1042.sk_IPAddressFamily_push$MH, "sk_IPAddressFamily_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_unshift$MH,"sk_IPAddressFamily_unshift");
    }
    public static int sk_IPAddressFamily_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_unshift$MH, "sk_IPAddressFamily_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_pop$MH,"sk_IPAddressFamily_pop");
    }
    public static MemoryAddress sk_IPAddressFamily_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_pop$MH, "sk_IPAddressFamily_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_shift$MH,"sk_IPAddressFamily_shift");
    }
    public static MemoryAddress sk_IPAddressFamily_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_shift$MH, "sk_IPAddressFamily_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_pop_free$MH,"sk_IPAddressFamily_pop_free");
    }
    public static void sk_IPAddressFamily_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_pop_free$MH, "sk_IPAddressFamily_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_insert$MH,"sk_IPAddressFamily_insert");
    }
    public static int sk_IPAddressFamily_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_insert$MH, "sk_IPAddressFamily_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_set$MH,"sk_IPAddressFamily_set");
    }
    public static MemoryAddress sk_IPAddressFamily_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1043.sk_IPAddressFamily_set$MH, "sk_IPAddressFamily_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_find$MH,"sk_IPAddressFamily_find");
    }
    public static int sk_IPAddressFamily_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_find$MH, "sk_IPAddressFamily_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_find_ex$MH,"sk_IPAddressFamily_find_ex");
    }
    public static int sk_IPAddressFamily_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_find_ex$MH, "sk_IPAddressFamily_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_sort$MH,"sk_IPAddressFamily_sort");
    }
    public static void sk_IPAddressFamily_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_sort$MH, "sk_IPAddressFamily_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_is_sorted$MH,"sk_IPAddressFamily_is_sorted");
    }
    public static int sk_IPAddressFamily_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_is_sorted$MH, "sk_IPAddressFamily_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_dup$MH,"sk_IPAddressFamily_dup");
    }
    public static MemoryAddress sk_IPAddressFamily_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_dup$MH, "sk_IPAddressFamily_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_deep_copy$MH,"sk_IPAddressFamily_deep_copy");
    }
    public static MemoryAddress sk_IPAddressFamily_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1044.sk_IPAddressFamily_deep_copy$MH, "sk_IPAddressFamily_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_IPAddressFamily_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.sk_IPAddressFamily_set_cmp_func$MH,"sk_IPAddressFamily_set_cmp_func");
    }
    public static MemoryAddress sk_IPAddressFamily_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.sk_IPAddressFamily_set_cmp_func$MH, "sk_IPAddressFamily_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressRange_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.IPAddressRange_new$MH,"IPAddressRange_new");
    }
    public static MemoryAddress IPAddressRange_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.IPAddressRange_new$MH, "IPAddressRange_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressRange_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.IPAddressRange_free$MH,"IPAddressRange_free");
    }
    public static void IPAddressRange_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.IPAddressRange_free$MH, "IPAddressRange_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_IPAddressRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.d2i_IPAddressRange$MH,"d2i_IPAddressRange");
    }
    public static MemoryAddress d2i_IPAddressRange ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.d2i_IPAddressRange$MH, "d2i_IPAddressRange");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_IPAddressRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.i2d_IPAddressRange$MH,"i2d_IPAddressRange");
    }
    public static int i2d_IPAddressRange ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.i2d_IPAddressRange$MH, "i2d_IPAddressRange");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressOrRange_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.IPAddressOrRange_new$MH,"IPAddressOrRange_new");
    }
    public static MemoryAddress IPAddressOrRange_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.IPAddressOrRange_new$MH, "IPAddressOrRange_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressOrRange_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.IPAddressOrRange_free$MH,"IPAddressOrRange_free");
    }
    public static void IPAddressOrRange_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.IPAddressOrRange_free$MH, "IPAddressOrRange_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_IPAddressOrRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.d2i_IPAddressOrRange$MH,"d2i_IPAddressOrRange");
    }
    public static MemoryAddress d2i_IPAddressOrRange ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.d2i_IPAddressOrRange$MH, "d2i_IPAddressOrRange");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_IPAddressOrRange$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.i2d_IPAddressOrRange$MH,"i2d_IPAddressOrRange");
    }
    public static int i2d_IPAddressOrRange ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.i2d_IPAddressOrRange$MH, "i2d_IPAddressOrRange");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressChoice_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.IPAddressChoice_new$MH,"IPAddressChoice_new");
    }
    public static MemoryAddress IPAddressChoice_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.IPAddressChoice_new$MH, "IPAddressChoice_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressChoice_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.IPAddressChoice_free$MH,"IPAddressChoice_free");
    }
    public static void IPAddressChoice_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.IPAddressChoice_free$MH, "IPAddressChoice_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_IPAddressChoice$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.d2i_IPAddressChoice$MH,"d2i_IPAddressChoice");
    }
    public static MemoryAddress d2i_IPAddressChoice ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.d2i_IPAddressChoice$MH, "d2i_IPAddressChoice");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_IPAddressChoice$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.i2d_IPAddressChoice$MH,"i2d_IPAddressChoice");
    }
    public static int i2d_IPAddressChoice ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1047.i2d_IPAddressChoice$MH, "i2d_IPAddressChoice");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressFamily_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.IPAddressFamily_new$MH,"IPAddressFamily_new");
    }
    public static MemoryAddress IPAddressFamily_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1047.IPAddressFamily_new$MH, "IPAddressFamily_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IPAddressFamily_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.IPAddressFamily_free$MH,"IPAddressFamily_free");
    }
    public static void IPAddressFamily_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1047.IPAddressFamily_free$MH, "IPAddressFamily_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_IPAddressFamily$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.d2i_IPAddressFamily$MH,"d2i_IPAddressFamily");
    }
    public static MemoryAddress d2i_IPAddressFamily ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1047.d2i_IPAddressFamily$MH, "d2i_IPAddressFamily");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_IPAddressFamily$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.i2d_IPAddressFamily$MH,"i2d_IPAddressFamily");
    }
    public static int i2d_IPAddressFamily ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1047.i2d_IPAddressFamily$MH, "i2d_IPAddressFamily");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_add_inherit$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.X509v3_asid_add_inherit$MH,"X509v3_asid_add_inherit");
    }
    public static int X509v3_asid_add_inherit ( Addressable asid,  int which) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1047.X509v3_asid_add_inherit$MH, "X509v3_asid_add_inherit");
        try {
            return (int)mh$.invokeExact(asid, which);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_add_id_or_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.X509v3_asid_add_id_or_range$MH,"X509v3_asid_add_id_or_range");
    }
    public static int X509v3_asid_add_id_or_range ( Addressable asid,  int which,  Addressable min,  Addressable max) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1048.X509v3_asid_add_id_or_range$MH, "X509v3_asid_add_id_or_range");
        try {
            return (int)mh$.invokeExact(asid, which, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_add_inherit$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_add_inherit$MH,"X509v3_addr_add_inherit");
    }
    public static int X509v3_addr_add_inherit ( Addressable addr,  int afi,  Addressable safi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_add_inherit$MH, "X509v3_addr_add_inherit");
        try {
            return (int)mh$.invokeExact(addr, afi, safi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_add_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_add_prefix$MH,"X509v3_addr_add_prefix");
    }
    public static int X509v3_addr_add_prefix ( Addressable addr,  int afi,  Addressable safi,  Addressable a,  int prefixlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_add_prefix$MH, "X509v3_addr_add_prefix");
        try {
            return (int)mh$.invokeExact(addr, afi, safi, a, prefixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_add_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_add_range$MH,"X509v3_addr_add_range");
    }
    public static int X509v3_addr_add_range ( Addressable addr,  int afi,  Addressable safi,  Addressable min,  Addressable max) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_add_range$MH, "X509v3_addr_add_range");
        try {
            return (int)mh$.invokeExact(addr, afi, safi, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_get_afi$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_get_afi$MH,"X509v3_addr_get_afi");
    }
    public static int X509v3_addr_get_afi ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_get_afi$MH, "X509v3_addr_get_afi");
        try {
            return (int)mh$.invokeExact(f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_get_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_get_range$MH,"X509v3_addr_get_range");
    }
    public static int X509v3_addr_get_range ( Addressable aor,  int afi,  Addressable min,  Addressable max,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1048.X509v3_addr_get_range$MH, "X509v3_addr_get_range");
        try {
            return (int)mh$.invokeExact(aor, afi, min, max, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_is_canonical$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.X509v3_asid_is_canonical$MH,"X509v3_asid_is_canonical");
    }
    public static int X509v3_asid_is_canonical ( Addressable asid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1049.X509v3_asid_is_canonical$MH, "X509v3_asid_is_canonical");
        try {
            return (int)mh$.invokeExact(asid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_is_canonical$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.X509v3_addr_is_canonical$MH,"X509v3_addr_is_canonical");
    }
    public static int X509v3_addr_is_canonical ( Addressable addr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1049.X509v3_addr_is_canonical$MH, "X509v3_addr_is_canonical");
        try {
            return (int)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_canonize$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.X509v3_asid_canonize$MH,"X509v3_asid_canonize");
    }
    public static int X509v3_asid_canonize ( Addressable asid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1049.X509v3_asid_canonize$MH, "X509v3_asid_canonize");
        try {
            return (int)mh$.invokeExact(asid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_canonize$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.X509v3_addr_canonize$MH,"X509v3_addr_canonize");
    }
    public static int X509v3_addr_canonize ( Addressable addr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1049.X509v3_addr_canonize$MH, "X509v3_addr_canonize");
        try {
            return (int)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_inherits$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.X509v3_asid_inherits$MH,"X509v3_asid_inherits");
    }
    public static int X509v3_asid_inherits ( Addressable asid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1049.X509v3_asid_inherits$MH, "X509v3_asid_inherits");
        try {
            return (int)mh$.invokeExact(asid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_inherits$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.X509v3_addr_inherits$MH,"X509v3_addr_inherits");
    }
    public static int X509v3_addr_inherits ( Addressable addr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1049.X509v3_addr_inherits$MH, "X509v3_addr_inherits");
        try {
            return (int)mh$.invokeExact(addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_subset$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.X509v3_asid_subset$MH,"X509v3_asid_subset");
    }
    public static int X509v3_asid_subset ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1050.X509v3_asid_subset$MH, "X509v3_asid_subset");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_subset$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.X509v3_addr_subset$MH,"X509v3_addr_subset");
    }
    public static int X509v3_addr_subset ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1050.X509v3_addr_subset$MH, "X509v3_addr_subset");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_validate_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.X509v3_asid_validate_path$MH,"X509v3_asid_validate_path");
    }
    public static int X509v3_asid_validate_path ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1050.X509v3_asid_validate_path$MH, "X509v3_asid_validate_path");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_validate_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.X509v3_addr_validate_path$MH,"X509v3_addr_validate_path");
    }
    public static int X509v3_addr_validate_path ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1050.X509v3_addr_validate_path$MH, "X509v3_addr_validate_path");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_asid_validate_resource_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.X509v3_asid_validate_resource_set$MH,"X509v3_asid_validate_resource_set");
    }
    public static int X509v3_asid_validate_resource_set ( Addressable chain,  Addressable ext,  int allow_inheritance) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1050.X509v3_asid_validate_resource_set$MH, "X509v3_asid_validate_resource_set");
        try {
            return (int)mh$.invokeExact(chain, ext, allow_inheritance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_addr_validate_resource_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.X509v3_addr_validate_resource_set$MH,"X509v3_addr_validate_resource_set");
    }
    public static int X509v3_addr_validate_resource_set ( Addressable chain,  Addressable ext,  int allow_inheritance) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1050.X509v3_addr_validate_resource_set$MH, "X509v3_addr_validate_resource_set");
        try {
            return (int)mh$.invokeExact(chain, ext, allow_inheritance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_num$MH,"sk_ASN1_STRING_num");
    }
    public static int sk_ASN1_STRING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_num$MH, "sk_ASN1_STRING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_value$MH,"sk_ASN1_STRING_value");
    }
    public static MemoryAddress sk_ASN1_STRING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_value$MH, "sk_ASN1_STRING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_new$MH,"sk_ASN1_STRING_new");
    }
    public static MemoryAddress sk_ASN1_STRING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_new$MH, "sk_ASN1_STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_new_null$MH,"sk_ASN1_STRING_new_null");
    }
    public static MemoryAddress sk_ASN1_STRING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_new_null$MH, "sk_ASN1_STRING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_new_reserve$MH,"sk_ASN1_STRING_new_reserve");
    }
    public static MemoryAddress sk_ASN1_STRING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_new_reserve$MH, "sk_ASN1_STRING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_reserve$MH,"sk_ASN1_STRING_reserve");
    }
    public static int sk_ASN1_STRING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1052.sk_ASN1_STRING_reserve$MH, "sk_ASN1_STRING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_free$MH,"sk_ASN1_STRING_free");
    }
    public static void sk_ASN1_STRING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_free$MH, "sk_ASN1_STRING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_zero$MH,"sk_ASN1_STRING_zero");
    }
    public static void sk_ASN1_STRING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_zero$MH, "sk_ASN1_STRING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_delete$MH,"sk_ASN1_STRING_delete");
    }
    public static MemoryAddress sk_ASN1_STRING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_delete$MH, "sk_ASN1_STRING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_delete_ptr$MH,"sk_ASN1_STRING_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_STRING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_delete_ptr$MH, "sk_ASN1_STRING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_push$MH,"sk_ASN1_STRING_push");
    }
    public static int sk_ASN1_STRING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_push$MH, "sk_ASN1_STRING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_unshift$MH,"sk_ASN1_STRING_unshift");
    }
    public static int sk_ASN1_STRING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1053.sk_ASN1_STRING_unshift$MH, "sk_ASN1_STRING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_pop$MH,"sk_ASN1_STRING_pop");
    }
    public static MemoryAddress sk_ASN1_STRING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_pop$MH, "sk_ASN1_STRING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_shift$MH,"sk_ASN1_STRING_shift");
    }
    public static MemoryAddress sk_ASN1_STRING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_shift$MH, "sk_ASN1_STRING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_pop_free$MH,"sk_ASN1_STRING_pop_free");
    }
    public static void sk_ASN1_STRING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_pop_free$MH, "sk_ASN1_STRING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_insert$MH,"sk_ASN1_STRING_insert");
    }
    public static int sk_ASN1_STRING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_insert$MH, "sk_ASN1_STRING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_set$MH,"sk_ASN1_STRING_set");
    }
    public static MemoryAddress sk_ASN1_STRING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_set$MH, "sk_ASN1_STRING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_find$MH,"sk_ASN1_STRING_find");
    }
    public static int sk_ASN1_STRING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1054.sk_ASN1_STRING_find$MH, "sk_ASN1_STRING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_find_ex$MH,"sk_ASN1_STRING_find_ex");
    }
    public static int sk_ASN1_STRING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_find_ex$MH, "sk_ASN1_STRING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_sort$MH,"sk_ASN1_STRING_sort");
    }
    public static void sk_ASN1_STRING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_sort$MH, "sk_ASN1_STRING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_is_sorted$MH,"sk_ASN1_STRING_is_sorted");
    }
    public static int sk_ASN1_STRING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_is_sorted$MH, "sk_ASN1_STRING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_dup$MH,"sk_ASN1_STRING_dup");
    }
    public static MemoryAddress sk_ASN1_STRING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_dup$MH, "sk_ASN1_STRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_deep_copy$MH,"sk_ASN1_STRING_deep_copy");
    }
    public static MemoryAddress sk_ASN1_STRING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_deep_copy$MH, "sk_ASN1_STRING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_set_cmp_func$MH,"sk_ASN1_STRING_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_STRING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1055.sk_ASN1_STRING_set_cmp_func$MH, "sk_ASN1_STRING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.NAMING_AUTHORITY_new$MH,"NAMING_AUTHORITY_new");
    }
    public static MemoryAddress NAMING_AUTHORITY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1056.NAMING_AUTHORITY_new$MH, "NAMING_AUTHORITY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.NAMING_AUTHORITY_free$MH,"NAMING_AUTHORITY_free");
    }
    public static void NAMING_AUTHORITY_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1056.NAMING_AUTHORITY_free$MH, "NAMING_AUTHORITY_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_NAMING_AUTHORITY$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.d2i_NAMING_AUTHORITY$MH,"d2i_NAMING_AUTHORITY");
    }
    public static MemoryAddress d2i_NAMING_AUTHORITY ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1056.d2i_NAMING_AUTHORITY$MH, "d2i_NAMING_AUTHORITY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_NAMING_AUTHORITY$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.i2d_NAMING_AUTHORITY$MH,"i2d_NAMING_AUTHORITY");
    }
    public static int i2d_NAMING_AUTHORITY ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1056.i2d_NAMING_AUTHORITY$MH, "i2d_NAMING_AUTHORITY");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.PROFESSION_INFO_new$MH,"PROFESSION_INFO_new");
    }
    public static MemoryAddress PROFESSION_INFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1056.PROFESSION_INFO_new$MH, "PROFESSION_INFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1056.PROFESSION_INFO_free$MH,"PROFESSION_INFO_free");
    }
    public static void PROFESSION_INFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1056.PROFESSION_INFO_free$MH, "PROFESSION_INFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PROFESSION_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.d2i_PROFESSION_INFO$MH,"d2i_PROFESSION_INFO");
    }
    public static MemoryAddress d2i_PROFESSION_INFO ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1057.d2i_PROFESSION_INFO$MH, "d2i_PROFESSION_INFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PROFESSION_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.i2d_PROFESSION_INFO$MH,"i2d_PROFESSION_INFO");
    }
    public static int i2d_PROFESSION_INFO ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1057.i2d_PROFESSION_INFO$MH, "i2d_PROFESSION_INFO");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.ADMISSIONS_new$MH,"ADMISSIONS_new");
    }
    public static MemoryAddress ADMISSIONS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1057.ADMISSIONS_new$MH, "ADMISSIONS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.ADMISSIONS_free$MH,"ADMISSIONS_free");
    }
    public static void ADMISSIONS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1057.ADMISSIONS_free$MH, "ADMISSIONS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ADMISSIONS$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.d2i_ADMISSIONS$MH,"d2i_ADMISSIONS");
    }
    public static MemoryAddress d2i_ADMISSIONS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1057.d2i_ADMISSIONS$MH, "d2i_ADMISSIONS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ADMISSIONS$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.i2d_ADMISSIONS$MH,"i2d_ADMISSIONS");
    }
    public static int i2d_ADMISSIONS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1057.i2d_ADMISSIONS$MH, "i2d_ADMISSIONS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSION_SYNTAX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.ADMISSION_SYNTAX_new$MH,"ADMISSION_SYNTAX_new");
    }
    public static MemoryAddress ADMISSION_SYNTAX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1058.ADMISSION_SYNTAX_new$MH, "ADMISSION_SYNTAX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSION_SYNTAX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.ADMISSION_SYNTAX_free$MH,"ADMISSION_SYNTAX_free");
    }
    public static void ADMISSION_SYNTAX_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1058.ADMISSION_SYNTAX_free$MH, "ADMISSION_SYNTAX_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ADMISSION_SYNTAX$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.d2i_ADMISSION_SYNTAX$MH,"d2i_ADMISSION_SYNTAX");
    }
    public static MemoryAddress d2i_ADMISSION_SYNTAX ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1058.d2i_ADMISSION_SYNTAX$MH, "d2i_ADMISSION_SYNTAX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ADMISSION_SYNTAX$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.i2d_ADMISSION_SYNTAX$MH,"i2d_ADMISSION_SYNTAX");
    }
    public static int i2d_ADMISSION_SYNTAX ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1058.i2d_ADMISSION_SYNTAX$MH, "i2d_ADMISSION_SYNTAX");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.sk_ADMISSIONS_num$MH,"sk_ADMISSIONS_num");
    }
    public static int sk_ADMISSIONS_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1059.sk_ADMISSIONS_num$MH, "sk_ADMISSIONS_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.sk_ADMISSIONS_value$MH,"sk_ADMISSIONS_value");
    }
    public static MemoryAddress sk_ADMISSIONS_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1059.sk_ADMISSIONS_value$MH, "sk_ADMISSIONS_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_new$MH,"sk_ADMISSIONS_new");
    }
    public static MemoryAddress sk_ADMISSIONS_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_new$MH, "sk_ADMISSIONS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_new_null$MH,"sk_ADMISSIONS_new_null");
    }
    public static MemoryAddress sk_ADMISSIONS_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_new_null$MH, "sk_ADMISSIONS_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_new_reserve$MH,"sk_ADMISSIONS_new_reserve");
    }
    public static MemoryAddress sk_ADMISSIONS_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_new_reserve$MH, "sk_ADMISSIONS_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_reserve$MH,"sk_ADMISSIONS_reserve");
    }
    public static int sk_ADMISSIONS_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_reserve$MH, "sk_ADMISSIONS_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_free$MH,"sk_ADMISSIONS_free");
    }
    public static void sk_ADMISSIONS_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_free$MH, "sk_ADMISSIONS_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_zero$MH,"sk_ADMISSIONS_zero");
    }
    public static void sk_ADMISSIONS_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.sk_ADMISSIONS_zero$MH, "sk_ADMISSIONS_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_delete$MH,"sk_ADMISSIONS_delete");
    }
    public static MemoryAddress sk_ADMISSIONS_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_delete$MH, "sk_ADMISSIONS_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_delete_ptr$MH,"sk_ADMISSIONS_delete_ptr");
    }
    public static MemoryAddress sk_ADMISSIONS_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_delete_ptr$MH, "sk_ADMISSIONS_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_push$MH,"sk_ADMISSIONS_push");
    }
    public static int sk_ADMISSIONS_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_push$MH, "sk_ADMISSIONS_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_unshift$MH,"sk_ADMISSIONS_unshift");
    }
    public static int sk_ADMISSIONS_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_unshift$MH, "sk_ADMISSIONS_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_pop$MH,"sk_ADMISSIONS_pop");
    }
    public static MemoryAddress sk_ADMISSIONS_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_pop$MH, "sk_ADMISSIONS_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_shift$MH,"sk_ADMISSIONS_shift");
    }
    public static MemoryAddress sk_ADMISSIONS_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.sk_ADMISSIONS_shift$MH, "sk_ADMISSIONS_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_pop_free$MH,"sk_ADMISSIONS_pop_free");
    }
    public static void sk_ADMISSIONS_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_pop_free$MH, "sk_ADMISSIONS_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_insert$MH,"sk_ADMISSIONS_insert");
    }
    public static int sk_ADMISSIONS_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_insert$MH, "sk_ADMISSIONS_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_set$MH,"sk_ADMISSIONS_set");
    }
    public static MemoryAddress sk_ADMISSIONS_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_set$MH, "sk_ADMISSIONS_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_find$MH,"sk_ADMISSIONS_find");
    }
    public static int sk_ADMISSIONS_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_find$MH, "sk_ADMISSIONS_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_find_ex$MH,"sk_ADMISSIONS_find_ex");
    }
    public static int sk_ADMISSIONS_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_find_ex$MH, "sk_ADMISSIONS_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_sort$MH,"sk_ADMISSIONS_sort");
    }
    public static void sk_ADMISSIONS_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1062.sk_ADMISSIONS_sort$MH, "sk_ADMISSIONS_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_is_sorted$MH,"sk_ADMISSIONS_is_sorted");
    }
    public static int sk_ADMISSIONS_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_is_sorted$MH, "sk_ADMISSIONS_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_dup$MH,"sk_ADMISSIONS_dup");
    }
    public static MemoryAddress sk_ADMISSIONS_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_dup$MH, "sk_ADMISSIONS_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_deep_copy$MH,"sk_ADMISSIONS_deep_copy");
    }
    public static MemoryAddress sk_ADMISSIONS_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_deep_copy$MH, "sk_ADMISSIONS_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ADMISSIONS_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_set_cmp_func$MH,"sk_ADMISSIONS_set_cmp_func");
    }
    public static MemoryAddress sk_ADMISSIONS_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1063.sk_ADMISSIONS_set_cmp_func$MH, "sk_ADMISSIONS_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.sk_PROFESSION_INFO_num$MH,"sk_PROFESSION_INFO_num");
    }
    public static int sk_PROFESSION_INFO_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1064.sk_PROFESSION_INFO_num$MH, "sk_PROFESSION_INFO_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.sk_PROFESSION_INFO_value$MH,"sk_PROFESSION_INFO_value");
    }
    public static MemoryAddress sk_PROFESSION_INFO_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1064.sk_PROFESSION_INFO_value$MH, "sk_PROFESSION_INFO_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_new$MH,"sk_PROFESSION_INFO_new");
    }
    public static MemoryAddress sk_PROFESSION_INFO_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_new$MH, "sk_PROFESSION_INFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_new_null$MH,"sk_PROFESSION_INFO_new_null");
    }
    public static MemoryAddress sk_PROFESSION_INFO_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_new_null$MH, "sk_PROFESSION_INFO_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_new_reserve$MH,"sk_PROFESSION_INFO_new_reserve");
    }
    public static MemoryAddress sk_PROFESSION_INFO_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_new_reserve$MH, "sk_PROFESSION_INFO_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_reserve$MH,"sk_PROFESSION_INFO_reserve");
    }
    public static int sk_PROFESSION_INFO_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_reserve$MH, "sk_PROFESSION_INFO_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_free$MH,"sk_PROFESSION_INFO_free");
    }
    public static void sk_PROFESSION_INFO_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_free$MH, "sk_PROFESSION_INFO_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_zero$MH,"sk_PROFESSION_INFO_zero");
    }
    public static void sk_PROFESSION_INFO_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1065.sk_PROFESSION_INFO_zero$MH, "sk_PROFESSION_INFO_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_delete$MH,"sk_PROFESSION_INFO_delete");
    }
    public static MemoryAddress sk_PROFESSION_INFO_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_delete$MH, "sk_PROFESSION_INFO_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_delete_ptr$MH,"sk_PROFESSION_INFO_delete_ptr");
    }
    public static MemoryAddress sk_PROFESSION_INFO_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_delete_ptr$MH, "sk_PROFESSION_INFO_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_push$MH,"sk_PROFESSION_INFO_push");
    }
    public static int sk_PROFESSION_INFO_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_push$MH, "sk_PROFESSION_INFO_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_unshift$MH,"sk_PROFESSION_INFO_unshift");
    }
    public static int sk_PROFESSION_INFO_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_unshift$MH, "sk_PROFESSION_INFO_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_pop$MH,"sk_PROFESSION_INFO_pop");
    }
    public static MemoryAddress sk_PROFESSION_INFO_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_pop$MH, "sk_PROFESSION_INFO_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_shift$MH,"sk_PROFESSION_INFO_shift");
    }
    public static MemoryAddress sk_PROFESSION_INFO_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1066.sk_PROFESSION_INFO_shift$MH, "sk_PROFESSION_INFO_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_pop_free$MH,"sk_PROFESSION_INFO_pop_free");
    }
    public static void sk_PROFESSION_INFO_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_pop_free$MH, "sk_PROFESSION_INFO_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_insert$MH,"sk_PROFESSION_INFO_insert");
    }
    public static int sk_PROFESSION_INFO_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_insert$MH, "sk_PROFESSION_INFO_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_set$MH,"sk_PROFESSION_INFO_set");
    }
    public static MemoryAddress sk_PROFESSION_INFO_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_set$MH, "sk_PROFESSION_INFO_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_find$MH,"sk_PROFESSION_INFO_find");
    }
    public static int sk_PROFESSION_INFO_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_find$MH, "sk_PROFESSION_INFO_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_find_ex$MH,"sk_PROFESSION_INFO_find_ex");
    }
    public static int sk_PROFESSION_INFO_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_find_ex$MH, "sk_PROFESSION_INFO_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_sort$MH,"sk_PROFESSION_INFO_sort");
    }
    public static void sk_PROFESSION_INFO_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1067.sk_PROFESSION_INFO_sort$MH, "sk_PROFESSION_INFO_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_is_sorted$MH,"sk_PROFESSION_INFO_is_sorted");
    }
    public static int sk_PROFESSION_INFO_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_is_sorted$MH, "sk_PROFESSION_INFO_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_dup$MH,"sk_PROFESSION_INFO_dup");
    }
    public static MemoryAddress sk_PROFESSION_INFO_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_dup$MH, "sk_PROFESSION_INFO_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_deep_copy$MH,"sk_PROFESSION_INFO_deep_copy");
    }
    public static MemoryAddress sk_PROFESSION_INFO_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_deep_copy$MH, "sk_PROFESSION_INFO_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PROFESSION_INFO_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_set_cmp_func$MH,"sk_PROFESSION_INFO_set_cmp_func");
    }
    public static MemoryAddress sk_PROFESSION_INFO_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1068.sk_PROFESSION_INFO_set_cmp_func$MH, "sk_PROFESSION_INFO_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_get0_authorityId$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.NAMING_AUTHORITY_get0_authorityId$MH,"NAMING_AUTHORITY_get0_authorityId");
    }
    public static MemoryAddress NAMING_AUTHORITY_get0_authorityId ( Addressable n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1068.NAMING_AUTHORITY_get0_authorityId$MH, "NAMING_AUTHORITY_get0_authorityId");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_get0_authorityURL$MH() {
        return RuntimeHelper.requireNonNull(constants$1068.NAMING_AUTHORITY_get0_authorityURL$MH,"NAMING_AUTHORITY_get0_authorityURL");
    }
    public static MemoryAddress NAMING_AUTHORITY_get0_authorityURL ( Addressable n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1068.NAMING_AUTHORITY_get0_authorityURL$MH, "NAMING_AUTHORITY_get0_authorityURL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_get0_authorityText$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_get0_authorityText$MH,"NAMING_AUTHORITY_get0_authorityText");
    }
    public static MemoryAddress NAMING_AUTHORITY_get0_authorityText ( Addressable n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_get0_authorityText$MH, "NAMING_AUTHORITY_get0_authorityText");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_set0_authorityId$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_set0_authorityId$MH,"NAMING_AUTHORITY_set0_authorityId");
    }
    public static void NAMING_AUTHORITY_set0_authorityId ( Addressable n,  Addressable namingAuthorityId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_set0_authorityId$MH, "NAMING_AUTHORITY_set0_authorityId");
        try {
            mh$.invokeExact(n, namingAuthorityId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_set0_authorityURL$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_set0_authorityURL$MH,"NAMING_AUTHORITY_set0_authorityURL");
    }
    public static void NAMING_AUTHORITY_set0_authorityURL ( Addressable n,  Addressable namingAuthorityUrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_set0_authorityURL$MH, "NAMING_AUTHORITY_set0_authorityURL");
        try {
            mh$.invokeExact(n, namingAuthorityUrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NAMING_AUTHORITY_set0_authorityText$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_set0_authorityText$MH,"NAMING_AUTHORITY_set0_authorityText");
    }
    public static void NAMING_AUTHORITY_set0_authorityText ( Addressable n,  Addressable namingAuthorityText) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1069.NAMING_AUTHORITY_set0_authorityText$MH, "NAMING_AUTHORITY_set0_authorityText");
        try {
            mh$.invokeExact(n, namingAuthorityText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSION_SYNTAX_get0_admissionAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.ADMISSION_SYNTAX_get0_admissionAuthority$MH,"ADMISSION_SYNTAX_get0_admissionAuthority");
    }
    public static MemoryAddress ADMISSION_SYNTAX_get0_admissionAuthority ( Addressable as) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1069.ADMISSION_SYNTAX_get0_admissionAuthority$MH, "ADMISSION_SYNTAX_get0_admissionAuthority");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(as);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSION_SYNTAX_set0_admissionAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1069.ADMISSION_SYNTAX_set0_admissionAuthority$MH,"ADMISSION_SYNTAX_set0_admissionAuthority");
    }
    public static void ADMISSION_SYNTAX_set0_admissionAuthority ( Addressable as,  Addressable aa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1069.ADMISSION_SYNTAX_set0_admissionAuthority$MH, "ADMISSION_SYNTAX_set0_admissionAuthority");
        try {
            mh$.invokeExact(as, aa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSION_SYNTAX_get0_contentsOfAdmissions$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.ADMISSION_SYNTAX_get0_contentsOfAdmissions$MH,"ADMISSION_SYNTAX_get0_contentsOfAdmissions");
    }
    public static MemoryAddress ADMISSION_SYNTAX_get0_contentsOfAdmissions ( Addressable as) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1070.ADMISSION_SYNTAX_get0_contentsOfAdmissions$MH, "ADMISSION_SYNTAX_get0_contentsOfAdmissions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(as);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSION_SYNTAX_set0_contentsOfAdmissions$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.ADMISSION_SYNTAX_set0_contentsOfAdmissions$MH,"ADMISSION_SYNTAX_set0_contentsOfAdmissions");
    }
    public static void ADMISSION_SYNTAX_set0_contentsOfAdmissions ( Addressable as,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1070.ADMISSION_SYNTAX_set0_contentsOfAdmissions$MH, "ADMISSION_SYNTAX_set0_contentsOfAdmissions");
        try {
            mh$.invokeExact(as, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_get0_admissionAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_get0_admissionAuthority$MH,"ADMISSIONS_get0_admissionAuthority");
    }
    public static MemoryAddress ADMISSIONS_get0_admissionAuthority ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_get0_admissionAuthority$MH, "ADMISSIONS_get0_admissionAuthority");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_set0_admissionAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_set0_admissionAuthority$MH,"ADMISSIONS_set0_admissionAuthority");
    }
    public static void ADMISSIONS_set0_admissionAuthority ( Addressable a,  Addressable aa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_set0_admissionAuthority$MH, "ADMISSIONS_set0_admissionAuthority");
        try {
            mh$.invokeExact(a, aa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_get0_namingAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_get0_namingAuthority$MH,"ADMISSIONS_get0_namingAuthority");
    }
    public static MemoryAddress ADMISSIONS_get0_namingAuthority ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_get0_namingAuthority$MH, "ADMISSIONS_get0_namingAuthority");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_set0_namingAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_set0_namingAuthority$MH,"ADMISSIONS_set0_namingAuthority");
    }
    public static void ADMISSIONS_set0_namingAuthority ( Addressable a,  Addressable na) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1070.ADMISSIONS_set0_namingAuthority$MH, "ADMISSIONS_set0_namingAuthority");
        try {
            mh$.invokeExact(a, na);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_get0_professionInfos$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.ADMISSIONS_get0_professionInfos$MH,"ADMISSIONS_get0_professionInfos");
    }
    public static MemoryAddress ADMISSIONS_get0_professionInfos ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1071.ADMISSIONS_get0_professionInfos$MH, "ADMISSIONS_get0_professionInfos");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ADMISSIONS_set0_professionInfos$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.ADMISSIONS_set0_professionInfos$MH,"ADMISSIONS_set0_professionInfos");
    }
    public static void ADMISSIONS_set0_professionInfos ( Addressable a,  Addressable pi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1071.ADMISSIONS_set0_professionInfos$MH, "ADMISSIONS_set0_professionInfos");
        try {
            mh$.invokeExact(a, pi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_get0_addProfessionInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_get0_addProfessionInfo$MH,"PROFESSION_INFO_get0_addProfessionInfo");
    }
    public static MemoryAddress PROFESSION_INFO_get0_addProfessionInfo ( Addressable pi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_get0_addProfessionInfo$MH, "PROFESSION_INFO_get0_addProfessionInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_set0_addProfessionInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_set0_addProfessionInfo$MH,"PROFESSION_INFO_set0_addProfessionInfo");
    }
    public static void PROFESSION_INFO_set0_addProfessionInfo ( Addressable pi,  Addressable aos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_set0_addProfessionInfo$MH, "PROFESSION_INFO_set0_addProfessionInfo");
        try {
            mh$.invokeExact(pi, aos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_get0_namingAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_get0_namingAuthority$MH,"PROFESSION_INFO_get0_namingAuthority");
    }
    public static MemoryAddress PROFESSION_INFO_get0_namingAuthority ( Addressable pi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_get0_namingAuthority$MH, "PROFESSION_INFO_get0_namingAuthority");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_set0_namingAuthority$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_set0_namingAuthority$MH,"PROFESSION_INFO_set0_namingAuthority");
    }
    public static void PROFESSION_INFO_set0_namingAuthority ( Addressable pi,  Addressable na) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1071.PROFESSION_INFO_set0_namingAuthority$MH, "PROFESSION_INFO_set0_namingAuthority");
        try {
            mh$.invokeExact(pi, na);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_get0_professionItems$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_get0_professionItems$MH,"PROFESSION_INFO_get0_professionItems");
    }
    public static MemoryAddress PROFESSION_INFO_get0_professionItems ( Addressable pi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_get0_professionItems$MH, "PROFESSION_INFO_get0_professionItems");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_set0_professionItems$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_set0_professionItems$MH,"PROFESSION_INFO_set0_professionItems");
    }
    public static void PROFESSION_INFO_set0_professionItems ( Addressable pi,  Addressable as) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_set0_professionItems$MH, "PROFESSION_INFO_set0_professionItems");
        try {
            mh$.invokeExact(pi, as);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_get0_professionOIDs$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_get0_professionOIDs$MH,"PROFESSION_INFO_get0_professionOIDs");
    }
    public static MemoryAddress PROFESSION_INFO_get0_professionOIDs ( Addressable pi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_get0_professionOIDs$MH, "PROFESSION_INFO_get0_professionOIDs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_set0_professionOIDs$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_set0_professionOIDs$MH,"PROFESSION_INFO_set0_professionOIDs");
    }
    public static void PROFESSION_INFO_set0_professionOIDs ( Addressable pi,  Addressable po) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_set0_professionOIDs$MH, "PROFESSION_INFO_set0_professionOIDs");
        try {
            mh$.invokeExact(pi, po);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_get0_registrationNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_get0_registrationNumber$MH,"PROFESSION_INFO_get0_registrationNumber");
    }
    public static MemoryAddress PROFESSION_INFO_get0_registrationNumber ( Addressable pi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_get0_registrationNumber$MH, "PROFESSION_INFO_get0_registrationNumber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROFESSION_INFO_set0_registrationNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_set0_registrationNumber$MH,"PROFESSION_INFO_set0_registrationNumber");
    }
    public static void PROFESSION_INFO_set0_registrationNumber ( Addressable pi,  Addressable rn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1072.PROFESSION_INFO_set0_registrationNumber$MH, "PROFESSION_INFO_set0_registrationNumber");
        try {
            mh$.invokeExact(pi, rn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_UI_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.ERR_load_UI_strings$MH,"ERR_load_UI_strings");
    }
    public static int ERR_load_UI_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1073.ERR_load_UI_strings$MH, "ERR_load_UI_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.UI_new$MH,"UI_new");
    }
    public static MemoryAddress UI_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1073.UI_new$MH, "UI_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_new_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.UI_new_method$MH,"UI_new_method");
    }
    public static MemoryAddress UI_new_method ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1073.UI_new_method$MH, "UI_new_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.UI_free$MH,"UI_free");
    }
    public static void UI_free ( Addressable ui) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1073.UI_free$MH, "UI_free");
        try {
            mh$.invokeExact(ui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_add_input_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.UI_add_input_string$MH,"UI_add_input_string");
    }
    public static int UI_add_input_string ( Addressable ui,  Addressable prompt,  int flags,  Addressable result_buf,  int minsize,  int maxsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1073.UI_add_input_string$MH, "UI_add_input_string");
        try {
            return (int)mh$.invokeExact(ui, prompt, flags, result_buf, minsize, maxsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_dup_input_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.UI_dup_input_string$MH,"UI_dup_input_string");
    }
    public static int UI_dup_input_string ( Addressable ui,  Addressable prompt,  int flags,  Addressable result_buf,  int minsize,  int maxsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1073.UI_dup_input_string$MH, "UI_dup_input_string");
        try {
            return (int)mh$.invokeExact(ui, prompt, flags, result_buf, minsize, maxsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_add_verify_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1074.UI_add_verify_string$MH,"UI_add_verify_string");
    }
    public static int UI_add_verify_string ( Addressable ui,  Addressable prompt,  int flags,  Addressable result_buf,  int minsize,  int maxsize,  Addressable test_buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1074.UI_add_verify_string$MH, "UI_add_verify_string");
        try {
            return (int)mh$.invokeExact(ui, prompt, flags, result_buf, minsize, maxsize, test_buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_dup_verify_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1074.UI_dup_verify_string$MH,"UI_dup_verify_string");
    }
    public static int UI_dup_verify_string ( Addressable ui,  Addressable prompt,  int flags,  Addressable result_buf,  int minsize,  int maxsize,  Addressable test_buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1074.UI_dup_verify_string$MH, "UI_dup_verify_string");
        try {
            return (int)mh$.invokeExact(ui, prompt, flags, result_buf, minsize, maxsize, test_buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_add_input_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$1074.UI_add_input_boolean$MH,"UI_add_input_boolean");
    }
    public static int UI_add_input_boolean ( Addressable ui,  Addressable prompt,  Addressable action_desc,  Addressable ok_chars,  Addressable cancel_chars,  int flags,  Addressable result_buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1074.UI_add_input_boolean$MH, "UI_add_input_boolean");
        try {
            return (int)mh$.invokeExact(ui, prompt, action_desc, ok_chars, cancel_chars, flags, result_buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_dup_input_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$1074.UI_dup_input_boolean$MH,"UI_dup_input_boolean");
    }
    public static int UI_dup_input_boolean ( Addressable ui,  Addressable prompt,  Addressable action_desc,  Addressable ok_chars,  Addressable cancel_chars,  int flags,  Addressable result_buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1074.UI_dup_input_boolean$MH, "UI_dup_input_boolean");
        try {
            return (int)mh$.invokeExact(ui, prompt, action_desc, ok_chars, cancel_chars, flags, result_buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_add_info_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1074.UI_add_info_string$MH,"UI_add_info_string");
    }
    public static int UI_add_info_string ( Addressable ui,  Addressable text) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1074.UI_add_info_string$MH, "UI_add_info_string");
        try {
            return (int)mh$.invokeExact(ui, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_dup_info_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1074.UI_dup_info_string$MH,"UI_dup_info_string");
    }
    public static int UI_dup_info_string ( Addressable ui,  Addressable text) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1074.UI_dup_info_string$MH, "UI_dup_info_string");
        try {
            return (int)mh$.invokeExact(ui, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_add_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1075.UI_add_error_string$MH,"UI_add_error_string");
    }
    public static int UI_add_error_string ( Addressable ui,  Addressable text) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1075.UI_add_error_string$MH, "UI_add_error_string");
        try {
            return (int)mh$.invokeExact(ui, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_dup_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1075.UI_dup_error_string$MH,"UI_dup_error_string");
    }
    public static int UI_dup_error_string ( Addressable ui,  Addressable text) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1075.UI_dup_error_string$MH, "UI_dup_error_string");
        try {
            return (int)mh$.invokeExact(ui, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_construct_prompt$MH() {
        return RuntimeHelper.requireNonNull(constants$1075.UI_construct_prompt$MH,"UI_construct_prompt");
    }
    public static MemoryAddress UI_construct_prompt ( Addressable ui_method,  Addressable object_desc,  Addressable object_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1075.UI_construct_prompt$MH, "UI_construct_prompt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui_method, object_desc, object_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_add_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1075.UI_add_user_data$MH,"UI_add_user_data");
    }
    public static MemoryAddress UI_add_user_data ( Addressable ui,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1075.UI_add_user_data$MH, "UI_add_user_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_dup_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1075.UI_dup_user_data$MH,"UI_dup_user_data");
    }
    public static int UI_dup_user_data ( Addressable ui,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1075.UI_dup_user_data$MH, "UI_dup_user_data");
        try {
            return (int)mh$.invokeExact(ui, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get0_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1075.UI_get0_user_data$MH,"UI_get0_user_data");
    }
    public static MemoryAddress UI_get0_user_data ( Addressable ui) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1075.UI_get0_user_data$MH, "UI_get0_user_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get0_result$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.UI_get0_result$MH,"UI_get0_result");
    }
    public static MemoryAddress UI_get0_result ( Addressable ui,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1076.UI_get0_result$MH, "UI_get0_result");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_result_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.UI_get_result_length$MH,"UI_get_result_length");
    }
    public static int UI_get_result_length ( Addressable ui,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1076.UI_get_result_length$MH, "UI_get_result_length");
        try {
            return (int)mh$.invokeExact(ui, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_process$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.UI_process$MH,"UI_process");
    }
    public static int UI_process ( Addressable ui) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1076.UI_process$MH, "UI_process");
        try {
            return (int)mh$.invokeExact(ui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.UI_ctrl$MH,"UI_ctrl");
    }
    public static int UI_ctrl ( Addressable ui,  int cmd,  long i,  Addressable p,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1076.UI_ctrl$MH, "UI_ctrl");
        try {
            return (int)mh$.invokeExact(ui, cmd, i, p, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.UI_set_ex_data$MH,"UI_set_ex_data");
    }
    public static int UI_set_ex_data ( Addressable r,  int idx,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1077.UI_set_ex_data$MH, "UI_set_ex_data");
        try {
            return (int)mh$.invokeExact(r, idx, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.UI_get_ex_data$MH,"UI_get_ex_data");
    }
    public static MemoryAddress UI_get_ex_data ( Addressable r,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1077.UI_get_ex_data$MH, "UI_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(r, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_set_default_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.UI_set_default_method$MH,"UI_set_default_method");
    }
    public static void UI_set_default_method ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1077.UI_set_default_method$MH, "UI_set_default_method");
        try {
            mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_default_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.UI_get_default_method$MH,"UI_get_default_method");
    }
    public static MemoryAddress UI_get_default_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1077.UI_get_default_method$MH, "UI_get_default_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.UI_get_method$MH,"UI_get_method");
    }
    public static MemoryAddress UI_get_method ( Addressable ui) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1077.UI_get_method$MH, "UI_get_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_set_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.UI_set_method$MH,"UI_set_method");
    }
    public static MemoryAddress UI_set_method ( Addressable ui,  Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1077.UI_set_method$MH, "UI_set_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui, meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_OpenSSL$MH() {
        return RuntimeHelper.requireNonNull(constants$1078.UI_OpenSSL$MH,"UI_OpenSSL");
    }
    public static MemoryAddress UI_OpenSSL () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1078.UI_OpenSSL$MH, "UI_OpenSSL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1078.UI_null$MH,"UI_null");
    }
    public static MemoryAddress UI_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1078.UI_null$MH, "UI_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_num$MH,"sk_UI_STRING_num");
    }
    public static int sk_UI_STRING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_num$MH, "sk_UI_STRING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_value$MH,"sk_UI_STRING_value");
    }
    public static MemoryAddress sk_UI_STRING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_value$MH, "sk_UI_STRING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_new$MH,"sk_UI_STRING_new");
    }
    public static MemoryAddress sk_UI_STRING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_new$MH, "sk_UI_STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_new_null$MH,"sk_UI_STRING_new_null");
    }
    public static MemoryAddress sk_UI_STRING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1079.sk_UI_STRING_new_null$MH, "sk_UI_STRING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_new_reserve$MH,"sk_UI_STRING_new_reserve");
    }
    public static MemoryAddress sk_UI_STRING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_new_reserve$MH, "sk_UI_STRING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_reserve$MH,"sk_UI_STRING_reserve");
    }
    public static int sk_UI_STRING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_reserve$MH, "sk_UI_STRING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_free$MH,"sk_UI_STRING_free");
    }
    public static void sk_UI_STRING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_free$MH, "sk_UI_STRING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_zero$MH,"sk_UI_STRING_zero");
    }
    public static void sk_UI_STRING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_zero$MH, "sk_UI_STRING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_delete$MH,"sk_UI_STRING_delete");
    }
    public static MemoryAddress sk_UI_STRING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_delete$MH, "sk_UI_STRING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_delete_ptr$MH,"sk_UI_STRING_delete_ptr");
    }
    public static MemoryAddress sk_UI_STRING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1080.sk_UI_STRING_delete_ptr$MH, "sk_UI_STRING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_push$MH,"sk_UI_STRING_push");
    }
    public static int sk_UI_STRING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_push$MH, "sk_UI_STRING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_unshift$MH,"sk_UI_STRING_unshift");
    }
    public static int sk_UI_STRING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_unshift$MH, "sk_UI_STRING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_pop$MH,"sk_UI_STRING_pop");
    }
    public static MemoryAddress sk_UI_STRING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_pop$MH, "sk_UI_STRING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_shift$MH,"sk_UI_STRING_shift");
    }
    public static MemoryAddress sk_UI_STRING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_shift$MH, "sk_UI_STRING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_pop_free$MH,"sk_UI_STRING_pop_free");
    }
    public static void sk_UI_STRING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_pop_free$MH, "sk_UI_STRING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_insert$MH,"sk_UI_STRING_insert");
    }
    public static int sk_UI_STRING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1081.sk_UI_STRING_insert$MH, "sk_UI_STRING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_set$MH,"sk_UI_STRING_set");
    }
    public static MemoryAddress sk_UI_STRING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_set$MH, "sk_UI_STRING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_find$MH,"sk_UI_STRING_find");
    }
    public static int sk_UI_STRING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_find$MH, "sk_UI_STRING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_find_ex$MH,"sk_UI_STRING_find_ex");
    }
    public static int sk_UI_STRING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_find_ex$MH, "sk_UI_STRING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_sort$MH,"sk_UI_STRING_sort");
    }
    public static void sk_UI_STRING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_sort$MH, "sk_UI_STRING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_is_sorted$MH,"sk_UI_STRING_is_sorted");
    }
    public static int sk_UI_STRING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_is_sorted$MH, "sk_UI_STRING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_dup$MH,"sk_UI_STRING_dup");
    }
    public static MemoryAddress sk_UI_STRING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1082.sk_UI_STRING_dup$MH, "sk_UI_STRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.sk_UI_STRING_deep_copy$MH,"sk_UI_STRING_deep_copy");
    }
    public static MemoryAddress sk_UI_STRING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1083.sk_UI_STRING_deep_copy$MH, "sk_UI_STRING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_UI_STRING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.sk_UI_STRING_set_cmp_func$MH,"sk_UI_STRING_set_cmp_func");
    }
    public static MemoryAddress sk_UI_STRING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1083.sk_UI_STRING_set_cmp_func$MH, "sk_UI_STRING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int UIT_NONE() {
        return (int)0L;
    }
    public static int UIT_PROMPT() {
        return (int)1L;
    }
    public static int UIT_VERIFY() {
        return (int)2L;
    }
    public static int UIT_BOOLEAN() {
        return (int)3L;
    }
    public static int UIT_INFO() {
        return (int)4L;
    }
    public static int UIT_ERROR() {
        return (int)5L;
    }
    public static MethodHandle UI_create_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.UI_create_method$MH,"UI_create_method");
    }
    public static MemoryAddress UI_create_method ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1083.UI_create_method$MH, "UI_create_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_destroy_method$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.UI_destroy_method$MH,"UI_destroy_method");
    }
    public static void UI_destroy_method ( Addressable ui_method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1083.UI_destroy_method$MH, "UI_destroy_method");
        try {
            mh$.invokeExact(ui_method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_opener$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.UI_method_set_opener$MH,"UI_method_set_opener");
    }
    public static int UI_method_set_opener ( Addressable method,  Addressable opener) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1084.UI_method_set_opener$MH, "UI_method_set_opener");
        try {
            return (int)mh$.invokeExact(method, opener);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_writer$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.UI_method_set_writer$MH,"UI_method_set_writer");
    }
    public static int UI_method_set_writer ( Addressable method,  Addressable writer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1084.UI_method_set_writer$MH, "UI_method_set_writer");
        try {
            return (int)mh$.invokeExact(method, writer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_flusher$MH() {
        return RuntimeHelper.requireNonNull(constants$1085.UI_method_set_flusher$MH,"UI_method_set_flusher");
    }
    public static int UI_method_set_flusher ( Addressable method,  Addressable flusher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1085.UI_method_set_flusher$MH, "UI_method_set_flusher");
        try {
            return (int)mh$.invokeExact(method, flusher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_reader$MH() {
        return RuntimeHelper.requireNonNull(constants$1085.UI_method_set_reader$MH,"UI_method_set_reader");
    }
    public static int UI_method_set_reader ( Addressable method,  Addressable reader) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1085.UI_method_set_reader$MH, "UI_method_set_reader");
        try {
            return (int)mh$.invokeExact(method, reader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_closer$MH() {
        return RuntimeHelper.requireNonNull(constants$1086.UI_method_set_closer$MH,"UI_method_set_closer");
    }
    public static int UI_method_set_closer ( Addressable method,  Addressable closer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1086.UI_method_set_closer$MH, "UI_method_set_closer");
        try {
            return (int)mh$.invokeExact(method, closer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_data_duplicator$MH() {
        return RuntimeHelper.requireNonNull(constants$1086.UI_method_set_data_duplicator$MH,"UI_method_set_data_duplicator");
    }
    public static int UI_method_set_data_duplicator ( Addressable method,  Addressable duplicator,  Addressable destructor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1086.UI_method_set_data_duplicator$MH, "UI_method_set_data_duplicator");
        try {
            return (int)mh$.invokeExact(method, duplicator, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_prompt_constructor$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.UI_method_set_prompt_constructor$MH,"UI_method_set_prompt_constructor");
    }
    public static int UI_method_set_prompt_constructor ( Addressable method,  Addressable prompt_constructor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1087.UI_method_set_prompt_constructor$MH, "UI_method_set_prompt_constructor");
        try {
            return (int)mh$.invokeExact(method, prompt_constructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.UI_method_set_ex_data$MH,"UI_method_set_ex_data");
    }
    public static int UI_method_set_ex_data ( Addressable method,  int idx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1087.UI_method_set_ex_data$MH, "UI_method_set_ex_data");
        try {
            return (int)mh$.invokeExact(method, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_opener$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.UI_method_get_opener$MH,"UI_method_get_opener");
    }
    public static MemoryAddress UI_method_get_opener ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1087.UI_method_get_opener$MH, "UI_method_get_opener");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_writer$MH() {
        return RuntimeHelper.requireNonNull(constants$1087.UI_method_get_writer$MH,"UI_method_get_writer");
    }
    public static MemoryAddress UI_method_get_writer ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1087.UI_method_get_writer$MH, "UI_method_get_writer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_flusher$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.UI_method_get_flusher$MH,"UI_method_get_flusher");
    }
    public static MemoryAddress UI_method_get_flusher ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1088.UI_method_get_flusher$MH, "UI_method_get_flusher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_reader$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.UI_method_get_reader$MH,"UI_method_get_reader");
    }
    public static MemoryAddress UI_method_get_reader ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1088.UI_method_get_reader$MH, "UI_method_get_reader");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_closer$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.UI_method_get_closer$MH,"UI_method_get_closer");
    }
    public static MemoryAddress UI_method_get_closer ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1088.UI_method_get_closer$MH, "UI_method_get_closer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_prompt_constructor$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.UI_method_get_prompt_constructor$MH,"UI_method_get_prompt_constructor");
    }
    public static MemoryAddress UI_method_get_prompt_constructor ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1088.UI_method_get_prompt_constructor$MH, "UI_method_get_prompt_constructor");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_data_duplicator$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.UI_method_get_data_duplicator$MH,"UI_method_get_data_duplicator");
    }
    public static MemoryAddress UI_method_get_data_duplicator ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1088.UI_method_get_data_duplicator$MH, "UI_method_get_data_duplicator");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_data_destructor$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.UI_method_get_data_destructor$MH,"UI_method_get_data_destructor");
    }
    public static MemoryAddress UI_method_get_data_destructor ( Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1088.UI_method_get_data_destructor$MH, "UI_method_get_data_destructor");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_method_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.UI_method_get_ex_data$MH,"UI_method_get_ex_data");
    }
    public static MemoryAddress UI_method_get_ex_data ( Addressable method,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1089.UI_method_get_ex_data$MH, "UI_method_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_string_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.UI_get_string_type$MH,"UI_get_string_type");
    }
    public static int UI_get_string_type ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1089.UI_get_string_type$MH, "UI_get_string_type");
        try {
            return (int)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_input_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.UI_get_input_flags$MH,"UI_get_input_flags");
    }
    public static int UI_get_input_flags ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1089.UI_get_input_flags$MH, "UI_get_input_flags");
        try {
            return (int)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get0_output_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.UI_get0_output_string$MH,"UI_get0_output_string");
    }
    public static MemoryAddress UI_get0_output_string ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1089.UI_get0_output_string$MH, "UI_get0_output_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get0_action_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.UI_get0_action_string$MH,"UI_get0_action_string");
    }
    public static MemoryAddress UI_get0_action_string ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1089.UI_get0_action_string$MH, "UI_get0_action_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get0_result_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.UI_get0_result_string$MH,"UI_get0_result_string");
    }
    public static MemoryAddress UI_get0_result_string ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1089.UI_get0_result_string$MH, "UI_get0_result_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_result_string_length$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.UI_get_result_string_length$MH,"UI_get_result_string_length");
    }
    public static int UI_get_result_string_length ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1090.UI_get_result_string_length$MH, "UI_get_result_string_length");
        try {
            return (int)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get0_test_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.UI_get0_test_string$MH,"UI_get0_test_string");
    }
    public static MemoryAddress UI_get0_test_string ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1090.UI_get0_test_string$MH, "UI_get0_test_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_result_minsize$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.UI_get_result_minsize$MH,"UI_get_result_minsize");
    }
    public static int UI_get_result_minsize ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1090.UI_get_result_minsize$MH, "UI_get_result_minsize");
        try {
            return (int)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_get_result_maxsize$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.UI_get_result_maxsize$MH,"UI_get_result_maxsize");
    }
    public static int UI_get_result_maxsize ( Addressable uis) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1090.UI_get_result_maxsize$MH, "UI_get_result_maxsize");
        try {
            return (int)mh$.invokeExact(uis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_set_result$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.UI_set_result$MH,"UI_set_result");
    }
    public static int UI_set_result ( Addressable ui,  Addressable uis,  Addressable result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1090.UI_set_result$MH, "UI_set_result");
        try {
            return (int)mh$.invokeExact(ui, uis, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_set_result_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.UI_set_result_ex$MH,"UI_set_result_ex");
    }
    public static int UI_set_result_ex ( Addressable ui,  Addressable uis,  Addressable result,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1090.UI_set_result_ex$MH, "UI_set_result_ex");
        try {
            return (int)mh$.invokeExact(ui, uis, result, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_UTIL_read_pw_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.UI_UTIL_read_pw_string$MH,"UI_UTIL_read_pw_string");
    }
    public static int UI_UTIL_read_pw_string ( Addressable buf,  int length,  Addressable prompt,  int verify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1091.UI_UTIL_read_pw_string$MH, "UI_UTIL_read_pw_string");
        try {
            return (int)mh$.invokeExact(buf, length, prompt, verify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_UTIL_read_pw$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.UI_UTIL_read_pw$MH,"UI_UTIL_read_pw");
    }
    public static int UI_UTIL_read_pw ( Addressable buf,  Addressable buff,  int size,  Addressable prompt,  int verify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1091.UI_UTIL_read_pw$MH, "UI_UTIL_read_pw");
        try {
            return (int)mh$.invokeExact(buf, buff, size, prompt, verify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UI_UTIL_wrap_read_pem_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.UI_UTIL_wrap_read_pem_callback$MH,"UI_UTIL_wrap_read_pem_callback");
    }
    public static MemoryAddress UI_UTIL_wrap_read_pem_callback ( Addressable cb,  int rwflag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1091.UI_UTIL_wrap_read_pem_callback$MH, "UI_UTIL_wrap_read_pem_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cb, rwflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_ENGINE_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$1091.ERR_load_ENGINE_strings$MH,"ERR_load_ENGINE_strings");
    }
    public static int ERR_load_ENGINE_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1091.ERR_load_ENGINE_strings$MH, "ERR_load_ENGINE_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_first$MH() {
        return RuntimeHelper.requireNonNull(constants$1094.ENGINE_get_first$MH,"ENGINE_get_first");
    }
    public static MemoryAddress ENGINE_get_first () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1094.ENGINE_get_first$MH, "ENGINE_get_first");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_last$MH() {
        return RuntimeHelper.requireNonNull(constants$1094.ENGINE_get_last$MH,"ENGINE_get_last");
    }
    public static MemoryAddress ENGINE_get_last () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1094.ENGINE_get_last$MH, "ENGINE_get_last");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_next$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.ENGINE_get_next$MH,"ENGINE_get_next");
    }
    public static MemoryAddress ENGINE_get_next ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1095.ENGINE_get_next$MH, "ENGINE_get_next");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_prev$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.ENGINE_get_prev$MH,"ENGINE_get_prev");
    }
    public static MemoryAddress ENGINE_get_prev ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1095.ENGINE_get_prev$MH, "ENGINE_get_prev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_add$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.ENGINE_add$MH,"ENGINE_add");
    }
    public static int ENGINE_add ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1095.ENGINE_add$MH, "ENGINE_add");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.ENGINE_remove$MH,"ENGINE_remove");
    }
    public static int ENGINE_remove ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1095.ENGINE_remove$MH, "ENGINE_remove");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.ENGINE_by_id$MH,"ENGINE_by_id");
    }
    public static MemoryAddress ENGINE_by_id ( Addressable id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1095.ENGINE_by_id$MH, "ENGINE_by_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_load_builtin_engines$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.ENGINE_load_builtin_engines$MH,"ENGINE_load_builtin_engines");
    }
    public static void ENGINE_load_builtin_engines () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1095.ENGINE_load_builtin_engines$MH, "ENGINE_load_builtin_engines");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_table_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.ENGINE_get_table_flags$MH,"ENGINE_get_table_flags");
    }
    public static int ENGINE_get_table_flags () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1096.ENGINE_get_table_flags$MH, "ENGINE_get_table_flags");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_table_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.ENGINE_set_table_flags$MH,"ENGINE_set_table_flags");
    }
    public static void ENGINE_set_table_flags ( int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1096.ENGINE_set_table_flags$MH, "ENGINE_set_table_flags");
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.ENGINE_register_RSA$MH,"ENGINE_register_RSA");
    }
    public static int ENGINE_register_RSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1096.ENGINE_register_RSA$MH, "ENGINE_register_RSA");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.ENGINE_unregister_RSA$MH,"ENGINE_unregister_RSA");
    }
    public static void ENGINE_unregister_RSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1096.ENGINE_unregister_RSA$MH, "ENGINE_unregister_RSA");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.ENGINE_register_all_RSA$MH,"ENGINE_register_all_RSA");
    }
    public static void ENGINE_register_all_RSA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1096.ENGINE_register_all_RSA$MH, "ENGINE_register_all_RSA");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.ENGINE_register_DSA$MH,"ENGINE_register_DSA");
    }
    public static int ENGINE_register_DSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1096.ENGINE_register_DSA$MH, "ENGINE_register_DSA");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.ENGINE_unregister_DSA$MH,"ENGINE_unregister_DSA");
    }
    public static void ENGINE_unregister_DSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1097.ENGINE_unregister_DSA$MH, "ENGINE_unregister_DSA");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_all_DSA$MH,"ENGINE_register_all_DSA");
    }
    public static void ENGINE_register_all_DSA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_all_DSA$MH, "ENGINE_register_all_DSA");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_EC$MH,"ENGINE_register_EC");
    }
    public static int ENGINE_register_EC ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_EC$MH, "ENGINE_register_EC");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.ENGINE_unregister_EC$MH,"ENGINE_unregister_EC");
    }
    public static void ENGINE_unregister_EC ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1097.ENGINE_unregister_EC$MH, "ENGINE_unregister_EC");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_all_EC$MH,"ENGINE_register_all_EC");
    }
    public static void ENGINE_register_all_EC () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_all_EC$MH, "ENGINE_register_all_EC");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_DH$MH,"ENGINE_register_DH");
    }
    public static int ENGINE_register_DH ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1097.ENGINE_register_DH$MH, "ENGINE_register_DH");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.ENGINE_unregister_DH$MH,"ENGINE_unregister_DH");
    }
    public static void ENGINE_unregister_DH ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1098.ENGINE_unregister_DH$MH, "ENGINE_unregister_DH");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_all_DH$MH,"ENGINE_register_all_DH");
    }
    public static void ENGINE_register_all_DH () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_all_DH$MH, "ENGINE_register_all_DH");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_RAND$MH,"ENGINE_register_RAND");
    }
    public static int ENGINE_register_RAND ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_RAND$MH, "ENGINE_register_RAND");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.ENGINE_unregister_RAND$MH,"ENGINE_unregister_RAND");
    }
    public static void ENGINE_unregister_RAND ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1098.ENGINE_unregister_RAND$MH, "ENGINE_unregister_RAND");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_all_RAND$MH,"ENGINE_register_all_RAND");
    }
    public static void ENGINE_register_all_RAND () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_all_RAND$MH, "ENGINE_register_all_RAND");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_ciphers$MH,"ENGINE_register_ciphers");
    }
    public static int ENGINE_register_ciphers ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1098.ENGINE_register_ciphers$MH, "ENGINE_register_ciphers");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.ENGINE_unregister_ciphers$MH,"ENGINE_unregister_ciphers");
    }
    public static void ENGINE_unregister_ciphers ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1099.ENGINE_unregister_ciphers$MH, "ENGINE_unregister_ciphers");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_all_ciphers$MH,"ENGINE_register_all_ciphers");
    }
    public static void ENGINE_register_all_ciphers () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_all_ciphers$MH, "ENGINE_register_all_ciphers");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_digests$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_digests$MH,"ENGINE_register_digests");
    }
    public static int ENGINE_register_digests ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_digests$MH, "ENGINE_register_digests");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_digests$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.ENGINE_unregister_digests$MH,"ENGINE_unregister_digests");
    }
    public static void ENGINE_unregister_digests ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1099.ENGINE_unregister_digests$MH, "ENGINE_unregister_digests");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_digests$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_all_digests$MH,"ENGINE_register_all_digests");
    }
    public static void ENGINE_register_all_digests () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_all_digests$MH, "ENGINE_register_all_digests");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_pkey_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_pkey_meths$MH,"ENGINE_register_pkey_meths");
    }
    public static int ENGINE_register_pkey_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1099.ENGINE_register_pkey_meths$MH, "ENGINE_register_pkey_meths");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_pkey_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.ENGINE_unregister_pkey_meths$MH,"ENGINE_unregister_pkey_meths");
    }
    public static void ENGINE_unregister_pkey_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1100.ENGINE_unregister_pkey_meths$MH, "ENGINE_unregister_pkey_meths");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_pkey_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_all_pkey_meths$MH,"ENGINE_register_all_pkey_meths");
    }
    public static void ENGINE_register_all_pkey_meths () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_all_pkey_meths$MH, "ENGINE_register_all_pkey_meths");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_pkey_asn1_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_pkey_asn1_meths$MH,"ENGINE_register_pkey_asn1_meths");
    }
    public static int ENGINE_register_pkey_asn1_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_pkey_asn1_meths$MH, "ENGINE_register_pkey_asn1_meths");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_unregister_pkey_asn1_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.ENGINE_unregister_pkey_asn1_meths$MH,"ENGINE_unregister_pkey_asn1_meths");
    }
    public static void ENGINE_unregister_pkey_asn1_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1100.ENGINE_unregister_pkey_asn1_meths$MH, "ENGINE_unregister_pkey_asn1_meths");
        try {
            mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_pkey_asn1_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_all_pkey_asn1_meths$MH,"ENGINE_register_all_pkey_asn1_meths");
    }
    public static void ENGINE_register_all_pkey_asn1_meths () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_all_pkey_asn1_meths$MH, "ENGINE_register_all_pkey_asn1_meths");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_complete$MH() {
        return RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_complete$MH,"ENGINE_register_complete");
    }
    public static int ENGINE_register_complete ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1100.ENGINE_register_complete$MH, "ENGINE_register_complete");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_complete$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.ENGINE_register_all_complete$MH,"ENGINE_register_all_complete");
    }
    public static int ENGINE_register_all_complete () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1101.ENGINE_register_all_complete$MH, "ENGINE_register_all_complete");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.ENGINE_ctrl$MH,"ENGINE_ctrl");
    }
    public static int ENGINE_ctrl ( Addressable e,  int cmd,  long i,  Addressable p,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1101.ENGINE_ctrl$MH, "ENGINE_ctrl");
        try {
            return (int)mh$.invokeExact(e, cmd, i, p, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_cmd_is_executable$MH() {
        return RuntimeHelper.requireNonNull(constants$1101.ENGINE_cmd_is_executable$MH,"ENGINE_cmd_is_executable");
    }
    public static int ENGINE_cmd_is_executable ( Addressable e,  int cmd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1101.ENGINE_cmd_is_executable$MH, "ENGINE_cmd_is_executable");
        try {
            return (int)mh$.invokeExact(e, cmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_ctrl_cmd$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.ENGINE_ctrl_cmd$MH,"ENGINE_ctrl_cmd");
    }
    public static int ENGINE_ctrl_cmd ( Addressable e,  Addressable cmd_name,  long i,  Addressable p,  Addressable f,  int cmd_optional) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1102.ENGINE_ctrl_cmd$MH, "ENGINE_ctrl_cmd");
        try {
            return (int)mh$.invokeExact(e, cmd_name, i, p, f, cmd_optional);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_ctrl_cmd_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.ENGINE_ctrl_cmd_string$MH,"ENGINE_ctrl_cmd_string");
    }
    public static int ENGINE_ctrl_cmd_string ( Addressable e,  Addressable cmd_name,  Addressable arg,  int cmd_optional) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1102.ENGINE_ctrl_cmd_string$MH, "ENGINE_ctrl_cmd_string");
        try {
            return (int)mh$.invokeExact(e, cmd_name, arg, cmd_optional);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.ENGINE_new$MH,"ENGINE_new");
    }
    public static MemoryAddress ENGINE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1102.ENGINE_new$MH, "ENGINE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.ENGINE_free$MH,"ENGINE_free");
    }
    public static int ENGINE_free ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1102.ENGINE_free$MH, "ENGINE_free");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$1102.ENGINE_up_ref$MH,"ENGINE_up_ref");
    }
    public static int ENGINE_up_ref ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1102.ENGINE_up_ref$MH, "ENGINE_up_ref");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_id$MH,"ENGINE_set_id");
    }
    public static int ENGINE_set_id ( Addressable e,  Addressable id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_id$MH, "ENGINE_set_id");
        try {
            return (int)mh$.invokeExact(e, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_name$MH,"ENGINE_set_name");
    }
    public static int ENGINE_set_name ( Addressable e,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_name$MH, "ENGINE_set_name");
        try {
            return (int)mh$.invokeExact(e, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_RSA$MH,"ENGINE_set_RSA");
    }
    public static int ENGINE_set_RSA ( Addressable e,  Addressable rsa_meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_RSA$MH, "ENGINE_set_RSA");
        try {
            return (int)mh$.invokeExact(e, rsa_meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_DSA$MH,"ENGINE_set_DSA");
    }
    public static int ENGINE_set_DSA ( Addressable e,  Addressable dsa_meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_DSA$MH, "ENGINE_set_DSA");
        try {
            return (int)mh$.invokeExact(e, dsa_meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_EC$MH,"ENGINE_set_EC");
    }
    public static int ENGINE_set_EC ( Addressable e,  Addressable ecdsa_meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_EC$MH, "ENGINE_set_EC");
        try {
            return (int)mh$.invokeExact(e, ecdsa_meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_DH$MH,"ENGINE_set_DH");
    }
    public static int ENGINE_set_DH ( Addressable e,  Addressable dh_meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1103.ENGINE_set_DH$MH, "ENGINE_set_DH");
        try {
            return (int)mh$.invokeExact(e, dh_meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_RAND$MH,"ENGINE_set_RAND");
    }
    public static int ENGINE_set_RAND ( Addressable e,  Addressable rand_meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_RAND$MH, "ENGINE_set_RAND");
        try {
            return (int)mh$.invokeExact(e, rand_meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_destroy_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_destroy_function$MH,"ENGINE_set_destroy_function");
    }
    public static int ENGINE_set_destroy_function ( Addressable e,  Addressable destroy_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_destroy_function$MH, "ENGINE_set_destroy_function");
        try {
            return (int)mh$.invokeExact(e, destroy_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_init_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_init_function$MH,"ENGINE_set_init_function");
    }
    public static int ENGINE_set_init_function ( Addressable e,  Addressable init_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_init_function$MH, "ENGINE_set_init_function");
        try {
            return (int)mh$.invokeExact(e, init_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_finish_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_finish_function$MH,"ENGINE_set_finish_function");
    }
    public static int ENGINE_set_finish_function ( Addressable e,  Addressable finish_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_finish_function$MH, "ENGINE_set_finish_function");
        try {
            return (int)mh$.invokeExact(e, finish_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_ctrl_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_ctrl_function$MH,"ENGINE_set_ctrl_function");
    }
    public static int ENGINE_set_ctrl_function ( Addressable e,  Addressable ctrl_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_ctrl_function$MH, "ENGINE_set_ctrl_function");
        try {
            return (int)mh$.invokeExact(e, ctrl_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_load_privkey_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_load_privkey_function$MH,"ENGINE_set_load_privkey_function");
    }
    public static int ENGINE_set_load_privkey_function ( Addressable e,  Addressable loadpriv_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1104.ENGINE_set_load_privkey_function$MH, "ENGINE_set_load_privkey_function");
        try {
            return (int)mh$.invokeExact(e, loadpriv_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_load_pubkey_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_load_pubkey_function$MH,"ENGINE_set_load_pubkey_function");
    }
    public static int ENGINE_set_load_pubkey_function ( Addressable e,  Addressable loadpub_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_load_pubkey_function$MH, "ENGINE_set_load_pubkey_function");
        try {
            return (int)mh$.invokeExact(e, loadpub_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_load_ssl_client_cert_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_load_ssl_client_cert_function$MH,"ENGINE_set_load_ssl_client_cert_function");
    }
    public static int ENGINE_set_load_ssl_client_cert_function ( Addressable e,  Addressable loadssl_f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_load_ssl_client_cert_function$MH, "ENGINE_set_load_ssl_client_cert_function");
        try {
            return (int)mh$.invokeExact(e, loadssl_f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_ciphers$MH,"ENGINE_set_ciphers");
    }
    public static int ENGINE_set_ciphers ( Addressable e,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_ciphers$MH, "ENGINE_set_ciphers");
        try {
            return (int)mh$.invokeExact(e, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_digests$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_digests$MH,"ENGINE_set_digests");
    }
    public static int ENGINE_set_digests ( Addressable e,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_digests$MH, "ENGINE_set_digests");
        try {
            return (int)mh$.invokeExact(e, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_pkey_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_pkey_meths$MH,"ENGINE_set_pkey_meths");
    }
    public static int ENGINE_set_pkey_meths ( Addressable e,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_pkey_meths$MH, "ENGINE_set_pkey_meths");
        try {
            return (int)mh$.invokeExact(e, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_pkey_asn1_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_pkey_asn1_meths$MH,"ENGINE_set_pkey_asn1_meths");
    }
    public static int ENGINE_set_pkey_asn1_meths ( Addressable e,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1105.ENGINE_set_pkey_asn1_meths$MH, "ENGINE_set_pkey_asn1_meths");
        try {
            return (int)mh$.invokeExact(e, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.ENGINE_set_flags$MH,"ENGINE_set_flags");
    }
    public static int ENGINE_set_flags ( Addressable e,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1106.ENGINE_set_flags$MH, "ENGINE_set_flags");
        try {
            return (int)mh$.invokeExact(e, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_cmd_defns$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.ENGINE_set_cmd_defns$MH,"ENGINE_set_cmd_defns");
    }
    public static int ENGINE_set_cmd_defns ( Addressable e,  Addressable defns) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1106.ENGINE_set_cmd_defns$MH, "ENGINE_set_cmd_defns");
        try {
            return (int)mh$.invokeExact(e, defns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.ENGINE_set_ex_data$MH,"ENGINE_set_ex_data");
    }
    public static int ENGINE_set_ex_data ( Addressable e,  int idx,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1106.ENGINE_set_ex_data$MH, "ENGINE_set_ex_data");
        try {
            return (int)mh$.invokeExact(e, idx, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.ENGINE_get_ex_data$MH,"ENGINE_get_ex_data");
    }
    public static MemoryAddress ENGINE_get_ex_data ( Addressable e,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1106.ENGINE_get_ex_data$MH, "ENGINE_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.ENGINE_get_id$MH,"ENGINE_get_id");
    }
    public static MemoryAddress ENGINE_get_id ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1106.ENGINE_get_id$MH, "ENGINE_get_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1106.ENGINE_get_name$MH,"ENGINE_get_name");
    }
    public static MemoryAddress ENGINE_get_name ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1106.ENGINE_get_name$MH, "ENGINE_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_RSA$MH,"ENGINE_get_RSA");
    }
    public static MemoryAddress ENGINE_get_RSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_RSA$MH, "ENGINE_get_RSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_DSA$MH,"ENGINE_get_DSA");
    }
    public static MemoryAddress ENGINE_get_DSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_DSA$MH, "ENGINE_get_DSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_EC$MH,"ENGINE_get_EC");
    }
    public static MemoryAddress ENGINE_get_EC ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_EC$MH, "ENGINE_get_EC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_DH$MH,"ENGINE_get_DH");
    }
    public static MemoryAddress ENGINE_get_DH ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_DH$MH, "ENGINE_get_DH");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_RAND$MH,"ENGINE_get_RAND");
    }
    public static MemoryAddress ENGINE_get_RAND ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_RAND$MH, "ENGINE_get_RAND");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_destroy_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_destroy_function$MH,"ENGINE_get_destroy_function");
    }
    public static MemoryAddress ENGINE_get_destroy_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1107.ENGINE_get_destroy_function$MH, "ENGINE_get_destroy_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_init_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_init_function$MH,"ENGINE_get_init_function");
    }
    public static MemoryAddress ENGINE_get_init_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_init_function$MH, "ENGINE_get_init_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_finish_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_finish_function$MH,"ENGINE_get_finish_function");
    }
    public static MemoryAddress ENGINE_get_finish_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_finish_function$MH, "ENGINE_get_finish_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_ctrl_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_ctrl_function$MH,"ENGINE_get_ctrl_function");
    }
    public static MemoryAddress ENGINE_get_ctrl_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_ctrl_function$MH, "ENGINE_get_ctrl_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_load_privkey_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_load_privkey_function$MH,"ENGINE_get_load_privkey_function");
    }
    public static MemoryAddress ENGINE_get_load_privkey_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_load_privkey_function$MH, "ENGINE_get_load_privkey_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_load_pubkey_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_load_pubkey_function$MH,"ENGINE_get_load_pubkey_function");
    }
    public static MemoryAddress ENGINE_get_load_pubkey_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_load_pubkey_function$MH, "ENGINE_get_load_pubkey_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_ssl_client_cert_function$MH() {
        return RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_ssl_client_cert_function$MH,"ENGINE_get_ssl_client_cert_function");
    }
    public static MemoryAddress ENGINE_get_ssl_client_cert_function ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1108.ENGINE_get_ssl_client_cert_function$MH, "ENGINE_get_ssl_client_cert_function");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_ciphers$MH,"ENGINE_get_ciphers");
    }
    public static MemoryAddress ENGINE_get_ciphers ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_ciphers$MH, "ENGINE_get_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_digests$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_digests$MH,"ENGINE_get_digests");
    }
    public static MemoryAddress ENGINE_get_digests ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_digests$MH, "ENGINE_get_digests");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_pkey_meths$MH,"ENGINE_get_pkey_meths");
    }
    public static MemoryAddress ENGINE_get_pkey_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_pkey_meths$MH, "ENGINE_get_pkey_meths");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_asn1_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_pkey_asn1_meths$MH,"ENGINE_get_pkey_asn1_meths");
    }
    public static MemoryAddress ENGINE_get_pkey_asn1_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_pkey_asn1_meths$MH, "ENGINE_get_pkey_asn1_meths");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_cipher$MH,"ENGINE_get_cipher");
    }
    public static MemoryAddress ENGINE_get_cipher ( Addressable e,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_cipher$MH, "ENGINE_get_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_digest$MH,"ENGINE_get_digest");
    }
    public static MemoryAddress ENGINE_get_digest ( Addressable e,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1109.ENGINE_get_digest$MH, "ENGINE_get_digest");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_meth$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_pkey_meth$MH,"ENGINE_get_pkey_meth");
    }
    public static MemoryAddress ENGINE_get_pkey_meth ( Addressable e,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_pkey_meth$MH, "ENGINE_get_pkey_meth");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_asn1_meth$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_pkey_asn1_meth$MH,"ENGINE_get_pkey_asn1_meth");
    }
    public static MemoryAddress ENGINE_get_pkey_asn1_meth ( Addressable e,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_pkey_asn1_meth$MH, "ENGINE_get_pkey_asn1_meth");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_asn1_meth_str$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_pkey_asn1_meth_str$MH,"ENGINE_get_pkey_asn1_meth_str");
    }
    public static MemoryAddress ENGINE_get_pkey_asn1_meth_str ( Addressable e,  Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_pkey_asn1_meth_str$MH, "ENGINE_get_pkey_asn1_meth_str");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_pkey_asn1_find_str$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.ENGINE_pkey_asn1_find_str$MH,"ENGINE_pkey_asn1_find_str");
    }
    public static MemoryAddress ENGINE_pkey_asn1_find_str ( Addressable pe,  Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1110.ENGINE_pkey_asn1_find_str$MH, "ENGINE_pkey_asn1_find_str");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pe, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_cmd_defns$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_cmd_defns$MH,"ENGINE_get_cmd_defns");
    }
    public static MemoryAddress ENGINE_get_cmd_defns ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_cmd_defns$MH, "ENGINE_get_cmd_defns");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_flags$MH,"ENGINE_get_flags");
    }
    public static int ENGINE_get_flags ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1110.ENGINE_get_flags$MH, "ENGINE_get_flags");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.ENGINE_init$MH,"ENGINE_init");
    }
    public static int ENGINE_init ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1111.ENGINE_init$MH, "ENGINE_init");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_finish$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.ENGINE_finish$MH,"ENGINE_finish");
    }
    public static int ENGINE_finish ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1111.ENGINE_finish$MH, "ENGINE_finish");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_load_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.ENGINE_load_private_key$MH,"ENGINE_load_private_key");
    }
    public static MemoryAddress ENGINE_load_private_key ( Addressable e,  Addressable key_id,  Addressable ui_method,  Addressable callback_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1111.ENGINE_load_private_key$MH, "ENGINE_load_private_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, key_id, ui_method, callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_load_public_key$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.ENGINE_load_public_key$MH,"ENGINE_load_public_key");
    }
    public static MemoryAddress ENGINE_load_public_key ( Addressable e,  Addressable key_id,  Addressable ui_method,  Addressable callback_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1111.ENGINE_load_public_key$MH, "ENGINE_load_public_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, key_id, ui_method, callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_load_ssl_client_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.ENGINE_load_ssl_client_cert$MH,"ENGINE_load_ssl_client_cert");
    }
    public static int ENGINE_load_ssl_client_cert ( Addressable e,  Addressable s,  Addressable ca_dn,  Addressable pcert,  Addressable ppkey,  Addressable pother,  Addressable ui_method,  Addressable callback_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1111.ENGINE_load_ssl_client_cert$MH, "ENGINE_load_ssl_client_cert");
        try {
            return (int)mh$.invokeExact(e, s, ca_dn, pcert, ppkey, pother, ui_method, callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_default_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1111.ENGINE_get_default_RSA$MH,"ENGINE_get_default_RSA");
    }
    public static MemoryAddress ENGINE_get_default_RSA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1111.ENGINE_get_default_RSA$MH, "ENGINE_get_default_RSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_default_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_DSA$MH,"ENGINE_get_default_DSA");
    }
    public static MemoryAddress ENGINE_get_default_DSA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_DSA$MH, "ENGINE_get_default_DSA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_default_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_EC$MH,"ENGINE_get_default_EC");
    }
    public static MemoryAddress ENGINE_get_default_EC () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_EC$MH, "ENGINE_get_default_EC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_default_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_DH$MH,"ENGINE_get_default_DH");
    }
    public static MemoryAddress ENGINE_get_default_DH () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_DH$MH, "ENGINE_get_default_DH");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_default_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_RAND$MH,"ENGINE_get_default_RAND");
    }
    public static MemoryAddress ENGINE_get_default_RAND () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_default_RAND$MH, "ENGINE_get_default_RAND");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_cipher_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_cipher_engine$MH,"ENGINE_get_cipher_engine");
    }
    public static MemoryAddress ENGINE_get_cipher_engine ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_cipher_engine$MH, "ENGINE_get_cipher_engine");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_digest_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_digest_engine$MH,"ENGINE_get_digest_engine");
    }
    public static MemoryAddress ENGINE_get_digest_engine ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1112.ENGINE_get_digest_engine$MH, "ENGINE_get_digest_engine");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_meth_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.ENGINE_get_pkey_meth_engine$MH,"ENGINE_get_pkey_meth_engine");
    }
    public static MemoryAddress ENGINE_get_pkey_meth_engine ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1113.ENGINE_get_pkey_meth_engine$MH, "ENGINE_get_pkey_meth_engine");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_pkey_asn1_meth_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.ENGINE_get_pkey_asn1_meth_engine$MH,"ENGINE_get_pkey_asn1_meth_engine");
    }
    public static MemoryAddress ENGINE_get_pkey_asn1_meth_engine ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1113.ENGINE_get_pkey_asn1_meth_engine$MH, "ENGINE_get_pkey_asn1_meth_engine");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_RSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_RSA$MH,"ENGINE_set_default_RSA");
    }
    public static int ENGINE_set_default_RSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_RSA$MH, "ENGINE_set_default_RSA");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_string$MH,"ENGINE_set_default_string");
    }
    public static int ENGINE_set_default_string ( Addressable e,  Addressable def_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_string$MH, "ENGINE_set_default_string");
        try {
            return (int)mh$.invokeExact(e, def_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_DSA$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_DSA$MH,"ENGINE_set_default_DSA");
    }
    public static int ENGINE_set_default_DSA ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_DSA$MH, "ENGINE_set_default_DSA");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_EC$MH() {
        return RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_EC$MH,"ENGINE_set_default_EC");
    }
    public static int ENGINE_set_default_EC ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1113.ENGINE_set_default_EC$MH, "ENGINE_set_default_EC");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_DH$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_DH$MH,"ENGINE_set_default_DH");
    }
    public static int ENGINE_set_default_DH ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_DH$MH, "ENGINE_set_default_DH");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_RAND$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_RAND$MH,"ENGINE_set_default_RAND");
    }
    public static int ENGINE_set_default_RAND ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_RAND$MH, "ENGINE_set_default_RAND");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_ciphers$MH,"ENGINE_set_default_ciphers");
    }
    public static int ENGINE_set_default_ciphers ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_ciphers$MH, "ENGINE_set_default_ciphers");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_digests$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_digests$MH,"ENGINE_set_default_digests");
    }
    public static int ENGINE_set_default_digests ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_digests$MH, "ENGINE_set_default_digests");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_pkey_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_pkey_meths$MH,"ENGINE_set_default_pkey_meths");
    }
    public static int ENGINE_set_default_pkey_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_pkey_meths$MH, "ENGINE_set_default_pkey_meths");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default_pkey_asn1_meths$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_pkey_asn1_meths$MH,"ENGINE_set_default_pkey_asn1_meths");
    }
    public static int ENGINE_set_default_pkey_asn1_meths ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1114.ENGINE_set_default_pkey_asn1_meths$MH, "ENGINE_set_default_pkey_asn1_meths");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.ENGINE_set_default$MH,"ENGINE_set_default");
    }
    public static int ENGINE_set_default ( Addressable e,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1115.ENGINE_set_default$MH, "ENGINE_set_default");
        try {
            return (int)mh$.invokeExact(e, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_add_conf_module$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.ENGINE_add_conf_module$MH,"ENGINE_add_conf_module");
    }
    public static void ENGINE_add_conf_module () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1115.ENGINE_add_conf_module$MH, "ENGINE_add_conf_module");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_get_static_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.ENGINE_get_static_state$MH,"ENGINE_get_static_state");
    }
    public static MemoryAddress ENGINE_get_static_state () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1117.ENGINE_get_static_state$MH, "ENGINE_get_static_state");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long OPENSSL_VERSION_NUMBER() {
        return 269488335L;
    }
    public static MemorySegment OPENSSL_VERSION_TEXT() {
        return constants$1117.OPENSSL_VERSION_TEXT$SEGMENT;
    }
    public static MemorySegment SHLIB_VERSION_HISTORY() {
        return constants$1117.SHLIB_VERSION_HISTORY$SEGMENT;
    }
    public static MemorySegment SHLIB_VERSION_NUMBER() {
        return constants$1117.SHLIB_VERSION_NUMBER$SEGMENT;
    }
    public static MemorySegment OPENSSL_FILE() {
        return constants$1117.OPENSSL_FILE$SEGMENT;
    }
    public static int OPENSSL_LINE() {
        return (int)32L;
    }
    public static int OPENSSL_API_COMPAT() {
        return (int)0L;
    }
    public static long OSSL_SSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$1117.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$1118.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$1118.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$1118.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$1118.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$1118.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$1118.PRIdLEAST8$SEGMENT;
    }
    public static MemorySegment PRIdLEAST16() {
        return constants$1119.PRIdLEAST16$SEGMENT;
    }
    public static MemorySegment PRIdLEAST32() {
        return constants$1119.PRIdLEAST32$SEGMENT;
    }
    public static MemorySegment PRIdLEAST64() {
        return constants$1119.PRIdLEAST64$SEGMENT;
    }
    public static MemorySegment PRIdFAST8() {
        return constants$1119.PRIdFAST8$SEGMENT;
    }
    public static MemorySegment PRIdFAST16() {
        return constants$1119.PRIdFAST16$SEGMENT;
    }
    public static MemorySegment PRIdFAST32() {
        return constants$1119.PRIdFAST32$SEGMENT;
    }
    public static MemorySegment PRIdFAST64() {
        return constants$1120.PRIdFAST64$SEGMENT;
    }
    public static MemorySegment PRIi8() {
        return constants$1120.PRIi8$SEGMENT;
    }
    public static MemorySegment PRIi16() {
        return constants$1120.PRIi16$SEGMENT;
    }
    public static MemorySegment PRIi32() {
        return constants$1120.PRIi32$SEGMENT;
    }
    public static MemorySegment PRIi64() {
        return constants$1120.PRIi64$SEGMENT;
    }
    public static MemorySegment PRIiLEAST8() {
        return constants$1120.PRIiLEAST8$SEGMENT;
    }
    public static MemorySegment PRIiLEAST16() {
        return constants$1121.PRIiLEAST16$SEGMENT;
    }
    public static MemorySegment PRIiLEAST32() {
        return constants$1121.PRIiLEAST32$SEGMENT;
    }
    public static MemorySegment PRIiLEAST64() {
        return constants$1121.PRIiLEAST64$SEGMENT;
    }
    public static MemorySegment PRIiFAST8() {
        return constants$1121.PRIiFAST8$SEGMENT;
    }
    public static MemorySegment PRIiFAST16() {
        return constants$1121.PRIiFAST16$SEGMENT;
    }
    public static MemorySegment PRIiFAST32() {
        return constants$1121.PRIiFAST32$SEGMENT;
    }
    public static MemorySegment PRIiFAST64() {
        return constants$1122.PRIiFAST64$SEGMENT;
    }
    public static MemorySegment PRIo8() {
        return constants$1122.PRIo8$SEGMENT;
    }
    public static MemorySegment PRIo16() {
        return constants$1122.PRIo16$SEGMENT;
    }
    public static MemorySegment PRIo32() {
        return constants$1122.PRIo32$SEGMENT;
    }
    public static MemorySegment PRIo64() {
        return constants$1122.PRIo64$SEGMENT;
    }
    public static MemorySegment PRIoLEAST8() {
        return constants$1122.PRIoLEAST8$SEGMENT;
    }
    public static MemorySegment PRIoLEAST16() {
        return constants$1123.PRIoLEAST16$SEGMENT;
    }
    public static MemorySegment PRIoLEAST32() {
        return constants$1123.PRIoLEAST32$SEGMENT;
    }
    public static MemorySegment PRIoLEAST64() {
        return constants$1123.PRIoLEAST64$SEGMENT;
    }
    public static MemorySegment PRIoFAST8() {
        return constants$1123.PRIoFAST8$SEGMENT;
    }
    public static MemorySegment PRIoFAST16() {
        return constants$1123.PRIoFAST16$SEGMENT;
    }
    public static MemorySegment PRIoFAST32() {
        return constants$1123.PRIoFAST32$SEGMENT;
    }
    public static MemorySegment PRIoFAST64() {
        return constants$1124.PRIoFAST64$SEGMENT;
    }
    public static MemorySegment PRIu8() {
        return constants$1124.PRIu8$SEGMENT;
    }
    public static MemorySegment PRIu16() {
        return constants$1124.PRIu16$SEGMENT;
    }
    public static MemorySegment PRIu32() {
        return constants$1124.PRIu32$SEGMENT;
    }
    public static MemorySegment PRIu64() {
        return constants$1124.PRIu64$SEGMENT;
    }
    public static MemorySegment PRIuLEAST8() {
        return constants$1124.PRIuLEAST8$SEGMENT;
    }
    public static MemorySegment PRIuLEAST16() {
        return constants$1125.PRIuLEAST16$SEGMENT;
    }
    public static MemorySegment PRIuLEAST32() {
        return constants$1125.PRIuLEAST32$SEGMENT;
    }
    public static MemorySegment PRIuLEAST64() {
        return constants$1125.PRIuLEAST64$SEGMENT;
    }
    public static MemorySegment PRIuFAST8() {
        return constants$1125.PRIuFAST8$SEGMENT;
    }
    public static MemorySegment PRIuFAST16() {
        return constants$1125.PRIuFAST16$SEGMENT;
    }
    public static MemorySegment PRIuFAST32() {
        return constants$1125.PRIuFAST32$SEGMENT;
    }
    public static MemorySegment PRIuFAST64() {
        return constants$1126.PRIuFAST64$SEGMENT;
    }
    public static MemorySegment PRIx8() {
        return constants$1126.PRIx8$SEGMENT;
    }
    public static MemorySegment PRIx16() {
        return constants$1126.PRIx16$SEGMENT;
    }
    public static MemorySegment PRIx32() {
        return constants$1126.PRIx32$SEGMENT;
    }
    public static MemorySegment PRIx64() {
        return constants$1126.PRIx64$SEGMENT;
    }
    public static MemorySegment PRIxLEAST8() {
        return constants$1126.PRIxLEAST8$SEGMENT;
    }
    public static MemorySegment PRIxLEAST16() {
        return constants$1127.PRIxLEAST16$SEGMENT;
    }
    public static MemorySegment PRIxLEAST32() {
        return constants$1127.PRIxLEAST32$SEGMENT;
    }
    public static MemorySegment PRIxLEAST64() {
        return constants$1127.PRIxLEAST64$SEGMENT;
    }
    public static MemorySegment PRIxFAST8() {
        return constants$1127.PRIxFAST8$SEGMENT;
    }
    public static MemorySegment PRIxFAST16() {
        return constants$1127.PRIxFAST16$SEGMENT;
    }
    public static MemorySegment PRIxFAST32() {
        return constants$1127.PRIxFAST32$SEGMENT;
    }
    public static MemorySegment PRIxFAST64() {
        return constants$1128.PRIxFAST64$SEGMENT;
    }
    public static MemorySegment PRIX8() {
        return constants$1128.PRIX8$SEGMENT;
    }
    public static MemorySegment PRIX16() {
        return constants$1128.PRIX16$SEGMENT;
    }
    public static MemorySegment PRIX32() {
        return constants$1128.PRIX32$SEGMENT;
    }
    public static MemorySegment PRIX64() {
        return constants$1128.PRIX64$SEGMENT;
    }
    public static MemorySegment PRIXLEAST8() {
        return constants$1128.PRIXLEAST8$SEGMENT;
    }
    public static MemorySegment PRIXLEAST16() {
        return constants$1129.PRIXLEAST16$SEGMENT;
    }
    public static MemorySegment PRIXLEAST32() {
        return constants$1129.PRIXLEAST32$SEGMENT;
    }
    public static MemorySegment PRIXLEAST64() {
        return constants$1129.PRIXLEAST64$SEGMENT;
    }
    public static MemorySegment PRIXFAST8() {
        return constants$1129.PRIXFAST8$SEGMENT;
    }
    public static MemorySegment PRIXFAST16() {
        return constants$1129.PRIXFAST16$SEGMENT;
    }
    public static MemorySegment PRIXFAST32() {
        return constants$1129.PRIXFAST32$SEGMENT;
    }
    public static MemorySegment PRIXFAST64() {
        return constants$1130.PRIXFAST64$SEGMENT;
    }
    public static MemorySegment PRIdMAX() {
        return constants$1130.PRIdMAX$SEGMENT;
    }
    public static MemorySegment PRIiMAX() {
        return constants$1130.PRIiMAX$SEGMENT;
    }
    public static MemorySegment PRIoMAX() {
        return constants$1130.PRIoMAX$SEGMENT;
    }
    public static MemorySegment PRIuMAX() {
        return constants$1130.PRIuMAX$SEGMENT;
    }
    public static MemorySegment PRIxMAX() {
        return constants$1130.PRIxMAX$SEGMENT;
    }
    public static MemorySegment PRIXMAX() {
        return constants$1131.PRIXMAX$SEGMENT;
    }
    public static MemorySegment PRIdPTR() {
        return constants$1131.PRIdPTR$SEGMENT;
    }
    public static MemorySegment PRIiPTR() {
        return constants$1131.PRIiPTR$SEGMENT;
    }
    public static MemorySegment PRIoPTR() {
        return constants$1131.PRIoPTR$SEGMENT;
    }
    public static MemorySegment PRIuPTR() {
        return constants$1131.PRIuPTR$SEGMENT;
    }
    public static MemorySegment PRIxPTR() {
        return constants$1131.PRIxPTR$SEGMENT;
    }
    public static MemorySegment PRIXPTR() {
        return constants$1132.PRIXPTR$SEGMENT;
    }
    public static MemorySegment SCNd8() {
        return constants$1132.SCNd8$SEGMENT;
    }
    public static MemorySegment SCNd16() {
        return constants$1132.SCNd16$SEGMENT;
    }
    public static MemorySegment SCNd32() {
        return constants$1132.SCNd32$SEGMENT;
    }
    public static MemorySegment SCNd64() {
        return constants$1132.SCNd64$SEGMENT;
    }
    public static MemorySegment SCNdLEAST8() {
        return constants$1132.SCNdLEAST8$SEGMENT;
    }
    public static MemorySegment SCNdLEAST16() {
        return constants$1133.SCNdLEAST16$SEGMENT;
    }
    public static MemorySegment SCNdLEAST32() {
        return constants$1133.SCNdLEAST32$SEGMENT;
    }
    public static MemorySegment SCNdLEAST64() {
        return constants$1133.SCNdLEAST64$SEGMENT;
    }
    public static MemorySegment SCNdFAST8() {
        return constants$1133.SCNdFAST8$SEGMENT;
    }
    public static MemorySegment SCNdFAST16() {
        return constants$1133.SCNdFAST16$SEGMENT;
    }
    public static MemorySegment SCNdFAST32() {
        return constants$1133.SCNdFAST32$SEGMENT;
    }
    public static MemorySegment SCNdFAST64() {
        return constants$1134.SCNdFAST64$SEGMENT;
    }
    public static MemorySegment SCNi8() {
        return constants$1134.SCNi8$SEGMENT;
    }
    public static MemorySegment SCNi16() {
        return constants$1134.SCNi16$SEGMENT;
    }
    public static MemorySegment SCNi32() {
        return constants$1134.SCNi32$SEGMENT;
    }
    public static MemorySegment SCNi64() {
        return constants$1134.SCNi64$SEGMENT;
    }
    public static MemorySegment SCNiLEAST8() {
        return constants$1134.SCNiLEAST8$SEGMENT;
    }
    public static MemorySegment SCNiLEAST16() {
        return constants$1135.SCNiLEAST16$SEGMENT;
    }
    public static MemorySegment SCNiLEAST32() {
        return constants$1135.SCNiLEAST32$SEGMENT;
    }
    public static MemorySegment SCNiLEAST64() {
        return constants$1135.SCNiLEAST64$SEGMENT;
    }
    public static MemorySegment SCNiFAST8() {
        return constants$1135.SCNiFAST8$SEGMENT;
    }
    public static MemorySegment SCNiFAST16() {
        return constants$1135.SCNiFAST16$SEGMENT;
    }
    public static MemorySegment SCNiFAST32() {
        return constants$1135.SCNiFAST32$SEGMENT;
    }
    public static MemorySegment SCNiFAST64() {
        return constants$1136.SCNiFAST64$SEGMENT;
    }
    public static MemorySegment SCNu8() {
        return constants$1136.SCNu8$SEGMENT;
    }
    public static MemorySegment SCNu16() {
        return constants$1136.SCNu16$SEGMENT;
    }
    public static MemorySegment SCNu32() {
        return constants$1136.SCNu32$SEGMENT;
    }
    public static MemorySegment SCNu64() {
        return constants$1136.SCNu64$SEGMENT;
    }
    public static MemorySegment SCNuLEAST8() {
        return constants$1136.SCNuLEAST8$SEGMENT;
    }
    public static MemorySegment SCNuLEAST16() {
        return constants$1137.SCNuLEAST16$SEGMENT;
    }
    public static MemorySegment SCNuLEAST32() {
        return constants$1137.SCNuLEAST32$SEGMENT;
    }
    public static MemorySegment SCNuLEAST64() {
        return constants$1137.SCNuLEAST64$SEGMENT;
    }
    public static MemorySegment SCNuFAST8() {
        return constants$1137.SCNuFAST8$SEGMENT;
    }
    public static MemorySegment SCNuFAST16() {
        return constants$1137.SCNuFAST16$SEGMENT;
    }
    public static MemorySegment SCNuFAST32() {
        return constants$1137.SCNuFAST32$SEGMENT;
    }
    public static MemorySegment SCNuFAST64() {
        return constants$1138.SCNuFAST64$SEGMENT;
    }
    public static MemorySegment SCNo8() {
        return constants$1138.SCNo8$SEGMENT;
    }
    public static MemorySegment SCNo16() {
        return constants$1138.SCNo16$SEGMENT;
    }
    public static MemorySegment SCNo32() {
        return constants$1138.SCNo32$SEGMENT;
    }
    public static MemorySegment SCNo64() {
        return constants$1138.SCNo64$SEGMENT;
    }
    public static MemorySegment SCNoLEAST8() {
        return constants$1138.SCNoLEAST8$SEGMENT;
    }
    public static MemorySegment SCNoLEAST16() {
        return constants$1139.SCNoLEAST16$SEGMENT;
    }
    public static MemorySegment SCNoLEAST32() {
        return constants$1139.SCNoLEAST32$SEGMENT;
    }
    public static MemorySegment SCNoLEAST64() {
        return constants$1139.SCNoLEAST64$SEGMENT;
    }
    public static MemorySegment SCNoFAST8() {
        return constants$1139.SCNoFAST8$SEGMENT;
    }
    public static MemorySegment SCNoFAST16() {
        return constants$1139.SCNoFAST16$SEGMENT;
    }
    public static MemorySegment SCNoFAST32() {
        return constants$1139.SCNoFAST32$SEGMENT;
    }
    public static MemorySegment SCNoFAST64() {
        return constants$1140.SCNoFAST64$SEGMENT;
    }
    public static MemorySegment SCNx8() {
        return constants$1140.SCNx8$SEGMENT;
    }
    public static MemorySegment SCNx16() {
        return constants$1140.SCNx16$SEGMENT;
    }
    public static MemorySegment SCNx32() {
        return constants$1140.SCNx32$SEGMENT;
    }
    public static MemorySegment SCNx64() {
        return constants$1140.SCNx64$SEGMENT;
    }
    public static MemorySegment SCNxLEAST8() {
        return constants$1140.SCNxLEAST8$SEGMENT;
    }
    public static MemorySegment SCNxLEAST16() {
        return constants$1141.SCNxLEAST16$SEGMENT;
    }
    public static MemorySegment SCNxLEAST32() {
        return constants$1141.SCNxLEAST32$SEGMENT;
    }
    public static MemorySegment SCNxLEAST64() {
        return constants$1141.SCNxLEAST64$SEGMENT;
    }
    public static MemorySegment SCNxFAST8() {
        return constants$1141.SCNxFAST8$SEGMENT;
    }
    public static MemorySegment SCNxFAST16() {
        return constants$1141.SCNxFAST16$SEGMENT;
    }
    public static MemorySegment SCNxFAST32() {
        return constants$1141.SCNxFAST32$SEGMENT;
    }
    public static MemorySegment SCNxFAST64() {
        return constants$1142.SCNxFAST64$SEGMENT;
    }
    public static MemorySegment SCNdMAX() {
        return constants$1142.SCNdMAX$SEGMENT;
    }
    public static MemorySegment SCNiMAX() {
        return constants$1142.SCNiMAX$SEGMENT;
    }
    public static MemorySegment SCNoMAX() {
        return constants$1142.SCNoMAX$SEGMENT;
    }
    public static MemorySegment SCNuMAX() {
        return constants$1142.SCNuMAX$SEGMENT;
    }
    public static MemorySegment SCNxMAX() {
        return constants$1142.SCNxMAX$SEGMENT;
    }
    public static MemorySegment SCNdPTR() {
        return constants$1143.SCNdPTR$SEGMENT;
    }
    public static MemorySegment SCNiPTR() {
        return constants$1143.SCNiPTR$SEGMENT;
    }
    public static MemorySegment SCNoPTR() {
        return constants$1143.SCNoPTR$SEGMENT;
    }
    public static MemorySegment SCNuPTR() {
        return constants$1143.SCNuPTR$SEGMENT;
    }
    public static MemorySegment SCNxPTR() {
        return constants$1143.SCNxPTR$SEGMENT;
    }
    public static MemoryAddress NULL() {
        return constants$1143.NULL$ADDR;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static MemorySegment P_tmpdir() {
        return constants$1144.P_tmpdir$SEGMENT;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    public static int SEM_VALUE_MAX() {
        return (int)2147483647L;
    }
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    public static int LINE_MAX() {
        return (int)2048L;
    }
    public static int RE_DUP_MAX() {
        return (int)32767L;
    }
    public static int CHAR_BIT() {
        return (int)8L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MAX() {
        return (int)127L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    public static long ULONG_MAX() {
        return -1L;
    }
    public static long SSLEAY_VERSION_NUMBER() {
        return 269488335L;
    }
    public static int SSLEAY_VERSION() {
        return (int)0L;
    }
    public static int SSLEAY_CFLAGS() {
        return (int)1L;
    }
    public static int SSLEAY_BUILT_ON() {
        return (int)2L;
    }
    public static int SSLEAY_PLATFORM() {
        return (int)3L;
    }
    public static int SSLEAY_DIR() {
        return (int)4L;
    }
    public static long OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS() {
        return 1L;
    }
    public static long OPENSSL_INIT_LOAD_CRYPTO_STRINGS() {
        return 2L;
    }
    public static long OPENSSL_INIT_ADD_ALL_CIPHERS() {
        return 4L;
    }
    public static long OPENSSL_INIT_ADD_ALL_DIGESTS() {
        return 8L;
    }
    public static long OPENSSL_INIT_NO_ADD_ALL_CIPHERS() {
        return 16L;
    }
    public static long OPENSSL_INIT_NO_ADD_ALL_DIGESTS() {
        return 32L;
    }
    public static long OPENSSL_INIT_LOAD_CONFIG() {
        return 64L;
    }
    public static long OPENSSL_INIT_NO_LOAD_CONFIG() {
        return 128L;
    }
    public static long OPENSSL_INIT_ASYNC() {
        return 256L;
    }
    public static long OPENSSL_INIT_ENGINE_RDRAND() {
        return 512L;
    }
    public static long OPENSSL_INIT_ENGINE_DYNAMIC() {
        return 1024L;
    }
    public static long OPENSSL_INIT_ENGINE_OPENSSL() {
        return 2048L;
    }
    public static long OPENSSL_INIT_ENGINE_CRYPTODEV() {
        return 4096L;
    }
    public static long OPENSSL_INIT_ENGINE_CAPI() {
        return 8192L;
    }
    public static long OPENSSL_INIT_ENGINE_PADLOCK() {
        return 16384L;
    }
    public static long OPENSSL_INIT_ENGINE_AFALG() {
        return 32768L;
    }
    public static long OPENSSL_INIT_ATFORK() {
        return 131072L;
    }
    public static long OPENSSL_INIT_NO_ATEXIT() {
        return 524288L;
    }
    public static long OPENSSL_INIT_ENGINE_ALL_BUILTIN() {
        return 30208L;
    }
    public static long __NCPUBITS() {
        return 64L;
    }
    public static MemoryAddress PTHREAD_CANCELED() {
        return constants$1144.PTHREAD_CANCELED$ADDR;
    }
    public static int PTHREAD_BARRIER_SERIAL_THREAD() {
        return (int)-1L;
    }
    public static int CRYPTO_ONCE_STATIC_INIT() {
        return (int)0L;
    }
    public static int BIO_TYPE_MEM() {
        return (int)1025L;
    }
    public static int BIO_TYPE_FILE() {
        return (int)1026L;
    }
    public static int BIO_TYPE_FD() {
        return (int)1284L;
    }
    public static int BIO_TYPE_SOCKET() {
        return (int)1285L;
    }
    public static int BIO_TYPE_NULL() {
        return (int)1030L;
    }
    public static int BIO_TYPE_SSL() {
        return (int)519L;
    }
    public static int BIO_TYPE_MD() {
        return (int)520L;
    }
    public static int BIO_TYPE_BUFFER() {
        return (int)521L;
    }
    public static int BIO_TYPE_CIPHER() {
        return (int)522L;
    }
    public static int BIO_TYPE_BASE64() {
        return (int)523L;
    }
    public static int BIO_TYPE_CONNECT() {
        return (int)1292L;
    }
    public static int BIO_TYPE_ACCEPT() {
        return (int)1293L;
    }
    public static int BIO_TYPE_NBIO_TEST() {
        return (int)528L;
    }
    public static int BIO_TYPE_NULL_FILTER() {
        return (int)529L;
    }
    public static int BIO_TYPE_BIO() {
        return (int)1043L;
    }
    public static int BIO_TYPE_LINEBUFFER() {
        return (int)532L;
    }
    public static int BIO_TYPE_DGRAM() {
        return (int)1301L;
    }
    public static int BIO_TYPE_ASN1() {
        return (int)534L;
    }
    public static int BIO_TYPE_COMP() {
        return (int)535L;
    }
    public static int BIO_TYPE_DGRAM_SCTP() {
        return (int)1304L;
    }
    public static int BIO_FLAGS_RWS() {
        return (int)7L;
    }
    public static int BIO_BIND_REUSEADDR() {
        return (int)1L;
    }
    public static int BIO_BIND_REUSEADDR_IF_UNUSED() {
        return (int)1L;
    }
    public static MemorySegment SN_undef() {
        return constants$1144.SN_undef$SEGMENT;
    }
    public static MemorySegment LN_undef() {
        return constants$1144.LN_undef$SEGMENT;
    }
    public static long OBJ_undef() {
        return 0L;
    }
    public static MemorySegment SN_itu_t() {
        return constants$1144.SN_itu_t$SEGMENT;
    }
    public static MemorySegment LN_itu_t() {
        return constants$1144.LN_itu_t$SEGMENT;
    }
    public static long OBJ_itu_t() {
        return 0L;
    }
    public static long OBJ_ccitt() {
        return 0L;
    }
    public static MemorySegment SN_iso() {
        return constants$1145.SN_iso$SEGMENT;
    }
    public static MemorySegment LN_iso() {
        return constants$1145.LN_iso$SEGMENT;
    }
    public static long OBJ_iso() {
        return 1L;
    }
    public static MemorySegment SN_joint_iso_itu_t() {
        return constants$1145.SN_joint_iso_itu_t$SEGMENT;
    }
    public static MemorySegment LN_joint_iso_itu_t() {
        return constants$1145.LN_joint_iso_itu_t$SEGMENT;
    }
    public static long OBJ_joint_iso_itu_t() {
        return 2L;
    }
    public static long OBJ_joint_iso_ccitt() {
        return 2L;
    }
    public static MemorySegment SN_member_body() {
        return constants$1145.SN_member_body$SEGMENT;
    }
    public static MemorySegment LN_member_body() {
        return constants$1145.LN_member_body$SEGMENT;
    }
    public static long OBJ_member_body() {
        return 1L;
    }
    public static MemorySegment SN_identified_organization() {
        return constants$1146.SN_identified_organization$SEGMENT;
    }
    public static long OBJ_identified_organization() {
        return 1L;
    }
    public static MemorySegment SN_hmac_md5() {
        return constants$1146.SN_hmac_md5$SEGMENT;
    }
    public static MemorySegment LN_hmac_md5() {
        return constants$1146.LN_hmac_md5$SEGMENT;
    }
    public static long OBJ_hmac_md5() {
        return 1L;
    }
    public static MemorySegment SN_hmac_sha1() {
        return constants$1146.SN_hmac_sha1$SEGMENT;
    }
    public static MemorySegment LN_hmac_sha1() {
        return constants$1146.LN_hmac_sha1$SEGMENT;
    }
    public static long OBJ_hmac_sha1() {
        return 1L;
    }
    public static MemorySegment SN_x509ExtAdmission() {
        return constants$1146.SN_x509ExtAdmission$SEGMENT;
    }
    public static MemorySegment LN_x509ExtAdmission() {
        return constants$1147.LN_x509ExtAdmission$SEGMENT;
    }
    public static long OBJ_x509ExtAdmission() {
        return 1L;
    }
    public static MemorySegment SN_certicom_arc() {
        return constants$1147.SN_certicom_arc$SEGMENT;
    }
    public static long OBJ_certicom_arc() {
        return 1L;
    }
}


