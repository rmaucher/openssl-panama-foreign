// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class pkcs7_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("asn1"),
        JAVA_LONG.withName("length"),
        JAVA_INT.withName("state"),
        JAVA_INT.withName("detached"),
        ADDRESS.withName("type"),
        MemoryLayout.unionLayout(
            ADDRESS.withName("ptr"),
            ADDRESS.withName("data"),
            ADDRESS.withName("sign"),
            ADDRESS.withName("enveloped"),
            ADDRESS.withName("signed_and_enveloped"),
            ADDRESS.withName("digest"),
            ADDRESS.withName("encrypted"),
            ADDRESS.withName("other")
        ).withName("d")
    ).withName("pkcs7_st");
    public static MemoryLayout $LAYOUT() {
        return pkcs7_st.$struct$LAYOUT;
    }
    static final VarHandle asn1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("asn1"));
    public static VarHandle asn1$VH() {
        return pkcs7_st.asn1$VH;
    }
    public static MemoryAddress asn1$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_st.asn1$VH.get(seg);
    }
    public static void asn1$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_st.asn1$VH.set(seg, x);
    }
    public static MemoryAddress asn1$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_st.asn1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void asn1$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_st.asn1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return pkcs7_st.length$VH;
    }
    public static long length$get(MemorySegment seg) {
        return (long)pkcs7_st.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, long x) {
        pkcs7_st.length$VH.set(seg, x);
    }
    public static long length$get(MemorySegment seg, long index) {
        return (long)pkcs7_st.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, long x) {
        pkcs7_st.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("state"));
    public static VarHandle state$VH() {
        return pkcs7_st.state$VH;
    }
    public static int state$get(MemorySegment seg) {
        return (int)pkcs7_st.state$VH.get(seg);
    }
    public static void state$set( MemorySegment seg, int x) {
        pkcs7_st.state$VH.set(seg, x);
    }
    public static int state$get(MemorySegment seg, long index) {
        return (int)pkcs7_st.state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, int x) {
        pkcs7_st.state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle detached$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("detached"));
    public static VarHandle detached$VH() {
        return pkcs7_st.detached$VH;
    }
    public static int detached$get(MemorySegment seg) {
        return (int)pkcs7_st.detached$VH.get(seg);
    }
    public static void detached$set( MemorySegment seg, int x) {
        pkcs7_st.detached$VH.set(seg, x);
    }
    public static int detached$get(MemorySegment seg, long index) {
        return (int)pkcs7_st.detached$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void detached$set(MemorySegment seg, long index, int x) {
        pkcs7_st.detached$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return pkcs7_st.type$VH;
    }
    public static MemoryAddress type$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_st.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_st.type$VH.set(seg, x);
    }
    public static MemoryAddress type$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_st.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_st.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class d {

        static final MemoryLayout d$union$LAYOUT = MemoryLayout.unionLayout(
            ADDRESS.withName("ptr"),
            ADDRESS.withName("data"),
            ADDRESS.withName("sign"),
            ADDRESS.withName("enveloped"),
            ADDRESS.withName("signed_and_enveloped"),
            ADDRESS.withName("digest"),
            ADDRESS.withName("encrypted"),
            ADDRESS.withName("other")
        );
        public static MemoryLayout $LAYOUT() {
            return d.d$union$LAYOUT;
        }
        static final VarHandle ptr$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ptr"));
        public static VarHandle ptr$VH() {
            return d.ptr$VH;
        }
        public static MemoryAddress ptr$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.ptr$VH.get(seg);
        }
        public static void ptr$set( MemorySegment seg, MemoryAddress x) {
            d.ptr$VH.set(seg, x);
        }
        public static MemoryAddress ptr$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.ptr$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ptr$set(MemorySegment seg, long index, MemoryAddress x) {
            d.ptr$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle data$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
        public static VarHandle data$VH() {
            return d.data$VH;
        }
        public static MemoryAddress data$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.data$VH.get(seg);
        }
        public static void data$set( MemorySegment seg, MemoryAddress x) {
            d.data$VH.set(seg, x);
        }
        public static MemoryAddress data$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.data$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
            d.data$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sign$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sign"));
        public static VarHandle sign$VH() {
            return d.sign$VH;
        }
        public static MemoryAddress sign$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.sign$VH.get(seg);
        }
        public static void sign$set( MemorySegment seg, MemoryAddress x) {
            d.sign$VH.set(seg, x);
        }
        public static MemoryAddress sign$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.sign$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sign$set(MemorySegment seg, long index, MemoryAddress x) {
            d.sign$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle enveloped$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enveloped"));
        public static VarHandle enveloped$VH() {
            return d.enveloped$VH;
        }
        public static MemoryAddress enveloped$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.enveloped$VH.get(seg);
        }
        public static void enveloped$set( MemorySegment seg, MemoryAddress x) {
            d.enveloped$VH.set(seg, x);
        }
        public static MemoryAddress enveloped$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.enveloped$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void enveloped$set(MemorySegment seg, long index, MemoryAddress x) {
            d.enveloped$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle signed_and_enveloped$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signed_and_enveloped"));
        public static VarHandle signed_and_enveloped$VH() {
            return d.signed_and_enveloped$VH;
        }
        public static MemoryAddress signed_and_enveloped$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.signed_and_enveloped$VH.get(seg);
        }
        public static void signed_and_enveloped$set( MemorySegment seg, MemoryAddress x) {
            d.signed_and_enveloped$VH.set(seg, x);
        }
        public static MemoryAddress signed_and_enveloped$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.signed_and_enveloped$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void signed_and_enveloped$set(MemorySegment seg, long index, MemoryAddress x) {
            d.signed_and_enveloped$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle digest$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("digest"));
        public static VarHandle digest$VH() {
            return d.digest$VH;
        }
        public static MemoryAddress digest$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.digest$VH.get(seg);
        }
        public static void digest$set( MemorySegment seg, MemoryAddress x) {
            d.digest$VH.set(seg, x);
        }
        public static MemoryAddress digest$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.digest$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void digest$set(MemorySegment seg, long index, MemoryAddress x) {
            d.digest$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle encrypted$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("encrypted"));
        public static VarHandle encrypted$VH() {
            return d.encrypted$VH;
        }
        public static MemoryAddress encrypted$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.encrypted$VH.get(seg);
        }
        public static void encrypted$set( MemorySegment seg, MemoryAddress x) {
            d.encrypted$VH.set(seg, x);
        }
        public static MemoryAddress encrypted$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.encrypted$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void encrypted$set(MemorySegment seg, long index, MemoryAddress x) {
            d.encrypted$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle other$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("other"));
        public static VarHandle other$VH() {
            return d.other$VH;
        }
        public static MemoryAddress other$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.other$VH.get(seg);
        }
        public static void other$set( MemorySegment seg, MemoryAddress x) {
            d.other$VH.set(seg, x);
        }
        public static MemoryAddress other$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.other$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void other$set(MemorySegment seg, long index, MemoryAddress x) {
            d.other$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment d$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


