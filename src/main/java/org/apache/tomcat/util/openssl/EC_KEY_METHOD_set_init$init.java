// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface EC_KEY_METHOD_set_init$init {

    int apply(jdk.incubator.foreign.MemoryAddress x0);
    static NativeSymbol allocate(EC_KEY_METHOD_set_init$init fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(EC_KEY_METHOD_set_init$init.class, fi, constants$409.EC_KEY_METHOD_set_init$init$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static EC_KEY_METHOD_set_init$init ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("EC_KEY_METHOD_set_init$init::" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                return (int)constants$410.EC_KEY_METHOD_set_init$init$MH.invokeExact(symbol, x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


