/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface CRYPTO_set_mem_functions$r {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress x0, long x1, java.lang.foreign.MemoryAddress x2, int x3);
    static NativeSymbol allocate(CRYPTO_set_mem_functions$r fi, MemorySession scope) {
        return RuntimeHelper.upcallStub(CRYPTO_set_mem_functions$r.class, fi, constants$1.CRYPTO_set_mem_functions$r$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
    }
    static CRYPTO_set_mem_functions$r ofAddress(MemoryAddress addr, MemorySession scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("CRYPTO_set_mem_functions$r::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (java.lang.foreign.MemoryAddress x0, long x1, java.lang.foreign.MemoryAddress x2, int x3) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$1.CRYPTO_set_mem_functions$r$MH.invokeExact(symbol, (java.lang.foreign.Addressable)x0, x1, (java.lang.foreign.Addressable)x2, x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


