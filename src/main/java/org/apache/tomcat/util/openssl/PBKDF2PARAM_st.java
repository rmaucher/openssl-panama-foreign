// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class PBKDF2PARAM_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("salt"),
        ADDRESS.withName("iter"),
        ADDRESS.withName("keylength"),
        ADDRESS.withName("prf")
    ).withName("PBKDF2PARAM_st");
    public static MemoryLayout $LAYOUT() {
        return PBKDF2PARAM_st.$struct$LAYOUT;
    }
    static final VarHandle salt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("salt"));
    public static VarHandle salt$VH() {
        return PBKDF2PARAM_st.salt$VH;
    }
    public static MemoryAddress salt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.salt$VH.get(seg);
    }
    public static void salt$set( MemorySegment seg, MemoryAddress x) {
        PBKDF2PARAM_st.salt$VH.set(seg, x);
    }
    public static MemoryAddress salt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.salt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void salt$set(MemorySegment seg, long index, MemoryAddress x) {
        PBKDF2PARAM_st.salt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iter"));
    public static VarHandle iter$VH() {
        return PBKDF2PARAM_st.iter$VH;
    }
    public static MemoryAddress iter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.iter$VH.get(seg);
    }
    public static void iter$set( MemorySegment seg, MemoryAddress x) {
        PBKDF2PARAM_st.iter$VH.set(seg, x);
    }
    public static MemoryAddress iter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.iter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iter$set(MemorySegment seg, long index, MemoryAddress x) {
        PBKDF2PARAM_st.iter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle keylength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("keylength"));
    public static VarHandle keylength$VH() {
        return PBKDF2PARAM_st.keylength$VH;
    }
    public static MemoryAddress keylength$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.keylength$VH.get(seg);
    }
    public static void keylength$set( MemorySegment seg, MemoryAddress x) {
        PBKDF2PARAM_st.keylength$VH.set(seg, x);
    }
    public static MemoryAddress keylength$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.keylength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keylength$set(MemorySegment seg, long index, MemoryAddress x) {
        PBKDF2PARAM_st.keylength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle prf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prf"));
    public static VarHandle prf$VH() {
        return PBKDF2PARAM_st.prf$VH;
    }
    public static MemoryAddress prf$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.prf$VH.get(seg);
    }
    public static void prf$set( MemorySegment seg, MemoryAddress x) {
        PBKDF2PARAM_st.prf$VH.set(seg, x);
    }
    public static MemoryAddress prf$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)PBKDF2PARAM_st.prf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prf$set(MemorySegment seg, long index, MemoryAddress x) {
        PBKDF2PARAM_st.prf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


