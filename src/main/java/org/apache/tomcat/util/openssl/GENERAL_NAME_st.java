// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class GENERAL_NAME_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            ADDRESS.withName("ptr"),
            ADDRESS.withName("otherName"),
            ADDRESS.withName("rfc822Name"),
            ADDRESS.withName("dNSName"),
            ADDRESS.withName("x400Address"),
            ADDRESS.withName("directoryName"),
            ADDRESS.withName("ediPartyName"),
            ADDRESS.withName("uniformResourceIdentifier"),
            ADDRESS.withName("iPAddress"),
            ADDRESS.withName("registeredID"),
            ADDRESS.withName("ip"),
            ADDRESS.withName("dirn"),
            ADDRESS.withName("ia5"),
            ADDRESS.withName("rid"),
            ADDRESS.withName("other")
        ).withName("d")
    ).withName("GENERAL_NAME_st");
    public static MemoryLayout $LAYOUT() {
        return GENERAL_NAME_st.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return GENERAL_NAME_st.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)GENERAL_NAME_st.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        GENERAL_NAME_st.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)GENERAL_NAME_st.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        GENERAL_NAME_st.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class d {

        static final MemoryLayout d$union$LAYOUT = MemoryLayout.unionLayout(
            ADDRESS.withName("ptr"),
            ADDRESS.withName("otherName"),
            ADDRESS.withName("rfc822Name"),
            ADDRESS.withName("dNSName"),
            ADDRESS.withName("x400Address"),
            ADDRESS.withName("directoryName"),
            ADDRESS.withName("ediPartyName"),
            ADDRESS.withName("uniformResourceIdentifier"),
            ADDRESS.withName("iPAddress"),
            ADDRESS.withName("registeredID"),
            ADDRESS.withName("ip"),
            ADDRESS.withName("dirn"),
            ADDRESS.withName("ia5"),
            ADDRESS.withName("rid"),
            ADDRESS.withName("other")
        );
        public static MemoryLayout $LAYOUT() {
            return d.d$union$LAYOUT;
        }
        static final VarHandle ptr$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ptr"));
        public static VarHandle ptr$VH() {
            return d.ptr$VH;
        }
        public static MemoryAddress ptr$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.ptr$VH.get(seg);
        }
        public static void ptr$set( MemorySegment seg, MemoryAddress x) {
            d.ptr$VH.set(seg, x);
        }
        public static MemoryAddress ptr$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.ptr$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ptr$set(MemorySegment seg, long index, MemoryAddress x) {
            d.ptr$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle otherName$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("otherName"));
        public static VarHandle otherName$VH() {
            return d.otherName$VH;
        }
        public static MemoryAddress otherName$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.otherName$VH.get(seg);
        }
        public static void otherName$set( MemorySegment seg, MemoryAddress x) {
            d.otherName$VH.set(seg, x);
        }
        public static MemoryAddress otherName$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.otherName$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void otherName$set(MemorySegment seg, long index, MemoryAddress x) {
            d.otherName$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle rfc822Name$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rfc822Name"));
        public static VarHandle rfc822Name$VH() {
            return d.rfc822Name$VH;
        }
        public static MemoryAddress rfc822Name$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.rfc822Name$VH.get(seg);
        }
        public static void rfc822Name$set( MemorySegment seg, MemoryAddress x) {
            d.rfc822Name$VH.set(seg, x);
        }
        public static MemoryAddress rfc822Name$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.rfc822Name$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void rfc822Name$set(MemorySegment seg, long index, MemoryAddress x) {
            d.rfc822Name$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle dNSName$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dNSName"));
        public static VarHandle dNSName$VH() {
            return d.dNSName$VH;
        }
        public static MemoryAddress dNSName$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.dNSName$VH.get(seg);
        }
        public static void dNSName$set( MemorySegment seg, MemoryAddress x) {
            d.dNSName$VH.set(seg, x);
        }
        public static MemoryAddress dNSName$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.dNSName$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void dNSName$set(MemorySegment seg, long index, MemoryAddress x) {
            d.dNSName$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle x400Address$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x400Address"));
        public static VarHandle x400Address$VH() {
            return d.x400Address$VH;
        }
        public static MemoryAddress x400Address$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.x400Address$VH.get(seg);
        }
        public static void x400Address$set( MemorySegment seg, MemoryAddress x) {
            d.x400Address$VH.set(seg, x);
        }
        public static MemoryAddress x400Address$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.x400Address$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void x400Address$set(MemorySegment seg, long index, MemoryAddress x) {
            d.x400Address$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle directoryName$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("directoryName"));
        public static VarHandle directoryName$VH() {
            return d.directoryName$VH;
        }
        public static MemoryAddress directoryName$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.directoryName$VH.get(seg);
        }
        public static void directoryName$set( MemorySegment seg, MemoryAddress x) {
            d.directoryName$VH.set(seg, x);
        }
        public static MemoryAddress directoryName$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.directoryName$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void directoryName$set(MemorySegment seg, long index, MemoryAddress x) {
            d.directoryName$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ediPartyName$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ediPartyName"));
        public static VarHandle ediPartyName$VH() {
            return d.ediPartyName$VH;
        }
        public static MemoryAddress ediPartyName$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.ediPartyName$VH.get(seg);
        }
        public static void ediPartyName$set( MemorySegment seg, MemoryAddress x) {
            d.ediPartyName$VH.set(seg, x);
        }
        public static MemoryAddress ediPartyName$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.ediPartyName$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ediPartyName$set(MemorySegment seg, long index, MemoryAddress x) {
            d.ediPartyName$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle uniformResourceIdentifier$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uniformResourceIdentifier"));
        public static VarHandle uniformResourceIdentifier$VH() {
            return d.uniformResourceIdentifier$VH;
        }
        public static MemoryAddress uniformResourceIdentifier$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.uniformResourceIdentifier$VH.get(seg);
        }
        public static void uniformResourceIdentifier$set( MemorySegment seg, MemoryAddress x) {
            d.uniformResourceIdentifier$VH.set(seg, x);
        }
        public static MemoryAddress uniformResourceIdentifier$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.uniformResourceIdentifier$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void uniformResourceIdentifier$set(MemorySegment seg, long index, MemoryAddress x) {
            d.uniformResourceIdentifier$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle iPAddress$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iPAddress"));
        public static VarHandle iPAddress$VH() {
            return d.iPAddress$VH;
        }
        public static MemoryAddress iPAddress$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.iPAddress$VH.get(seg);
        }
        public static void iPAddress$set( MemorySegment seg, MemoryAddress x) {
            d.iPAddress$VH.set(seg, x);
        }
        public static MemoryAddress iPAddress$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.iPAddress$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void iPAddress$set(MemorySegment seg, long index, MemoryAddress x) {
            d.iPAddress$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle registeredID$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("registeredID"));
        public static VarHandle registeredID$VH() {
            return d.registeredID$VH;
        }
        public static MemoryAddress registeredID$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.registeredID$VH.get(seg);
        }
        public static void registeredID$set( MemorySegment seg, MemoryAddress x) {
            d.registeredID$VH.set(seg, x);
        }
        public static MemoryAddress registeredID$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.registeredID$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void registeredID$set(MemorySegment seg, long index, MemoryAddress x) {
            d.registeredID$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ip$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ip"));
        public static VarHandle ip$VH() {
            return d.ip$VH;
        }
        public static MemoryAddress ip$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.ip$VH.get(seg);
        }
        public static void ip$set( MemorySegment seg, MemoryAddress x) {
            d.ip$VH.set(seg, x);
        }
        public static MemoryAddress ip$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.ip$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ip$set(MemorySegment seg, long index, MemoryAddress x) {
            d.ip$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle dirn$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dirn"));
        public static VarHandle dirn$VH() {
            return d.dirn$VH;
        }
        public static MemoryAddress dirn$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.dirn$VH.get(seg);
        }
        public static void dirn$set( MemorySegment seg, MemoryAddress x) {
            d.dirn$VH.set(seg, x);
        }
        public static MemoryAddress dirn$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.dirn$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void dirn$set(MemorySegment seg, long index, MemoryAddress x) {
            d.dirn$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ia5$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ia5"));
        public static VarHandle ia5$VH() {
            return d.ia5$VH;
        }
        public static MemoryAddress ia5$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.ia5$VH.get(seg);
        }
        public static void ia5$set( MemorySegment seg, MemoryAddress x) {
            d.ia5$VH.set(seg, x);
        }
        public static MemoryAddress ia5$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.ia5$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ia5$set(MemorySegment seg, long index, MemoryAddress x) {
            d.ia5$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle rid$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rid"));
        public static VarHandle rid$VH() {
            return d.rid$VH;
        }
        public static MemoryAddress rid$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.rid$VH.get(seg);
        }
        public static void rid$set( MemorySegment seg, MemoryAddress x) {
            d.rid$VH.set(seg, x);
        }
        public static MemoryAddress rid$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.rid$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void rid$set(MemorySegment seg, long index, MemoryAddress x) {
            d.rid$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle other$VH = d$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("other"));
        public static VarHandle other$VH() {
            return d.other$VH;
        }
        public static MemoryAddress other$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)d.other$VH.get(seg);
        }
        public static void other$set( MemorySegment seg, MemoryAddress x) {
            d.other$VH.set(seg, x);
        }
        public static MemoryAddress other$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)d.other$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void other$set(MemorySegment seg, long index, MemoryAddress x) {
            d.other$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment d$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


