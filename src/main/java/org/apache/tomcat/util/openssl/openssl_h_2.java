// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_2 extends openssl_h_1 {

    public static int ASN1_F_C2I_ASN1_OBJECT() {
        return (int)196L;
    }
    public static int ASN1_F_C2I_IBUF() {
        return (int)226L;
    }
    public static int ASN1_F_C2I_UINT64_INT() {
        return (int)101L;
    }
    public static int ASN1_F_COLLECT_DATA() {
        return (int)140L;
    }
    public static int ASN1_F_D2I_ASN1_OBJECT() {
        return (int)147L;
    }
    public static int ASN1_F_D2I_ASN1_UINTEGER() {
        return (int)150L;
    }
    public static int ASN1_F_D2I_AUTOPRIVATEKEY() {
        return (int)207L;
    }
    public static int ASN1_F_D2I_PRIVATEKEY() {
        return (int)154L;
    }
    public static int ASN1_F_D2I_PUBLICKEY() {
        return (int)155L;
    }
    public static int ASN1_F_DO_BUF() {
        return (int)142L;
    }
    public static int ASN1_F_DO_CREATE() {
        return (int)124L;
    }
    public static int ASN1_F_DO_DUMP() {
        return (int)125L;
    }
    public static int ASN1_F_DO_TCREATE() {
        return (int)222L;
    }
    public static int ASN1_F_I2A_ASN1_OBJECT() {
        return (int)126L;
    }
    public static int ASN1_F_I2D_ASN1_BIO_STREAM() {
        return (int)211L;
    }
    public static int ASN1_F_I2D_ASN1_OBJECT() {
        return (int)143L;
    }
    public static int ASN1_F_I2D_DSA_PUBKEY() {
        return (int)161L;
    }
    public static int ASN1_F_I2D_EC_PUBKEY() {
        return (int)181L;
    }
    public static int ASN1_F_I2D_PRIVATEKEY() {
        return (int)163L;
    }
    public static int ASN1_F_I2D_PUBLICKEY() {
        return (int)164L;
    }
    public static int ASN1_F_I2D_RSA_PUBKEY() {
        return (int)165L;
    }
    public static int ASN1_F_LONG_C2I() {
        return (int)166L;
    }
    public static int ASN1_F_NDEF_PREFIX() {
        return (int)127L;
    }
    public static int ASN1_F_NDEF_SUFFIX() {
        return (int)136L;
    }
    public static int ASN1_F_OID_MODULE_INIT() {
        return (int)174L;
    }
    public static int ASN1_F_PARSE_TAGGING() {
        return (int)182L;
    }
    public static int ASN1_F_PKCS5_PBE2_SET_IV() {
        return (int)167L;
    }
    public static int ASN1_F_PKCS5_PBE2_SET_SCRYPT() {
        return (int)231L;
    }
    public static int ASN1_F_PKCS5_PBE_SET() {
        return (int)202L;
    }
    public static int ASN1_F_PKCS5_PBE_SET0_ALGOR() {
        return (int)215L;
    }
    public static int ASN1_F_PKCS5_PBKDF2_SET() {
        return (int)219L;
    }
    public static int ASN1_F_PKCS5_SCRYPT_SET() {
        return (int)232L;
    }
    public static int ASN1_F_SMIME_READ_ASN1() {
        return (int)212L;
    }
    public static int ASN1_F_SMIME_TEXT() {
        return (int)213L;
    }
    public static int ASN1_F_STABLE_GET() {
        return (int)138L;
    }
    public static int ASN1_F_STBL_MODULE_INIT() {
        return (int)223L;
    }
    public static int ASN1_F_UINT32_C2I() {
        return (int)105L;
    }
    public static int ASN1_F_UINT32_NEW() {
        return (int)139L;
    }
    public static int ASN1_F_UINT64_C2I() {
        return (int)112L;
    }
    public static int ASN1_F_UINT64_NEW() {
        return (int)141L;
    }
    public static int ASN1_F_X509_CRL_ADD0_REVOKED() {
        return (int)169L;
    }
    public static int ASN1_F_X509_INFO_NEW() {
        return (int)170L;
    }
    public static int ASN1_F_X509_NAME_ENCODE() {
        return (int)203L;
    }
    public static int ASN1_F_X509_NAME_EX_D2I() {
        return (int)158L;
    }
    public static int ASN1_F_X509_NAME_EX_NEW() {
        return (int)171L;
    }
    public static int ASN1_F_X509_PKEY_NEW() {
        return (int)173L;
    }
    public static int ASN1_R_ADDING_OBJECT() {
        return (int)171L;
    }
    public static int ASN1_R_ASN1_PARSE_ERROR() {
        return (int)203L;
    }
    public static int ASN1_R_ASN1_SIG_PARSE_ERROR() {
        return (int)204L;
    }
    public static int ASN1_R_AUX_ERROR() {
        return (int)100L;
    }
    public static int ASN1_R_BAD_OBJECT_HEADER() {
        return (int)102L;
    }
    public static int ASN1_R_BAD_TEMPLATE() {
        return (int)230L;
    }
    public static int ASN1_R_BMPSTRING_IS_WRONG_LENGTH() {
        return (int)214L;
    }
    public static int ASN1_R_BN_LIB() {
        return (int)105L;
    }
    public static int ASN1_R_BOOLEAN_IS_WRONG_LENGTH() {
        return (int)106L;
    }
    public static int ASN1_R_BUFFER_TOO_SMALL() {
        return (int)107L;
    }
    public static int ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER() {
        return (int)108L;
    }
    public static int ASN1_R_CONTEXT_NOT_INITIALISED() {
        return (int)217L;
    }
    public static int ASN1_R_DATA_IS_WRONG() {
        return (int)109L;
    }
    public static int ASN1_R_DECODE_ERROR() {
        return (int)110L;
    }
    public static int ASN1_R_DEPTH_EXCEEDED() {
        return (int)174L;
    }
    public static int ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED() {
        return (int)198L;
    }
    public static int ASN1_R_ENCODE_ERROR() {
        return (int)112L;
    }
    public static int ASN1_R_ERROR_GETTING_TIME() {
        return (int)173L;
    }
    public static int ASN1_R_ERROR_LOADING_SECTION() {
        return (int)172L;
    }
    public static int ASN1_R_ERROR_SETTING_CIPHER_PARAMS() {
        return (int)114L;
    }
    public static int ASN1_R_EXPECTING_AN_INTEGER() {
        return (int)115L;
    }
    public static int ASN1_R_EXPECTING_AN_OBJECT() {
        return (int)116L;
    }
    public static int ASN1_R_EXPLICIT_LENGTH_MISMATCH() {
        return (int)119L;
    }
    public static int ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED() {
        return (int)120L;
    }
    public static int ASN1_R_FIELD_MISSING() {
        return (int)121L;
    }
    public static int ASN1_R_FIRST_NUM_TOO_LARGE() {
        return (int)122L;
    }
    public static int ASN1_R_HEADER_TOO_LONG() {
        return (int)123L;
    }
    public static int ASN1_R_ILLEGAL_BITSTRING_FORMAT() {
        return (int)175L;
    }
    public static int ASN1_R_ILLEGAL_BOOLEAN() {
        return (int)176L;
    }
    public static int ASN1_R_ILLEGAL_CHARACTERS() {
        return (int)124L;
    }
    public static int ASN1_R_ILLEGAL_FORMAT() {
        return (int)177L;
    }
    public static int ASN1_R_ILLEGAL_HEX() {
        return (int)178L;
    }
    public static int ASN1_R_ILLEGAL_IMPLICIT_TAG() {
        return (int)179L;
    }
    public static int ASN1_R_ILLEGAL_INTEGER() {
        return (int)180L;
    }
    public static int ASN1_R_ILLEGAL_NEGATIVE_VALUE() {
        return (int)226L;
    }
    public static int ASN1_R_ILLEGAL_NESTED_TAGGING() {
        return (int)181L;
    }
    public static int ASN1_R_ILLEGAL_NULL() {
        return (int)125L;
    }
    public static int ASN1_R_ILLEGAL_NULL_VALUE() {
        return (int)182L;
    }
    public static int ASN1_R_ILLEGAL_OBJECT() {
        return (int)183L;
    }
    public static int ASN1_R_ILLEGAL_OPTIONAL_ANY() {
        return (int)126L;
    }
    public static int ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE() {
        return (int)170L;
    }
    public static int ASN1_R_ILLEGAL_PADDING() {
        return (int)221L;
    }
    public static int ASN1_R_ILLEGAL_TAGGED_ANY() {
        return (int)127L;
    }
    public static int ASN1_R_ILLEGAL_TIME_VALUE() {
        return (int)184L;
    }
    public static int ASN1_R_ILLEGAL_ZERO_CONTENT() {
        return (int)222L;
    }
    public static int ASN1_R_INTEGER_NOT_ASCII_FORMAT() {
        return (int)185L;
    }
    public static int ASN1_R_INTEGER_TOO_LARGE_FOR_LONG() {
        return (int)128L;
    }
    public static int ASN1_R_INVALID_BIT_STRING_BITS_LEFT() {
        return (int)220L;
    }
    public static int ASN1_R_INVALID_BMPSTRING_LENGTH() {
        return (int)129L;
    }
    public static int ASN1_R_INVALID_DIGIT() {
        return (int)130L;
    }
    public static int ASN1_R_INVALID_MIME_TYPE() {
        return (int)205L;
    }
    public static int ASN1_R_INVALID_MODIFIER() {
        return (int)186L;
    }
    public static int ASN1_R_INVALID_NUMBER() {
        return (int)187L;
    }
    public static int ASN1_R_INVALID_OBJECT_ENCODING() {
        return (int)216L;
    }
    public static int ASN1_R_INVALID_SCRYPT_PARAMETERS() {
        return (int)227L;
    }
    public static int ASN1_R_INVALID_SEPARATOR() {
        return (int)131L;
    }
    public static int ASN1_R_INVALID_STRING_TABLE_VALUE() {
        return (int)218L;
    }
    public static int ASN1_R_INVALID_UNIVERSALSTRING_LENGTH() {
        return (int)133L;
    }
    public static int ASN1_R_INVALID_UTF8STRING() {
        return (int)134L;
    }
    public static int ASN1_R_INVALID_VALUE() {
        return (int)219L;
    }
    public static int ASN1_R_LIST_ERROR() {
        return (int)188L;
    }
    public static int ASN1_R_MIME_NO_CONTENT_TYPE() {
        return (int)206L;
    }
    public static int ASN1_R_MIME_PARSE_ERROR() {
        return (int)207L;
    }
    public static int ASN1_R_MIME_SIG_PARSE_ERROR() {
        return (int)208L;
    }
    public static int ASN1_R_MISSING_EOC() {
        return (int)137L;
    }
    public static int ASN1_R_MISSING_SECOND_NUMBER() {
        return (int)138L;
    }
    public static int ASN1_R_MISSING_VALUE() {
        return (int)189L;
    }
    public static int ASN1_R_MSTRING_NOT_UNIVERSAL() {
        return (int)139L;
    }
    public static int ASN1_R_MSTRING_WRONG_TAG() {
        return (int)140L;
    }
    public static int ASN1_R_NESTED_ASN1_STRING() {
        return (int)197L;
    }
    public static int ASN1_R_NESTED_TOO_DEEP() {
        return (int)201L;
    }
    public static int ASN1_R_NON_HEX_CHARACTERS() {
        return (int)141L;
    }
    public static int ASN1_R_NOT_ASCII_FORMAT() {
        return (int)190L;
    }
    public static int ASN1_R_NOT_ENOUGH_DATA() {
        return (int)142L;
    }
    public static int ASN1_R_NO_CONTENT_TYPE() {
        return (int)209L;
    }
    public static int ASN1_R_NO_MATCHING_CHOICE_TYPE() {
        return (int)143L;
    }
    public static int ASN1_R_NO_MULTIPART_BODY_FAILURE() {
        return (int)210L;
    }
    public static int ASN1_R_NO_MULTIPART_BOUNDARY() {
        return (int)211L;
    }
    public static int ASN1_R_NO_SIG_CONTENT_TYPE() {
        return (int)212L;
    }
    public static int ASN1_R_NULL_IS_WRONG_LENGTH() {
        return (int)144L;
    }
    public static int ASN1_R_OBJECT_NOT_ASCII_FORMAT() {
        return (int)191L;
    }
    public static int ASN1_R_ODD_NUMBER_OF_CHARS() {
        return (int)145L;
    }
    public static int ASN1_R_SECOND_NUMBER_TOO_LARGE() {
        return (int)147L;
    }
    public static int ASN1_R_SEQUENCE_LENGTH_MISMATCH() {
        return (int)148L;
    }
    public static int ASN1_R_SEQUENCE_NOT_CONSTRUCTED() {
        return (int)149L;
    }
    public static int ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG() {
        return (int)192L;
    }
    public static int ASN1_R_SHORT_LINE() {
        return (int)150L;
    }
    public static int ASN1_R_SIG_INVALID_MIME_TYPE() {
        return (int)213L;
    }
    public static int ASN1_R_STREAMING_NOT_SUPPORTED() {
        return (int)202L;
    }
    public static int ASN1_R_STRING_TOO_LONG() {
        return (int)151L;
    }
    public static int ASN1_R_STRING_TOO_SHORT() {
        return (int)152L;
    }
    public static int ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD() {
        return (int)154L;
    }
    public static int ASN1_R_TIME_NOT_ASCII_FORMAT() {
        return (int)193L;
    }
    public static int ASN1_R_TOO_LARGE() {
        return (int)223L;
    }
    public static int ASN1_R_TOO_LONG() {
        return (int)155L;
    }
    public static int ASN1_R_TOO_SMALL() {
        return (int)224L;
    }
    public static int ASN1_R_TYPE_NOT_CONSTRUCTED() {
        return (int)156L;
    }
    public static int ASN1_R_TYPE_NOT_PRIMITIVE() {
        return (int)195L;
    }
    public static int ASN1_R_UNEXPECTED_EOC() {
        return (int)159L;
    }
    public static int ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH() {
        return (int)215L;
    }
    public static int ASN1_R_UNKNOWN_FORMAT() {
        return (int)160L;
    }
    public static int ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM() {
        return (int)161L;
    }
    public static int ASN1_R_UNKNOWN_OBJECT_TYPE() {
        return (int)162L;
    }
    public static int ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE() {
        return (int)163L;
    }
    public static int ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM() {
        return (int)199L;
    }
    public static int ASN1_R_UNKNOWN_TAG() {
        return (int)194L;
    }
    public static int ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE() {
        return (int)164L;
    }
    public static int ASN1_R_UNSUPPORTED_CIPHER() {
        return (int)228L;
    }
    public static int ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE() {
        return (int)167L;
    }
    public static int ASN1_R_UNSUPPORTED_TYPE() {
        return (int)196L;
    }
    public static int ASN1_R_WRONG_INTEGER_TYPE() {
        return (int)225L;
    }
    public static int ASN1_R_WRONG_PUBLIC_KEY_TYPE() {
        return (int)200L;
    }
    public static int ASN1_R_WRONG_TAG() {
        return (int)168L;
    }
    public static int BN_F_BNRAND() {
        return (int)127L;
    }
    public static int BN_F_BNRAND_RANGE() {
        return (int)138L;
    }
    public static int BN_F_BN_BLINDING_CONVERT_EX() {
        return (int)100L;
    }
    public static int BN_F_BN_BLINDING_CREATE_PARAM() {
        return (int)128L;
    }
    public static int BN_F_BN_BLINDING_INVERT_EX() {
        return (int)101L;
    }
    public static int BN_F_BN_BLINDING_NEW() {
        return (int)102L;
    }
    public static int BN_F_BN_BLINDING_UPDATE() {
        return (int)103L;
    }
    public static int BN_F_BN_BN2DEC() {
        return (int)104L;
    }
    public static int BN_F_BN_BN2HEX() {
        return (int)105L;
    }
    public static int BN_F_BN_COMPUTE_WNAF() {
        return (int)142L;
    }
    public static int BN_F_BN_CTX_GET() {
        return (int)116L;
    }
    public static int BN_F_BN_CTX_NEW() {
        return (int)106L;
    }
    public static int BN_F_BN_CTX_START() {
        return (int)129L;
    }
    public static int BN_F_BN_DIV() {
        return (int)107L;
    }
    public static int BN_F_BN_DIV_RECP() {
        return (int)130L;
    }
    public static int BN_F_BN_EXP() {
        return (int)123L;
    }
    public static int BN_F_BN_EXPAND_INTERNAL() {
        return (int)120L;
    }
    public static int BN_F_BN_GENCB_NEW() {
        return (int)143L;
    }
    public static int BN_F_BN_GENERATE_DSA_NONCE() {
        return (int)140L;
    }
    public static int BN_F_BN_GENERATE_PRIME_EX() {
        return (int)141L;
    }
    public static int BN_F_BN_GF2M_MOD() {
        return (int)131L;
    }
    public static int BN_F_BN_GF2M_MOD_EXP() {
        return (int)132L;
    }
    public static int BN_F_BN_GF2M_MOD_MUL() {
        return (int)133L;
    }
    public static int BN_F_BN_GF2M_MOD_SOLVE_QUAD() {
        return (int)134L;
    }
    public static int BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR() {
        return (int)135L;
    }
    public static int BN_F_BN_GF2M_MOD_SQR() {
        return (int)136L;
    }
    public static int BN_F_BN_GF2M_MOD_SQRT() {
        return (int)137L;
    }
    public static int BN_F_BN_LSHIFT() {
        return (int)145L;
    }
    public static int BN_F_BN_MOD_EXP2_MONT() {
        return (int)118L;
    }
    public static int BN_F_BN_MOD_EXP_MONT() {
        return (int)109L;
    }
    public static int BN_F_BN_MOD_EXP_MONT_CONSTTIME() {
        return (int)124L;
    }
    public static int BN_F_BN_MOD_EXP_MONT_WORD() {
        return (int)117L;
    }
    public static int BN_F_BN_MOD_EXP_RECP() {
        return (int)125L;
    }
    public static int BN_F_BN_MOD_EXP_SIMPLE() {
        return (int)126L;
    }
    public static int BN_F_BN_MOD_INVERSE() {
        return (int)110L;
    }
    public static int BN_F_BN_MOD_INVERSE_NO_BRANCH() {
        return (int)139L;
    }
    public static int BN_F_BN_MOD_LSHIFT_QUICK() {
        return (int)119L;
    }
    public static int BN_F_BN_MOD_SQRT() {
        return (int)121L;
    }
    public static int BN_F_BN_MONT_CTX_NEW() {
        return (int)149L;
    }
    public static int BN_F_BN_MPI2BN() {
        return (int)112L;
    }
    public static int BN_F_BN_NEW() {
        return (int)113L;
    }
    public static int BN_F_BN_POOL_GET() {
        return (int)147L;
    }
    public static int BN_F_BN_RAND() {
        return (int)114L;
    }
    public static int BN_F_BN_RAND_RANGE() {
        return (int)122L;
    }
    public static int BN_F_BN_RECP_CTX_NEW() {
        return (int)150L;
    }
    public static int BN_F_BN_RSHIFT() {
        return (int)146L;
    }
    public static int BN_F_BN_SET_WORDS() {
        return (int)144L;
    }
    public static int BN_F_BN_STACK_PUSH() {
        return (int)148L;
    }
    public static int BN_F_BN_USUB() {
        return (int)115L;
    }
    public static int BN_R_ARG2_LT_ARG3() {
        return (int)100L;
    }
    public static int BN_R_BAD_RECIPROCAL() {
        return (int)101L;
    }
    public static int BN_R_BIGNUM_TOO_LONG() {
        return (int)114L;
    }
    public static int BN_R_BITS_TOO_SMALL() {
        return (int)118L;
    }
    public static int BN_R_CALLED_WITH_EVEN_MODULUS() {
        return (int)102L;
    }
    public static int BN_R_DIV_BY_ZERO() {
        return (int)103L;
    }
    public static int BN_R_ENCODING_ERROR() {
        return (int)104L;
    }
    public static int BN_R_EXPAND_ON_STATIC_BIGNUM_DATA() {
        return (int)105L;
    }
    public static int BN_R_INPUT_NOT_REDUCED() {
        return (int)110L;
    }
    public static int BN_R_INVALID_LENGTH() {
        return (int)106L;
    }
    public static int BN_R_INVALID_RANGE() {
        return (int)115L;
    }
    public static int BN_R_INVALID_SHIFT() {
        return (int)119L;
    }
    public static int BN_R_NOT_A_SQUARE() {
        return (int)111L;
    }
    public static int BN_R_NOT_INITIALIZED() {
        return (int)107L;
    }
    public static int BN_R_NO_INVERSE() {
        return (int)108L;
    }
    public static int BN_R_NO_SOLUTION() {
        return (int)116L;
    }
    public static int BN_R_PRIVATE_KEY_TOO_LARGE() {
        return (int)117L;
    }
    public static int BN_R_P_IS_NOT_PRIME() {
        return (int)112L;
    }
    public static int BN_R_TOO_MANY_ITERATIONS() {
        return (int)113L;
    }
    public static int BN_R_TOO_MANY_TEMPORARY_VARIABLES() {
        return (int)109L;
    }
    public static int BN_BYTES() {
        return (int)8L;
    }
    public static int BN_FLG_MALLOCED() {
        return (int)1L;
    }
    public static int BN_FLG_STATIC_DATA() {
        return (int)2L;
    }
    public static int BN_FLG_CONSTTIME() {
        return (int)4L;
    }
    public static int BN_FLG_SECURE() {
        return (int)8L;
    }
    public static int BN_FLG_FREE() {
        return (int)32768L;
    }
    public static int BN_RAND_TOP_ONE() {
        return (int)0L;
    }
    public static int BN_RAND_TOP_TWO() {
        return (int)1L;
    }
    public static int BN_RAND_BOTTOM_ANY() {
        return (int)0L;
    }
    public static int BN_RAND_BOTTOM_ODD() {
        return (int)1L;
    }
    public static int BN_prime_checks() {
        return (int)0L;
    }
    public static int BN_BLINDING_NO_UPDATE() {
        return (int)1L;
    }
    public static int BN_BLINDING_NO_RECREATE() {
        return (int)2L;
    }
    public static int V_ASN1_UNIVERSAL() {
        return (int)0L;
    }
    public static int V_ASN1_APPLICATION() {
        return (int)64L;
    }
    public static int V_ASN1_CONTEXT_SPECIFIC() {
        return (int)128L;
    }
    public static int V_ASN1_PRIVATE() {
        return (int)192L;
    }
    public static int V_ASN1_CONSTRUCTED() {
        return (int)32L;
    }
    public static int V_ASN1_PRIMITIVE_TAG() {
        return (int)31L;
    }
    public static int V_ASN1_EOC() {
        return (int)0L;
    }
    public static int V_ASN1_BOOLEAN() {
        return (int)1L;
    }
    public static int V_ASN1_INTEGER() {
        return (int)2L;
    }
    public static int V_ASN1_BIT_STRING() {
        return (int)3L;
    }
    public static int V_ASN1_OCTET_STRING() {
        return (int)4L;
    }
    public static int V_ASN1_NULL() {
        return (int)5L;
    }
    public static int V_ASN1_OBJECT() {
        return (int)6L;
    }
    public static int V_ASN1_OBJECT_DESCRIPTOR() {
        return (int)7L;
    }
    public static int V_ASN1_EXTERNAL() {
        return (int)8L;
    }
    public static int V_ASN1_REAL() {
        return (int)9L;
    }
    public static int V_ASN1_ENUMERATED() {
        return (int)10L;
    }
    public static int V_ASN1_UTF8STRING() {
        return (int)12L;
    }
    public static int V_ASN1_SEQUENCE() {
        return (int)16L;
    }
    public static int V_ASN1_SET() {
        return (int)17L;
    }
    public static int V_ASN1_NUMERICSTRING() {
        return (int)18L;
    }
    public static int V_ASN1_PRINTABLESTRING() {
        return (int)19L;
    }
    public static int V_ASN1_T61STRING() {
        return (int)20L;
    }
    public static int V_ASN1_TELETEXSTRING() {
        return (int)20L;
    }
    public static int V_ASN1_VIDEOTEXSTRING() {
        return (int)21L;
    }
    public static int V_ASN1_IA5STRING() {
        return (int)22L;
    }
    public static int V_ASN1_UTCTIME() {
        return (int)23L;
    }
    public static int V_ASN1_GENERALIZEDTIME() {
        return (int)24L;
    }
    public static int V_ASN1_GRAPHICSTRING() {
        return (int)25L;
    }
    public static int V_ASN1_ISO64STRING() {
        return (int)26L;
    }
    public static int V_ASN1_VISIBLESTRING() {
        return (int)26L;
    }
    public static int V_ASN1_GENERALSTRING() {
        return (int)27L;
    }
    public static int V_ASN1_UNIVERSALSTRING() {
        return (int)28L;
    }
    public static int V_ASN1_BMPSTRING() {
        return (int)30L;
    }
    public static int V_ASN1_NEG() {
        return (int)256L;
    }
    public static int B_ASN1_NUMERICSTRING() {
        return (int)1L;
    }
    public static int B_ASN1_PRINTABLESTRING() {
        return (int)2L;
    }
    public static int B_ASN1_T61STRING() {
        return (int)4L;
    }
    public static int B_ASN1_TELETEXSTRING() {
        return (int)4L;
    }
    public static int B_ASN1_VIDEOTEXSTRING() {
        return (int)8L;
    }
    public static int B_ASN1_IA5STRING() {
        return (int)16L;
    }
    public static int B_ASN1_GRAPHICSTRING() {
        return (int)32L;
    }
    public static int B_ASN1_ISO64STRING() {
        return (int)64L;
    }
    public static int B_ASN1_VISIBLESTRING() {
        return (int)64L;
    }
    public static int B_ASN1_GENERALSTRING() {
        return (int)128L;
    }
    public static int B_ASN1_UNIVERSALSTRING() {
        return (int)256L;
    }
    public static int B_ASN1_OCTET_STRING() {
        return (int)512L;
    }
    public static int B_ASN1_BIT_STRING() {
        return (int)1024L;
    }
    public static int B_ASN1_BMPSTRING() {
        return (int)2048L;
    }
    public static int B_ASN1_UNKNOWN() {
        return (int)4096L;
    }
    public static int B_ASN1_UTF8STRING() {
        return (int)8192L;
    }
    public static int B_ASN1_UTCTIME() {
        return (int)16384L;
    }
    public static int B_ASN1_GENERALIZEDTIME() {
        return (int)32768L;
    }
    public static int B_ASN1_SEQUENCE() {
        return (int)65536L;
    }
    public static int MBSTRING_FLAG() {
        return (int)4096L;
    }
    public static int SMIME_OLDMIME() {
        return (int)1024L;
    }
    public static int SMIME_CRLFEOL() {
        return (int)2048L;
    }
    public static int SMIME_STREAM() {
        return (int)4096L;
    }
    public static int ASN1_STRING_FLAG_BITS_LEFT() {
        return (int)8L;
    }
    public static int ASN1_STRING_FLAG_NDEF() {
        return (int)16L;
    }
    public static int ASN1_STRING_FLAG_CONT() {
        return (int)32L;
    }
    public static int ASN1_STRING_FLAG_MSTRING() {
        return (int)64L;
    }
    public static int ASN1_STRING_FLAG_EMBED() {
        return (int)128L;
    }
    public static int ASN1_STRING_FLAG_X509_TIME() {
        return (int)256L;
    }
    public static int STABLE_FLAGS_MALLOC() {
        return (int)1L;
    }
    public static int STABLE_NO_MASK() {
        return (int)2L;
    }
    public static int ub_name() {
        return (int)32768L;
    }
    public static int ub_common_name() {
        return (int)64L;
    }
    public static int ub_locality_name() {
        return (int)128L;
    }
    public static int ub_state_name() {
        return (int)128L;
    }
    public static int ub_organization_name() {
        return (int)64L;
    }
    public static int ub_organization_unit_name() {
        return (int)64L;
    }
    public static int ub_title() {
        return (int)64L;
    }
    public static int ub_email_address() {
        return (int)128L;
    }
    public static int ASN1_STRFLGS_ESC_2253() {
        return (int)1L;
    }
    public static int ASN1_STRFLGS_ESC_CTRL() {
        return (int)2L;
    }
    public static int ASN1_STRFLGS_ESC_MSB() {
        return (int)4L;
    }
    public static int ASN1_STRFLGS_ESC_QUOTE() {
        return (int)8L;
    }
    public static int CHARTYPE_PRINTABLESTRING() {
        return (int)16L;
    }
    public static int CHARTYPE_FIRST_ESC_2253() {
        return (int)32L;
    }
    public static int CHARTYPE_LAST_ESC_2253() {
        return (int)64L;
    }
    public static int ASN1_STRFLGS_UTF8_CONVERT() {
        return (int)16L;
    }
    public static int ASN1_STRFLGS_IGNORE_TYPE() {
        return (int)32L;
    }
    public static int ASN1_STRFLGS_SHOW_TYPE() {
        return (int)64L;
    }
    public static int ASN1_STRFLGS_DUMP_ALL() {
        return (int)128L;
    }
    public static int ASN1_STRFLGS_DUMP_UNKNOWN() {
        return (int)256L;
    }
    public static int ASN1_STRFLGS_DUMP_DER() {
        return (int)512L;
    }
    public static int ASN1_STRFLGS_ESC_2254() {
        return (int)1024L;
    }
    public static int ASN1_PCTX_FLAGS_SHOW_ABSENT() {
        return (int)1L;
    }
    public static int ASN1_PCTX_FLAGS_SHOW_SEQUENCE() {
        return (int)2L;
    }
    public static int ASN1_PCTX_FLAGS_SHOW_SSOF() {
        return (int)4L;
    }
    public static int ASN1_PCTX_FLAGS_SHOW_TYPE() {
        return (int)8L;
    }
    public static int ASN1_PCTX_FLAGS_NO_ANY_TYPE() {
        return (int)16L;
    }
    public static int ASN1_PCTX_FLAGS_NO_MSTRING_TYPE() {
        return (int)32L;
    }
    public static int ASN1_PCTX_FLAGS_NO_FIELD_NAME() {
        return (int)64L;
    }
    public static int ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME() {
        return (int)128L;
    }
    public static int ASN1_PCTX_FLAGS_NO_STRUCT_NAME() {
        return (int)256L;
    }
    public static int OBJ_F_OBJ_ADD_OBJECT() {
        return (int)105L;
    }
    public static int OBJ_F_OBJ_ADD_SIGID() {
        return (int)107L;
    }
    public static int OBJ_F_OBJ_CREATE() {
        return (int)100L;
    }
    public static int OBJ_F_OBJ_DUP() {
        return (int)101L;
    }
    public static int OBJ_F_OBJ_NAME_NEW_INDEX() {
        return (int)106L;
    }
    public static int OBJ_F_OBJ_NID2LN() {
        return (int)102L;
    }
    public static int OBJ_F_OBJ_NID2OBJ() {
        return (int)103L;
    }
    public static int OBJ_F_OBJ_NID2SN() {
        return (int)104L;
    }
    public static int OBJ_F_OBJ_TXT2OBJ() {
        return (int)108L;
    }
    public static int OBJ_R_OID_EXISTS() {
        return (int)102L;
    }
    public static int OBJ_R_UNKNOWN_NID() {
        return (int)101L;
    }
    public static int OBJ_NAME_TYPE_UNDEF() {
        return (int)0L;
    }
    public static int OBJ_NAME_TYPE_MD_METH() {
        return (int)1L;
    }
    public static int OBJ_NAME_TYPE_CIPHER_METH() {
        return (int)2L;
    }
    public static int OBJ_NAME_TYPE_PKEY_METH() {
        return (int)3L;
    }
    public static int OBJ_NAME_TYPE_COMP_METH() {
        return (int)4L;
    }
    public static int OBJ_NAME_TYPE_NUM() {
        return (int)5L;
    }
    public static int OBJ_NAME_ALIAS() {
        return (int)32768L;
    }
    public static int OBJ_BSEARCH_VALUE_ON_NOMATCH() {
        return (int)1L;
    }
    public static int OBJ_BSEARCH_FIRST_VALUE_ON_MATCH() {
        return (int)2L;
    }
    public static int EVP_PK_RSA() {
        return (int)1L;
    }
    public static int EVP_PK_DSA() {
        return (int)2L;
    }
    public static int EVP_PK_DH() {
        return (int)4L;
    }
    public static int EVP_PK_EC() {
        return (int)8L;
    }
    public static int EVP_PKT_SIGN() {
        return (int)16L;
    }
    public static int EVP_PKT_ENC() {
        return (int)32L;
    }
    public static int EVP_PKT_EXCH() {
        return (int)64L;
    }
    public static int EVP_PKS_RSA() {
        return (int)256L;
    }
    public static int EVP_PKS_DSA() {
        return (int)512L;
    }
    public static int EVP_PKS_EC() {
        return (int)1024L;
    }
    public static int EVP_PKEY_MO_SIGN() {
        return (int)1L;
    }
    public static int EVP_PKEY_MO_VERIFY() {
        return (int)2L;
    }
    public static int EVP_PKEY_MO_ENCRYPT() {
        return (int)4L;
    }
    public static int EVP_PKEY_MO_DECRYPT() {
        return (int)8L;
    }
    public static int EVP_MD_FLAG_ONESHOT() {
        return (int)1L;
    }
    public static int EVP_MD_FLAG_XOF() {
        return (int)2L;
    }
    public static int EVP_MD_FLAG_DIGALGID_MASK() {
        return (int)24L;
    }
    public static int EVP_MD_FLAG_DIGALGID_NULL() {
        return (int)0L;
    }
    public static int EVP_MD_FLAG_DIGALGID_ABSENT() {
        return (int)8L;
    }
    public static int EVP_MD_FLAG_DIGALGID_CUSTOM() {
        return (int)24L;
    }
    public static int EVP_MD_FLAG_FIPS() {
        return (int)1024L;
    }
    public static int EVP_MD_CTRL_DIGALGID() {
        return (int)1L;
    }
    public static int EVP_MD_CTRL_MICALG() {
        return (int)2L;
    }
    public static int EVP_MD_CTRL_XOF_LEN() {
        return (int)3L;
    }
    public static int EVP_MD_CTRL_ALG_CTRL() {
        return (int)4096L;
    }
    public static int EVP_MD_CTX_FLAG_ONESHOT() {
        return (int)1L;
    }
    public static int EVP_MD_CTX_FLAG_CLEANED() {
        return (int)2L;
    }
    public static int EVP_MD_CTX_FLAG_REUSE() {
        return (int)4L;
    }
    public static int EVP_MD_CTX_FLAG_NON_FIPS_ALLOW() {
        return (int)8L;
    }
    public static int EVP_MD_CTX_FLAG_PAD_MASK() {
        return (int)240L;
    }
    public static int EVP_MD_CTX_FLAG_PAD_PKCS1() {
        return (int)0L;
    }
    public static int EVP_MD_CTX_FLAG_PAD_X931() {
        return (int)16L;
    }
    public static int EVP_MD_CTX_FLAG_PAD_PSS() {
        return (int)32L;
    }
    public static int EVP_MD_CTX_FLAG_NO_INIT() {
        return (int)256L;
    }
    public static int EVP_MD_CTX_FLAG_FINALISE() {
        return (int)512L;
    }
    public static int EVP_CIPH_STREAM_CIPHER() {
        return (int)0L;
    }
    public static int EVP_CIPH_ECB_MODE() {
        return (int)1L;
    }
    public static int EVP_CIPH_CBC_MODE() {
        return (int)2L;
    }
    public static int EVP_CIPH_CFB_MODE() {
        return (int)3L;
    }
    public static int EVP_CIPH_OFB_MODE() {
        return (int)4L;
    }
    public static int EVP_CIPH_CTR_MODE() {
        return (int)5L;
    }
    public static int EVP_CIPH_GCM_MODE() {
        return (int)6L;
    }
    public static int EVP_CIPH_CCM_MODE() {
        return (int)7L;
    }
    public static int EVP_CIPH_XTS_MODE() {
        return (int)65537L;
    }
    public static int EVP_CIPH_WRAP_MODE() {
        return (int)65538L;
    }
    public static int EVP_CIPH_OCB_MODE() {
        return (int)65539L;
    }
    public static int EVP_CIPH_MODE() {
        return (int)983047L;
    }
    public static int EVP_CIPH_VARIABLE_LENGTH() {
        return (int)8L;
    }
    public static int EVP_CIPH_CUSTOM_IV() {
        return (int)16L;
    }
    public static int EVP_CIPH_ALWAYS_CALL_INIT() {
        return (int)32L;
    }
    public static int EVP_CIPH_CTRL_INIT() {
        return (int)64L;
    }
    public static int EVP_CIPH_CUSTOM_KEY_LENGTH() {
        return (int)128L;
    }
    public static int EVP_CIPH_NO_PADDING() {
        return (int)256L;
    }
    public static int EVP_CIPH_RAND_KEY() {
        return (int)512L;
    }
    public static int EVP_CIPH_CUSTOM_COPY() {
        return (int)1024L;
    }
    public static int EVP_CIPH_CUSTOM_IV_LENGTH() {
        return (int)2048L;
    }
    public static int EVP_CIPH_FLAG_DEFAULT_ASN1() {
        return (int)4096L;
    }
    public static int EVP_CIPH_FLAG_LENGTH_BITS() {
        return (int)8192L;
    }
    public static int EVP_CIPH_FLAG_FIPS() {
        return (int)16384L;
    }
    public static int EVP_CIPH_FLAG_NON_FIPS_ALLOW() {
        return (int)32768L;
    }
    public static int EVP_CIPH_FLAG_CUSTOM_CIPHER() {
        return (int)1048576L;
    }
    public static int EVP_CIPH_FLAG_AEAD_CIPHER() {
        return (int)2097152L;
    }
    public static int EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK() {
        return (int)4194304L;
    }
    public static int EVP_CIPH_FLAG_PIPELINE() {
        return (int)8388608L;
    }
    public static int EVP_CIPHER_CTX_FLAG_WRAP_ALLOW() {
        return (int)1L;
    }
    public static int EVP_CTRL_INIT() {
        return (int)0L;
    }
    public static int EVP_CTRL_SET_KEY_LENGTH() {
        return (int)1L;
    }
    public static int EVP_CTRL_GET_RC2_KEY_BITS() {
        return (int)2L;
    }
    public static int EVP_CTRL_SET_RC2_KEY_BITS() {
        return (int)3L;
    }
    public static int EVP_CTRL_GET_RC5_ROUNDS() {
        return (int)4L;
    }
    public static int EVP_CTRL_SET_RC5_ROUNDS() {
        return (int)5L;
    }
    public static int EVP_CTRL_RAND_KEY() {
        return (int)6L;
    }
    public static int EVP_CTRL_PBE_PRF_NID() {
        return (int)7L;
    }
    public static int EVP_CTRL_COPY() {
        return (int)8L;
    }
    public static int EVP_CTRL_AEAD_SET_IVLEN() {
        return (int)9L;
    }
    public static int EVP_CTRL_AEAD_GET_TAG() {
        return (int)16L;
    }
    public static int EVP_CTRL_AEAD_SET_TAG() {
        return (int)17L;
    }
    public static int EVP_CTRL_AEAD_SET_IV_FIXED() {
        return (int)18L;
    }
    public static int EVP_CTRL_GCM_IV_GEN() {
        return (int)19L;
    }
    public static int EVP_CTRL_CCM_SET_L() {
        return (int)20L;
    }
    public static int EVP_CTRL_CCM_SET_MSGLEN() {
        return (int)21L;
    }
    public static int EVP_CTRL_AEAD_TLS1_AAD() {
        return (int)22L;
    }
    public static int EVP_CTRL_AEAD_SET_MAC_KEY() {
        return (int)23L;
    }
    public static int EVP_CTRL_GCM_SET_IV_INV() {
        return (int)24L;
    }
    public static int EVP_CTRL_TLS1_1_MULTIBLOCK_AAD() {
        return (int)25L;
    }
    public static int EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT() {
        return (int)26L;
    }
    public static int EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT() {
        return (int)27L;
    }
    public static int EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE() {
        return (int)28L;
    }
    public static int EVP_CTRL_SSL3_MASTER_SECRET() {
        return (int)29L;
    }
    public static int EVP_CTRL_SET_SBOX() {
        return (int)30L;
    }
    public static int EVP_CTRL_SBOX_USED() {
        return (int)31L;
    }
    public static int EVP_CTRL_KEY_MESH() {
        return (int)32L;
    }
    public static int EVP_CTRL_BLOCK_PADDING_MODE() {
        return (int)33L;
    }
    public static int EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS() {
        return (int)34L;
    }
    public static int EVP_CTRL_SET_PIPELINE_INPUT_BUFS() {
        return (int)35L;
    }
    public static int EVP_CTRL_SET_PIPELINE_INPUT_LENS() {
        return (int)36L;
    }
    public static int EVP_CTRL_GET_IVLEN() {
        return (int)37L;
    }
    public static int EVP_PADDING_PKCS7() {
        return (int)1L;
    }
    public static int EVP_PADDING_ISO7816_4() {
        return (int)2L;
    }
    public static int EVP_PADDING_ANSI923() {
        return (int)3L;
    }
    public static int EVP_PADDING_ISO10126() {
        return (int)4L;
    }
    public static int EVP_PADDING_ZERO() {
        return (int)5L;
    }
    public static int EVP_AEAD_TLS1_AAD_LEN() {
        return (int)13L;
    }
    public static int EVP_GCM_TLS_FIXED_IV_LEN() {
        return (int)4L;
    }
    public static int EVP_GCM_TLS_EXPLICIT_IV_LEN() {
        return (int)8L;
    }
    public static int EVP_GCM_TLS_TAG_LEN() {
        return (int)16L;
    }
    public static int EVP_CCM_TLS_FIXED_IV_LEN() {
        return (int)4L;
    }
    public static int EVP_CCM_TLS_EXPLICIT_IV_LEN() {
        return (int)8L;
    }
    public static int EVP_CCM_TLS_IV_LEN() {
        return (int)12L;
    }
    public static int EVP_CCM_TLS_TAG_LEN() {
        return (int)16L;
    }
    public static int EVP_CCM8_TLS_TAG_LEN() {
        return (int)8L;
    }
    public static int EVP_CHACHAPOLY_TLS_TAG_LEN() {
        return (int)16L;
    }
    public static int EVP_PBE_TYPE_OUTER() {
        return (int)0L;
    }
    public static int EVP_PBE_TYPE_PRF() {
        return (int)1L;
    }
    public static int EVP_PBE_TYPE_KDF() {
        return (int)2L;
    }
    public static int ASN1_PKEY_ALIAS() {
        return (int)1L;
    }
    public static int ASN1_PKEY_DYNAMIC() {
        return (int)2L;
    }
    public static int ASN1_PKEY_SIGPARAM_NULL() {
        return (int)4L;
    }
    public static int ASN1_PKEY_CTRL_PKCS7_SIGN() {
        return (int)1L;
    }
    public static int ASN1_PKEY_CTRL_PKCS7_ENCRYPT() {
        return (int)2L;
    }
    public static int ASN1_PKEY_CTRL_DEFAULT_MD_NID() {
        return (int)3L;
    }
    public static int ASN1_PKEY_CTRL_CMS_SIGN() {
        return (int)5L;
    }
    public static int ASN1_PKEY_CTRL_CMS_ENVELOPE() {
        return (int)7L;
    }
    public static int ASN1_PKEY_CTRL_CMS_RI_TYPE() {
        return (int)8L;
    }
    public static int ASN1_PKEY_CTRL_SET1_TLS_ENCPT() {
        return (int)9L;
    }
    public static int ASN1_PKEY_CTRL_GET1_TLS_ENCPT() {
        return (int)10L;
    }
    public static int EVP_PKEY_OP_UNDEFINED() {
        return (int)0L;
    }
    public static int EVP_PKEY_CTRL_MD() {
        return (int)1L;
    }
    public static int EVP_PKEY_CTRL_PEER_KEY() {
        return (int)2L;
    }
    public static int EVP_PKEY_CTRL_PKCS7_ENCRYPT() {
        return (int)3L;
    }
    public static int EVP_PKEY_CTRL_PKCS7_DECRYPT() {
        return (int)4L;
    }
    public static int EVP_PKEY_CTRL_PKCS7_SIGN() {
        return (int)5L;
    }
    public static int EVP_PKEY_CTRL_SET_MAC_KEY() {
        return (int)6L;
    }
    public static int EVP_PKEY_CTRL_DIGESTINIT() {
        return (int)7L;
    }
    public static int EVP_PKEY_CTRL_SET_IV() {
        return (int)8L;
    }
    public static int EVP_PKEY_CTRL_CMS_ENCRYPT() {
        return (int)9L;
    }
    public static int EVP_PKEY_CTRL_CMS_DECRYPT() {
        return (int)10L;
    }
    public static int EVP_PKEY_CTRL_CMS_SIGN() {
        return (int)11L;
    }
    public static int EVP_PKEY_CTRL_CIPHER() {
        return (int)12L;
    }
    public static int EVP_PKEY_CTRL_GET_MD() {
        return (int)13L;
    }
    public static int EVP_PKEY_CTRL_SET_DIGEST_SIZE() {
        return (int)14L;
    }
    public static int EVP_PKEY_ALG_CTRL() {
        return (int)4096L;
    }
    public static int EVP_PKEY_FLAG_AUTOARGLEN() {
        return (int)2L;
    }
    public static int EVP_PKEY_FLAG_SIGCTX_CUSTOM() {
        return (int)4L;
    }
    public static int EVP_PKEY_FLAG_FIPS() {
        return (int)16384L;
    }
    public static int EC_F_BN_TO_FELEM() {
        return (int)224L;
    }
    public static int EC_F_D2I_ECPARAMETERS() {
        return (int)144L;
    }
    public static int EC_F_D2I_ECPKPARAMETERS() {
        return (int)145L;
    }
    public static int EC_F_D2I_ECPRIVATEKEY() {
        return (int)146L;
    }
    public static int EC_F_DO_EC_KEY_PRINT() {
        return (int)221L;
    }
    public static int EC_F_ECDH_CMS_DECRYPT() {
        return (int)238L;
    }
    public static int EC_F_ECDH_CMS_SET_SHARED_INFO() {
        return (int)239L;
    }
    public static int EC_F_ECDH_COMPUTE_KEY() {
        return (int)246L;
    }
    public static int EC_F_ECDH_SIMPLE_COMPUTE_KEY() {
        return (int)257L;
    }
    public static int EC_F_ECDSA_DO_SIGN_EX() {
        return (int)251L;
    }
    public static int EC_F_ECDSA_DO_VERIFY() {
        return (int)252L;
    }
    public static int EC_F_ECDSA_SIGN_EX() {
        return (int)254L;
    }
    public static int EC_F_ECDSA_SIGN_SETUP() {
        return (int)248L;
    }
    public static int EC_F_ECDSA_SIG_NEW() {
        return (int)265L;
    }
    public static int EC_F_ECDSA_VERIFY() {
        return (int)253L;
    }
    public static int EC_F_ECDSA_SIMPLE_SIGN_SETUP() {
        return (int)310L;
    }
    public static int EC_F_ECDSA_SIMPLE_SIGN_SIG() {
        return (int)311L;
    }
    public static int EC_F_ECDSA_SIMPLE_VERIFY_SIG() {
        return (int)312L;
    }
    public static int EC_F_ECDSA_S390X_NISTP_SIGN_SIG() {
        return (int)313L;
    }
    public static int EC_F_ECDSA_S390X_NISTP_VERIFY_SIG() {
        return (int)314L;
    }
    public static int EC_F_ECD_ITEM_VERIFY() {
        return (int)270L;
    }
    public static int EC_F_ECKEY_PARAM2TYPE() {
        return (int)223L;
    }
    public static int EC_F_ECKEY_PARAM_DECODE() {
        return (int)212L;
    }
    public static int EC_F_ECKEY_PRIV_DECODE() {
        return (int)213L;
    }
    public static int EC_F_ECKEY_PRIV_ENCODE() {
        return (int)214L;
    }
    public static int EC_F_ECKEY_PUB_DECODE() {
        return (int)215L;
    }
    public static int EC_F_ECKEY_PUB_ENCODE() {
        return (int)216L;
    }
    public static int EC_F_ECKEY_TYPE2PARAM() {
        return (int)220L;
    }
    public static int EC_F_ECPARAMETERS_PRINT() {
        return (int)147L;
    }
    public static int EC_F_ECPARAMETERS_PRINT_FP() {
        return (int)148L;
    }
    public static int EC_F_ECPKPARAMETERS_PRINT() {
        return (int)149L;
    }
    public static int EC_F_ECPKPARAMETERS_PRINT_FP() {
        return (int)150L;
    }
    public static int EC_F_ECP_NISTZ256_GET_AFFINE() {
        return (int)240L;
    }
    public static int EC_F_ECP_NISTZ256_INV_MOD_ORD() {
        return (int)275L;
    }
    public static int EC_F_ECP_NISTZ256_MULT_PRECOMPUTE() {
        return (int)243L;
    }
    public static int EC_F_ECP_NISTZ256_POINTS_MUL() {
        return (int)241L;
    }
    public static int EC_F_ECP_NISTZ256_PRE_COMP_NEW() {
        return (int)244L;
    }
    public static int EC_F_ECP_NISTZ256_WINDOWED_MUL() {
        return (int)242L;
    }
    public static int EC_F_ECX_KEY_OP() {
        return (int)266L;
    }
    public static int EC_F_ECX_PRIV_ENCODE() {
        return (int)267L;
    }
    public static int EC_F_ECX_PUB_ENCODE() {
        return (int)268L;
    }
    public static int EC_F_EC_ASN1_GROUP2CURVE() {
        return (int)153L;
    }
    public static int EC_F_EC_ASN1_GROUP2FIELDID() {
        return (int)154L;
    }
    public static int EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY() {
        return (int)208L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_FIELD_INV() {
        return (int)296L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT() {
        return (int)159L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE() {
        return (int)195L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_LADDER_POST() {
        return (int)285L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_LADDER_PRE() {
        return (int)288L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_OCT2POINT() {
        return (int)160L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_POINT2OCT() {
        return (int)161L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_POINTS_MUL() {
        return (int)289L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES() {
        return (int)162L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES() {
        return (int)163L;
    }
    public static int EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES() {
        return (int)164L;
    }
    public static int EC_F_EC_GFP_MONT_FIELD_DECODE() {
        return (int)133L;
    }
    public static int EC_F_EC_GFP_MONT_FIELD_ENCODE() {
        return (int)134L;
    }
    public static int EC_F_EC_GFP_MONT_FIELD_INV() {
        return (int)297L;
    }
    public static int EC_F_EC_GFP_MONT_FIELD_MUL() {
        return (int)131L;
    }
    public static int EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE() {
        return (int)209L;
    }
    public static int EC_F_EC_GFP_MONT_FIELD_SQR() {
        return (int)132L;
    }
    public static int EC_F_EC_GFP_MONT_GROUP_SET_CURVE() {
        return (int)189L;
    }
    public static int EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE() {
        return (int)225L;
    }
    public static int EC_F_EC_GFP_NISTP224_POINTS_MUL() {
        return (int)228L;
    }
    public static int EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES() {
        return (int)226L;
    }
    public static int EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE() {
        return (int)230L;
    }
    public static int EC_F_EC_GFP_NISTP256_POINTS_MUL() {
        return (int)231L;
    }
    public static int EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES() {
        return (int)232L;
    }
    public static int EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE() {
        return (int)233L;
    }
    public static int EC_F_EC_GFP_NISTP521_POINTS_MUL() {
        return (int)234L;
    }
    public static int EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES() {
        return (int)235L;
    }
    public static int EC_F_EC_GFP_NIST_FIELD_MUL() {
        return (int)200L;
    }
    public static int EC_F_EC_GFP_NIST_FIELD_SQR() {
        return (int)201L;
    }
    public static int EC_F_EC_GFP_NIST_GROUP_SET_CURVE() {
        return (int)202L;
    }
    public static int EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES() {
        return (int)287L;
    }
    public static int EC_F_EC_GFP_SIMPLE_FIELD_INV() {
        return (int)298L;
    }
    public static int EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT() {
        return (int)165L;
    }
    public static int EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE() {
        return (int)166L;
    }
    public static int EC_F_EC_GFP_SIMPLE_MAKE_AFFINE() {
        return (int)102L;
    }
    public static int EC_F_EC_GFP_SIMPLE_OCT2POINT() {
        return (int)103L;
    }
    public static int EC_F_EC_GFP_SIMPLE_POINT2OCT() {
        return (int)104L;
    }
    public static int EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE() {
        return (int)137L;
    }
    public static int EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES() {
        return (int)167L;
    }
    public static int EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES() {
        return (int)168L;
    }
    public static int EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES() {
        return (int)169L;
    }
    public static int EC_F_EC_GROUP_CHECK() {
        return (int)170L;
    }
    public static int EC_F_EC_GROUP_CHECK_DISCRIMINANT() {
        return (int)171L;
    }
    public static int EC_F_EC_GROUP_COPY() {
        return (int)106L;
    }
    public static int EC_F_EC_GROUP_GET_CURVE() {
        return (int)291L;
    }
    public static int EC_F_EC_GROUP_GET_CURVE_GF2M() {
        return (int)172L;
    }
    public static int EC_F_EC_GROUP_GET_CURVE_GFP() {
        return (int)130L;
    }
    public static int EC_F_EC_GROUP_GET_DEGREE() {
        return (int)173L;
    }
    public static int EC_F_EC_GROUP_GET_ECPARAMETERS() {
        return (int)261L;
    }
    public static int EC_F_EC_GROUP_GET_ECPKPARAMETERS() {
        return (int)262L;
    }
    public static int EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS() {
        return (int)193L;
    }
    public static int EC_F_EC_GROUP_GET_TRINOMIAL_BASIS() {
        return (int)194L;
    }
    public static int EC_F_EC_GROUP_NEW() {
        return (int)108L;
    }
    public static int EC_F_EC_GROUP_NEW_BY_CURVE_NAME() {
        return (int)174L;
    }
    public static int EC_F_EC_GROUP_NEW_FROM_DATA() {
        return (int)175L;
    }
    public static int EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS() {
        return (int)263L;
    }
    public static int EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS() {
        return (int)264L;
    }
    public static int EC_F_EC_GROUP_SET_CURVE() {
        return (int)292L;
    }
    public static int EC_F_EC_GROUP_SET_CURVE_GF2M() {
        return (int)176L;
    }
    public static int EC_F_EC_GROUP_SET_CURVE_GFP() {
        return (int)109L;
    }
    public static int EC_F_EC_GROUP_SET_GENERATOR() {
        return (int)111L;
    }
    public static int EC_F_EC_GROUP_SET_SEED() {
        return (int)286L;
    }
    public static int EC_F_EC_KEY_CHECK_KEY() {
        return (int)177L;
    }
    public static int EC_F_EC_KEY_COPY() {
        return (int)178L;
    }
    public static int EC_F_EC_KEY_GENERATE_KEY() {
        return (int)179L;
    }
    public static int EC_F_EC_KEY_NEW() {
        return (int)182L;
    }
    public static int EC_F_EC_KEY_NEW_METHOD() {
        return (int)245L;
    }
    public static int EC_F_EC_KEY_OCT2PRIV() {
        return (int)255L;
    }
    public static int EC_F_EC_KEY_PRINT() {
        return (int)180L;
    }
    public static int EC_F_EC_KEY_PRINT_FP() {
        return (int)181L;
    }
    public static int EC_F_EC_KEY_PRIV2BUF() {
        return (int)279L;
    }
    public static int EC_F_EC_KEY_PRIV2OCT() {
        return (int)256L;
    }
    public static int EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES() {
        return (int)229L;
    }
    public static int EC_F_EC_KEY_SIMPLE_CHECK_KEY() {
        return (int)258L;
    }
    public static int EC_F_EC_KEY_SIMPLE_OCT2PRIV() {
        return (int)259L;
    }
    public static int EC_F_EC_KEY_SIMPLE_PRIV2OCT() {
        return (int)260L;
    }
    public static int EC_F_EC_PKEY_CHECK() {
        return (int)273L;
    }
    public static int EC_F_EC_PKEY_PARAM_CHECK() {
        return (int)274L;
    }
    public static int EC_F_EC_POINTS_MAKE_AFFINE() {
        return (int)136L;
    }
    public static int EC_F_EC_POINTS_MUL() {
        return (int)290L;
    }
    public static int EC_F_EC_POINT_ADD() {
        return (int)112L;
    }
    public static int EC_F_EC_POINT_BN2POINT() {
        return (int)280L;
    }
    public static int EC_F_EC_POINT_CMP() {
        return (int)113L;
    }
    public static int EC_F_EC_POINT_COPY() {
        return (int)114L;
    }
    public static int EC_F_EC_POINT_DBL() {
        return (int)115L;
    }
    public static int EC_F_EC_POINT_GET_AFFINE_COORDINATES() {
        return (int)293L;
    }
    public static int EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M() {
        return (int)183L;
    }
    public static int EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP() {
        return (int)116L;
    }
    public static int EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP() {
        return (int)117L;
    }
    public static int EC_F_EC_POINT_INVERT() {
        return (int)210L;
    }
    public static int EC_F_EC_POINT_IS_AT_INFINITY() {
        return (int)118L;
    }
    public static int EC_F_EC_POINT_IS_ON_CURVE() {
        return (int)119L;
    }
    public static int EC_F_EC_POINT_MAKE_AFFINE() {
        return (int)120L;
    }
    public static int EC_F_EC_POINT_NEW() {
        return (int)121L;
    }
    public static int EC_F_EC_POINT_OCT2POINT() {
        return (int)122L;
    }
    public static int EC_F_EC_POINT_POINT2BUF() {
        return (int)281L;
    }
    public static int EC_F_EC_POINT_POINT2OCT() {
        return (int)123L;
    }
    public static int EC_F_EC_POINT_SET_AFFINE_COORDINATES() {
        return (int)294L;
    }
    public static int EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M() {
        return (int)185L;
    }
    public static int EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP() {
        return (int)124L;
    }
    public static int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES() {
        return (int)295L;
    }
    public static int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M() {
        return (int)186L;
    }
    public static int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP() {
        return (int)125L;
    }
    public static int EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP() {
        return (int)126L;
    }
    public static int EC_F_EC_POINT_SET_TO_INFINITY() {
        return (int)127L;
    }
    public static int EC_F_EC_PRE_COMP_NEW() {
        return (int)196L;
    }
    public static int EC_F_EC_SCALAR_MUL_LADDER() {
        return (int)284L;
    }
    public static int EC_F_EC_WNAF_MUL() {
        return (int)187L;
    }
    public static int EC_F_EC_WNAF_PRECOMPUTE_MULT() {
        return (int)188L;
    }
    public static int EC_F_I2D_ECPARAMETERS() {
        return (int)190L;
    }
    public static int EC_F_I2D_ECPKPARAMETERS() {
        return (int)191L;
    }
    public static int EC_F_I2D_ECPRIVATEKEY() {
        return (int)192L;
    }
    public static int EC_F_I2O_ECPUBLICKEY() {
        return (int)151L;
    }
    public static int EC_F_NISTP224_PRE_COMP_NEW() {
        return (int)227L;
    }
    public static int EC_F_NISTP256_PRE_COMP_NEW() {
        return (int)236L;
    }
    public static int EC_F_NISTP521_PRE_COMP_NEW() {
        return (int)237L;
    }
    public static int EC_F_O2I_ECPUBLICKEY() {
        return (int)152L;
    }
    public static int EC_F_OLD_EC_PRIV_DECODE() {
        return (int)222L;
    }
    public static int EC_F_OSSL_ECDH_COMPUTE_KEY() {
        return (int)247L;
    }
    public static int EC_F_OSSL_ECDSA_SIGN_SETUP() {
        return (int)300L;
    }
    public static int EC_F_OSSL_ECDSA_SIGN_SIG() {
        return (int)249L;
    }
    public static int EC_F_OSSL_ECDSA_VERIFY_SIG() {
        return (int)250L;
    }
    public static int EC_F_PKEY_ECD_CTRL() {
        return (int)271L;
    }
    public static int EC_F_PKEY_ECD_DIGESTSIGN() {
        return (int)272L;
    }
    public static int EC_F_PKEY_ECD_DIGESTSIGN25519() {
        return (int)276L;
    }
    public static int EC_F_PKEY_ECD_DIGESTSIGN448() {
        return (int)277L;
    }
    public static int EC_F_PKEY_ECX_DERIVE() {
        return (int)269L;
    }
    public static int EC_F_PKEY_EC_CTRL() {
        return (int)197L;
    }
    public static int EC_F_PKEY_EC_CTRL_STR() {
        return (int)198L;
    }
    public static int EC_F_PKEY_EC_DERIVE() {
        return (int)217L;
    }
    public static int EC_F_PKEY_EC_INIT() {
        return (int)282L;
    }
    public static int EC_F_PKEY_EC_KDF_DERIVE() {
        return (int)283L;
    }
    public static int EC_F_PKEY_EC_KEYGEN() {
        return (int)199L;
    }
    public static int EC_F_PKEY_EC_PARAMGEN() {
        return (int)219L;
    }
    public static int EC_F_PKEY_EC_SIGN() {
        return (int)218L;
    }
    public static int EC_F_S390X_PKEY_ECD_DIGESTSIGN25519() {
        return (int)320L;
    }
    public static int EC_F_S390X_PKEY_ECD_DIGESTSIGN448() {
        return (int)321L;
    }
    public static int EC_F_S390X_PKEY_ECD_KEYGEN25519() {
        return (int)322L;
    }
    public static int EC_F_S390X_PKEY_ECD_KEYGEN448() {
        return (int)323L;
    }
    public static int EC_F_S390X_PKEY_ECX_KEYGEN25519() {
        return (int)324L;
    }
    public static int EC_F_S390X_PKEY_ECX_KEYGEN448() {
        return (int)325L;
    }
    public static int EC_F_VALIDATE_ECX_DERIVE() {
        return (int)278L;
    }
    public static int EC_R_ASN1_ERROR() {
        return (int)115L;
    }
    public static int EC_R_BAD_SIGNATURE() {
        return (int)156L;
    }
    public static int EC_R_BIGNUM_OUT_OF_RANGE() {
        return (int)144L;
    }
    public static int EC_R_BUFFER_TOO_SMALL() {
        return (int)100L;
    }
    public static int EC_R_CANNOT_INVERT() {
        return (int)165L;
    }
    public static int EC_R_COORDINATES_OUT_OF_RANGE() {
        return (int)146L;
    }
    public static int EC_R_CURVE_DOES_NOT_SUPPORT_ECDH() {
        return (int)160L;
    }
    public static int EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA() {
        return (int)170L;
    }
    public static int EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING() {
        return (int)159L;
    }
    public static int EC_R_D2I_ECPKPARAMETERS_FAILURE() {
        return (int)117L;
    }
    public static int EC_R_DECODE_ERROR() {
        return (int)142L;
    }
    public static int EC_R_DISCRIMINANT_IS_ZERO() {
        return (int)118L;
    }
    public static int EC_R_EC_GROUP_NEW_BY_NAME_FAILURE() {
        return (int)119L;
    }
    public static int EC_R_FIELD_TOO_LARGE() {
        return (int)143L;
    }
    public static int EC_R_GF2M_NOT_SUPPORTED() {
        return (int)147L;
    }
    public static int EC_R_GROUP2PKPARAMETERS_FAILURE() {
        return (int)120L;
    }
    public static int EC_R_I2D_ECPKPARAMETERS_FAILURE() {
        return (int)121L;
    }
    public static int EC_R_INCOMPATIBLE_OBJECTS() {
        return (int)101L;
    }
    public static int EC_R_INVALID_ARGUMENT() {
        return (int)112L;
    }
    public static int EC_R_INVALID_COMPRESSED_POINT() {
        return (int)110L;
    }
    public static int EC_R_INVALID_COMPRESSION_BIT() {
        return (int)109L;
    }
    public static int EC_R_INVALID_CURVE() {
        return (int)141L;
    }
    public static int EC_R_INVALID_DIGEST() {
        return (int)151L;
    }
    public static int EC_R_INVALID_DIGEST_TYPE() {
        return (int)138L;
    }
    public static int EC_R_INVALID_ENCODING() {
        return (int)102L;
    }
    public static int EC_R_INVALID_FIELD() {
        return (int)103L;
    }
    public static int EC_R_INVALID_FORM() {
        return (int)104L;
    }
    public static int EC_R_INVALID_GROUP_ORDER() {
        return (int)122L;
    }
    public static int EC_R_INVALID_KEY() {
        return (int)116L;
    }
    public static int EC_R_INVALID_OUTPUT_LENGTH() {
        return (int)161L;
    }
    public static int EC_R_INVALID_PEER_KEY() {
        return (int)133L;
    }
    public static int EC_R_INVALID_PENTANOMIAL_BASIS() {
        return (int)132L;
    }
    public static int EC_R_INVALID_PRIVATE_KEY() {
        return (int)123L;
    }
    public static int EC_R_INVALID_TRINOMIAL_BASIS() {
        return (int)137L;
    }
    public static int EC_R_KDF_PARAMETER_ERROR() {
        return (int)148L;
    }
    public static int EC_R_KEYS_NOT_SET() {
        return (int)140L;
    }
    public static int EC_R_LADDER_POST_FAILURE() {
        return (int)136L;
    }
    public static int EC_R_LADDER_PRE_FAILURE() {
        return (int)153L;
    }
    public static int EC_R_LADDER_STEP_FAILURE() {
        return (int)162L;
    }
    public static int EC_R_MISSING_OID() {
        return (int)167L;
    }
    public static int EC_R_MISSING_PARAMETERS() {
        return (int)124L;
    }
    public static int EC_R_MISSING_PRIVATE_KEY() {
        return (int)125L;
    }
    public static int EC_R_NEED_NEW_SETUP_VALUES() {
        return (int)157L;
    }
    public static int EC_R_NOT_A_NIST_PRIME() {
        return (int)135L;
    }
    public static int EC_R_NOT_IMPLEMENTED() {
        return (int)126L;
    }
    public static int EC_R_NOT_INITIALIZED() {
        return (int)111L;
    }
    public static int EC_R_NO_PARAMETERS_SET() {
        return (int)139L;
    }
    public static int EC_R_NO_PRIVATE_VALUE() {
        return (int)154L;
    }
    public static int EC_R_OPERATION_NOT_SUPPORTED() {
        return (int)152L;
    }
    public static int EC_R_PASSED_NULL_PARAMETER() {
        return (int)134L;
    }
    public static int EC_R_PEER_KEY_ERROR() {
        return (int)149L;
    }
    public static int EC_R_PKPARAMETERS2GROUP_FAILURE() {
        return (int)127L;
    }
    public static int EC_R_POINT_ARITHMETIC_FAILURE() {
        return (int)155L;
    }
    public static int EC_R_POINT_AT_INFINITY() {
        return (int)106L;
    }
    public static int EC_R_POINT_COORDINATES_BLIND_FAILURE() {
        return (int)163L;
    }
    public static int EC_R_POINT_IS_NOT_ON_CURVE() {
        return (int)107L;
    }
    public static int EC_R_RANDOM_NUMBER_GENERATION_FAILED() {
        return (int)158L;
    }
    public static int EC_R_SHARED_INFO_ERROR() {
        return (int)150L;
    }
    public static int EC_R_SLOT_FULL() {
        return (int)108L;
    }
    public static int EC_R_UNDEFINED_GENERATOR() {
        return (int)113L;
    }
    public static int EC_R_UNDEFINED_ORDER() {
        return (int)128L;
    }
    public static int EC_R_UNKNOWN_COFACTOR() {
        return (int)164L;
    }
    public static int EC_R_UNKNOWN_GROUP() {
        return (int)129L;
    }
    public static int EC_R_UNKNOWN_ORDER() {
        return (int)114L;
    }
    public static int EC_R_UNSUPPORTED_FIELD() {
        return (int)131L;
    }
    public static int EC_R_WRONG_CURVE_PARAMETERS() {
        return (int)145L;
    }
    public static int EC_R_WRONG_ORDER() {
        return (int)130L;
    }
    public static int OPENSSL_ECC_MAX_FIELD_BITS() {
        return (int)661L;
    }
    public static int OPENSSL_EC_EXPLICIT_CURVE() {
        return (int)0L;
    }
    public static int OPENSSL_EC_NAMED_CURVE() {
        return (int)1L;
    }
    public static int EC_PKEY_NO_PARAMETERS() {
        return (int)1L;
    }
    public static int EC_PKEY_NO_PUBKEY() {
        return (int)2L;
    }
    public static int EC_FLAG_NON_FIPS_ALLOW() {
        return (int)1L;
    }
    public static int EC_FLAG_FIPS_CHECKED() {
        return (int)2L;
    }
    public static int EC_FLAG_COFACTOR_ECDH() {
        return (int)4096L;
    }
    public static int EVP_PKEY_ECDH_KDF_NONE() {
        return (int)1L;
    }
    public static int EVP_PKEY_ECDH_KDF_X9_63() {
        return (int)2L;
    }
    public static int RSA_F_CHECK_PADDING_MD() {
        return (int)140L;
    }
    public static int RSA_F_ENCODE_PKCS1() {
        return (int)146L;
    }
    public static int RSA_F_FIPS_RSA_BUILTIN_KEYGEN() {
        return (int)206L;
    }
    public static int RSA_F_INT_RSA_VERIFY() {
        return (int)145L;
    }
    public static int RSA_F_OLD_RSA_PRIV_DECODE() {
        return (int)147L;
    }
    public static int RSA_F_PKEY_PSS_INIT() {
        return (int)165L;
    }
    public static int RSA_F_PKEY_RSA_CTRL() {
        return (int)143L;
    }
    public static int RSA_F_PKEY_RSA_CTRL_STR() {
        return (int)144L;
    }
    public static int RSA_F_PKEY_RSA_SIGN() {
        return (int)142L;
    }
    public static int RSA_F_PKEY_RSA_VERIFY() {
        return (int)149L;
    }
    public static int RSA_F_PKEY_RSA_VERIFYRECOVER() {
        return (int)141L;
    }
    public static int RSA_F_RSA_ALGOR_TO_MD() {
        return (int)156L;
    }
    public static int RSA_F_RSA_BUILTIN_KEYGEN() {
        return (int)129L;
    }
    public static int RSA_F_RSA_CHECK_KEY() {
        return (int)123L;
    }
    public static int RSA_F_RSA_CHECK_KEY_EX() {
        return (int)160L;
    }
    public static int RSA_F_RSA_CMS_DECRYPT() {
        return (int)159L;
    }
    public static int RSA_F_RSA_CMS_VERIFY() {
        return (int)158L;
    }
    public static int RSA_F_RSA_GENERATE_KEY_EX() {
        return (int)204L;
    }
    public static int RSA_F_RSA_GENERATE_MULTI_PRIME_KEY() {
        return (int)207L;
    }
    public static int RSA_F_RSA_ITEM_VERIFY() {
        return (int)148L;
    }
    public static int RSA_F_RSA_METH_DUP() {
        return (int)161L;
    }
    public static int RSA_F_RSA_METH_NEW() {
        return (int)162L;
    }
    public static int RSA_F_RSA_METH_SET1_NAME() {
        return (int)163L;
    }
    public static int RSA_F_RSA_MGF1_TO_MD() {
        return (int)157L;
    }
    public static int RSA_F_RSA_MULTIP_INFO_NEW() {
        return (int)166L;
    }
    public static int RSA_F_RSA_NEW_METHOD() {
        return (int)106L;
    }
    public static int RSA_F_RSA_NULL() {
        return (int)124L;
    }
    public static int RSA_F_RSA_NULL_PRIVATE_DECRYPT() {
        return (int)132L;
    }
    public static int RSA_F_RSA_NULL_PRIVATE_ENCRYPT() {
        return (int)133L;
    }
    public static int RSA_F_RSA_NULL_PUBLIC_DECRYPT() {
        return (int)134L;
    }
    public static int RSA_F_RSA_NULL_PUBLIC_ENCRYPT() {
        return (int)135L;
    }
    public static int RSA_F_RSA_OSSL_PRIVATE_DECRYPT() {
        return (int)101L;
    }
    public static int RSA_F_RSA_OSSL_PRIVATE_ENCRYPT() {
        return (int)102L;
    }
    public static int RSA_F_RSA_OSSL_PUBLIC_DECRYPT() {
        return (int)103L;
    }
    public static int RSA_F_RSA_OSSL_PUBLIC_ENCRYPT() {
        return (int)104L;
    }
    public static int RSA_F_RSA_PADDING_ADD_NONE() {
        return (int)107L;
    }
    public static int RSA_F_RSA_PADDING_ADD_PKCS1_OAEP() {
        return (int)121L;
    }
    public static int RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1() {
        return (int)154L;
    }
    public static int RSA_F_RSA_PADDING_ADD_PKCS1_PSS() {
        return (int)125L;
    }
    public static int RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1() {
        return (int)152L;
    }
    public static int RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1() {
        return (int)108L;
    }
    public static int RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2() {
        return (int)109L;
    }
    public static int RSA_F_RSA_PADDING_ADD_SSLV23() {
        return (int)110L;
    }
    public static int RSA_F_RSA_PADDING_ADD_X931() {
        return (int)127L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_NONE() {
        return (int)111L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP() {
        return (int)122L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1() {
        return (int)153L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1() {
        return (int)112L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2() {
        return (int)113L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_SSLV23() {
        return (int)114L;
    }
    public static int RSA_F_RSA_PADDING_CHECK_X931() {
        return (int)128L;
    }
    public static int RSA_F_RSA_PARAM_DECODE() {
        return (int)164L;
    }
    public static int RSA_F_RSA_PRINT() {
        return (int)115L;
    }
    public static int RSA_F_RSA_PRINT_FP() {
        return (int)116L;
    }
    public static int RSA_F_RSA_PRIV_DECODE() {
        return (int)150L;
    }
    public static int RSA_F_RSA_PRIV_ENCODE() {
        return (int)138L;
    }
    public static int RSA_F_RSA_PRIVATE_DECRYPT() {
        return (int)200L;
    }
    public static int RSA_F_RSA_PRIVATE_ENCRYPT() {
        return (int)201L;
    }
    public static int RSA_F_RSA_PSS_GET_PARAM() {
        return (int)151L;
    }
    public static int RSA_F_RSA_PSS_TO_CTX() {
        return (int)155L;
    }
    public static int RSA_F_RSA_PUB_DECODE() {
        return (int)139L;
    }
    public static int RSA_F_RSA_PUBLIC_DECRYPT() {
        return (int)202L;
    }
    public static int RSA_F_RSA_PUBLIC_ENCRYPT() {
        return (int)203L;
    }
    public static int RSA_F_RSA_SETUP_BLINDING() {
        return (int)136L;
    }
    public static int RSA_F_RSA_SET_DEFAULT_METHOD() {
        return (int)205L;
    }
    public static int RSA_F_RSA_SET_METHOD() {
        return (int)204L;
    }
    public static int RSA_F_RSA_SIGN() {
        return (int)117L;
    }
    public static int RSA_F_RSA_SIGN_ASN1_OCTET_STRING() {
        return (int)118L;
    }
    public static int RSA_F_RSA_VERIFY() {
        return (int)119L;
    }
    public static int RSA_F_RSA_VERIFY_ASN1_OCTET_STRING() {
        return (int)120L;
    }
    public static int RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1() {
        return (int)126L;
    }
    public static int RSA_F_SETUP_TBUF() {
        return (int)167L;
    }
    public static int RSA_R_ALGORITHM_MISMATCH() {
        return (int)100L;
    }
    public static int RSA_R_BAD_E_VALUE() {
        return (int)101L;
    }
    public static int RSA_R_BAD_FIXED_HEADER_DECRYPT() {
        return (int)102L;
    }
    public static int RSA_R_BAD_PAD_BYTE_COUNT() {
        return (int)103L;
    }
    public static int RSA_R_BAD_SIGNATURE() {
        return (int)104L;
    }
    public static int RSA_R_BLOCK_TYPE_IS_NOT_01() {
        return (int)106L;
    }
    public static int RSA_R_BLOCK_TYPE_IS_NOT_02() {
        return (int)107L;
    }
    public static int RSA_R_DATA_GREATER_THAN_MOD_LEN() {
        return (int)108L;
    }
    public static int RSA_R_DATA_TOO_LARGE() {
        return (int)109L;
    }
    public static int RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE() {
        return (int)110L;
    }
    public static int RSA_R_DATA_TOO_LARGE_FOR_MODULUS() {
        return (int)132L;
    }
    public static int RSA_R_DATA_TOO_SMALL() {
        return (int)111L;
    }
    public static int RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE() {
        return (int)122L;
    }
    public static int RSA_R_DIGEST_DOES_NOT_MATCH() {
        return (int)158L;
    }
    public static int RSA_R_DIGEST_NOT_ALLOWED() {
        return (int)145L;
    }
    public static int RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY() {
        return (int)112L;
    }
    public static int RSA_R_DMP1_NOT_CONGRUENT_TO_D() {
        return (int)124L;
    }
    public static int RSA_R_DMQ1_NOT_CONGRUENT_TO_D() {
        return (int)125L;
    }
    public static int RSA_R_D_E_NOT_CONGRUENT_TO_1() {
        return (int)123L;
    }
    public static int RSA_R_FIRST_OCTET_INVALID() {
        return (int)133L;
    }
    public static int RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE() {
        return (int)144L;
    }
    public static int RSA_R_INVALID_DIGEST() {
        return (int)157L;
    }
    public static int RSA_R_INVALID_DIGEST_LENGTH() {
        return (int)143L;
    }
    public static int RSA_R_INVALID_HEADER() {
        return (int)137L;
    }
    public static int RSA_R_INVALID_LABEL() {
        return (int)160L;
    }
    public static int RSA_R_INVALID_MESSAGE_LENGTH() {
        return (int)131L;
    }
    public static int RSA_R_INVALID_MGF1_MD() {
        return (int)156L;
    }
    public static int RSA_R_INVALID_MULTI_PRIME_KEY() {
        return (int)167L;
    }
    public static int RSA_R_INVALID_OAEP_PARAMETERS() {
        return (int)161L;
    }
    public static int RSA_R_INVALID_PADDING() {
        return (int)138L;
    }
    public static int RSA_R_INVALID_PADDING_MODE() {
        return (int)141L;
    }
    public static int RSA_R_INVALID_PSS_PARAMETERS() {
        return (int)149L;
    }
    public static int RSA_R_INVALID_PSS_SALTLEN() {
        return (int)146L;
    }
    public static int RSA_R_INVALID_SALT_LENGTH() {
        return (int)150L;
    }
    public static int RSA_R_INVALID_TRAILER() {
        return (int)139L;
    }
    public static int RSA_R_INVALID_X931_DIGEST() {
        return (int)142L;
    }
    public static int RSA_R_IQMP_NOT_INVERSE_OF_Q() {
        return (int)126L;
    }
    public static int RSA_R_KEY_PRIME_NUM_INVALID() {
        return (int)165L;
    }
    public static int RSA_R_KEY_SIZE_TOO_SMALL() {
        return (int)120L;
    }
    public static int RSA_R_LAST_OCTET_INVALID() {
        return (int)134L;
    }
    public static int RSA_R_MISSING_PRIVATE_KEY() {
        return (int)179L;
    }
    public static int RSA_R_MGF1_DIGEST_NOT_ALLOWED() {
        return (int)152L;
    }
    public static int RSA_R_MODULUS_TOO_LARGE() {
        return (int)105L;
    }
    public static int RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R() {
        return (int)168L;
    }
    public static int RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D() {
        return (int)169L;
    }
    public static int RSA_R_MP_R_NOT_PRIME() {
        return (int)170L;
    }
    public static int RSA_R_NO_PUBLIC_EXPONENT() {
        return (int)140L;
    }
    public static int RSA_R_NON_FIPS_RSA_METHOD() {
        return (int)200L;
    }
    public static int RSA_R_NULL_BEFORE_BLOCK_MISSING() {
        return (int)113L;
    }
    public static int RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES() {
        return (int)172L;
    }
    public static int RSA_R_N_DOES_NOT_EQUAL_P_Q() {
        return (int)127L;
    }
    public static int RSA_R_OAEP_DECODING_ERROR() {
        return (int)121L;
    }
    public static int RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE() {
        return (int)201L;
    }
    public static int RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE() {
        return (int)148L;
    }
    public static int RSA_R_PADDING_CHECK_FAILED() {
        return (int)114L;
    }
    public static int RSA_R_PKCS_DECODING_ERROR() {
        return (int)159L;
    }
    public static int RSA_R_PSS_SALTLEN_TOO_SMALL() {
        return (int)164L;
    }
    public static int RSA_R_P_NOT_PRIME() {
        return (int)128L;
    }
    public static int RSA_R_Q_NOT_PRIME() {
        return (int)129L;
    }
    public static int RSA_R_RSA_OPERATIONS_NOT_SUPPORTED() {
        return (int)130L;
    }
    public static int RSA_R_SLEN_CHECK_FAILED() {
        return (int)136L;
    }
    public static int RSA_R_SLEN_RECOVERY_FAILED() {
        return (int)135L;
    }
    public static int RSA_R_SSLV3_ROLLBACK_ATTACK() {
        return (int)115L;
    }
    public static int RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD() {
        return (int)116L;
    }
    public static int RSA_R_UNKNOWN_ALGORITHM_TYPE() {
        return (int)117L;
    }
    public static int RSA_R_UNKNOWN_DIGEST() {
        return (int)166L;
    }
    public static int RSA_R_UNKNOWN_MASK_DIGEST() {
        return (int)151L;
    }
    public static int RSA_R_UNKNOWN_PADDING_TYPE() {
        return (int)118L;
    }
    public static int RSA_R_UNSUPPORTED_ENCRYPTION_TYPE() {
        return (int)162L;
    }
    public static int RSA_R_UNSUPPORTED_LABEL_SOURCE() {
        return (int)163L;
    }
    public static int RSA_R_UNSUPPORTED_MASK_ALGORITHM() {
        return (int)153L;
    }
    public static int RSA_R_UNSUPPORTED_MASK_PARAMETER() {
        return (int)154L;
    }
    public static int RSA_R_UNSUPPORTED_PARAMETERS() {
        return (int)202L;
    }
    public static int RSA_R_UNSUPPORTED_SIGNATURE_TYPE() {
        return (int)155L;
    }
    public static int RSA_R_VALUE_MISSING() {
        return (int)147L;
    }
    public static int RSA_R_WRONG_SIGNATURE_LENGTH() {
        return (int)119L;
    }
    public static int OPENSSL_RSA_MAX_MODULUS_BITS() {
        return (int)16384L;
    }
    public static int OPENSSL_RSA_FIPS_MIN_MODULUS_BITS() {
        return (int)1024L;
    }
    public static int OPENSSL_RSA_SMALL_MODULUS_BITS() {
        return (int)3072L;
    }
    public static int OPENSSL_RSA_MAX_PUBEXP_BITS() {
        return (int)64L;
    }
    public static int RSA_ASN1_VERSION_DEFAULT() {
        return (int)0L;
    }
    public static int RSA_ASN1_VERSION_MULTI() {
        return (int)1L;
    }
    public static int RSA_DEFAULT_PRIME_NUM() {
        return (int)2L;
    }
    public static int RSA_METHOD_FLAG_NO_CHECK() {
        return (int)1L;
    }
    public static int RSA_FLAG_CACHE_PUBLIC() {
        return (int)2L;
    }
    public static int RSA_FLAG_CACHE_PRIVATE() {
        return (int)4L;
    }
    public static int RSA_FLAG_BLINDING() {
        return (int)8L;
    }
    public static int RSA_FLAG_THREAD_SAFE() {
        return (int)16L;
    }
    public static int RSA_FLAG_EXT_PKEY() {
        return (int)32L;
    }
    public static int RSA_FLAG_NO_BLINDING() {
        return (int)128L;
    }
    public static int RSA_FLAG_NO_CONSTTIME() {
        return (int)0L;
    }
    public static int RSA_PKCS1_PADDING() {
        return (int)1L;
    }
    public static int RSA_SSLV23_PADDING() {
        return (int)2L;
    }
    public static int RSA_NO_PADDING() {
        return (int)3L;
    }
    public static int RSA_PKCS1_OAEP_PADDING() {
        return (int)4L;
    }
    public static int RSA_X931_PADDING() {
        return (int)5L;
    }
    public static int RSA_PKCS1_PSS_PADDING() {
        return (int)6L;
    }
    public static int RSA_PKCS1_PADDING_SIZE() {
        return (int)11L;
    }
    public static int RSA_FLAG_FIPS_METHOD() {
        return (int)1024L;
    }
    public static int RSA_FLAG_NON_FIPS_ALLOW() {
        return (int)1024L;
    }
    public static int RSA_FLAG_CHECKED() {
        return (int)2048L;
    }
    public static int DH_F_COMPUTE_KEY() {
        return (int)102L;
    }
    public static int DH_F_DHPARAMS_PRINT_FP() {
        return (int)101L;
    }
    public static int DH_F_DH_BUILTIN_GENPARAMS() {
        return (int)106L;
    }
    public static int DH_F_DH_CHECK_EX() {
        return (int)121L;
    }
    public static int DH_F_DH_CHECK_PARAMS_EX() {
        return (int)122L;
    }
    public static int DH_F_DH_CHECK_PUB_KEY_EX() {
        return (int)123L;
    }
    public static int DH_F_DH_CMS_DECRYPT() {
        return (int)114L;
    }
    public static int DH_F_DH_CMS_SET_PEERKEY() {
        return (int)115L;
    }
    public static int DH_F_DH_CMS_SET_SHARED_INFO() {
        return (int)116L;
    }
    public static int DH_F_DH_COMPUTE_KEY() {
        return (int)203L;
    }
    public static int DH_F_DH_GENERATE_KEY() {
        return (int)202L;
    }
    public static int DH_F_DH_GENERATE_PARAMETERS_EX() {
        return (int)201L;
    }
    public static int DH_F_DH_METH_DUP() {
        return (int)117L;
    }
    public static int DH_F_DH_METH_NEW() {
        return (int)118L;
    }
    public static int DH_F_DH_METH_SET1_NAME() {
        return (int)119L;
    }
    public static int DH_F_DH_NEW_BY_NID() {
        return (int)104L;
    }
    public static int DH_F_DH_NEW_METHOD() {
        return (int)105L;
    }
    public static int DH_F_DH_PARAM_DECODE() {
        return (int)107L;
    }
    public static int DH_F_DH_PKEY_PUBLIC_CHECK() {
        return (int)124L;
    }
    public static int DH_F_DH_PRIV_DECODE() {
        return (int)110L;
    }
    public static int DH_F_DH_PRIV_ENCODE() {
        return (int)111L;
    }
    public static int DH_F_DH_PUB_DECODE() {
        return (int)108L;
    }
    public static int DH_F_DH_PUB_ENCODE() {
        return (int)109L;
    }
    public static int DH_F_DO_DH_PRINT() {
        return (int)100L;
    }
    public static int DH_F_GENERATE_KEY() {
        return (int)103L;
    }
    public static int DH_F_PKEY_DH_CTRL_STR() {
        return (int)120L;
    }
    public static int DH_F_PKEY_DH_DERIVE() {
        return (int)112L;
    }
    public static int DH_F_PKEY_DH_INIT() {
        return (int)125L;
    }
    public static int DH_F_PKEY_DH_KEYGEN() {
        return (int)113L;
    }
    public static int DH_R_BAD_GENERATOR() {
        return (int)101L;
    }
    public static int DH_R_BN_DECODE_ERROR() {
        return (int)109L;
    }
    public static int DH_R_BN_ERROR() {
        return (int)106L;
    }
    public static int DH_R_CHECK_INVALID_J_VALUE() {
        return (int)115L;
    }
    public static int DH_R_CHECK_INVALID_Q_VALUE() {
        return (int)116L;
    }
    public static int DH_R_CHECK_PUBKEY_INVALID() {
        return (int)122L;
    }
    public static int DH_R_CHECK_PUBKEY_TOO_LARGE() {
        return (int)123L;
    }
    public static int DH_R_CHECK_PUBKEY_TOO_SMALL() {
        return (int)124L;
    }
    public static int DH_R_CHECK_P_NOT_PRIME() {
        return (int)117L;
    }
    public static int DH_R_CHECK_P_NOT_SAFE_PRIME() {
        return (int)118L;
    }
    public static int DH_R_CHECK_Q_NOT_PRIME() {
        return (int)119L;
    }
    public static int DH_R_DECODE_ERROR() {
        return (int)104L;
    }
    public static int DH_R_INVALID_PARAMETER_NAME() {
        return (int)110L;
    }
    public static int DH_R_INVALID_PARAMETER_NID() {
        return (int)114L;
    }
    public static int DH_R_INVALID_PUBKEY() {
        return (int)102L;
    }
    public static int DH_R_KDF_PARAMETER_ERROR() {
        return (int)112L;
    }
    public static int DH_R_KEY_SIZE_TOO_SMALL() {
        return (int)201L;
    }
    public static int DH_R_KEYS_NOT_SET() {
        return (int)108L;
    }
    public static int DH_R_MISSING_PUBKEY() {
        return (int)125L;
    }
    public static int DH_R_MODULUS_TOO_LARGE() {
        return (int)103L;
    }
    public static int DH_R_NOT_SUITABLE_GENERATOR() {
        return (int)120L;
    }
    public static int DH_R_NO_PARAMETERS_SET() {
        return (int)107L;
    }
    public static int DH_R_NO_PRIVATE_VALUE() {
        return (int)100L;
    }
    public static int DH_R_NON_FIPS_METHOD() {
        return (int)202L;
    }
    public static int DH_R_PARAMETER_ENCODING_ERROR() {
        return (int)105L;
    }
    public static int DH_R_PEER_KEY_ERROR() {
        return (int)111L;
    }
    public static int DH_R_SHARED_INFO_ERROR() {
        return (int)113L;
    }
    public static int DH_R_UNABLE_TO_CHECK_GENERATOR() {
        return (int)121L;
    }
    public static int OPENSSL_DH_MAX_MODULUS_BITS() {
        return (int)10000L;
    }
    public static int OPENSSL_DH_FIPS_MIN_MODULUS_BITS() {
        return (int)1024L;
    }
    public static int OPENSSL_DH_FIPS_MIN_MODULUS_BITS_GEN() {
        return (int)2048L;
    }
    public static int DH_FLAG_CACHE_MONT_P() {
        return (int)1L;
    }
}


