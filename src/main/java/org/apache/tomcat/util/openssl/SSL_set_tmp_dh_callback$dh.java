// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface SSL_set_tmp_dh_callback$dh {

    jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
    static CLinker.UpcallStub allocate(SSL_set_tmp_dh_callback$dh fi) {
        return RuntimeHelper.upcallStub(SSL_set_tmp_dh_callback$dh.class, fi, constants$853.SSL_set_tmp_dh_callback$dh$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;");
    }
    static CLinker.UpcallStub allocate(SSL_set_tmp_dh_callback$dh fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(SSL_set_tmp_dh_callback$dh.class, fi, constants$853.SSL_set_tmp_dh_callback$dh$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;", scope);
    }
    static SSL_set_tmp_dh_callback$dh ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
            try {
                return (jdk.incubator.foreign.MemoryAddress)constants$853.SSL_set_tmp_dh_callback$dh$MH.invokeExact((Addressable)addr, x0, x1, x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


