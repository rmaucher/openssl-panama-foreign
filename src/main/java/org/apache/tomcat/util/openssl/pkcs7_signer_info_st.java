// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class pkcs7_signer_info_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("version"),
        ADDRESS.withName("issuer_and_serial"),
        ADDRESS.withName("digest_alg"),
        ADDRESS.withName("auth_attr"),
        ADDRESS.withName("digest_enc_alg"),
        ADDRESS.withName("enc_digest"),
        ADDRESS.withName("unauth_attr"),
        ADDRESS.withName("pkey")
    ).withName("pkcs7_signer_info_st");
    public static MemoryLayout $LAYOUT() {
        return pkcs7_signer_info_st.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return pkcs7_signer_info_st.version$VH;
    }
    public static MemoryAddress version$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.version$VH.set(seg, x);
    }
    public static MemoryAddress version$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle issuer_and_serial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("issuer_and_serial"));
    public static VarHandle issuer_and_serial$VH() {
        return pkcs7_signer_info_st.issuer_and_serial$VH;
    }
    public static MemoryAddress issuer_and_serial$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.issuer_and_serial$VH.get(seg);
    }
    public static void issuer_and_serial$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.issuer_and_serial$VH.set(seg, x);
    }
    public static MemoryAddress issuer_and_serial$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.issuer_and_serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void issuer_and_serial$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.issuer_and_serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle digest_alg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("digest_alg"));
    public static VarHandle digest_alg$VH() {
        return pkcs7_signer_info_st.digest_alg$VH;
    }
    public static MemoryAddress digest_alg$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.digest_alg$VH.get(seg);
    }
    public static void digest_alg$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.digest_alg$VH.set(seg, x);
    }
    public static MemoryAddress digest_alg$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.digest_alg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void digest_alg$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.digest_alg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle auth_attr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("auth_attr"));
    public static VarHandle auth_attr$VH() {
        return pkcs7_signer_info_st.auth_attr$VH;
    }
    public static MemoryAddress auth_attr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.auth_attr$VH.get(seg);
    }
    public static void auth_attr$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.auth_attr$VH.set(seg, x);
    }
    public static MemoryAddress auth_attr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.auth_attr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void auth_attr$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.auth_attr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle digest_enc_alg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("digest_enc_alg"));
    public static VarHandle digest_enc_alg$VH() {
        return pkcs7_signer_info_st.digest_enc_alg$VH;
    }
    public static MemoryAddress digest_enc_alg$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.digest_enc_alg$VH.get(seg);
    }
    public static void digest_enc_alg$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.digest_enc_alg$VH.set(seg, x);
    }
    public static MemoryAddress digest_enc_alg$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.digest_enc_alg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void digest_enc_alg$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.digest_enc_alg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enc_digest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_digest"));
    public static VarHandle enc_digest$VH() {
        return pkcs7_signer_info_st.enc_digest$VH;
    }
    public static MemoryAddress enc_digest$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.enc_digest$VH.get(seg);
    }
    public static void enc_digest$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.enc_digest$VH.set(seg, x);
    }
    public static MemoryAddress enc_digest$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.enc_digest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_digest$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.enc_digest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unauth_attr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unauth_attr"));
    public static VarHandle unauth_attr$VH() {
        return pkcs7_signer_info_st.unauth_attr$VH;
    }
    public static MemoryAddress unauth_attr$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.unauth_attr$VH.get(seg);
    }
    public static void unauth_attr$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.unauth_attr$VH.set(seg, x);
    }
    public static MemoryAddress unauth_attr$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.unauth_attr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unauth_attr$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.unauth_attr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pkey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pkey"));
    public static VarHandle pkey$VH() {
        return pkcs7_signer_info_st.pkey$VH;
    }
    public static MemoryAddress pkey$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.pkey$VH.get(seg);
    }
    public static void pkey$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_signer_info_st.pkey$VH.set(seg, x);
    }
    public static MemoryAddress pkey$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_signer_info_st.pkey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pkey$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_signer_info_st.pkey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


