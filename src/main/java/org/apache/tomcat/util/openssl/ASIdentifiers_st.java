// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class ASIdentifiers_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("asnum"),
        ADDRESS.withName("rdi")
    ).withName("ASIdentifiers_st");
    public static MemoryLayout $LAYOUT() {
        return ASIdentifiers_st.$struct$LAYOUT;
    }
    static final VarHandle asnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("asnum"));
    public static VarHandle asnum$VH() {
        return ASIdentifiers_st.asnum$VH;
    }
    public static MemoryAddress asnum$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ASIdentifiers_st.asnum$VH.get(seg);
    }
    public static void asnum$set( MemorySegment seg, MemoryAddress x) {
        ASIdentifiers_st.asnum$VH.set(seg, x);
    }
    public static MemoryAddress asnum$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ASIdentifiers_st.asnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void asnum$set(MemorySegment seg, long index, MemoryAddress x) {
        ASIdentifiers_st.asnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rdi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rdi"));
    public static VarHandle rdi$VH() {
        return ASIdentifiers_st.rdi$VH;
    }
    public static MemoryAddress rdi$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ASIdentifiers_st.rdi$VH.get(seg);
    }
    public static void rdi$set( MemorySegment seg, MemoryAddress x) {
        ASIdentifiers_st.rdi$VH.set(seg, x);
    }
    public static MemoryAddress rdi$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ASIdentifiers_st.rdi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rdi$set(MemorySegment seg, long index, MemoryAddress x) {
        ASIdentifiers_st.rdi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


