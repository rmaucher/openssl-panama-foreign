/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$24 {

    static final FunctionDescriptor PKCS12_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle PKCS12_free$MH = RuntimeHelper.downcallHandle(
        "PKCS12_free",
        constants$24.PKCS12_free$FUNC, false
    );
    static final FunctionDescriptor PKCS12_parse$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle PKCS12_parse$MH = RuntimeHelper.downcallHandle(
        "PKCS12_parse",
        constants$24.PKCS12_parse$FUNC, false
    );
    static final FunctionDescriptor d2i_PKCS12_bio$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle d2i_PKCS12_bio$MH = RuntimeHelper.downcallHandle(
        "d2i_PKCS12_bio",
        constants$24.d2i_PKCS12_bio$FUNC, false
    );
    static final FunctionDescriptor RAND_seed$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle RAND_seed$MH = RuntimeHelper.downcallHandle(
        "RAND_seed",
        constants$24.RAND_seed$FUNC, false
    );
    static final FunctionDescriptor RAND_load_file$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle RAND_load_file$MH = RuntimeHelper.downcallHandle(
        "RAND_load_file",
        constants$24.RAND_load_file$FUNC, false
    );
    static final FunctionDescriptor X509_check_issued$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle X509_check_issued$MH = RuntimeHelper.downcallHandle(
        "X509_check_issued",
        constants$24.X509_check_issued$FUNC, false
    );
}


