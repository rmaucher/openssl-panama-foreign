// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$1098 {

    static final FunctionDescriptor ENGINE_unregister_DH$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle ENGINE_unregister_DH$MH = RuntimeHelper.downcallHandle(
        "ENGINE_unregister_DH",
        constants$1098.ENGINE_unregister_DH$FUNC, false
    );
    static final FunctionDescriptor ENGINE_register_all_DH$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle ENGINE_register_all_DH$MH = RuntimeHelper.downcallHandle(
        "ENGINE_register_all_DH",
        constants$1098.ENGINE_register_all_DH$FUNC, false
    );
    static final FunctionDescriptor ENGINE_register_RAND$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle ENGINE_register_RAND$MH = RuntimeHelper.downcallHandle(
        "ENGINE_register_RAND",
        constants$1098.ENGINE_register_RAND$FUNC, false
    );
    static final FunctionDescriptor ENGINE_unregister_RAND$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle ENGINE_unregister_RAND$MH = RuntimeHelper.downcallHandle(
        "ENGINE_unregister_RAND",
        constants$1098.ENGINE_unregister_RAND$FUNC, false
    );
    static final FunctionDescriptor ENGINE_register_all_RAND$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle ENGINE_register_all_RAND$MH = RuntimeHelper.downcallHandle(
        "ENGINE_register_all_RAND",
        constants$1098.ENGINE_register_all_RAND$FUNC, false
    );
    static final FunctionDescriptor ENGINE_register_ciphers$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle ENGINE_register_ciphers$MH = RuntimeHelper.downcallHandle(
        "ENGINE_register_ciphers",
        constants$1098.ENGINE_register_ciphers$FUNC, false
    );
}


