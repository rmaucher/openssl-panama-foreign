// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$660 {

    static final FunctionDescriptor X509_get0_trust_objects$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle X509_get0_trust_objects$MH = RuntimeHelper.downcallHandle(
        "X509_get0_trust_objects",
        constants$660.X509_get0_trust_objects$FUNC, false
    );
    static final FunctionDescriptor X509_get0_reject_objects$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle X509_get0_reject_objects$MH = RuntimeHelper.downcallHandle(
        "X509_get0_reject_objects",
        constants$660.X509_get0_reject_objects$FUNC, false
    );
    static final FunctionDescriptor X509_REVOKED_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle X509_REVOKED_new$MH = RuntimeHelper.downcallHandle(
        "X509_REVOKED_new",
        constants$660.X509_REVOKED_new$FUNC, false
    );
    static final FunctionDescriptor X509_REVOKED_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle X509_REVOKED_free$MH = RuntimeHelper.downcallHandle(
        "X509_REVOKED_free",
        constants$660.X509_REVOKED_free$FUNC, false
    );
    static final FunctionDescriptor d2i_X509_REVOKED$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle d2i_X509_REVOKED$MH = RuntimeHelper.downcallHandle(
        "d2i_X509_REVOKED",
        constants$660.d2i_X509_REVOKED$FUNC, false
    );
    static final FunctionDescriptor i2d_X509_REVOKED$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle i2d_X509_REVOKED$MH = RuntimeHelper.downcallHandle(
        "i2d_X509_REVOKED",
        constants$660.i2d_X509_REVOKED$FUNC, false
    );
}


