// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class X509_info_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("x509"),
        ADDRESS.withName("crl"),
        ADDRESS.withName("x_pkey"),
        MemoryLayout.structLayout(
            ADDRESS.withName("cipher"),
            MemoryLayout.sequenceLayout(16, JAVA_BYTE).withName("iv")
        ).withName("enc_cipher"),
        JAVA_INT.withName("enc_len"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("enc_data")
    ).withName("X509_info_st");
    public static MemoryLayout $LAYOUT() {
        return X509_info_st.$struct$LAYOUT;
    }
    static final VarHandle x509$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x509"));
    public static VarHandle x509$VH() {
        return X509_info_st.x509$VH;
    }
    public static MemoryAddress x509$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.x509$VH.get(seg);
    }
    public static void x509$set( MemorySegment seg, MemoryAddress x) {
        X509_info_st.x509$VH.set(seg, x);
    }
    public static MemoryAddress x509$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.x509$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x509$set(MemorySegment seg, long index, MemoryAddress x) {
        X509_info_st.x509$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crl"));
    public static VarHandle crl$VH() {
        return X509_info_st.crl$VH;
    }
    public static MemoryAddress crl$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.crl$VH.get(seg);
    }
    public static void crl$set( MemorySegment seg, MemoryAddress x) {
        X509_info_st.crl$VH.set(seg, x);
    }
    public static MemoryAddress crl$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.crl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crl$set(MemorySegment seg, long index, MemoryAddress x) {
        X509_info_st.crl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x_pkey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x_pkey"));
    public static VarHandle x_pkey$VH() {
        return X509_info_st.x_pkey$VH;
    }
    public static MemoryAddress x_pkey$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.x_pkey$VH.get(seg);
    }
    public static void x_pkey$set( MemorySegment seg, MemoryAddress x) {
        X509_info_st.x_pkey$VH.set(seg, x);
    }
    public static MemoryAddress x_pkey$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.x_pkey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x_pkey$set(MemorySegment seg, long index, MemoryAddress x) {
        X509_info_st.x_pkey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment enc_cipher$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    static final VarHandle enc_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_len"));
    public static VarHandle enc_len$VH() {
        return X509_info_st.enc_len$VH;
    }
    public static int enc_len$get(MemorySegment seg) {
        return (int)X509_info_st.enc_len$VH.get(seg);
    }
    public static void enc_len$set( MemorySegment seg, int x) {
        X509_info_st.enc_len$VH.set(seg, x);
    }
    public static int enc_len$get(MemorySegment seg, long index) {
        return (int)X509_info_st.enc_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_len$set(MemorySegment seg, long index, int x) {
        X509_info_st.enc_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enc_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_data"));
    public static VarHandle enc_data$VH() {
        return X509_info_st.enc_data$VH;
    }
    public static MemoryAddress enc_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.enc_data$VH.get(seg);
    }
    public static void enc_data$set( MemorySegment seg, MemoryAddress x) {
        X509_info_st.enc_data$VH.set(seg, x);
    }
    public static MemoryAddress enc_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509_info_st.enc_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_data$set(MemorySegment seg, long index, MemoryAddress x) {
        X509_info_st.enc_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


