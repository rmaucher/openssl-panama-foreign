// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface ASN1_d2i_bio$xnew {

    jdk.incubator.foreign.MemoryAddress apply();
    static NativeSymbol allocate(ASN1_d2i_bio$xnew fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(ASN1_d2i_bio$xnew.class, fi, constants$240.ASN1_d2i_bio$xnew$FUNC, "()Ljdk/incubator/foreign/MemoryAddress;", scope);
    }
    static ASN1_d2i_bio$xnew ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("ASN1_d2i_bio$xnew::" + Long.toHexString(addr.toRawLongValue()), addr, scope);return () -> {
            try {
                return (jdk.incubator.foreign.MemoryAddress)constants$240.ASN1_d2i_bio$xnew$MH.invokeExact(symbol);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


