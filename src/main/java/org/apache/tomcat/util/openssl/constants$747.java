// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$747 {

    static final FunctionDescriptor CT_POLICY_EVAL_CTX_get_time$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS
    );
    static final MethodHandle CT_POLICY_EVAL_CTX_get_time$MH = RuntimeHelper.downcallHandle(
        "CT_POLICY_EVAL_CTX_get_time",
        constants$747.CT_POLICY_EVAL_CTX_get_time$FUNC, false
    );
    static final FunctionDescriptor CT_POLICY_EVAL_CTX_set_time$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle CT_POLICY_EVAL_CTX_set_time$MH = RuntimeHelper.downcallHandle(
        "CT_POLICY_EVAL_CTX_set_time",
        constants$747.CT_POLICY_EVAL_CTX_set_time$FUNC, false
    );
    static final FunctionDescriptor SCT_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle SCT_new$MH = RuntimeHelper.downcallHandle(
        "SCT_new",
        constants$747.SCT_new$FUNC, false
    );
    static final FunctionDescriptor SCT_new_from_base64$FUNC = FunctionDescriptor.of(ADDRESS,
        JAVA_BYTE,
        ADDRESS,
        JAVA_INT,
        JAVA_LONG,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle SCT_new_from_base64$MH = RuntimeHelper.downcallHandle(
        "SCT_new_from_base64",
        constants$747.SCT_new_from_base64$FUNC, false
    );
    static final FunctionDescriptor SCT_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle SCT_free$MH = RuntimeHelper.downcallHandle(
        "SCT_free",
        constants$747.SCT_free$FUNC, false
    );
    static final FunctionDescriptor SCT_LIST_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle SCT_LIST_free$MH = RuntimeHelper.downcallHandle(
        "SCT_LIST_free",
        constants$747.SCT_LIST_free$FUNC, false
    );
}


