// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface EVP_PKEY_asn1_set_ctrl$pkey_ctrl {

    int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3);
    static CLinker.UpcallStub allocate(EVP_PKEY_asn1_set_ctrl$pkey_ctrl fi) {
        return RuntimeHelper.upcallStub(EVP_PKEY_asn1_set_ctrl$pkey_ctrl.class, fi, constants$339.EVP_PKEY_asn1_set_ctrl$pkey_ctrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I");
    }
    static CLinker.UpcallStub allocate(EVP_PKEY_asn1_set_ctrl$pkey_ctrl fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(EVP_PKEY_asn1_set_ctrl$pkey_ctrl.class, fi, constants$339.EVP_PKEY_asn1_set_ctrl$pkey_ctrl$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static EVP_PKEY_asn1_set_ctrl$pkey_ctrl ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, int x1, long x2, jdk.incubator.foreign.MemoryAddress x3) -> {
            try {
                return (int)constants$339.EVP_PKEY_asn1_set_ctrl$pkey_ctrl$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


