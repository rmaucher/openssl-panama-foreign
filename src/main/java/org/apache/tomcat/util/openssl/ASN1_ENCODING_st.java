// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class ASN1_ENCODING_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("enc"),
        JAVA_LONG.withName("len"),
        JAVA_INT.withName("modified"),
        MemoryLayout.paddingLayout(32)
    ).withName("ASN1_ENCODING_st");
    public static MemoryLayout $LAYOUT() {
        return ASN1_ENCODING_st.$struct$LAYOUT;
    }
    static final VarHandle enc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc"));
    public static VarHandle enc$VH() {
        return ASN1_ENCODING_st.enc$VH;
    }
    public static MemoryAddress enc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ASN1_ENCODING_st.enc$VH.get(seg);
    }
    public static void enc$set( MemorySegment seg, MemoryAddress x) {
        ASN1_ENCODING_st.enc$VH.set(seg, x);
    }
    public static MemoryAddress enc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ASN1_ENCODING_st.enc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc$set(MemorySegment seg, long index, MemoryAddress x) {
        ASN1_ENCODING_st.enc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("len"));
    public static VarHandle len$VH() {
        return ASN1_ENCODING_st.len$VH;
    }
    public static long len$get(MemorySegment seg) {
        return (long)ASN1_ENCODING_st.len$VH.get(seg);
    }
    public static void len$set( MemorySegment seg, long x) {
        ASN1_ENCODING_st.len$VH.set(seg, x);
    }
    public static long len$get(MemorySegment seg, long index) {
        return (long)ASN1_ENCODING_st.len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void len$set(MemorySegment seg, long index, long x) {
        ASN1_ENCODING_st.len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle modified$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("modified"));
    public static VarHandle modified$VH() {
        return ASN1_ENCODING_st.modified$VH;
    }
    public static int modified$get(MemorySegment seg) {
        return (int)ASN1_ENCODING_st.modified$VH.get(seg);
    }
    public static void modified$set( MemorySegment seg, int x) {
        ASN1_ENCODING_st.modified$VH.set(seg, x);
    }
    public static int modified$get(MemorySegment seg, long index) {
        return (int)ASN1_ENCODING_st.modified$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void modified$set(MemorySegment seg, long index, int x) {
        ASN1_ENCODING_st.modified$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


