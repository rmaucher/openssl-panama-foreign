// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$784 {

    static final FunctionDescriptor sk_SSL_CIPHER_copyfunc$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle sk_SSL_CIPHER_copyfunc$MH = RuntimeHelper.downcallHandle(
        constants$784.sk_SSL_CIPHER_copyfunc$FUNC, false
    );
    static final FunctionDescriptor sk_SSL_CIPHER_num$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle sk_SSL_CIPHER_num$MH = RuntimeHelper.downcallHandle(
        "sk_SSL_CIPHER_num",
        constants$784.sk_SSL_CIPHER_num$FUNC, false
    );
    static final FunctionDescriptor sk_SSL_CIPHER_value$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle sk_SSL_CIPHER_value$MH = RuntimeHelper.downcallHandle(
        "sk_SSL_CIPHER_value",
        constants$784.sk_SSL_CIPHER_value$FUNC, false
    );
    static final FunctionDescriptor sk_SSL_CIPHER_new$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle sk_SSL_CIPHER_new$MH = RuntimeHelper.downcallHandle(
        "sk_SSL_CIPHER_new",
        constants$784.sk_SSL_CIPHER_new$FUNC, false
    );
    static final FunctionDescriptor sk_SSL_CIPHER_new_null$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle sk_SSL_CIPHER_new_null$MH = RuntimeHelper.downcallHandle(
        "sk_SSL_CIPHER_new_null",
        constants$784.sk_SSL_CIPHER_new_null$FUNC, false
    );
    static final FunctionDescriptor sk_SSL_CIPHER_new_reserve$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle sk_SSL_CIPHER_new_reserve$MH = RuntimeHelper.downcallHandle(
        "sk_SSL_CIPHER_new_reserve",
        constants$784.sk_SSL_CIPHER_new_reserve$FUNC, false
    );
}


