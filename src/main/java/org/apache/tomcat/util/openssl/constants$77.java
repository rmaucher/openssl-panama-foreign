// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$77 {

    static final FunctionDescriptor OPENSSL_fork_child$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle OPENSSL_fork_child$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_fork_child",
        constants$77.OPENSSL_fork_child$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_gmtime$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_gmtime$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_gmtime",
        constants$77.OPENSSL_gmtime$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_gmtime_adj$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_INT,
        JAVA_LONG
    );
    static final MethodHandle OPENSSL_gmtime_adj$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_gmtime_adj",
        constants$77.OPENSSL_gmtime_adj$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_gmtime_diff$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_gmtime_diff$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_gmtime_diff",
        constants$77.OPENSSL_gmtime_diff$FUNC, false
    );
    static final FunctionDescriptor CRYPTO_memcmp$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle CRYPTO_memcmp$MH = RuntimeHelper.downcallHandle(
        "CRYPTO_memcmp",
        constants$77.CRYPTO_memcmp$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_cleanup$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle OPENSSL_cleanup$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_cleanup",
        constants$77.OPENSSL_cleanup$FUNC, false
    );
}


