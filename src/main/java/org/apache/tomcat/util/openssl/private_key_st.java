// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class private_key_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("version"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("enc_algor"),
        ADDRESS.withName("enc_pkey"),
        ADDRESS.withName("dec_pkey"),
        JAVA_INT.withName("key_length"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("key_data"),
        JAVA_INT.withName("key_free"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            ADDRESS.withName("cipher"),
            MemoryLayout.sequenceLayout(16, JAVA_BYTE).withName("iv")
        ).withName("cipher")
    ).withName("private_key_st");
    public static MemoryLayout $LAYOUT() {
        return private_key_st.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return private_key_st.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)private_key_st.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        private_key_st.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)private_key_st.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        private_key_st.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enc_algor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_algor"));
    public static VarHandle enc_algor$VH() {
        return private_key_st.enc_algor$VH;
    }
    public static MemoryAddress enc_algor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.enc_algor$VH.get(seg);
    }
    public static void enc_algor$set( MemorySegment seg, MemoryAddress x) {
        private_key_st.enc_algor$VH.set(seg, x);
    }
    public static MemoryAddress enc_algor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.enc_algor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_algor$set(MemorySegment seg, long index, MemoryAddress x) {
        private_key_st.enc_algor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enc_pkey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_pkey"));
    public static VarHandle enc_pkey$VH() {
        return private_key_st.enc_pkey$VH;
    }
    public static MemoryAddress enc_pkey$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.enc_pkey$VH.get(seg);
    }
    public static void enc_pkey$set( MemorySegment seg, MemoryAddress x) {
        private_key_st.enc_pkey$VH.set(seg, x);
    }
    public static MemoryAddress enc_pkey$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.enc_pkey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_pkey$set(MemorySegment seg, long index, MemoryAddress x) {
        private_key_st.enc_pkey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dec_pkey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dec_pkey"));
    public static VarHandle dec_pkey$VH() {
        return private_key_st.dec_pkey$VH;
    }
    public static MemoryAddress dec_pkey$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.dec_pkey$VH.get(seg);
    }
    public static void dec_pkey$set( MemorySegment seg, MemoryAddress x) {
        private_key_st.dec_pkey$VH.set(seg, x);
    }
    public static MemoryAddress dec_pkey$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.dec_pkey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dec_pkey$set(MemorySegment seg, long index, MemoryAddress x) {
        private_key_st.dec_pkey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key_length"));
    public static VarHandle key_length$VH() {
        return private_key_st.key_length$VH;
    }
    public static int key_length$get(MemorySegment seg) {
        return (int)private_key_st.key_length$VH.get(seg);
    }
    public static void key_length$set( MemorySegment seg, int x) {
        private_key_st.key_length$VH.set(seg, x);
    }
    public static int key_length$get(MemorySegment seg, long index) {
        return (int)private_key_st.key_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key_length$set(MemorySegment seg, long index, int x) {
        private_key_st.key_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key_data"));
    public static VarHandle key_data$VH() {
        return private_key_st.key_data$VH;
    }
    public static MemoryAddress key_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.key_data$VH.get(seg);
    }
    public static void key_data$set( MemorySegment seg, MemoryAddress x) {
        private_key_st.key_data$VH.set(seg, x);
    }
    public static MemoryAddress key_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)private_key_st.key_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key_data$set(MemorySegment seg, long index, MemoryAddress x) {
        private_key_st.key_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key_free"));
    public static VarHandle key_free$VH() {
        return private_key_st.key_free$VH;
    }
    public static int key_free$get(MemorySegment seg) {
        return (int)private_key_st.key_free$VH.get(seg);
    }
    public static void key_free$set( MemorySegment seg, int x) {
        private_key_st.key_free$VH.set(seg, x);
    }
    public static int key_free$get(MemorySegment seg, long index) {
        return (int)private_key_st.key_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key_free$set(MemorySegment seg, long index, int x) {
        private_key_st.key_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cipher$slice(MemorySegment seg) {
        return seg.asSlice(56, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


