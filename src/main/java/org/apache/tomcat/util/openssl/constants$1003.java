// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$1003 {

    static final FunctionDescriptor i2d_DIST_POINT$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle i2d_DIST_POINT$MH = RuntimeHelper.downcallHandle(
        "i2d_DIST_POINT",
        constants$1003.i2d_DIST_POINT$FUNC, false
    );
    static final FunctionDescriptor DIST_POINT_NAME_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle DIST_POINT_NAME_new$MH = RuntimeHelper.downcallHandle(
        "DIST_POINT_NAME_new",
        constants$1003.DIST_POINT_NAME_new$FUNC, false
    );
    static final FunctionDescriptor DIST_POINT_NAME_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle DIST_POINT_NAME_free$MH = RuntimeHelper.downcallHandle(
        "DIST_POINT_NAME_free",
        constants$1003.DIST_POINT_NAME_free$FUNC, false
    );
    static final FunctionDescriptor d2i_DIST_POINT_NAME$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle d2i_DIST_POINT_NAME$MH = RuntimeHelper.downcallHandle(
        "d2i_DIST_POINT_NAME",
        constants$1003.d2i_DIST_POINT_NAME$FUNC, false
    );
    static final FunctionDescriptor i2d_DIST_POINT_NAME$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle i2d_DIST_POINT_NAME$MH = RuntimeHelper.downcallHandle(
        "i2d_DIST_POINT_NAME",
        constants$1003.i2d_DIST_POINT_NAME$FUNC, false
    );
    static final FunctionDescriptor ISSUING_DIST_POINT_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle ISSUING_DIST_POINT_new$MH = RuntimeHelper.downcallHandle(
        "ISSUING_DIST_POINT_new",
        constants$1003.ISSUING_DIST_POINT_new$FUNC, false
    );
}


