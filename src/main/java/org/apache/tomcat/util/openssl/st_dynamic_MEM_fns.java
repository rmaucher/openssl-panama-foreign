// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class st_dynamic_MEM_fns {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("malloc_fn"),
        ADDRESS.withName("realloc_fn"),
        ADDRESS.withName("free_fn")
    ).withName("st_dynamic_MEM_fns");
    public static MemoryLayout $LAYOUT() {
        return st_dynamic_MEM_fns.$struct$LAYOUT;
    }
    static final VarHandle malloc_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("malloc_fn"));
    public static VarHandle malloc_fn$VH() {
        return st_dynamic_MEM_fns.malloc_fn$VH;
    }
    public static MemoryAddress malloc_fn$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_MEM_fns.malloc_fn$VH.get(seg);
    }
    public static void malloc_fn$set( MemorySegment seg, MemoryAddress x) {
        st_dynamic_MEM_fns.malloc_fn$VH.set(seg, x);
    }
    public static MemoryAddress malloc_fn$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_MEM_fns.malloc_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void malloc_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        st_dynamic_MEM_fns.malloc_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static dyn_MEM_malloc_fn malloc_fn (MemorySegment segment, ResourceScope scope) {
        return dyn_MEM_malloc_fn.ofAddress(malloc_fn$get(segment), scope);
    }
    static final VarHandle realloc_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("realloc_fn"));
    public static VarHandle realloc_fn$VH() {
        return st_dynamic_MEM_fns.realloc_fn$VH;
    }
    public static MemoryAddress realloc_fn$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_MEM_fns.realloc_fn$VH.get(seg);
    }
    public static void realloc_fn$set( MemorySegment seg, MemoryAddress x) {
        st_dynamic_MEM_fns.realloc_fn$VH.set(seg, x);
    }
    public static MemoryAddress realloc_fn$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_MEM_fns.realloc_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void realloc_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        st_dynamic_MEM_fns.realloc_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static dyn_MEM_realloc_fn realloc_fn (MemorySegment segment, ResourceScope scope) {
        return dyn_MEM_realloc_fn.ofAddress(realloc_fn$get(segment), scope);
    }
    static final VarHandle free_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free_fn"));
    public static VarHandle free_fn$VH() {
        return st_dynamic_MEM_fns.free_fn$VH;
    }
    public static MemoryAddress free_fn$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_MEM_fns.free_fn$VH.get(seg);
    }
    public static void free_fn$set( MemorySegment seg, MemoryAddress x) {
        st_dynamic_MEM_fns.free_fn$VH.set(seg, x);
    }
    public static MemoryAddress free_fn$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_MEM_fns.free_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        st_dynamic_MEM_fns.free_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static dyn_MEM_free_fn free_fn (MemorySegment segment, ResourceScope scope) {
        return dyn_MEM_free_fn.ofAddress(free_fn$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


