// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class DIST_POINT_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("distpoint"),
        ADDRESS.withName("reasons"),
        ADDRESS.withName("CRLissuer"),
        JAVA_INT.withName("dp_reasons"),
        MemoryLayout.paddingLayout(32)
    ).withName("DIST_POINT_st");
    public static MemoryLayout $LAYOUT() {
        return DIST_POINT_st.$struct$LAYOUT;
    }
    static final VarHandle distpoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("distpoint"));
    public static VarHandle distpoint$VH() {
        return DIST_POINT_st.distpoint$VH;
    }
    public static MemoryAddress distpoint$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_st.distpoint$VH.get(seg);
    }
    public static void distpoint$set( MemorySegment seg, MemoryAddress x) {
        DIST_POINT_st.distpoint$VH.set(seg, x);
    }
    public static MemoryAddress distpoint$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_st.distpoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void distpoint$set(MemorySegment seg, long index, MemoryAddress x) {
        DIST_POINT_st.distpoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reasons$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reasons"));
    public static VarHandle reasons$VH() {
        return DIST_POINT_st.reasons$VH;
    }
    public static MemoryAddress reasons$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_st.reasons$VH.get(seg);
    }
    public static void reasons$set( MemorySegment seg, MemoryAddress x) {
        DIST_POINT_st.reasons$VH.set(seg, x);
    }
    public static MemoryAddress reasons$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_st.reasons$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reasons$set(MemorySegment seg, long index, MemoryAddress x) {
        DIST_POINT_st.reasons$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CRLissuer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CRLissuer"));
    public static VarHandle CRLissuer$VH() {
        return DIST_POINT_st.CRLissuer$VH;
    }
    public static MemoryAddress CRLissuer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_st.CRLissuer$VH.get(seg);
    }
    public static void CRLissuer$set( MemorySegment seg, MemoryAddress x) {
        DIST_POINT_st.CRLissuer$VH.set(seg, x);
    }
    public static MemoryAddress CRLissuer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_st.CRLissuer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CRLissuer$set(MemorySegment seg, long index, MemoryAddress x) {
        DIST_POINT_st.CRLissuer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dp_reasons$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dp_reasons"));
    public static VarHandle dp_reasons$VH() {
        return DIST_POINT_st.dp_reasons$VH;
    }
    public static int dp_reasons$get(MemorySegment seg) {
        return (int)DIST_POINT_st.dp_reasons$VH.get(seg);
    }
    public static void dp_reasons$set( MemorySegment seg, int x) {
        DIST_POINT_st.dp_reasons$VH.set(seg, x);
    }
    public static int dp_reasons$get(MemorySegment seg, long index) {
        return (int)DIST_POINT_st.dp_reasons$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dp_reasons$set(MemorySegment seg, long index, int x) {
        DIST_POINT_st.dp_reasons$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


