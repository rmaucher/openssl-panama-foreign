// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$7 {

    static final FunctionDescriptor X509_STORE_CTX_get_error$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle X509_STORE_CTX_get_error$MH = RuntimeHelper.downcallHandle(
        "X509_STORE_CTX_get_error",
        constants$7.X509_STORE_CTX_get_error$FUNC, false
    );
    static final FunctionDescriptor X509_STORE_CTX_set_error$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle X509_STORE_CTX_set_error$MH = RuntimeHelper.downcallHandle(
        "X509_STORE_CTX_set_error",
        constants$7.X509_STORE_CTX_set_error$FUNC, false
    );
    static final FunctionDescriptor X509_STORE_CTX_get_error_depth$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle X509_STORE_CTX_get_error_depth$MH = RuntimeHelper.downcallHandle(
        "X509_STORE_CTX_get_error_depth",
        constants$7.X509_STORE_CTX_get_error_depth$FUNC, false
    );
    static final FunctionDescriptor d2i_X509_bio$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle d2i_X509_bio$MH = RuntimeHelper.downcallHandle(
        "d2i_X509_bio",
        constants$7.d2i_X509_bio$FUNC, false
    );
    static final FunctionDescriptor X509_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle X509_free$MH = RuntimeHelper.downcallHandle(
        "X509_free",
        constants$7.X509_free$FUNC, false
    );
    static final FunctionDescriptor d2i_X509$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle d2i_X509$MH = RuntimeHelper.downcallHandle(
        "d2i_X509",
        constants$7.d2i_X509$FUNC, false
    );
}


