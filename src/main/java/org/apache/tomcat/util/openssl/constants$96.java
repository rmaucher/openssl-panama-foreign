// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$96 {

    static final FunctionDescriptor pthread_condattr_setpshared$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle pthread_condattr_setpshared$MH = RuntimeHelper.downcallHandle(
        "pthread_condattr_setpshared",
        constants$96.pthread_condattr_setpshared$FUNC, false
    );
    static final FunctionDescriptor pthread_condattr_getclock$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle pthread_condattr_getclock$MH = RuntimeHelper.downcallHandle(
        "pthread_condattr_getclock",
        constants$96.pthread_condattr_getclock$FUNC, false
    );
    static final FunctionDescriptor pthread_condattr_setclock$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle pthread_condattr_setclock$MH = RuntimeHelper.downcallHandle(
        "pthread_condattr_setclock",
        constants$96.pthread_condattr_setclock$FUNC, false
    );
    static final FunctionDescriptor pthread_spin_init$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle pthread_spin_init$MH = RuntimeHelper.downcallHandle(
        "pthread_spin_init",
        constants$96.pthread_spin_init$FUNC, false
    );
    static final FunctionDescriptor pthread_spin_destroy$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle pthread_spin_destroy$MH = RuntimeHelper.downcallHandle(
        "pthread_spin_destroy",
        constants$96.pthread_spin_destroy$FUNC, false
    );
    static final FunctionDescriptor pthread_spin_lock$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle pthread_spin_lock$MH = RuntimeHelper.downcallHandle(
        "pthread_spin_lock",
        constants$96.pthread_spin_lock$FUNC, false
    );
}


