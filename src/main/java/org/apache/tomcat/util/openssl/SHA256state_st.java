// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class SHA256state_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, JAVA_INT).withName("h"),
        JAVA_INT.withName("Nl"),
        JAVA_INT.withName("Nh"),
        MemoryLayout.sequenceLayout(16, JAVA_INT).withName("data"),
        JAVA_INT.withName("num"),
        JAVA_INT.withName("md_len")
    ).withName("SHA256state_st");
    public static MemoryLayout $LAYOUT() {
        return SHA256state_st.$struct$LAYOUT;
    }
    public static MemorySegment h$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    static final VarHandle Nl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Nl"));
    public static VarHandle Nl$VH() {
        return SHA256state_st.Nl$VH;
    }
    public static int Nl$get(MemorySegment seg) {
        return (int)SHA256state_st.Nl$VH.get(seg);
    }
    public static void Nl$set( MemorySegment seg, int x) {
        SHA256state_st.Nl$VH.set(seg, x);
    }
    public static int Nl$get(MemorySegment seg, long index) {
        return (int)SHA256state_st.Nl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Nl$set(MemorySegment seg, long index, int x) {
        SHA256state_st.Nl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Nh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Nh"));
    public static VarHandle Nh$VH() {
        return SHA256state_st.Nh$VH;
    }
    public static int Nh$get(MemorySegment seg) {
        return (int)SHA256state_st.Nh$VH.get(seg);
    }
    public static void Nh$set( MemorySegment seg, int x) {
        SHA256state_st.Nh$VH.set(seg, x);
    }
    public static int Nh$get(MemorySegment seg, long index) {
        return (int)SHA256state_st.Nh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Nh$set(MemorySegment seg, long index, int x) {
        SHA256state_st.Nh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(40, 64);
    }
    static final VarHandle num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num"));
    public static VarHandle num$VH() {
        return SHA256state_st.num$VH;
    }
    public static int num$get(MemorySegment seg) {
        return (int)SHA256state_st.num$VH.get(seg);
    }
    public static void num$set( MemorySegment seg, int x) {
        SHA256state_st.num$VH.set(seg, x);
    }
    public static int num$get(MemorySegment seg, long index) {
        return (int)SHA256state_st.num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num$set(MemorySegment seg, long index, int x) {
        SHA256state_st.num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle md_len$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("md_len"));
    public static VarHandle md_len$VH() {
        return SHA256state_st.md_len$VH;
    }
    public static int md_len$get(MemorySegment seg) {
        return (int)SHA256state_st.md_len$VH.get(seg);
    }
    public static void md_len$set( MemorySegment seg, int x) {
        SHA256state_st.md_len$VH.set(seg, x);
    }
    public static int md_len$get(MemorySegment seg, long index) {
        return (int)SHA256state_st.md_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void md_len$set(MemorySegment seg, long index, int x) {
        SHA256state_st.md_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


