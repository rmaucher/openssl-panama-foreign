// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class X509V3_CONF_METHOD_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("get_string"),
        ADDRESS.withName("get_section"),
        ADDRESS.withName("free_string"),
        ADDRESS.withName("free_section")
    ).withName("X509V3_CONF_METHOD_st");
    public static MemoryLayout $LAYOUT() {
        return X509V3_CONF_METHOD_st.$struct$LAYOUT;
    }
    static final FunctionDescriptor get_string$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle get_string$MH = RuntimeHelper.downcallHandle(
        X509V3_CONF_METHOD_st.get_string$FUNC, false
    );
    public interface get_string {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static CLinker.UpcallStub allocate(get_string fi) {
            return RuntimeHelper.upcallStub(get_string.class, fi, X509V3_CONF_METHOD_st.get_string$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static CLinker.UpcallStub allocate(get_string fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_string.class, fi, X509V3_CONF_METHOD_st.get_string$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static get_string ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.get_string$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_string$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_string"));
    public static VarHandle get_string$VH() {
        return X509V3_CONF_METHOD_st.get_string$VH;
    }
    public static MemoryAddress get_string$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.get_string$VH.get(seg);
    }
    public static void get_string$set( MemorySegment seg, MemoryAddress x) {
        X509V3_CONF_METHOD_st.get_string$VH.set(seg, x);
    }
    public static MemoryAddress get_string$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.get_string$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_string$set(MemorySegment seg, long index, MemoryAddress x) {
        X509V3_CONF_METHOD_st.get_string$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_string get_string (MemorySegment segment) {
        return get_string.ofAddress(get_string$get(segment));
    }
    static final FunctionDescriptor get_section$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle get_section$MH = RuntimeHelper.downcallHandle(
        X509V3_CONF_METHOD_st.get_section$FUNC, false
    );
    public interface get_section {

        jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static CLinker.UpcallStub allocate(get_section fi) {
            return RuntimeHelper.upcallStub(get_section.class, fi, X509V3_CONF_METHOD_st.get_section$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        static CLinker.UpcallStub allocate(get_section fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_section.class, fi, X509V3_CONF_METHOD_st.get_section$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;", scope);
        }
        static get_section ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.get_section$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_section$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_section"));
    public static VarHandle get_section$VH() {
        return X509V3_CONF_METHOD_st.get_section$VH;
    }
    public static MemoryAddress get_section$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.get_section$VH.get(seg);
    }
    public static void get_section$set( MemorySegment seg, MemoryAddress x) {
        X509V3_CONF_METHOD_st.get_section$VH.set(seg, x);
    }
    public static MemoryAddress get_section$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.get_section$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_section$set(MemorySegment seg, long index, MemoryAddress x) {
        X509V3_CONF_METHOD_st.get_section$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_section get_section (MemorySegment segment) {
        return get_section.ofAddress(get_section$get(segment));
    }
    static final FunctionDescriptor free_string$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle free_string$MH = RuntimeHelper.downcallHandle(
        X509V3_CONF_METHOD_st.free_string$FUNC, false
    );
    public interface free_string {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static CLinker.UpcallStub allocate(free_string fi) {
            return RuntimeHelper.upcallStub(free_string.class, fi, X509V3_CONF_METHOD_st.free_string$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static CLinker.UpcallStub allocate(free_string fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(free_string.class, fi, X509V3_CONF_METHOD_st.free_string$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static free_string ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    X509V3_CONF_METHOD_st.free_string$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free_string$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free_string"));
    public static VarHandle free_string$VH() {
        return X509V3_CONF_METHOD_st.free_string$VH;
    }
    public static MemoryAddress free_string$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.free_string$VH.get(seg);
    }
    public static void free_string$set( MemorySegment seg, MemoryAddress x) {
        X509V3_CONF_METHOD_st.free_string$VH.set(seg, x);
    }
    public static MemoryAddress free_string$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.free_string$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free_string$set(MemorySegment seg, long index, MemoryAddress x) {
        X509V3_CONF_METHOD_st.free_string$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_string free_string (MemorySegment segment) {
        return free_string.ofAddress(free_string$get(segment));
    }
    static final FunctionDescriptor free_section$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle free_section$MH = RuntimeHelper.downcallHandle(
        X509V3_CONF_METHOD_st.free_section$FUNC, false
    );
    public interface free_section {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static CLinker.UpcallStub allocate(free_section fi) {
            return RuntimeHelper.upcallStub(free_section.class, fi, X509V3_CONF_METHOD_st.free_section$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        static CLinker.UpcallStub allocate(free_section fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(free_section.class, fi, X509V3_CONF_METHOD_st.free_section$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static free_section ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    X509V3_CONF_METHOD_st.free_section$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free_section$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free_section"));
    public static VarHandle free_section$VH() {
        return X509V3_CONF_METHOD_st.free_section$VH;
    }
    public static MemoryAddress free_section$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.free_section$VH.get(seg);
    }
    public static void free_section$set( MemorySegment seg, MemoryAddress x) {
        X509V3_CONF_METHOD_st.free_section$VH.set(seg, x);
    }
    public static MemoryAddress free_section$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)X509V3_CONF_METHOD_st.free_section$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free_section$set(MemorySegment seg, long index, MemoryAddress x) {
        X509V3_CONF_METHOD_st.free_section$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_section free_section (MemorySegment segment) {
        return free_section.ofAddress(free_section$get(segment));
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


