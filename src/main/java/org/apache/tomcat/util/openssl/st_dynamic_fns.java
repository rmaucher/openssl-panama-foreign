// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class st_dynamic_fns {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("static_state"),
        MemoryLayout.structLayout(
            ADDRESS.withName("malloc_fn"),
            ADDRESS.withName("realloc_fn"),
            ADDRESS.withName("free_fn")
        ).withName("mem_fns")
    ).withName("st_dynamic_fns");
    public static MemoryLayout $LAYOUT() {
        return st_dynamic_fns.$struct$LAYOUT;
    }
    static final VarHandle static_state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("static_state"));
    public static VarHandle static_state$VH() {
        return st_dynamic_fns.static_state$VH;
    }
    public static MemoryAddress static_state$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_fns.static_state$VH.get(seg);
    }
    public static void static_state$set( MemorySegment seg, MemoryAddress x) {
        st_dynamic_fns.static_state$VH.set(seg, x);
    }
    public static MemoryAddress static_state$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)st_dynamic_fns.static_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void static_state$set(MemorySegment seg, long index, MemoryAddress x) {
        st_dynamic_fns.static_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment mem_fns$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


