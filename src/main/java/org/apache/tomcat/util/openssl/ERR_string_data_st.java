// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class ERR_string_data_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_LONG.withName("error"),
        ADDRESS.withName("string")
    ).withName("ERR_string_data_st");
    public static MemoryLayout $LAYOUT() {
        return ERR_string_data_st.$struct$LAYOUT;
    }
    static final VarHandle error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error"));
    public static VarHandle error$VH() {
        return ERR_string_data_st.error$VH;
    }
    public static long error$get(MemorySegment seg) {
        return (long)ERR_string_data_st.error$VH.get(seg);
    }
    public static void error$set( MemorySegment seg, long x) {
        ERR_string_data_st.error$VH.set(seg, x);
    }
    public static long error$get(MemorySegment seg, long index) {
        return (long)ERR_string_data_st.error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error$set(MemorySegment seg, long index, long x) {
        ERR_string_data_st.error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle string$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("string"));
    public static VarHandle string$VH() {
        return ERR_string_data_st.string$VH;
    }
    public static MemoryAddress string$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ERR_string_data_st.string$VH.get(seg);
    }
    public static void string$set( MemorySegment seg, MemoryAddress x) {
        ERR_string_data_st.string$VH.set(seg, x);
    }
    public static MemoryAddress string$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ERR_string_data_st.string$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void string$set(MemorySegment seg, long index, MemoryAddress x) {
        ERR_string_data_st.string$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


