// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class ENGINE_CMD_DEFN_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("cmd_num"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("cmd_name"),
        ADDRESS.withName("cmd_desc"),
        JAVA_INT.withName("cmd_flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("ENGINE_CMD_DEFN_st");
    public static MemoryLayout $LAYOUT() {
        return ENGINE_CMD_DEFN_st.$struct$LAYOUT;
    }
    static final VarHandle cmd_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cmd_num"));
    public static VarHandle cmd_num$VH() {
        return ENGINE_CMD_DEFN_st.cmd_num$VH;
    }
    public static int cmd_num$get(MemorySegment seg) {
        return (int)ENGINE_CMD_DEFN_st.cmd_num$VH.get(seg);
    }
    public static void cmd_num$set( MemorySegment seg, int x) {
        ENGINE_CMD_DEFN_st.cmd_num$VH.set(seg, x);
    }
    public static int cmd_num$get(MemorySegment seg, long index) {
        return (int)ENGINE_CMD_DEFN_st.cmd_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cmd_num$set(MemorySegment seg, long index, int x) {
        ENGINE_CMD_DEFN_st.cmd_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cmd_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cmd_name"));
    public static VarHandle cmd_name$VH() {
        return ENGINE_CMD_DEFN_st.cmd_name$VH;
    }
    public static MemoryAddress cmd_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ENGINE_CMD_DEFN_st.cmd_name$VH.get(seg);
    }
    public static void cmd_name$set( MemorySegment seg, MemoryAddress x) {
        ENGINE_CMD_DEFN_st.cmd_name$VH.set(seg, x);
    }
    public static MemoryAddress cmd_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ENGINE_CMD_DEFN_st.cmd_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cmd_name$set(MemorySegment seg, long index, MemoryAddress x) {
        ENGINE_CMD_DEFN_st.cmd_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cmd_desc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cmd_desc"));
    public static VarHandle cmd_desc$VH() {
        return ENGINE_CMD_DEFN_st.cmd_desc$VH;
    }
    public static MemoryAddress cmd_desc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ENGINE_CMD_DEFN_st.cmd_desc$VH.get(seg);
    }
    public static void cmd_desc$set( MemorySegment seg, MemoryAddress x) {
        ENGINE_CMD_DEFN_st.cmd_desc$VH.set(seg, x);
    }
    public static MemoryAddress cmd_desc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ENGINE_CMD_DEFN_st.cmd_desc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cmd_desc$set(MemorySegment seg, long index, MemoryAddress x) {
        ENGINE_CMD_DEFN_st.cmd_desc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cmd_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cmd_flags"));
    public static VarHandle cmd_flags$VH() {
        return ENGINE_CMD_DEFN_st.cmd_flags$VH;
    }
    public static int cmd_flags$get(MemorySegment seg) {
        return (int)ENGINE_CMD_DEFN_st.cmd_flags$VH.get(seg);
    }
    public static void cmd_flags$set( MemorySegment seg, int x) {
        ENGINE_CMD_DEFN_st.cmd_flags$VH.set(seg, x);
    }
    public static int cmd_flags$get(MemorySegment seg, long index) {
        return (int)ENGINE_CMD_DEFN_st.cmd_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cmd_flags$set(MemorySegment seg, long index, int x) {
        ENGINE_CMD_DEFN_st.cmd_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


