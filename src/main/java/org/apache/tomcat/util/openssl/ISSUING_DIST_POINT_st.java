// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class ISSUING_DIST_POINT_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("distpoint"),
        JAVA_INT.withName("onlyuser"),
        JAVA_INT.withName("onlyCA"),
        ADDRESS.withName("onlysomereasons"),
        JAVA_INT.withName("indirectCRL"),
        JAVA_INT.withName("onlyattr")
    ).withName("ISSUING_DIST_POINT_st");
    public static MemoryLayout $LAYOUT() {
        return ISSUING_DIST_POINT_st.$struct$LAYOUT;
    }
    static final VarHandle distpoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("distpoint"));
    public static VarHandle distpoint$VH() {
        return ISSUING_DIST_POINT_st.distpoint$VH;
    }
    public static MemoryAddress distpoint$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISSUING_DIST_POINT_st.distpoint$VH.get(seg);
    }
    public static void distpoint$set( MemorySegment seg, MemoryAddress x) {
        ISSUING_DIST_POINT_st.distpoint$VH.set(seg, x);
    }
    public static MemoryAddress distpoint$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISSUING_DIST_POINT_st.distpoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void distpoint$set(MemorySegment seg, long index, MemoryAddress x) {
        ISSUING_DIST_POINT_st.distpoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle onlyuser$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("onlyuser"));
    public static VarHandle onlyuser$VH() {
        return ISSUING_DIST_POINT_st.onlyuser$VH;
    }
    public static int onlyuser$get(MemorySegment seg) {
        return (int)ISSUING_DIST_POINT_st.onlyuser$VH.get(seg);
    }
    public static void onlyuser$set( MemorySegment seg, int x) {
        ISSUING_DIST_POINT_st.onlyuser$VH.set(seg, x);
    }
    public static int onlyuser$get(MemorySegment seg, long index) {
        return (int)ISSUING_DIST_POINT_st.onlyuser$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void onlyuser$set(MemorySegment seg, long index, int x) {
        ISSUING_DIST_POINT_st.onlyuser$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle onlyCA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("onlyCA"));
    public static VarHandle onlyCA$VH() {
        return ISSUING_DIST_POINT_st.onlyCA$VH;
    }
    public static int onlyCA$get(MemorySegment seg) {
        return (int)ISSUING_DIST_POINT_st.onlyCA$VH.get(seg);
    }
    public static void onlyCA$set( MemorySegment seg, int x) {
        ISSUING_DIST_POINT_st.onlyCA$VH.set(seg, x);
    }
    public static int onlyCA$get(MemorySegment seg, long index) {
        return (int)ISSUING_DIST_POINT_st.onlyCA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void onlyCA$set(MemorySegment seg, long index, int x) {
        ISSUING_DIST_POINT_st.onlyCA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle onlysomereasons$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("onlysomereasons"));
    public static VarHandle onlysomereasons$VH() {
        return ISSUING_DIST_POINT_st.onlysomereasons$VH;
    }
    public static MemoryAddress onlysomereasons$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)ISSUING_DIST_POINT_st.onlysomereasons$VH.get(seg);
    }
    public static void onlysomereasons$set( MemorySegment seg, MemoryAddress x) {
        ISSUING_DIST_POINT_st.onlysomereasons$VH.set(seg, x);
    }
    public static MemoryAddress onlysomereasons$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)ISSUING_DIST_POINT_st.onlysomereasons$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void onlysomereasons$set(MemorySegment seg, long index, MemoryAddress x) {
        ISSUING_DIST_POINT_st.onlysomereasons$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle indirectCRL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("indirectCRL"));
    public static VarHandle indirectCRL$VH() {
        return ISSUING_DIST_POINT_st.indirectCRL$VH;
    }
    public static int indirectCRL$get(MemorySegment seg) {
        return (int)ISSUING_DIST_POINT_st.indirectCRL$VH.get(seg);
    }
    public static void indirectCRL$set( MemorySegment seg, int x) {
        ISSUING_DIST_POINT_st.indirectCRL$VH.set(seg, x);
    }
    public static int indirectCRL$get(MemorySegment seg, long index) {
        return (int)ISSUING_DIST_POINT_st.indirectCRL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void indirectCRL$set(MemorySegment seg, long index, int x) {
        ISSUING_DIST_POINT_st.indirectCRL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle onlyattr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("onlyattr"));
    public static VarHandle onlyattr$VH() {
        return ISSUING_DIST_POINT_st.onlyattr$VH;
    }
    public static int onlyattr$get(MemorySegment seg) {
        return (int)ISSUING_DIST_POINT_st.onlyattr$VH.get(seg);
    }
    public static void onlyattr$set( MemorySegment seg, int x) {
        ISSUING_DIST_POINT_st.onlyattr$VH.set(seg, x);
    }
    public static int onlyattr$get(MemorySegment seg, long index) {
        return (int)ISSUING_DIST_POINT_st.onlyattr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void onlyattr$set(MemorySegment seg, long index, int x) {
        ISSUING_DIST_POINT_st.onlyattr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


