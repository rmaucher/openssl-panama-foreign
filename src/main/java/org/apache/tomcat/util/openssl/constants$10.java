// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$10 {

    static final FunctionDescriptor SSL_CTX_get_options$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS
    );
    static final MethodHandle SSL_CTX_get_options$MH = RuntimeHelper.downcallHandle(
        "SSL_CTX_get_options",
        constants$10.SSL_CTX_get_options$FUNC, false
    );
    static final FunctionDescriptor SSL_get_options$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS
    );
    static final MethodHandle SSL_get_options$MH = RuntimeHelper.downcallHandle(
        "SSL_get_options",
        constants$10.SSL_get_options$FUNC, false
    );
    static final FunctionDescriptor SSL_CTX_clear_options$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle SSL_CTX_clear_options$MH = RuntimeHelper.downcallHandle(
        "SSL_CTX_clear_options",
        constants$10.SSL_CTX_clear_options$FUNC, false
    );
    static final FunctionDescriptor SSL_CTX_set_options$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle SSL_CTX_set_options$MH = RuntimeHelper.downcallHandle(
        "SSL_CTX_set_options",
        constants$10.SSL_CTX_set_options$FUNC, false
    );
    static final FunctionDescriptor SSL_set_options$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle SSL_set_options$MH = RuntimeHelper.downcallHandle(
        "SSL_set_options",
        constants$10.SSL_set_options$FUNC, false
    );
    static final FunctionDescriptor SSL_get0_next_proto_negotiated$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle SSL_get0_next_proto_negotiated$MH = RuntimeHelper.downcallHandle(
        "SSL_get0_next_proto_negotiated",
        constants$10.SSL_get0_next_proto_negotiated$FUNC, false
    );
}


