// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class DIST_POINT_NAME_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            ADDRESS.withName("fullname"),
            ADDRESS.withName("relativename")
        ).withName("name"),
        ADDRESS.withName("dpname")
    ).withName("DIST_POINT_NAME_st");
    public static MemoryLayout $LAYOUT() {
        return DIST_POINT_NAME_st.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return DIST_POINT_NAME_st.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)DIST_POINT_NAME_st.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        DIST_POINT_NAME_st.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)DIST_POINT_NAME_st.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        DIST_POINT_NAME_st.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class name {

        static final MemoryLayout name$union$LAYOUT = MemoryLayout.unionLayout(
            ADDRESS.withName("fullname"),
            ADDRESS.withName("relativename")
        );
        public static MemoryLayout $LAYOUT() {
            return name.name$union$LAYOUT;
        }
        static final VarHandle fullname$VH = name$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fullname"));
        public static VarHandle fullname$VH() {
            return name.fullname$VH;
        }
        public static MemoryAddress fullname$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)name.fullname$VH.get(seg);
        }
        public static void fullname$set( MemorySegment seg, MemoryAddress x) {
            name.fullname$VH.set(seg, x);
        }
        public static MemoryAddress fullname$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)name.fullname$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void fullname$set(MemorySegment seg, long index, MemoryAddress x) {
            name.fullname$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle relativename$VH = name$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("relativename"));
        public static VarHandle relativename$VH() {
            return name.relativename$VH;
        }
        public static MemoryAddress relativename$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)name.relativename$VH.get(seg);
        }
        public static void relativename$set( MemorySegment seg, MemoryAddress x) {
            name.relativename$VH.set(seg, x);
        }
        public static MemoryAddress relativename$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)name.relativename$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void relativename$set(MemorySegment seg, long index, MemoryAddress x) {
            name.relativename$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment name$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle dpname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dpname"));
    public static VarHandle dpname$VH() {
        return DIST_POINT_NAME_st.dpname$VH;
    }
    public static MemoryAddress dpname$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_NAME_st.dpname$VH.get(seg);
    }
    public static void dpname$set( MemorySegment seg, MemoryAddress x) {
        DIST_POINT_NAME_st.dpname$VH.set(seg, x);
    }
    public static MemoryAddress dpname$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)DIST_POINT_NAME_st.dpname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dpname$set(MemorySegment seg, long index, MemoryAddress x) {
        DIST_POINT_NAME_st.dpname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


