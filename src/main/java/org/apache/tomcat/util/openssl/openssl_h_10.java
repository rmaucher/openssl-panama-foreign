// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_10 extends openssl_h_9 {

    public static MethodHandle SSL_CTX_flush_sessions$MH() {
        return RuntimeHelper.requireNonNull(constants$797.SSL_CTX_flush_sessions$MH,"SSL_CTX_flush_sessions");
    }
    public static void SSL_CTX_flush_sessions ( Addressable ctx,  long tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$797.SSL_CTX_flush_sessions$MH, "SSL_CTX_flush_sessions");
        try {
            mh$.invokeExact(ctx, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_current_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$797.SSL_get_current_cipher$MH,"SSL_get_current_cipher");
    }
    public static MemoryAddress SSL_get_current_cipher ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$797.SSL_get_current_cipher$MH, "SSL_get_current_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_pending_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$798.SSL_get_pending_cipher$MH,"SSL_get_pending_cipher");
    }
    public static MemoryAddress SSL_get_pending_cipher ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$798.SSL_get_pending_cipher$MH, "SSL_get_pending_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_get_bits$MH,"SSL_CIPHER_get_bits");
    }
    public static int SSL_CIPHER_get_bits ( Addressable c,  Addressable alg_bits) {
        var mh$ = RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_get_bits$MH, "SSL_CIPHER_get_bits");
        try {
            return (int)mh$.invokeExact(c, alg_bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_get_version$MH,"SSL_CIPHER_get_version");
    }
    public static MemoryAddress SSL_CIPHER_get_version ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_get_version$MH, "SSL_CIPHER_get_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_get_name$MH,"SSL_CIPHER_get_name");
    }
    public static MemoryAddress SSL_CIPHER_get_name ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_get_name$MH, "SSL_CIPHER_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_standard_name$MH() {
        return RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_standard_name$MH,"SSL_CIPHER_standard_name");
    }
    public static MemoryAddress SSL_CIPHER_standard_name ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$798.SSL_CIPHER_standard_name$MH, "SSL_CIPHER_standard_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_cipher_name$MH() {
        return RuntimeHelper.requireNonNull(constants$798.OPENSSL_cipher_name$MH,"OPENSSL_cipher_name");
    }
    public static MemoryAddress OPENSSL_cipher_name ( Addressable rfc_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$798.OPENSSL_cipher_name$MH, "OPENSSL_cipher_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rfc_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_id$MH,"SSL_CIPHER_get_id");
    }
    public static int SSL_CIPHER_get_id ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_id$MH, "SSL_CIPHER_get_id");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_protocol_id$MH() {
        return RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_protocol_id$MH,"SSL_CIPHER_get_protocol_id");
    }
    public static short SSL_CIPHER_get_protocol_id ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_protocol_id$MH, "SSL_CIPHER_get_protocol_id");
        try {
            return (short)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_kx_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_kx_nid$MH,"SSL_CIPHER_get_kx_nid");
    }
    public static int SSL_CIPHER_get_kx_nid ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_kx_nid$MH, "SSL_CIPHER_get_kx_nid");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_auth_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_auth_nid$MH,"SSL_CIPHER_get_auth_nid");
    }
    public static int SSL_CIPHER_get_auth_nid ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_auth_nid$MH, "SSL_CIPHER_get_auth_nid");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_handshake_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_handshake_digest$MH,"SSL_CIPHER_get_handshake_digest");
    }
    public static MemoryAddress SSL_CIPHER_get_handshake_digest ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_get_handshake_digest$MH, "SSL_CIPHER_get_handshake_digest");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_is_aead$MH() {
        return RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_is_aead$MH,"SSL_CIPHER_is_aead");
    }
    public static int SSL_CIPHER_is_aead ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$799.SSL_CIPHER_is_aead$MH, "SSL_CIPHER_is_aead");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$800.SSL_get_fd$MH,"SSL_get_fd");
    }
    public static int SSL_get_fd ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$800.SSL_get_fd$MH, "SSL_get_fd");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_rfd$MH() {
        return RuntimeHelper.requireNonNull(constants$800.SSL_get_rfd$MH,"SSL_get_rfd");
    }
    public static int SSL_get_rfd ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$800.SSL_get_rfd$MH, "SSL_get_rfd");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_wfd$MH() {
        return RuntimeHelper.requireNonNull(constants$800.SSL_get_wfd$MH,"SSL_get_wfd");
    }
    public static int SSL_get_wfd ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$800.SSL_get_wfd$MH, "SSL_get_wfd");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_cipher_list$MH() {
        return RuntimeHelper.requireNonNull(constants$800.SSL_get_cipher_list$MH,"SSL_get_cipher_list");
    }
    public static MemoryAddress SSL_get_cipher_list ( Addressable s,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$800.SSL_get_cipher_list$MH, "SSL_get_cipher_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_shared_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$800.SSL_get_shared_ciphers$MH,"SSL_get_shared_ciphers");
    }
    public static MemoryAddress SSL_get_shared_ciphers ( Addressable s,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$800.SSL_get_shared_ciphers$MH, "SSL_get_shared_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_read_ahead$MH() {
        return RuntimeHelper.requireNonNull(constants$800.SSL_get_read_ahead$MH,"SSL_get_read_ahead");
    }
    public static int SSL_get_read_ahead ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$800.SSL_get_read_ahead$MH, "SSL_get_read_ahead");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$801.SSL_pending$MH,"SSL_pending");
    }
    public static int SSL_pending ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$801.SSL_pending$MH, "SSL_pending");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_has_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$801.SSL_has_pending$MH,"SSL_has_pending");
    }
    public static int SSL_has_pending ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$801.SSL_has_pending$MH, "SSL_has_pending");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$801.SSL_set_fd$MH,"SSL_set_fd");
    }
    public static int SSL_set_fd ( Addressable s,  int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$801.SSL_set_fd$MH, "SSL_set_fd");
        try {
            return (int)mh$.invokeExact(s, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_rfd$MH() {
        return RuntimeHelper.requireNonNull(constants$801.SSL_set_rfd$MH,"SSL_set_rfd");
    }
    public static int SSL_set_rfd ( Addressable s,  int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$801.SSL_set_rfd$MH, "SSL_set_rfd");
        try {
            return (int)mh$.invokeExact(s, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_wfd$MH() {
        return RuntimeHelper.requireNonNull(constants$801.SSL_set_wfd$MH,"SSL_set_wfd");
    }
    public static int SSL_set_wfd ( Addressable s,  int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$801.SSL_set_wfd$MH, "SSL_set_wfd");
        try {
            return (int)mh$.invokeExact(s, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set0_rbio$MH() {
        return RuntimeHelper.requireNonNull(constants$801.SSL_set0_rbio$MH,"SSL_set0_rbio");
    }
    public static void SSL_set0_rbio ( Addressable s,  Addressable rbio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$801.SSL_set0_rbio$MH, "SSL_set0_rbio");
        try {
            mh$.invokeExact(s, rbio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set0_wbio$MH() {
        return RuntimeHelper.requireNonNull(constants$802.SSL_set0_wbio$MH,"SSL_set0_wbio");
    }
    public static void SSL_set0_wbio ( Addressable s,  Addressable wbio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$802.SSL_set0_wbio$MH, "SSL_set0_wbio");
        try {
            mh$.invokeExact(s, wbio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$802.SSL_set_bio$MH,"SSL_set_bio");
    }
    public static void SSL_set_bio ( Addressable s,  Addressable rbio,  Addressable wbio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$802.SSL_set_bio$MH, "SSL_set_bio");
        try {
            mh$.invokeExact(s, rbio, wbio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_rbio$MH() {
        return RuntimeHelper.requireNonNull(constants$802.SSL_get_rbio$MH,"SSL_get_rbio");
    }
    public static MemoryAddress SSL_get_rbio ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$802.SSL_get_rbio$MH, "SSL_get_rbio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_wbio$MH() {
        return RuntimeHelper.requireNonNull(constants$802.SSL_get_wbio$MH,"SSL_get_wbio");
    }
    public static MemoryAddress SSL_get_wbio ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$802.SSL_get_wbio$MH, "SSL_get_wbio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_cipher_list$MH() {
        return RuntimeHelper.requireNonNull(constants$802.SSL_set_cipher_list$MH,"SSL_set_cipher_list");
    }
    public static int SSL_set_cipher_list ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$802.SSL_set_cipher_list$MH, "SSL_set_cipher_list");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_ciphersuites$MH() {
        return RuntimeHelper.requireNonNull(constants$802.SSL_CTX_set_ciphersuites$MH,"SSL_CTX_set_ciphersuites");
    }
    public static int SSL_CTX_set_ciphersuites ( Addressable ctx,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$802.SSL_CTX_set_ciphersuites$MH, "SSL_CTX_set_ciphersuites");
        try {
            return (int)mh$.invokeExact(ctx, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_ciphersuites$MH() {
        return RuntimeHelper.requireNonNull(constants$803.SSL_set_ciphersuites$MH,"SSL_set_ciphersuites");
    }
    public static int SSL_set_ciphersuites ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$803.SSL_set_ciphersuites$MH, "SSL_set_ciphersuites");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_read_ahead$MH() {
        return RuntimeHelper.requireNonNull(constants$803.SSL_set_read_ahead$MH,"SSL_set_read_ahead");
    }
    public static void SSL_set_read_ahead ( Addressable s,  int yes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$803.SSL_set_read_ahead$MH, "SSL_set_read_ahead");
        try {
            mh$.invokeExact(s, yes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_verify_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$803.SSL_get_verify_mode$MH,"SSL_get_verify_mode");
    }
    public static int SSL_get_verify_mode ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$803.SSL_get_verify_mode$MH, "SSL_get_verify_mode");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_verify_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$803.SSL_get_verify_depth$MH,"SSL_get_verify_depth");
    }
    public static int SSL_get_verify_depth ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$803.SSL_get_verify_depth$MH, "SSL_get_verify_depth");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_verify_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$803.SSL_get_verify_callback$MH,"SSL_get_verify_callback");
    }
    public static MemoryAddress SSL_get_verify_callback ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$803.SSL_get_verify_callback$MH, "SSL_get_verify_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$803.SSL_set_verify$MH,"SSL_set_verify");
    }
    public static void SSL_set_verify ( Addressable s,  int mode,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$803.SSL_set_verify$MH, "SSL_set_verify");
        try {
            mh$.invokeExact(s, mode, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_verify_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$804.SSL_set_verify_depth$MH,"SSL_set_verify_depth");
    }
    public static void SSL_set_verify_depth ( Addressable s,  int depth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$804.SSL_set_verify_depth$MH, "SSL_set_verify_depth");
        try {
            mh$.invokeExact(s, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_cert_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$804.SSL_set_cert_cb$MH,"SSL_set_cert_cb");
    }
    public static void SSL_set_cert_cb ( Addressable s,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$804.SSL_set_cert_cb$MH, "SSL_set_cert_cb");
        try {
            mh$.invokeExact(s, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_RSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$804.SSL_use_RSAPrivateKey$MH,"SSL_use_RSAPrivateKey");
    }
    public static int SSL_use_RSAPrivateKey ( Addressable ssl,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$804.SSL_use_RSAPrivateKey$MH, "SSL_use_RSAPrivateKey");
        try {
            return (int)mh$.invokeExact(ssl, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_RSAPrivateKey_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$804.SSL_use_RSAPrivateKey_ASN1$MH,"SSL_use_RSAPrivateKey_ASN1");
    }
    public static int SSL_use_RSAPrivateKey_ASN1 ( Addressable ssl,  Addressable d,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$804.SSL_use_RSAPrivateKey_ASN1$MH, "SSL_use_RSAPrivateKey_ASN1");
        try {
            return (int)mh$.invokeExact(ssl, d, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$805.SSL_use_PrivateKey$MH,"SSL_use_PrivateKey");
    }
    public static int SSL_use_PrivateKey ( Addressable ssl,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$805.SSL_use_PrivateKey$MH, "SSL_use_PrivateKey");
        try {
            return (int)mh$.invokeExact(ssl, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_PrivateKey_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$805.SSL_use_PrivateKey_ASN1$MH,"SSL_use_PrivateKey_ASN1");
    }
    public static int SSL_use_PrivateKey_ASN1 ( int pk,  Addressable ssl,  Addressable d,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$805.SSL_use_PrivateKey_ASN1$MH, "SSL_use_PrivateKey_ASN1");
        try {
            return (int)mh$.invokeExact(pk, ssl, d, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$805.SSL_use_certificate$MH,"SSL_use_certificate");
    }
    public static int SSL_use_certificate ( Addressable ssl,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$805.SSL_use_certificate$MH, "SSL_use_certificate");
        try {
            return (int)mh$.invokeExact(ssl, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_certificate_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$805.SSL_use_certificate_ASN1$MH,"SSL_use_certificate_ASN1");
    }
    public static int SSL_use_certificate_ASN1 ( Addressable ssl,  Addressable d,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$805.SSL_use_certificate_ASN1$MH, "SSL_use_certificate_ASN1");
        try {
            return (int)mh$.invokeExact(ssl, d, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_cert_and_key$MH() {
        return RuntimeHelper.requireNonNull(constants$805.SSL_use_cert_and_key$MH,"SSL_use_cert_and_key");
    }
    public static int SSL_use_cert_and_key ( Addressable ssl,  Addressable x509,  Addressable privatekey,  Addressable chain,  int override) {
        var mh$ = RuntimeHelper.requireNonNull(constants$805.SSL_use_cert_and_key$MH, "SSL_use_cert_and_key");
        try {
            return (int)mh$.invokeExact(ssl, x509, privatekey, chain, override);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_serverinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$805.SSL_CTX_use_serverinfo$MH,"SSL_CTX_use_serverinfo");
    }
    public static int SSL_CTX_use_serverinfo ( Addressable ctx,  Addressable serverinfo,  long serverinfo_length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$805.SSL_CTX_use_serverinfo$MH, "SSL_CTX_use_serverinfo");
        try {
            return (int)mh$.invokeExact(ctx, serverinfo, serverinfo_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_serverinfo_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$806.SSL_CTX_use_serverinfo_ex$MH,"SSL_CTX_use_serverinfo_ex");
    }
    public static int SSL_CTX_use_serverinfo_ex ( Addressable ctx,  int version,  Addressable serverinfo,  long serverinfo_length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$806.SSL_CTX_use_serverinfo_ex$MH, "SSL_CTX_use_serverinfo_ex");
        try {
            return (int)mh$.invokeExact(ctx, version, serverinfo, serverinfo_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_serverinfo_file$MH() {
        return RuntimeHelper.requireNonNull(constants$806.SSL_CTX_use_serverinfo_file$MH,"SSL_CTX_use_serverinfo_file");
    }
    public static int SSL_CTX_use_serverinfo_file ( Addressable ctx,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$806.SSL_CTX_use_serverinfo_file$MH, "SSL_CTX_use_serverinfo_file");
        try {
            return (int)mh$.invokeExact(ctx, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_RSAPrivateKey_file$MH() {
        return RuntimeHelper.requireNonNull(constants$806.SSL_use_RSAPrivateKey_file$MH,"SSL_use_RSAPrivateKey_file");
    }
    public static int SSL_use_RSAPrivateKey_file ( Addressable ssl,  Addressable file,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$806.SSL_use_RSAPrivateKey_file$MH, "SSL_use_RSAPrivateKey_file");
        try {
            return (int)mh$.invokeExact(ssl, file, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_PrivateKey_file$MH() {
        return RuntimeHelper.requireNonNull(constants$806.SSL_use_PrivateKey_file$MH,"SSL_use_PrivateKey_file");
    }
    public static int SSL_use_PrivateKey_file ( Addressable ssl,  Addressable file,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$806.SSL_use_PrivateKey_file$MH, "SSL_use_PrivateKey_file");
        try {
            return (int)mh$.invokeExact(ssl, file, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_certificate_file$MH() {
        return RuntimeHelper.requireNonNull(constants$806.SSL_use_certificate_file$MH,"SSL_use_certificate_file");
    }
    public static int SSL_use_certificate_file ( Addressable ssl,  Addressable file,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$806.SSL_use_certificate_file$MH, "SSL_use_certificate_file");
        try {
            return (int)mh$.invokeExact(ssl, file, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_RSAPrivateKey_file$MH() {
        return RuntimeHelper.requireNonNull(constants$806.SSL_CTX_use_RSAPrivateKey_file$MH,"SSL_CTX_use_RSAPrivateKey_file");
    }
    public static int SSL_CTX_use_RSAPrivateKey_file ( Addressable ctx,  Addressable file,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$806.SSL_CTX_use_RSAPrivateKey_file$MH, "SSL_CTX_use_RSAPrivateKey_file");
        try {
            return (int)mh$.invokeExact(ctx, file, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_PrivateKey_file$MH() {
        return RuntimeHelper.requireNonNull(constants$807.SSL_CTX_use_PrivateKey_file$MH,"SSL_CTX_use_PrivateKey_file");
    }
    public static int SSL_CTX_use_PrivateKey_file ( Addressable ctx,  Addressable file,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$807.SSL_CTX_use_PrivateKey_file$MH, "SSL_CTX_use_PrivateKey_file");
        try {
            return (int)mh$.invokeExact(ctx, file, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_certificate_file$MH() {
        return RuntimeHelper.requireNonNull(constants$807.SSL_CTX_use_certificate_file$MH,"SSL_CTX_use_certificate_file");
    }
    public static int SSL_CTX_use_certificate_file ( Addressable ctx,  Addressable file,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$807.SSL_CTX_use_certificate_file$MH, "SSL_CTX_use_certificate_file");
        try {
            return (int)mh$.invokeExact(ctx, file, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_certificate_chain_file$MH() {
        return RuntimeHelper.requireNonNull(constants$807.SSL_CTX_use_certificate_chain_file$MH,"SSL_CTX_use_certificate_chain_file");
    }
    public static int SSL_CTX_use_certificate_chain_file ( Addressable ctx,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$807.SSL_CTX_use_certificate_chain_file$MH, "SSL_CTX_use_certificate_chain_file");
        try {
            return (int)mh$.invokeExact(ctx, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_certificate_chain_file$MH() {
        return RuntimeHelper.requireNonNull(constants$807.SSL_use_certificate_chain_file$MH,"SSL_use_certificate_chain_file");
    }
    public static int SSL_use_certificate_chain_file ( Addressable ssl,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$807.SSL_use_certificate_chain_file$MH, "SSL_use_certificate_chain_file");
        try {
            return (int)mh$.invokeExact(ssl, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_load_client_CA_file$MH() {
        return RuntimeHelper.requireNonNull(constants$807.SSL_load_client_CA_file$MH,"SSL_load_client_CA_file");
    }
    public static MemoryAddress SSL_load_client_CA_file ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$807.SSL_load_client_CA_file$MH, "SSL_load_client_CA_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add_file_cert_subjects_to_stack$MH() {
        return RuntimeHelper.requireNonNull(constants$807.SSL_add_file_cert_subjects_to_stack$MH,"SSL_add_file_cert_subjects_to_stack");
    }
    public static int SSL_add_file_cert_subjects_to_stack ( Addressable stackCAs,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$807.SSL_add_file_cert_subjects_to_stack$MH, "SSL_add_file_cert_subjects_to_stack");
        try {
            return (int)mh$.invokeExact(stackCAs, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add_dir_cert_subjects_to_stack$MH() {
        return RuntimeHelper.requireNonNull(constants$808.SSL_add_dir_cert_subjects_to_stack$MH,"SSL_add_dir_cert_subjects_to_stack");
    }
    public static int SSL_add_dir_cert_subjects_to_stack ( Addressable stackCAs,  Addressable dir) {
        var mh$ = RuntimeHelper.requireNonNull(constants$808.SSL_add_dir_cert_subjects_to_stack$MH, "SSL_add_dir_cert_subjects_to_stack");
        try {
            return (int)mh$.invokeExact(stackCAs, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_state_string$MH() {
        return RuntimeHelper.requireNonNull(constants$808.SSL_state_string$MH,"SSL_state_string");
    }
    public static MemoryAddress SSL_state_string ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$808.SSL_state_string$MH, "SSL_state_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_rstate_string$MH() {
        return RuntimeHelper.requireNonNull(constants$808.SSL_rstate_string$MH,"SSL_rstate_string");
    }
    public static MemoryAddress SSL_rstate_string ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$808.SSL_rstate_string$MH, "SSL_rstate_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_state_string_long$MH() {
        return RuntimeHelper.requireNonNull(constants$808.SSL_state_string_long$MH,"SSL_state_string_long");
    }
    public static MemoryAddress SSL_state_string_long ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$808.SSL_state_string_long$MH, "SSL_state_string_long");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_rstate_string_long$MH() {
        return RuntimeHelper.requireNonNull(constants$808.SSL_rstate_string_long$MH,"SSL_rstate_string_long");
    }
    public static MemoryAddress SSL_rstate_string_long ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$808.SSL_rstate_string_long$MH, "SSL_rstate_string_long");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_time$MH() {
        return RuntimeHelper.requireNonNull(constants$808.SSL_SESSION_get_time$MH,"SSL_SESSION_get_time");
    }
    public static long SSL_SESSION_get_time ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$808.SSL_SESSION_get_time$MH, "SSL_SESSION_get_time");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set_time$MH() {
        return RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_set_time$MH,"SSL_SESSION_set_time");
    }
    public static long SSL_SESSION_set_time ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_set_time$MH, "SSL_SESSION_set_time");
        try {
            return (long)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_get_timeout$MH,"SSL_SESSION_get_timeout");
    }
    public static long SSL_SESSION_get_timeout ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_get_timeout$MH, "SSL_SESSION_get_timeout");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_set_timeout$MH,"SSL_SESSION_set_timeout");
    }
    public static long SSL_SESSION_set_timeout ( Addressable s,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_set_timeout$MH, "SSL_SESSION_set_timeout");
        try {
            return (long)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_protocol_version$MH() {
        return RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_get_protocol_version$MH,"SSL_SESSION_get_protocol_version");
    }
    public static int SSL_SESSION_get_protocol_version ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_get_protocol_version$MH, "SSL_SESSION_get_protocol_version");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set_protocol_version$MH() {
        return RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_set_protocol_version$MH,"SSL_SESSION_set_protocol_version");
    }
    public static int SSL_SESSION_set_protocol_version ( Addressable s,  int version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_set_protocol_version$MH, "SSL_SESSION_set_protocol_version");
        try {
            return (int)mh$.invokeExact(s, version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_hostname$MH() {
        return RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_get0_hostname$MH,"SSL_SESSION_get0_hostname");
    }
    public static MemoryAddress SSL_SESSION_get0_hostname ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$809.SSL_SESSION_get0_hostname$MH, "SSL_SESSION_get0_hostname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set1_hostname$MH() {
        return RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_set1_hostname$MH,"SSL_SESSION_set1_hostname");
    }
    public static int SSL_SESSION_set1_hostname ( Addressable s,  Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_set1_hostname$MH, "SSL_SESSION_set1_hostname");
        try {
            return (int)mh$.invokeExact(s, hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_alpn_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_get0_alpn_selected$MH,"SSL_SESSION_get0_alpn_selected");
    }
    public static void SSL_SESSION_get0_alpn_selected ( Addressable s,  Addressable alpn,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_get0_alpn_selected$MH, "SSL_SESSION_get0_alpn_selected");
        try {
            mh$.invokeExact(s, alpn, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set1_alpn_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_set1_alpn_selected$MH,"SSL_SESSION_set1_alpn_selected");
    }
    public static int SSL_SESSION_set1_alpn_selected ( Addressable s,  Addressable alpn,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_set1_alpn_selected$MH, "SSL_SESSION_set1_alpn_selected");
        try {
            return (int)mh$.invokeExact(s, alpn, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_get0_cipher$MH,"SSL_SESSION_get0_cipher");
    }
    public static MemoryAddress SSL_SESSION_get0_cipher ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_get0_cipher$MH, "SSL_SESSION_get0_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_set_cipher$MH,"SSL_SESSION_set_cipher");
    }
    public static int SSL_SESSION_set_cipher ( Addressable s,  Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_set_cipher$MH, "SSL_SESSION_set_cipher");
        try {
            return (int)mh$.invokeExact(s, cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_has_ticket$MH() {
        return RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_has_ticket$MH,"SSL_SESSION_has_ticket");
    }
    public static int SSL_SESSION_has_ticket ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$810.SSL_SESSION_has_ticket$MH, "SSL_SESSION_has_ticket");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_ticket_lifetime_hint$MH() {
        return RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get_ticket_lifetime_hint$MH,"SSL_SESSION_get_ticket_lifetime_hint");
    }
    public static long SSL_SESSION_get_ticket_lifetime_hint ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get_ticket_lifetime_hint$MH, "SSL_SESSION_get_ticket_lifetime_hint");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_ticket$MH() {
        return RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get0_ticket$MH,"SSL_SESSION_get0_ticket");
    }
    public static void SSL_SESSION_get0_ticket ( Addressable s,  Addressable tick,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get0_ticket$MH, "SSL_SESSION_get0_ticket");
        try {
            mh$.invokeExact(s, tick, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get_max_early_data$MH,"SSL_SESSION_get_max_early_data");
    }
    public static int SSL_SESSION_get_max_early_data ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get_max_early_data$MH, "SSL_SESSION_get_max_early_data");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_set_max_early_data$MH,"SSL_SESSION_set_max_early_data");
    }
    public static int SSL_SESSION_set_max_early_data ( Addressable s,  int max_early_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_set_max_early_data$MH, "SSL_SESSION_set_max_early_data");
        try {
            return (int)mh$.invokeExact(s, max_early_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_copy_session_id$MH() {
        return RuntimeHelper.requireNonNull(constants$811.SSL_copy_session_id$MH,"SSL_copy_session_id");
    }
    public static int SSL_copy_session_id ( Addressable to,  Addressable from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$811.SSL_copy_session_id$MH, "SSL_copy_session_id");
        try {
            return (int)mh$.invokeExact(to, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_peer$MH() {
        return RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get0_peer$MH,"SSL_SESSION_get0_peer");
    }
    public static MemoryAddress SSL_SESSION_get0_peer ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$811.SSL_SESSION_get0_peer$MH, "SSL_SESSION_get0_peer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set1_id_context$MH() {
        return RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_set1_id_context$MH,"SSL_SESSION_set1_id_context");
    }
    public static int SSL_SESSION_set1_id_context ( Addressable s,  Addressable sid_ctx,  int sid_ctx_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_set1_id_context$MH, "SSL_SESSION_set1_id_context");
        try {
            return (int)mh$.invokeExact(s, sid_ctx, sid_ctx_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set1_id$MH() {
        return RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_set1_id$MH,"SSL_SESSION_set1_id");
    }
    public static int SSL_SESSION_set1_id ( Addressable s,  Addressable sid,  int sid_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_set1_id$MH, "SSL_SESSION_set1_id");
        try {
            return (int)mh$.invokeExact(s, sid, sid_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_is_resumable$MH() {
        return RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_is_resumable$MH,"SSL_SESSION_is_resumable");
    }
    public static int SSL_SESSION_is_resumable ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_is_resumable$MH, "SSL_SESSION_is_resumable");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_new$MH() {
        return RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_new$MH,"SSL_SESSION_new");
    }
    public static MemoryAddress SSL_SESSION_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_new$MH, "SSL_SESSION_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_dup$MH,"SSL_SESSION_dup");
    }
    public static MemoryAddress SSL_SESSION_dup ( Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_dup$MH, "SSL_SESSION_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_get_id$MH,"SSL_SESSION_get_id");
    }
    public static MemoryAddress SSL_SESSION_get_id ( Addressable s,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$812.SSL_SESSION_get_id$MH, "SSL_SESSION_get_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_id_context$MH() {
        return RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_get0_id_context$MH,"SSL_SESSION_get0_id_context");
    }
    public static MemoryAddress SSL_SESSION_get0_id_context ( Addressable s,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_get0_id_context$MH, "SSL_SESSION_get0_id_context");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_compress_id$MH() {
        return RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_get_compress_id$MH,"SSL_SESSION_get_compress_id");
    }
    public static int SSL_SESSION_get_compress_id ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_get_compress_id$MH, "SSL_SESSION_get_compress_id");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_print_fp$MH,"SSL_SESSION_print_fp");
    }
    public static int SSL_SESSION_print_fp ( Addressable fp,  Addressable ses) {
        var mh$ = RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_print_fp$MH, "SSL_SESSION_print_fp");
        try {
            return (int)mh$.invokeExact(fp, ses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_print$MH() {
        return RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_print$MH,"SSL_SESSION_print");
    }
    public static int SSL_SESSION_print ( Addressable fp,  Addressable ses) {
        var mh$ = RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_print$MH, "SSL_SESSION_print");
        try {
            return (int)mh$.invokeExact(fp, ses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_print_keylog$MH() {
        return RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_print_keylog$MH,"SSL_SESSION_print_keylog");
    }
    public static int SSL_SESSION_print_keylog ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_print_keylog$MH, "SSL_SESSION_print_keylog");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_up_ref$MH,"SSL_SESSION_up_ref");
    }
    public static int SSL_SESSION_up_ref ( Addressable ses) {
        var mh$ = RuntimeHelper.requireNonNull(constants$813.SSL_SESSION_up_ref$MH, "SSL_SESSION_up_ref");
        try {
            return (int)mh$.invokeExact(ses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_free$MH() {
        return RuntimeHelper.requireNonNull(constants$814.SSL_SESSION_free$MH,"SSL_SESSION_free");
    }
    public static void SSL_SESSION_free ( Addressable ses) {
        var mh$ = RuntimeHelper.requireNonNull(constants$814.SSL_SESSION_free$MH, "SSL_SESSION_free");
        try {
            mh$.invokeExact(ses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_SSL_SESSION$MH() {
        return RuntimeHelper.requireNonNull(constants$814.i2d_SSL_SESSION$MH,"i2d_SSL_SESSION");
    }
    public static int i2d_SSL_SESSION ( Addressable in,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$814.i2d_SSL_SESSION$MH, "i2d_SSL_SESSION");
        try {
            return (int)mh$.invokeExact(in, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_session$MH() {
        return RuntimeHelper.requireNonNull(constants$814.SSL_set_session$MH,"SSL_set_session");
    }
    public static int SSL_set_session ( Addressable to,  Addressable session) {
        var mh$ = RuntimeHelper.requireNonNull(constants$814.SSL_set_session$MH, "SSL_set_session");
        try {
            return (int)mh$.invokeExact(to, session);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add_session$MH() {
        return RuntimeHelper.requireNonNull(constants$814.SSL_CTX_add_session$MH,"SSL_CTX_add_session");
    }
    public static int SSL_CTX_add_session ( Addressable ctx,  Addressable session) {
        var mh$ = RuntimeHelper.requireNonNull(constants$814.SSL_CTX_add_session$MH, "SSL_CTX_add_session");
        try {
            return (int)mh$.invokeExact(ctx, session);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_remove_session$MH() {
        return RuntimeHelper.requireNonNull(constants$814.SSL_CTX_remove_session$MH,"SSL_CTX_remove_session");
    }
    public static int SSL_CTX_remove_session ( Addressable ctx,  Addressable session) {
        var mh$ = RuntimeHelper.requireNonNull(constants$814.SSL_CTX_remove_session$MH, "SSL_CTX_remove_session");
        try {
            return (int)mh$.invokeExact(ctx, session);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_generate_session_id$MH() {
        return RuntimeHelper.requireNonNull(constants$814.SSL_CTX_set_generate_session_id$MH,"SSL_CTX_set_generate_session_id");
    }
    public static int SSL_CTX_set_generate_session_id ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$814.SSL_CTX_set_generate_session_id$MH, "SSL_CTX_set_generate_session_id");
        try {
            return (int)mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_generate_session_id$MH() {
        return RuntimeHelper.requireNonNull(constants$815.SSL_set_generate_session_id$MH,"SSL_set_generate_session_id");
    }
    public static int SSL_set_generate_session_id ( Addressable s,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$815.SSL_set_generate_session_id$MH, "SSL_set_generate_session_id");
        try {
            return (int)mh$.invokeExact(s, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_has_matching_session_id$MH() {
        return RuntimeHelper.requireNonNull(constants$815.SSL_has_matching_session_id$MH,"SSL_has_matching_session_id");
    }
    public static int SSL_has_matching_session_id ( Addressable s,  Addressable id,  int id_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$815.SSL_has_matching_session_id$MH, "SSL_has_matching_session_id");
        try {
            return (int)mh$.invokeExact(s, id, id_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_SSL_SESSION$MH() {
        return RuntimeHelper.requireNonNull(constants$815.d2i_SSL_SESSION$MH,"d2i_SSL_SESSION");
    }
    public static MemoryAddress d2i_SSL_SESSION ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$815.d2i_SSL_SESSION$MH, "d2i_SSL_SESSION");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_peer_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$815.SSL_get_peer_certificate$MH,"SSL_get_peer_certificate");
    }
    public static MemoryAddress SSL_get_peer_certificate ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$815.SSL_get_peer_certificate$MH, "SSL_get_peer_certificate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_peer_cert_chain$MH() {
        return RuntimeHelper.requireNonNull(constants$815.SSL_get_peer_cert_chain$MH,"SSL_get_peer_cert_chain");
    }
    public static MemoryAddress SSL_get_peer_cert_chain ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$815.SSL_get_peer_cert_chain$MH, "SSL_get_peer_cert_chain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_verify_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$815.SSL_CTX_get_verify_mode$MH,"SSL_CTX_get_verify_mode");
    }
    public static int SSL_CTX_get_verify_mode ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$815.SSL_CTX_get_verify_mode$MH, "SSL_CTX_get_verify_mode");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_verify_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$816.SSL_CTX_get_verify_depth$MH,"SSL_CTX_get_verify_depth");
    }
    public static int SSL_CTX_get_verify_depth ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$816.SSL_CTX_get_verify_depth$MH, "SSL_CTX_get_verify_depth");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_verify_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$816.SSL_CTX_get_verify_callback$MH,"SSL_CTX_get_verify_callback");
    }
    public static MemoryAddress SSL_CTX_get_verify_callback ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$816.SSL_CTX_get_verify_callback$MH, "SSL_CTX_get_verify_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$816.SSL_CTX_set_verify$MH,"SSL_CTX_set_verify");
    }
    public static void SSL_CTX_set_verify ( Addressable ctx,  int mode,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$816.SSL_CTX_set_verify$MH, "SSL_CTX_set_verify");
        try {
            mh$.invokeExact(ctx, mode, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_verify_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$816.SSL_CTX_set_verify_depth$MH,"SSL_CTX_set_verify_depth");
    }
    public static void SSL_CTX_set_verify_depth ( Addressable ctx,  int depth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$816.SSL_CTX_set_verify_depth$MH, "SSL_CTX_set_verify_depth");
        try {
            mh$.invokeExact(ctx, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cert_verify_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$817.SSL_CTX_set_cert_verify_callback$MH,"SSL_CTX_set_cert_verify_callback");
    }
    public static void SSL_CTX_set_cert_verify_callback ( Addressable ctx,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$817.SSL_CTX_set_cert_verify_callback$MH, "SSL_CTX_set_cert_verify_callback");
        try {
            mh$.invokeExact(ctx, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cert_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$817.SSL_CTX_set_cert_cb$MH,"SSL_CTX_set_cert_cb");
    }
    public static void SSL_CTX_set_cert_cb ( Addressable c,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$817.SSL_CTX_set_cert_cb$MH, "SSL_CTX_set_cert_cb");
        try {
            mh$.invokeExact(c, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_RSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$817.SSL_CTX_use_RSAPrivateKey$MH,"SSL_CTX_use_RSAPrivateKey");
    }
    public static int SSL_CTX_use_RSAPrivateKey ( Addressable ctx,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$817.SSL_CTX_use_RSAPrivateKey$MH, "SSL_CTX_use_RSAPrivateKey");
        try {
            return (int)mh$.invokeExact(ctx, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_RSAPrivateKey_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$817.SSL_CTX_use_RSAPrivateKey_ASN1$MH,"SSL_CTX_use_RSAPrivateKey_ASN1");
    }
    public static int SSL_CTX_use_RSAPrivateKey_ASN1 ( Addressable ctx,  Addressable d,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$817.SSL_CTX_use_RSAPrivateKey_ASN1$MH, "SSL_CTX_use_RSAPrivateKey_ASN1");
        try {
            return (int)mh$.invokeExact(ctx, d, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_PrivateKey$MH,"SSL_CTX_use_PrivateKey");
    }
    public static int SSL_CTX_use_PrivateKey ( Addressable ctx,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_PrivateKey$MH, "SSL_CTX_use_PrivateKey");
        try {
            return (int)mh$.invokeExact(ctx, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_PrivateKey_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_PrivateKey_ASN1$MH,"SSL_CTX_use_PrivateKey_ASN1");
    }
    public static int SSL_CTX_use_PrivateKey_ASN1 ( int pk,  Addressable ctx,  Addressable d,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_PrivateKey_ASN1$MH, "SSL_CTX_use_PrivateKey_ASN1");
        try {
            return (int)mh$.invokeExact(pk, ctx, d, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_certificate$MH,"SSL_CTX_use_certificate");
    }
    public static int SSL_CTX_use_certificate ( Addressable ctx,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_certificate$MH, "SSL_CTX_use_certificate");
        try {
            return (int)mh$.invokeExact(ctx, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_certificate_ASN1$MH() {
        return RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_certificate_ASN1$MH,"SSL_CTX_use_certificate_ASN1");
    }
    public static int SSL_CTX_use_certificate_ASN1 ( Addressable ctx,  int len,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_certificate_ASN1$MH, "SSL_CTX_use_certificate_ASN1");
        try {
            return (int)mh$.invokeExact(ctx, len, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_cert_and_key$MH() {
        return RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_cert_and_key$MH,"SSL_CTX_use_cert_and_key");
    }
    public static int SSL_CTX_use_cert_and_key ( Addressable ctx,  Addressable x509,  Addressable privatekey,  Addressable chain,  int override) {
        var mh$ = RuntimeHelper.requireNonNull(constants$818.SSL_CTX_use_cert_and_key$MH, "SSL_CTX_use_cert_and_key");
        try {
            return (int)mh$.invokeExact(ctx, x509, privatekey, chain, override);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_passwd_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$818.SSL_CTX_set_default_passwd_cb$MH,"SSL_CTX_set_default_passwd_cb");
    }
    public static void SSL_CTX_set_default_passwd_cb ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$818.SSL_CTX_set_default_passwd_cb$MH, "SSL_CTX_set_default_passwd_cb");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_passwd_cb_userdata$MH() {
        return RuntimeHelper.requireNonNull(constants$819.SSL_CTX_set_default_passwd_cb_userdata$MH,"SSL_CTX_set_default_passwd_cb_userdata");
    }
    public static void SSL_CTX_set_default_passwd_cb_userdata ( Addressable ctx,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$819.SSL_CTX_set_default_passwd_cb_userdata$MH, "SSL_CTX_set_default_passwd_cb_userdata");
        try {
            mh$.invokeExact(ctx, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_default_passwd_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$819.SSL_CTX_get_default_passwd_cb$MH,"SSL_CTX_get_default_passwd_cb");
    }
    public static MemoryAddress SSL_CTX_get_default_passwd_cb ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$819.SSL_CTX_get_default_passwd_cb$MH, "SSL_CTX_get_default_passwd_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_default_passwd_cb_userdata$MH() {
        return RuntimeHelper.requireNonNull(constants$819.SSL_CTX_get_default_passwd_cb_userdata$MH,"SSL_CTX_get_default_passwd_cb_userdata");
    }
    public static MemoryAddress SSL_CTX_get_default_passwd_cb_userdata ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$819.SSL_CTX_get_default_passwd_cb_userdata$MH, "SSL_CTX_get_default_passwd_cb_userdata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_default_passwd_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$819.SSL_set_default_passwd_cb$MH,"SSL_set_default_passwd_cb");
    }
    public static void SSL_set_default_passwd_cb ( Addressable s,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$819.SSL_set_default_passwd_cb$MH, "SSL_set_default_passwd_cb");
        try {
            mh$.invokeExact(s, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_default_passwd_cb_userdata$MH() {
        return RuntimeHelper.requireNonNull(constants$819.SSL_set_default_passwd_cb_userdata$MH,"SSL_set_default_passwd_cb_userdata");
    }
    public static void SSL_set_default_passwd_cb_userdata ( Addressable s,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$819.SSL_set_default_passwd_cb_userdata$MH, "SSL_set_default_passwd_cb_userdata");
        try {
            mh$.invokeExact(s, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_default_passwd_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$819.SSL_get_default_passwd_cb$MH,"SSL_get_default_passwd_cb");
    }
    public static MemoryAddress SSL_get_default_passwd_cb ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$819.SSL_get_default_passwd_cb$MH, "SSL_get_default_passwd_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_default_passwd_cb_userdata$MH() {
        return RuntimeHelper.requireNonNull(constants$820.SSL_get_default_passwd_cb_userdata$MH,"SSL_get_default_passwd_cb_userdata");
    }
    public static MemoryAddress SSL_get_default_passwd_cb_userdata ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$820.SSL_get_default_passwd_cb_userdata$MH, "SSL_get_default_passwd_cb_userdata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_check_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$820.SSL_CTX_check_private_key$MH,"SSL_CTX_check_private_key");
    }
    public static int SSL_CTX_check_private_key ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$820.SSL_CTX_check_private_key$MH, "SSL_CTX_check_private_key");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_check_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$820.SSL_check_private_key$MH,"SSL_check_private_key");
    }
    public static int SSL_check_private_key ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$820.SSL_check_private_key$MH, "SSL_check_private_key");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_session_id_context$MH() {
        return RuntimeHelper.requireNonNull(constants$820.SSL_CTX_set_session_id_context$MH,"SSL_CTX_set_session_id_context");
    }
    public static int SSL_CTX_set_session_id_context ( Addressable ctx,  Addressable sid_ctx,  int sid_ctx_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$820.SSL_CTX_set_session_id_context$MH, "SSL_CTX_set_session_id_context");
        try {
            return (int)mh$.invokeExact(ctx, sid_ctx, sid_ctx_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_new$MH() {
        return RuntimeHelper.requireNonNull(constants$820.SSL_new$MH,"SSL_new");
    }
    public static MemoryAddress SSL_new ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$820.SSL_new$MH, "SSL_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$820.SSL_up_ref$MH,"SSL_up_ref");
    }
    public static int SSL_up_ref ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$820.SSL_up_ref$MH, "SSL_up_ref");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_is_dtls$MH() {
        return RuntimeHelper.requireNonNull(constants$821.SSL_is_dtls$MH,"SSL_is_dtls");
    }
    public static int SSL_is_dtls ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$821.SSL_is_dtls$MH, "SSL_is_dtls");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_session_id_context$MH() {
        return RuntimeHelper.requireNonNull(constants$821.SSL_set_session_id_context$MH,"SSL_set_session_id_context");
    }
    public static int SSL_set_session_id_context ( Addressable ssl,  Addressable sid_ctx,  int sid_ctx_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$821.SSL_set_session_id_context$MH, "SSL_set_session_id_context");
        try {
            return (int)mh$.invokeExact(ssl, sid_ctx, sid_ctx_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_purpose$MH() {
        return RuntimeHelper.requireNonNull(constants$821.SSL_CTX_set_purpose$MH,"SSL_CTX_set_purpose");
    }
    public static int SSL_CTX_set_purpose ( Addressable ctx,  int purpose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$821.SSL_CTX_set_purpose$MH, "SSL_CTX_set_purpose");
        try {
            return (int)mh$.invokeExact(ctx, purpose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_purpose$MH() {
        return RuntimeHelper.requireNonNull(constants$821.SSL_set_purpose$MH,"SSL_set_purpose");
    }
    public static int SSL_set_purpose ( Addressable ssl,  int purpose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$821.SSL_set_purpose$MH, "SSL_set_purpose");
        try {
            return (int)mh$.invokeExact(ssl, purpose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_trust$MH() {
        return RuntimeHelper.requireNonNull(constants$821.SSL_CTX_set_trust$MH,"SSL_CTX_set_trust");
    }
    public static int SSL_CTX_set_trust ( Addressable ctx,  int trust) {
        var mh$ = RuntimeHelper.requireNonNull(constants$821.SSL_CTX_set_trust$MH, "SSL_CTX_set_trust");
        try {
            return (int)mh$.invokeExact(ctx, trust);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_trust$MH() {
        return RuntimeHelper.requireNonNull(constants$821.SSL_set_trust$MH,"SSL_set_trust");
    }
    public static int SSL_set_trust ( Addressable ssl,  int trust) {
        var mh$ = RuntimeHelper.requireNonNull(constants$821.SSL_set_trust$MH, "SSL_set_trust");
        try {
            return (int)mh$.invokeExact(ssl, trust);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set1_host$MH() {
        return RuntimeHelper.requireNonNull(constants$822.SSL_set1_host$MH,"SSL_set1_host");
    }
    public static int SSL_set1_host ( Addressable s,  Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$822.SSL_set1_host$MH, "SSL_set1_host");
        try {
            return (int)mh$.invokeExact(s, hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add1_host$MH() {
        return RuntimeHelper.requireNonNull(constants$822.SSL_add1_host$MH,"SSL_add1_host");
    }
    public static int SSL_add1_host ( Addressable s,  Addressable hostname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$822.SSL_add1_host$MH, "SSL_add1_host");
        try {
            return (int)mh$.invokeExact(s, hostname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_peername$MH() {
        return RuntimeHelper.requireNonNull(constants$822.SSL_get0_peername$MH,"SSL_get0_peername");
    }
    public static MemoryAddress SSL_get0_peername ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$822.SSL_get0_peername$MH, "SSL_get0_peername");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_hostflags$MH() {
        return RuntimeHelper.requireNonNull(constants$822.SSL_set_hostflags$MH,"SSL_set_hostflags");
    }
    public static void SSL_set_hostflags ( Addressable s,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$822.SSL_set_hostflags$MH, "SSL_set_hostflags");
        try {
            mh$.invokeExact(s, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_dane_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$822.SSL_CTX_dane_enable$MH,"SSL_CTX_dane_enable");
    }
    public static int SSL_CTX_dane_enable ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$822.SSL_CTX_dane_enable$MH, "SSL_CTX_dane_enable");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_dane_mtype_set$MH() {
        return RuntimeHelper.requireNonNull(constants$822.SSL_CTX_dane_mtype_set$MH,"SSL_CTX_dane_mtype_set");
    }
    public static int SSL_CTX_dane_mtype_set ( Addressable ctx,  Addressable md,  byte mtype,  byte ord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$822.SSL_CTX_dane_mtype_set$MH, "SSL_CTX_dane_mtype_set");
        try {
            return (int)mh$.invokeExact(ctx, md, mtype, ord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_dane_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$823.SSL_dane_enable$MH,"SSL_dane_enable");
    }
    public static int SSL_dane_enable ( Addressable s,  Addressable basedomain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$823.SSL_dane_enable$MH, "SSL_dane_enable");
        try {
            return (int)mh$.invokeExact(s, basedomain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_dane_tlsa_add$MH() {
        return RuntimeHelper.requireNonNull(constants$823.SSL_dane_tlsa_add$MH,"SSL_dane_tlsa_add");
    }
    public static int SSL_dane_tlsa_add ( Addressable s,  byte usage,  byte selector,  byte mtype,  Addressable data,  long dlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$823.SSL_dane_tlsa_add$MH, "SSL_dane_tlsa_add");
        try {
            return (int)mh$.invokeExact(s, usage, selector, mtype, data, dlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_dane_authority$MH() {
        return RuntimeHelper.requireNonNull(constants$823.SSL_get0_dane_authority$MH,"SSL_get0_dane_authority");
    }
    public static int SSL_get0_dane_authority ( Addressable s,  Addressable mcert,  Addressable mspki) {
        var mh$ = RuntimeHelper.requireNonNull(constants$823.SSL_get0_dane_authority$MH, "SSL_get0_dane_authority");
        try {
            return (int)mh$.invokeExact(s, mcert, mspki);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_dane_tlsa$MH() {
        return RuntimeHelper.requireNonNull(constants$823.SSL_get0_dane_tlsa$MH,"SSL_get0_dane_tlsa");
    }
    public static int SSL_get0_dane_tlsa ( Addressable s,  Addressable usage,  Addressable selector,  Addressable mtype,  Addressable data,  Addressable dlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$823.SSL_get0_dane_tlsa$MH, "SSL_get0_dane_tlsa");
        try {
            return (int)mh$.invokeExact(s, usage, selector, mtype, data, dlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_dane$MH() {
        return RuntimeHelper.requireNonNull(constants$823.SSL_get0_dane$MH,"SSL_get0_dane");
    }
    public static MemoryAddress SSL_get0_dane ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$823.SSL_get0_dane$MH, "SSL_get0_dane");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_dane_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$823.SSL_CTX_dane_set_flags$MH,"SSL_CTX_dane_set_flags");
    }
    public static long SSL_CTX_dane_set_flags ( Addressable ctx,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$823.SSL_CTX_dane_set_flags$MH, "SSL_CTX_dane_set_flags");
        try {
            return (long)mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_dane_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$824.SSL_CTX_dane_clear_flags$MH,"SSL_CTX_dane_clear_flags");
    }
    public static long SSL_CTX_dane_clear_flags ( Addressable ctx,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$824.SSL_CTX_dane_clear_flags$MH, "SSL_CTX_dane_clear_flags");
        try {
            return (long)mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_dane_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$824.SSL_dane_set_flags$MH,"SSL_dane_set_flags");
    }
    public static long SSL_dane_set_flags ( Addressable ssl,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$824.SSL_dane_set_flags$MH, "SSL_dane_set_flags");
        try {
            return (long)mh$.invokeExact(ssl, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_dane_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$824.SSL_dane_clear_flags$MH,"SSL_dane_clear_flags");
    }
    public static long SSL_dane_clear_flags ( Addressable ssl,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$824.SSL_dane_clear_flags$MH, "SSL_dane_clear_flags");
        try {
            return (long)mh$.invokeExact(ssl, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set1_param$MH() {
        return RuntimeHelper.requireNonNull(constants$824.SSL_CTX_set1_param$MH,"SSL_CTX_set1_param");
    }
    public static int SSL_CTX_set1_param ( Addressable ctx,  Addressable vpm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$824.SSL_CTX_set1_param$MH, "SSL_CTX_set1_param");
        try {
            return (int)mh$.invokeExact(ctx, vpm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set1_param$MH() {
        return RuntimeHelper.requireNonNull(constants$824.SSL_set1_param$MH,"SSL_set1_param");
    }
    public static int SSL_set1_param ( Addressable ssl,  Addressable vpm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$824.SSL_set1_param$MH, "SSL_set1_param");
        try {
            return (int)mh$.invokeExact(ssl, vpm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get0_param$MH() {
        return RuntimeHelper.requireNonNull(constants$824.SSL_CTX_get0_param$MH,"SSL_CTX_get0_param");
    }
    public static MemoryAddress SSL_CTX_get0_param ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$824.SSL_CTX_get0_param$MH, "SSL_CTX_get0_param");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_param$MH() {
        return RuntimeHelper.requireNonNull(constants$825.SSL_get0_param$MH,"SSL_get0_param");
    }
    public static MemoryAddress SSL_get0_param ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$825.SSL_get0_param$MH, "SSL_get0_param");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_username$MH() {
        return RuntimeHelper.requireNonNull(constants$825.SSL_CTX_set_srp_username$MH,"SSL_CTX_set_srp_username");
    }
    public static int SSL_CTX_set_srp_username ( Addressable ctx,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$825.SSL_CTX_set_srp_username$MH, "SSL_CTX_set_srp_username");
        try {
            return (int)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_password$MH() {
        return RuntimeHelper.requireNonNull(constants$825.SSL_CTX_set_srp_password$MH,"SSL_CTX_set_srp_password");
    }
    public static int SSL_CTX_set_srp_password ( Addressable ctx,  Addressable password) {
        var mh$ = RuntimeHelper.requireNonNull(constants$825.SSL_CTX_set_srp_password$MH, "SSL_CTX_set_srp_password");
        try {
            return (int)mh$.invokeExact(ctx, password);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_strength$MH() {
        return RuntimeHelper.requireNonNull(constants$825.SSL_CTX_set_srp_strength$MH,"SSL_CTX_set_srp_strength");
    }
    public static int SSL_CTX_set_srp_strength ( Addressable ctx,  int strength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$825.SSL_CTX_set_srp_strength$MH, "SSL_CTX_set_srp_strength");
        try {
            return (int)mh$.invokeExact(ctx, strength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_client_pwd_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$826.SSL_CTX_set_srp_client_pwd_callback$MH,"SSL_CTX_set_srp_client_pwd_callback");
    }
    public static int SSL_CTX_set_srp_client_pwd_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$826.SSL_CTX_set_srp_client_pwd_callback$MH, "SSL_CTX_set_srp_client_pwd_callback");
        try {
            return (int)mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_verify_param_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$826.SSL_CTX_set_srp_verify_param_callback$MH,"SSL_CTX_set_srp_verify_param_callback");
    }
    public static int SSL_CTX_set_srp_verify_param_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$826.SSL_CTX_set_srp_verify_param_callback$MH, "SSL_CTX_set_srp_verify_param_callback");
        try {
            return (int)mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_username_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$827.SSL_CTX_set_srp_username_callback$MH,"SSL_CTX_set_srp_username_callback");
    }
    public static int SSL_CTX_set_srp_username_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$827.SSL_CTX_set_srp_username_callback$MH, "SSL_CTX_set_srp_username_callback");
        try {
            return (int)mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_srp_cb_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$827.SSL_CTX_set_srp_cb_arg$MH,"SSL_CTX_set_srp_cb_arg");
    }
    public static int SSL_CTX_set_srp_cb_arg ( Addressable ctx,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$827.SSL_CTX_set_srp_cb_arg$MH, "SSL_CTX_set_srp_cb_arg");
        try {
            return (int)mh$.invokeExact(ctx, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_srp_server_param$MH() {
        return RuntimeHelper.requireNonNull(constants$827.SSL_set_srp_server_param$MH,"SSL_set_srp_server_param");
    }
    public static int SSL_set_srp_server_param ( Addressable s,  Addressable N,  Addressable g,  Addressable sa,  Addressable v,  Addressable info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$827.SSL_set_srp_server_param$MH, "SSL_set_srp_server_param");
        try {
            return (int)mh$.invokeExact(s, N, g, sa, v, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_srp_server_param_pw$MH() {
        return RuntimeHelper.requireNonNull(constants$827.SSL_set_srp_server_param_pw$MH,"SSL_set_srp_server_param_pw");
    }
    public static int SSL_set_srp_server_param_pw ( Addressable s,  Addressable user,  Addressable pass,  Addressable grp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$827.SSL_set_srp_server_param_pw$MH, "SSL_set_srp_server_param_pw");
        try {
            return (int)mh$.invokeExact(s, user, pass, grp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_srp_g$MH() {
        return RuntimeHelper.requireNonNull(constants$827.SSL_get_srp_g$MH,"SSL_get_srp_g");
    }
    public static MemoryAddress SSL_get_srp_g ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$827.SSL_get_srp_g$MH, "SSL_get_srp_g");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_srp_N$MH() {
        return RuntimeHelper.requireNonNull(constants$827.SSL_get_srp_N$MH,"SSL_get_srp_N");
    }
    public static MemoryAddress SSL_get_srp_N ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$827.SSL_get_srp_N$MH, "SSL_get_srp_N");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_srp_username$MH() {
        return RuntimeHelper.requireNonNull(constants$828.SSL_get_srp_username$MH,"SSL_get_srp_username");
    }
    public static MemoryAddress SSL_get_srp_username ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$828.SSL_get_srp_username$MH, "SSL_get_srp_username");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_srp_userinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$828.SSL_get_srp_userinfo$MH,"SSL_get_srp_userinfo");
    }
    public static MemoryAddress SSL_get_srp_userinfo ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$828.SSL_get_srp_userinfo$MH, "SSL_get_srp_userinfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_client_hello_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$828.SSL_CTX_set_client_hello_cb$MH,"SSL_CTX_set_client_hello_cb");
    }
    public static void SSL_CTX_set_client_hello_cb ( Addressable c,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$828.SSL_CTX_set_client_hello_cb$MH, "SSL_CTX_set_client_hello_cb");
        try {
            mh$.invokeExact(c, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_isv2$MH() {
        return RuntimeHelper.requireNonNull(constants$828.SSL_client_hello_isv2$MH,"SSL_client_hello_isv2");
    }
    public static int SSL_client_hello_isv2 ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$828.SSL_client_hello_isv2$MH, "SSL_client_hello_isv2");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get0_legacy_version$MH() {
        return RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_legacy_version$MH,"SSL_client_hello_get0_legacy_version");
    }
    public static int SSL_client_hello_get0_legacy_version ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_legacy_version$MH, "SSL_client_hello_get0_legacy_version");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get0_random$MH() {
        return RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_random$MH,"SSL_client_hello_get0_random");
    }
    public static long SSL_client_hello_get0_random ( Addressable s,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_random$MH, "SSL_client_hello_get0_random");
        try {
            return (long)mh$.invokeExact(s, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get0_session_id$MH() {
        return RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_session_id$MH,"SSL_client_hello_get0_session_id");
    }
    public static long SSL_client_hello_get0_session_id ( Addressable s,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_session_id$MH, "SSL_client_hello_get0_session_id");
        try {
            return (long)mh$.invokeExact(s, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get0_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_ciphers$MH,"SSL_client_hello_get0_ciphers");
    }
    public static long SSL_client_hello_get0_ciphers ( Addressable s,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_ciphers$MH, "SSL_client_hello_get0_ciphers");
        try {
            return (long)mh$.invokeExact(s, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get0_compression_methods$MH() {
        return RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_compression_methods$MH,"SSL_client_hello_get0_compression_methods");
    }
    public static long SSL_client_hello_get0_compression_methods ( Addressable s,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get0_compression_methods$MH, "SSL_client_hello_get0_compression_methods");
        try {
            return (long)mh$.invokeExact(s, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get1_extensions_present$MH() {
        return RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get1_extensions_present$MH,"SSL_client_hello_get1_extensions_present");
    }
    public static int SSL_client_hello_get1_extensions_present ( Addressable s,  Addressable out,  Addressable outlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$829.SSL_client_hello_get1_extensions_present$MH, "SSL_client_hello_get1_extensions_present");
        try {
            return (int)mh$.invokeExact(s, out, outlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_hello_get0_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$830.SSL_client_hello_get0_ext$MH,"SSL_client_hello_get0_ext");
    }
    public static int SSL_client_hello_get0_ext ( Addressable s,  int type,  Addressable out,  Addressable outlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$830.SSL_client_hello_get0_ext$MH, "SSL_client_hello_get0_ext");
        try {
            return (int)mh$.invokeExact(s, type, out, outlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_certs_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$830.SSL_certs_clear$MH,"SSL_certs_clear");
    }
    public static void SSL_certs_clear ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$830.SSL_certs_clear$MH, "SSL_certs_clear");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$830.SSL_free$MH,"SSL_free");
    }
    public static void SSL_free ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$830.SSL_free$MH, "SSL_free");
        try {
            mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_waiting_for_async$MH() {
        return RuntimeHelper.requireNonNull(constants$830.SSL_waiting_for_async$MH,"SSL_waiting_for_async");
    }
    public static int SSL_waiting_for_async ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$830.SSL_waiting_for_async$MH, "SSL_waiting_for_async");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_all_async_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$830.SSL_get_all_async_fds$MH,"SSL_get_all_async_fds");
    }
    public static int SSL_get_all_async_fds ( Addressable s,  Addressable fds,  Addressable numfds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$830.SSL_get_all_async_fds$MH, "SSL_get_all_async_fds");
        try {
            return (int)mh$.invokeExact(s, fds, numfds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_changed_async_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$830.SSL_get_changed_async_fds$MH,"SSL_get_changed_async_fds");
    }
    public static int SSL_get_changed_async_fds ( Addressable s,  Addressable addfd,  Addressable numaddfds,  Addressable delfd,  Addressable numdelfds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$830.SSL_get_changed_async_fds$MH, "SSL_get_changed_async_fds");
        try {
            return (int)mh$.invokeExact(s, addfd, numaddfds, delfd, numdelfds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$831.SSL_accept$MH,"SSL_accept");
    }
    public static int SSL_accept ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$831.SSL_accept$MH, "SSL_accept");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_stateless$MH() {
        return RuntimeHelper.requireNonNull(constants$831.SSL_stateless$MH,"SSL_stateless");
    }
    public static int SSL_stateless ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$831.SSL_stateless$MH, "SSL_stateless");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$831.SSL_connect$MH,"SSL_connect");
    }
    public static int SSL_connect ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$831.SSL_connect$MH, "SSL_connect");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_read$MH() {
        return RuntimeHelper.requireNonNull(constants$831.SSL_read$MH,"SSL_read");
    }
    public static int SSL_read ( Addressable ssl,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$831.SSL_read$MH, "SSL_read");
        try {
            return (int)mh$.invokeExact(ssl, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_read_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$831.SSL_read_ex$MH,"SSL_read_ex");
    }
    public static int SSL_read_ex ( Addressable ssl,  Addressable buf,  long num,  Addressable readbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$831.SSL_read_ex$MH, "SSL_read_ex");
        try {
            return (int)mh$.invokeExact(ssl, buf, num, readbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_read_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$831.SSL_read_early_data$MH,"SSL_read_early_data");
    }
    public static int SSL_read_early_data ( Addressable s,  Addressable buf,  long num,  Addressable readbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$831.SSL_read_early_data$MH, "SSL_read_early_data");
        try {
            return (int)mh$.invokeExact(s, buf, num, readbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_peek$MH() {
        return RuntimeHelper.requireNonNull(constants$832.SSL_peek$MH,"SSL_peek");
    }
    public static int SSL_peek ( Addressable ssl,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$832.SSL_peek$MH, "SSL_peek");
        try {
            return (int)mh$.invokeExact(ssl, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_peek_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$832.SSL_peek_ex$MH,"SSL_peek_ex");
    }
    public static int SSL_peek_ex ( Addressable ssl,  Addressable buf,  long num,  Addressable readbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$832.SSL_peek_ex$MH, "SSL_peek_ex");
        try {
            return (int)mh$.invokeExact(ssl, buf, num, readbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_write$MH() {
        return RuntimeHelper.requireNonNull(constants$832.SSL_write$MH,"SSL_write");
    }
    public static int SSL_write ( Addressable ssl,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$832.SSL_write$MH, "SSL_write");
        try {
            return (int)mh$.invokeExact(ssl, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_write_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$832.SSL_write_ex$MH,"SSL_write_ex");
    }
    public static int SSL_write_ex ( Addressable s,  Addressable buf,  long num,  Addressable written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$832.SSL_write_ex$MH, "SSL_write_ex");
        try {
            return (int)mh$.invokeExact(s, buf, num, written);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_write_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$832.SSL_write_early_data$MH,"SSL_write_early_data");
    }
    public static int SSL_write_early_data ( Addressable s,  Addressable buf,  long num,  Addressable written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$832.SSL_write_early_data$MH, "SSL_write_early_data");
        try {
            return (int)mh$.invokeExact(s, buf, num, written);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$832.SSL_ctrl$MH,"SSL_ctrl");
    }
    public static long SSL_ctrl ( Addressable ssl,  int cmd,  long larg,  Addressable parg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$832.SSL_ctrl$MH, "SSL_ctrl");
        try {
            return (long)mh$.invokeExact(ssl, cmd, larg, parg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_callback_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$833.SSL_callback_ctrl$MH,"SSL_callback_ctrl");
    }
    public static long SSL_callback_ctrl ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$833.SSL_callback_ctrl$MH, "SSL_callback_ctrl");
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$833.SSL_CTX_ctrl$MH,"SSL_CTX_ctrl");
    }
    public static long SSL_CTX_ctrl ( Addressable ctx,  int cmd,  long larg,  Addressable parg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$833.SSL_CTX_ctrl$MH, "SSL_CTX_ctrl");
        try {
            return (long)mh$.invokeExact(ctx, cmd, larg, parg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_callback_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$834.SSL_CTX_callback_ctrl$MH,"SSL_CTX_callback_ctrl");
    }
    public static long SSL_CTX_callback_ctrl ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$834.SSL_CTX_callback_ctrl$MH, "SSL_CTX_callback_ctrl");
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_early_data_status$MH() {
        return RuntimeHelper.requireNonNull(constants$834.SSL_get_early_data_status$MH,"SSL_get_early_data_status");
    }
    public static int SSL_get_early_data_status ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$834.SSL_get_early_data_status$MH, "SSL_get_early_data_status");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_error$MH() {
        return RuntimeHelper.requireNonNull(constants$834.SSL_get_error$MH,"SSL_get_error");
    }
    public static int SSL_get_error ( Addressable s,  int ret_code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$834.SSL_get_error$MH, "SSL_get_error");
        try {
            return (int)mh$.invokeExact(s, ret_code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$834.SSL_get_version$MH,"SSL_get_version");
    }
    public static MemoryAddress SSL_get_version ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$834.SSL_get_version$MH, "SSL_get_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_ssl_version$MH() {
        return RuntimeHelper.requireNonNull(constants$834.SSL_CTX_set_ssl_version$MH,"SSL_CTX_set_ssl_version");
    }
    public static int SSL_CTX_set_ssl_version ( Addressable ctx,  Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$834.SSL_CTX_set_ssl_version$MH, "SSL_CTX_set_ssl_version");
        try {
            return (int)mh$.invokeExact(ctx, meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSLv3_method$MH() {
        return RuntimeHelper.requireNonNull(constants$834.SSLv3_method$MH,"SSLv3_method");
    }
    public static MemoryAddress SSLv3_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$834.SSLv3_method$MH, "SSLv3_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSLv3_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SSLv3_server_method$MH,"SSLv3_server_method");
    }
    public static MemoryAddress SSLv3_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SSLv3_server_method$MH, "SSLv3_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSLv3_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$835.SSLv3_client_method$MH,"SSLv3_client_method");
    }
    public static MemoryAddress SSLv3_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.SSLv3_client_method$MH, "SSLv3_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLS_method$MH() {
        return RuntimeHelper.requireNonNull(constants$835.TLS_method$MH,"TLS_method");
    }
    public static MemoryAddress TLS_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.TLS_method$MH, "TLS_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLS_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$835.TLS_server_method$MH,"TLS_server_method");
    }
    public static MemoryAddress TLS_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.TLS_server_method$MH, "TLS_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLS_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$835.TLS_client_method$MH,"TLS_client_method");
    }
    public static MemoryAddress TLS_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.TLS_client_method$MH, "TLS_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_method$MH() {
        return RuntimeHelper.requireNonNull(constants$835.TLSv1_method$MH,"TLSv1_method");
    }
    public static MemoryAddress TLSv1_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$835.TLSv1_method$MH, "TLSv1_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$836.TLSv1_server_method$MH,"TLSv1_server_method");
    }
    public static MemoryAddress TLSv1_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.TLSv1_server_method$MH, "TLSv1_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$836.TLSv1_client_method$MH,"TLSv1_client_method");
    }
    public static MemoryAddress TLSv1_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.TLSv1_client_method$MH, "TLSv1_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_1_method$MH() {
        return RuntimeHelper.requireNonNull(constants$836.TLSv1_1_method$MH,"TLSv1_1_method");
    }
    public static MemoryAddress TLSv1_1_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.TLSv1_1_method$MH, "TLSv1_1_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_1_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$836.TLSv1_1_server_method$MH,"TLSv1_1_server_method");
    }
    public static MemoryAddress TLSv1_1_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.TLSv1_1_server_method$MH, "TLSv1_1_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_1_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$836.TLSv1_1_client_method$MH,"TLSv1_1_client_method");
    }
    public static MemoryAddress TLSv1_1_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.TLSv1_1_client_method$MH, "TLSv1_1_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_2_method$MH() {
        return RuntimeHelper.requireNonNull(constants$836.TLSv1_2_method$MH,"TLSv1_2_method");
    }
    public static MemoryAddress TLSv1_2_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$836.TLSv1_2_method$MH, "TLSv1_2_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_2_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$837.TLSv1_2_server_method$MH,"TLSv1_2_server_method");
    }
    public static MemoryAddress TLSv1_2_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.TLSv1_2_server_method$MH, "TLSv1_2_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLSv1_2_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$837.TLSv1_2_client_method$MH,"TLSv1_2_client_method");
    }
    public static MemoryAddress TLSv1_2_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.TLSv1_2_client_method$MH, "TLSv1_2_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_method$MH() {
        return RuntimeHelper.requireNonNull(constants$837.DTLSv1_method$MH,"DTLSv1_method");
    }
    public static MemoryAddress DTLSv1_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.DTLSv1_method$MH, "DTLSv1_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$837.DTLSv1_server_method$MH,"DTLSv1_server_method");
    }
    public static MemoryAddress DTLSv1_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.DTLSv1_server_method$MH, "DTLSv1_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$837.DTLSv1_client_method$MH,"DTLSv1_client_method");
    }
    public static MemoryAddress DTLSv1_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.DTLSv1_client_method$MH, "DTLSv1_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_2_method$MH() {
        return RuntimeHelper.requireNonNull(constants$837.DTLSv1_2_method$MH,"DTLSv1_2_method");
    }
    public static MemoryAddress DTLSv1_2_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$837.DTLSv1_2_method$MH, "DTLSv1_2_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_2_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$838.DTLSv1_2_server_method$MH,"DTLSv1_2_server_method");
    }
    public static MemoryAddress DTLSv1_2_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.DTLSv1_2_server_method$MH, "DTLSv1_2_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_2_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$838.DTLSv1_2_client_method$MH,"DTLSv1_2_client_method");
    }
    public static MemoryAddress DTLSv1_2_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.DTLSv1_2_client_method$MH, "DTLSv1_2_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLS_method$MH() {
        return RuntimeHelper.requireNonNull(constants$838.DTLS_method$MH,"DTLS_method");
    }
    public static MemoryAddress DTLS_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.DTLS_method$MH, "DTLS_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLS_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$838.DTLS_server_method$MH,"DTLS_server_method");
    }
    public static MemoryAddress DTLS_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.DTLS_server_method$MH, "DTLS_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLS_client_method$MH() {
        return RuntimeHelper.requireNonNull(constants$838.DTLS_client_method$MH,"DTLS_client_method");
    }
    public static MemoryAddress DTLS_client_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.DTLS_client_method$MH, "DTLS_client_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLS_get_data_mtu$MH() {
        return RuntimeHelper.requireNonNull(constants$838.DTLS_get_data_mtu$MH,"DTLS_get_data_mtu");
    }
    public static long DTLS_get_data_mtu ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$838.DTLS_get_data_mtu$MH, "DTLS_get_data_mtu");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SSL_get_ciphers$MH,"SSL_get_ciphers");
    }
    public static MemoryAddress SSL_get_ciphers ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SSL_get_ciphers$MH, "SSL_get_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SSL_CTX_get_ciphers$MH,"SSL_CTX_get_ciphers");
    }
    public static MemoryAddress SSL_CTX_get_ciphers ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SSL_CTX_get_ciphers$MH, "SSL_CTX_get_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_client_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SSL_get_client_ciphers$MH,"SSL_get_client_ciphers");
    }
    public static MemoryAddress SSL_get_client_ciphers ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SSL_get_client_ciphers$MH, "SSL_get_client_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get1_supported_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SSL_get1_supported_ciphers$MH,"SSL_get1_supported_ciphers");
    }
    public static MemoryAddress SSL_get1_supported_ciphers ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SSL_get1_supported_ciphers$MH, "SSL_get1_supported_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_do_handshake$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SSL_do_handshake$MH,"SSL_do_handshake");
    }
    public static int SSL_do_handshake ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SSL_do_handshake$MH, "SSL_do_handshake");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_key_update$MH() {
        return RuntimeHelper.requireNonNull(constants$839.SSL_key_update$MH,"SSL_key_update");
    }
    public static int SSL_key_update ( Addressable s,  int updatetype) {
        var mh$ = RuntimeHelper.requireNonNull(constants$839.SSL_key_update$MH, "SSL_key_update");
        try {
            return (int)mh$.invokeExact(s, updatetype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_key_update_type$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SSL_get_key_update_type$MH,"SSL_get_key_update_type");
    }
    public static int SSL_get_key_update_type ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SSL_get_key_update_type$MH, "SSL_get_key_update_type");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_renegotiate$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SSL_renegotiate$MH,"SSL_renegotiate");
    }
    public static int SSL_renegotiate ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SSL_renegotiate$MH, "SSL_renegotiate");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_renegotiate_abbreviated$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SSL_renegotiate_abbreviated$MH,"SSL_renegotiate_abbreviated");
    }
    public static int SSL_renegotiate_abbreviated ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SSL_renegotiate_abbreviated$MH, "SSL_renegotiate_abbreviated");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_renegotiate_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SSL_renegotiate_pending$MH,"SSL_renegotiate_pending");
    }
    public static int SSL_renegotiate_pending ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SSL_renegotiate_pending$MH, "SSL_renegotiate_pending");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SSL_shutdown$MH,"SSL_shutdown");
    }
    public static int SSL_shutdown ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SSL_shutdown$MH, "SSL_shutdown");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_verify_client_post_handshake$MH() {
        return RuntimeHelper.requireNonNull(constants$840.SSL_verify_client_post_handshake$MH,"SSL_verify_client_post_handshake");
    }
    public static int SSL_verify_client_post_handshake ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$840.SSL_verify_client_post_handshake$MH, "SSL_verify_client_post_handshake");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_post_handshake_auth$MH() {
        return RuntimeHelper.requireNonNull(constants$841.SSL_CTX_set_post_handshake_auth$MH,"SSL_CTX_set_post_handshake_auth");
    }
    public static void SSL_CTX_set_post_handshake_auth ( Addressable ctx,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.SSL_CTX_set_post_handshake_auth$MH, "SSL_CTX_set_post_handshake_auth");
        try {
            mh$.invokeExact(ctx, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_post_handshake_auth$MH() {
        return RuntimeHelper.requireNonNull(constants$841.SSL_set_post_handshake_auth$MH,"SSL_set_post_handshake_auth");
    }
    public static void SSL_set_post_handshake_auth ( Addressable s,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.SSL_set_post_handshake_auth$MH, "SSL_set_post_handshake_auth");
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_ssl_method$MH() {
        return RuntimeHelper.requireNonNull(constants$841.SSL_CTX_get_ssl_method$MH,"SSL_CTX_get_ssl_method");
    }
    public static MemoryAddress SSL_CTX_get_ssl_method ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.SSL_CTX_get_ssl_method$MH, "SSL_CTX_get_ssl_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_ssl_method$MH() {
        return RuntimeHelper.requireNonNull(constants$841.SSL_get_ssl_method$MH,"SSL_get_ssl_method");
    }
    public static MemoryAddress SSL_get_ssl_method ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.SSL_get_ssl_method$MH, "SSL_get_ssl_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_ssl_method$MH() {
        return RuntimeHelper.requireNonNull(constants$841.SSL_set_ssl_method$MH,"SSL_set_ssl_method");
    }
    public static int SSL_set_ssl_method ( Addressable s,  Addressable method) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.SSL_set_ssl_method$MH, "SSL_set_ssl_method");
        try {
            return (int)mh$.invokeExact(s, method);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_alert_type_string_long$MH() {
        return RuntimeHelper.requireNonNull(constants$841.SSL_alert_type_string_long$MH,"SSL_alert_type_string_long");
    }
    public static MemoryAddress SSL_alert_type_string_long ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$841.SSL_alert_type_string_long$MH, "SSL_alert_type_string_long");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_alert_type_string$MH() {
        return RuntimeHelper.requireNonNull(constants$842.SSL_alert_type_string$MH,"SSL_alert_type_string");
    }
    public static MemoryAddress SSL_alert_type_string ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.SSL_alert_type_string$MH, "SSL_alert_type_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_alert_desc_string_long$MH() {
        return RuntimeHelper.requireNonNull(constants$842.SSL_alert_desc_string_long$MH,"SSL_alert_desc_string_long");
    }
    public static MemoryAddress SSL_alert_desc_string_long ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.SSL_alert_desc_string_long$MH, "SSL_alert_desc_string_long");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_alert_desc_string$MH() {
        return RuntimeHelper.requireNonNull(constants$842.SSL_alert_desc_string$MH,"SSL_alert_desc_string");
    }
    public static MemoryAddress SSL_alert_desc_string ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.SSL_alert_desc_string$MH, "SSL_alert_desc_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set0_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$842.SSL_set0_CA_list$MH,"SSL_set0_CA_list");
    }
    public static void SSL_set0_CA_list ( Addressable s,  Addressable name_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.SSL_set0_CA_list$MH, "SSL_set0_CA_list");
        try {
            mh$.invokeExact(s, name_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set0_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$842.SSL_CTX_set0_CA_list$MH,"SSL_CTX_set0_CA_list");
    }
    public static void SSL_CTX_set0_CA_list ( Addressable ctx,  Addressable name_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.SSL_CTX_set0_CA_list$MH, "SSL_CTX_set0_CA_list");
        try {
            mh$.invokeExact(ctx, name_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$842.SSL_get0_CA_list$MH,"SSL_get0_CA_list");
    }
    public static MemoryAddress SSL_get0_CA_list ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$842.SSL_get0_CA_list$MH, "SSL_get0_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get0_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$843.SSL_CTX_get0_CA_list$MH,"SSL_CTX_get0_CA_list");
    }
    public static MemoryAddress SSL_CTX_get0_CA_list ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.SSL_CTX_get0_CA_list$MH, "SSL_CTX_get0_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add1_to_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$843.SSL_add1_to_CA_list$MH,"SSL_add1_to_CA_list");
    }
    public static int SSL_add1_to_CA_list ( Addressable ssl,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.SSL_add1_to_CA_list$MH, "SSL_add1_to_CA_list");
        try {
            return (int)mh$.invokeExact(ssl, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add1_to_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$843.SSL_CTX_add1_to_CA_list$MH,"SSL_CTX_add1_to_CA_list");
    }
    public static int SSL_CTX_add1_to_CA_list ( Addressable ctx,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.SSL_CTX_add1_to_CA_list$MH, "SSL_CTX_add1_to_CA_list");
        try {
            return (int)mh$.invokeExact(ctx, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_peer_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$843.SSL_get0_peer_CA_list$MH,"SSL_get0_peer_CA_list");
    }
    public static MemoryAddress SSL_get0_peer_CA_list ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.SSL_get0_peer_CA_list$MH, "SSL_get0_peer_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_client_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$843.SSL_set_client_CA_list$MH,"SSL_set_client_CA_list");
    }
    public static void SSL_set_client_CA_list ( Addressable s,  Addressable name_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.SSL_set_client_CA_list$MH, "SSL_set_client_CA_list");
        try {
            mh$.invokeExact(s, name_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_client_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$843.SSL_CTX_set_client_CA_list$MH,"SSL_CTX_set_client_CA_list");
    }
    public static void SSL_CTX_set_client_CA_list ( Addressable ctx,  Addressable name_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$843.SSL_CTX_set_client_CA_list$MH, "SSL_CTX_set_client_CA_list");
        try {
            mh$.invokeExact(ctx, name_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_client_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$844.SSL_get_client_CA_list$MH,"SSL_get_client_CA_list");
    }
    public static MemoryAddress SSL_get_client_CA_list ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.SSL_get_client_CA_list$MH, "SSL_get_client_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_client_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$844.SSL_CTX_get_client_CA_list$MH,"SSL_CTX_get_client_CA_list");
    }
    public static MemoryAddress SSL_CTX_get_client_CA_list ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.SSL_CTX_get_client_CA_list$MH, "SSL_CTX_get_client_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add_client_CA$MH() {
        return RuntimeHelper.requireNonNull(constants$844.SSL_add_client_CA$MH,"SSL_add_client_CA");
    }
    public static int SSL_add_client_CA ( Addressable ssl,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.SSL_add_client_CA$MH, "SSL_add_client_CA");
        try {
            return (int)mh$.invokeExact(ssl, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add_client_CA$MH() {
        return RuntimeHelper.requireNonNull(constants$844.SSL_CTX_add_client_CA$MH,"SSL_CTX_add_client_CA");
    }
    public static int SSL_CTX_add_client_CA ( Addressable ctx,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.SSL_CTX_add_client_CA$MH, "SSL_CTX_add_client_CA");
        try {
            return (int)mh$.invokeExact(ctx, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_connect_state$MH() {
        return RuntimeHelper.requireNonNull(constants$844.SSL_set_connect_state$MH,"SSL_set_connect_state");
    }
    public static void SSL_set_connect_state ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.SSL_set_connect_state$MH, "SSL_set_connect_state");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_accept_state$MH() {
        return RuntimeHelper.requireNonNull(constants$844.SSL_set_accept_state$MH,"SSL_set_accept_state");
    }
    public static void SSL_set_accept_state ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$844.SSL_set_accept_state$MH, "SSL_set_accept_state");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_default_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$845.SSL_get_default_timeout$MH,"SSL_get_default_timeout");
    }
    public static long SSL_get_default_timeout ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.SSL_get_default_timeout$MH, "SSL_get_default_timeout");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_description$MH() {
        return RuntimeHelper.requireNonNull(constants$845.SSL_CIPHER_description$MH,"SSL_CIPHER_description");
    }
    public static MemoryAddress SSL_CIPHER_description ( Addressable x0,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.SSL_CIPHER_description$MH, "SSL_CIPHER_description");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_dup_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$845.SSL_dup_CA_list$MH,"SSL_dup_CA_list");
    }
    public static MemoryAddress SSL_dup_CA_list ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.SSL_dup_CA_list$MH, "SSL_dup_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$845.SSL_dup$MH,"SSL_dup");
    }
    public static MemoryAddress SSL_dup ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.SSL_dup$MH, "SSL_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$845.SSL_get_certificate$MH,"SSL_get_certificate");
    }
    public static MemoryAddress SSL_get_certificate ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.SSL_get_certificate$MH, "SSL_get_certificate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_privatekey$MH() {
        return RuntimeHelper.requireNonNull(constants$845.SSL_get_privatekey$MH,"SSL_get_privatekey");
    }
    public static MemoryAddress SSL_get_privatekey ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$845.SSL_get_privatekey$MH, "SSL_get_privatekey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get0_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$846.SSL_CTX_get0_certificate$MH,"SSL_CTX_get0_certificate");
    }
    public static MemoryAddress SSL_CTX_get0_certificate ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.SSL_CTX_get0_certificate$MH, "SSL_CTX_get0_certificate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get0_privatekey$MH() {
        return RuntimeHelper.requireNonNull(constants$846.SSL_CTX_get0_privatekey$MH,"SSL_CTX_get0_privatekey");
    }
    public static MemoryAddress SSL_CTX_get0_privatekey ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.SSL_CTX_get0_privatekey$MH, "SSL_CTX_get0_privatekey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_quiet_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$846.SSL_CTX_set_quiet_shutdown$MH,"SSL_CTX_set_quiet_shutdown");
    }
    public static void SSL_CTX_set_quiet_shutdown ( Addressable ctx,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.SSL_CTX_set_quiet_shutdown$MH, "SSL_CTX_set_quiet_shutdown");
        try {
            mh$.invokeExact(ctx, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_quiet_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$846.SSL_CTX_get_quiet_shutdown$MH,"SSL_CTX_get_quiet_shutdown");
    }
    public static int SSL_CTX_get_quiet_shutdown ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.SSL_CTX_get_quiet_shutdown$MH, "SSL_CTX_get_quiet_shutdown");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_quiet_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$846.SSL_set_quiet_shutdown$MH,"SSL_set_quiet_shutdown");
    }
    public static void SSL_set_quiet_shutdown ( Addressable ssl,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.SSL_set_quiet_shutdown$MH, "SSL_set_quiet_shutdown");
        try {
            mh$.invokeExact(ssl, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_quiet_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$846.SSL_get_quiet_shutdown$MH,"SSL_get_quiet_shutdown");
    }
    public static int SSL_get_quiet_shutdown ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$846.SSL_get_quiet_shutdown$MH, "SSL_get_quiet_shutdown");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$847.SSL_set_shutdown$MH,"SSL_set_shutdown");
    }
    public static void SSL_set_shutdown ( Addressable ssl,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.SSL_set_shutdown$MH, "SSL_set_shutdown");
        try {
            mh$.invokeExact(ssl, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$847.SSL_get_shutdown$MH,"SSL_get_shutdown");
    }
    public static int SSL_get_shutdown ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.SSL_get_shutdown$MH, "SSL_get_shutdown");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_version$MH() {
        return RuntimeHelper.requireNonNull(constants$847.SSL_version$MH,"SSL_version");
    }
    public static int SSL_version ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.SSL_version$MH, "SSL_version");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_client_version$MH() {
        return RuntimeHelper.requireNonNull(constants$847.SSL_client_version$MH,"SSL_client_version");
    }
    public static int SSL_client_version ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.SSL_client_version$MH, "SSL_client_version");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_verify_paths$MH() {
        return RuntimeHelper.requireNonNull(constants$847.SSL_CTX_set_default_verify_paths$MH,"SSL_CTX_set_default_verify_paths");
    }
    public static int SSL_CTX_set_default_verify_paths ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.SSL_CTX_set_default_verify_paths$MH, "SSL_CTX_set_default_verify_paths");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_verify_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$847.SSL_CTX_set_default_verify_dir$MH,"SSL_CTX_set_default_verify_dir");
    }
    public static int SSL_CTX_set_default_verify_dir ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$847.SSL_CTX_set_default_verify_dir$MH, "SSL_CTX_set_default_verify_dir");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_verify_file$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SSL_CTX_set_default_verify_file$MH,"SSL_CTX_set_default_verify_file");
    }
    public static int SSL_CTX_set_default_verify_file ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.SSL_CTX_set_default_verify_file$MH, "SSL_CTX_set_default_verify_file");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_load_verify_locations$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SSL_CTX_load_verify_locations$MH,"SSL_CTX_load_verify_locations");
    }
    public static int SSL_CTX_load_verify_locations ( Addressable ctx,  Addressable CAfile,  Addressable CApath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.SSL_CTX_load_verify_locations$MH, "SSL_CTX_load_verify_locations");
        try {
            return (int)mh$.invokeExact(ctx, CAfile, CApath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_session$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SSL_get_session$MH,"SSL_get_session");
    }
    public static MemoryAddress SSL_get_session ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.SSL_get_session$MH, "SSL_get_session");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get1_session$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SSL_get1_session$MH,"SSL_get1_session");
    }
    public static MemoryAddress SSL_get1_session ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.SSL_get1_session$MH, "SSL_get1_session");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_SSL_CTX$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SSL_get_SSL_CTX$MH,"SSL_get_SSL_CTX");
    }
    public static MemoryAddress SSL_get_SSL_CTX ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.SSL_get_SSL_CTX$MH, "SSL_get_SSL_CTX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_SSL_CTX$MH() {
        return RuntimeHelper.requireNonNull(constants$848.SSL_set_SSL_CTX$MH,"SSL_set_SSL_CTX");
    }
    public static MemoryAddress SSL_set_SSL_CTX ( Addressable ssl,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$848.SSL_set_SSL_CTX$MH, "SSL_set_SSL_CTX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_info_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$849.SSL_set_info_callback$MH,"SSL_set_info_callback");
    }
    public static void SSL_set_info_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.SSL_set_info_callback$MH, "SSL_set_info_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_info_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$849.SSL_get_info_callback$MH,"SSL_get_info_callback");
    }
    public static MemoryAddress SSL_get_info_callback ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.SSL_get_info_callback$MH, "SSL_get_info_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$849.SSL_get_state$MH,"SSL_get_state");
    }
    public static int SSL_get_state ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.SSL_get_state$MH, "SSL_get_state");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_verify_result$MH() {
        return RuntimeHelper.requireNonNull(constants$849.SSL_set_verify_result$MH,"SSL_set_verify_result");
    }
    public static void SSL_set_verify_result ( Addressable ssl,  long v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$849.SSL_set_verify_result$MH, "SSL_set_verify_result");
        try {
            mh$.invokeExact(ssl, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_verify_result$MH() {
        return RuntimeHelper.requireNonNull(constants$850.SSL_get_verify_result$MH,"SSL_get_verify_result");
    }
    public static long SSL_get_verify_result ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.SSL_get_verify_result$MH, "SSL_get_verify_result");
        try {
            return (long)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_verified_chain$MH() {
        return RuntimeHelper.requireNonNull(constants$850.SSL_get0_verified_chain$MH,"SSL_get0_verified_chain");
    }
    public static MemoryAddress SSL_get0_verified_chain ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.SSL_get0_verified_chain$MH, "SSL_get0_verified_chain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_client_random$MH() {
        return RuntimeHelper.requireNonNull(constants$850.SSL_get_client_random$MH,"SSL_get_client_random");
    }
    public static long SSL_get_client_random ( Addressable ssl,  Addressable out,  long outlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.SSL_get_client_random$MH, "SSL_get_client_random");
        try {
            return (long)mh$.invokeExact(ssl, out, outlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_server_random$MH() {
        return RuntimeHelper.requireNonNull(constants$850.SSL_get_server_random$MH,"SSL_get_server_random");
    }
    public static long SSL_get_server_random ( Addressable ssl,  Addressable out,  long outlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.SSL_get_server_random$MH, "SSL_get_server_random");
        try {
            return (long)mh$.invokeExact(ssl, out, outlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_master_key$MH() {
        return RuntimeHelper.requireNonNull(constants$850.SSL_SESSION_get_master_key$MH,"SSL_SESSION_get_master_key");
    }
    public static long SSL_SESSION_get_master_key ( Addressable sess,  Addressable out,  long outlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.SSL_SESSION_get_master_key$MH, "SSL_SESSION_get_master_key");
        try {
            return (long)mh$.invokeExact(sess, out, outlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set1_master_key$MH() {
        return RuntimeHelper.requireNonNull(constants$850.SSL_SESSION_set1_master_key$MH,"SSL_SESSION_set1_master_key");
    }
    public static int SSL_SESSION_set1_master_key ( Addressable sess,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$850.SSL_SESSION_set1_master_key$MH, "SSL_SESSION_set1_master_key");
        try {
            return (int)mh$.invokeExact(sess, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_max_fragment_length$MH() {
        return RuntimeHelper.requireNonNull(constants$851.SSL_SESSION_get_max_fragment_length$MH,"SSL_SESSION_get_max_fragment_length");
    }
    public static byte SSL_SESSION_get_max_fragment_length ( Addressable sess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.SSL_SESSION_get_max_fragment_length$MH, "SSL_SESSION_get_max_fragment_length");
        try {
            return (byte)mh$.invokeExact(sess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$851.SSL_set_ex_data$MH,"SSL_set_ex_data");
    }
    public static int SSL_set_ex_data ( Addressable ssl,  int idx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.SSL_set_ex_data$MH, "SSL_set_ex_data");
        try {
            return (int)mh$.invokeExact(ssl, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$851.SSL_get_ex_data$MH,"SSL_get_ex_data");
    }
    public static MemoryAddress SSL_get_ex_data ( Addressable ssl,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.SSL_get_ex_data$MH, "SSL_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$851.SSL_SESSION_set_ex_data$MH,"SSL_SESSION_set_ex_data");
    }
    public static int SSL_SESSION_set_ex_data ( Addressable ss,  int idx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.SSL_SESSION_set_ex_data$MH, "SSL_SESSION_set_ex_data");
        try {
            return (int)mh$.invokeExact(ss, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$851.SSL_SESSION_get_ex_data$MH,"SSL_SESSION_get_ex_data");
    }
    public static MemoryAddress SSL_SESSION_get_ex_data ( Addressable ss,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.SSL_SESSION_get_ex_data$MH, "SSL_SESSION_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ss, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$851.SSL_CTX_set_ex_data$MH,"SSL_CTX_set_ex_data");
    }
    public static int SSL_CTX_set_ex_data ( Addressable ssl,  int idx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$851.SSL_CTX_set_ex_data$MH, "SSL_CTX_set_ex_data");
        try {
            return (int)mh$.invokeExact(ssl, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$852.SSL_CTX_get_ex_data$MH,"SSL_CTX_get_ex_data");
    }
    public static MemoryAddress SSL_CTX_get_ex_data ( Addressable ssl,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.SSL_CTX_get_ex_data$MH, "SSL_CTX_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_ex_data_X509_STORE_CTX_idx$MH() {
        return RuntimeHelper.requireNonNull(constants$852.SSL_get_ex_data_X509_STORE_CTX_idx$MH,"SSL_get_ex_data_X509_STORE_CTX_idx");
    }
    public static int SSL_get_ex_data_X509_STORE_CTX_idx () {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.SSL_get_ex_data_X509_STORE_CTX_idx$MH, "SSL_get_ex_data_X509_STORE_CTX_idx");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_read_buffer_len$MH() {
        return RuntimeHelper.requireNonNull(constants$852.SSL_CTX_set_default_read_buffer_len$MH,"SSL_CTX_set_default_read_buffer_len");
    }
    public static void SSL_CTX_set_default_read_buffer_len ( Addressable ctx,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.SSL_CTX_set_default_read_buffer_len$MH, "SSL_CTX_set_default_read_buffer_len");
        try {
            mh$.invokeExact(ctx, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_default_read_buffer_len$MH() {
        return RuntimeHelper.requireNonNull(constants$852.SSL_set_default_read_buffer_len$MH,"SSL_set_default_read_buffer_len");
    }
    public static void SSL_set_default_read_buffer_len ( Addressable s,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$852.SSL_set_default_read_buffer_len$MH, "SSL_set_default_read_buffer_len");
        try {
            mh$.invokeExact(s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_tmp_dh_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$853.SSL_CTX_set_tmp_dh_callback$MH,"SSL_CTX_set_tmp_dh_callback");
    }
    public static void SSL_CTX_set_tmp_dh_callback ( Addressable ctx,  Addressable dh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.SSL_CTX_set_tmp_dh_callback$MH, "SSL_CTX_set_tmp_dh_callback");
        try {
            mh$.invokeExact(ctx, dh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_tmp_dh_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$853.SSL_set_tmp_dh_callback$MH,"SSL_set_tmp_dh_callback");
    }
    public static void SSL_set_tmp_dh_callback ( Addressable ssl,  Addressable dh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.SSL_set_tmp_dh_callback$MH, "SSL_set_tmp_dh_callback");
        try {
            mh$.invokeExact(ssl, dh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_current_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$853.SSL_get_current_compression$MH,"SSL_get_current_compression");
    }
    public static MemoryAddress SSL_get_current_compression ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.SSL_get_current_compression$MH, "SSL_get_current_compression");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_current_expansion$MH() {
        return RuntimeHelper.requireNonNull(constants$853.SSL_get_current_expansion$MH,"SSL_get_current_expansion");
    }
    public static MemoryAddress SSL_get_current_expansion ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$853.SSL_get_current_expansion$MH, "SSL_get_current_expansion");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_COMP_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get_name$MH,"SSL_COMP_get_name");
    }
    public static MemoryAddress SSL_COMP_get_name ( Addressable comp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get_name$MH, "SSL_COMP_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(comp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_COMP_get0_name$MH() {
        return RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get0_name$MH,"SSL_COMP_get0_name");
    }
    public static MemoryAddress SSL_COMP_get0_name ( Addressable comp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get0_name$MH, "SSL_COMP_get0_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(comp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_COMP_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get_id$MH,"SSL_COMP_get_id");
    }
    public static int SSL_COMP_get_id ( Addressable comp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get_id$MH, "SSL_COMP_get_id");
        try {
            return (int)mh$.invokeExact(comp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_COMP_get_compression_methods$MH() {
        return RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get_compression_methods$MH,"SSL_COMP_get_compression_methods");
    }
    public static MemoryAddress SSL_COMP_get_compression_methods () {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.SSL_COMP_get_compression_methods$MH, "SSL_COMP_get_compression_methods");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_COMP_set0_compression_methods$MH() {
        return RuntimeHelper.requireNonNull(constants$854.SSL_COMP_set0_compression_methods$MH,"SSL_COMP_set0_compression_methods");
    }
    public static MemoryAddress SSL_COMP_set0_compression_methods ( Addressable meths) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.SSL_COMP_set0_compression_methods$MH, "SSL_COMP_set0_compression_methods");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_COMP_add_compression_method$MH() {
        return RuntimeHelper.requireNonNull(constants$854.SSL_COMP_add_compression_method$MH,"SSL_COMP_add_compression_method");
    }
    public static int SSL_COMP_add_compression_method ( int id,  Addressable cm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$854.SSL_COMP_add_compression_method$MH, "SSL_COMP_add_compression_method");
        try {
            return (int)mh$.invokeExact(id, cm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_find$MH() {
        return RuntimeHelper.requireNonNull(constants$855.SSL_CIPHER_find$MH,"SSL_CIPHER_find");
    }
    public static MemoryAddress SSL_CIPHER_find ( Addressable ssl,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.SSL_CIPHER_find$MH, "SSL_CIPHER_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_cipher_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$855.SSL_CIPHER_get_cipher_nid$MH,"SSL_CIPHER_get_cipher_nid");
    }
    public static int SSL_CIPHER_get_cipher_nid ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.SSL_CIPHER_get_cipher_nid$MH, "SSL_CIPHER_get_cipher_nid");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_digest_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$855.SSL_CIPHER_get_digest_nid$MH,"SSL_CIPHER_get_digest_nid");
    }
    public static int SSL_CIPHER_get_digest_nid ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.SSL_CIPHER_get_digest_nid$MH, "SSL_CIPHER_get_digest_nid");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_bytes_to_cipher_list$MH() {
        return RuntimeHelper.requireNonNull(constants$855.SSL_bytes_to_cipher_list$MH,"SSL_bytes_to_cipher_list");
    }
    public static int SSL_bytes_to_cipher_list ( Addressable s,  Addressable bytes,  long len,  int isv2format,  Addressable sk,  Addressable scsvs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.SSL_bytes_to_cipher_list$MH, "SSL_bytes_to_cipher_list");
        try {
            return (int)mh$.invokeExact(s, bytes, len, isv2format, sk, scsvs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_session_ticket_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$855.SSL_set_session_ticket_ext$MH,"SSL_set_session_ticket_ext");
    }
    public static int SSL_set_session_ticket_ext ( Addressable s,  Addressable ext_data,  int ext_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.SSL_set_session_ticket_ext$MH, "SSL_set_session_ticket_ext");
        try {
            return (int)mh$.invokeExact(s, ext_data, ext_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_session_ticket_ext_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$855.SSL_set_session_ticket_ext_cb$MH,"SSL_set_session_ticket_ext_cb");
    }
    public static int SSL_set_session_ticket_ext_cb ( Addressable s,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$855.SSL_set_session_ticket_ext_cb$MH, "SSL_set_session_ticket_ext_cb");
        try {
            return (int)mh$.invokeExact(s, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_session_secret_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$856.SSL_set_session_secret_cb$MH,"SSL_set_session_secret_cb");
    }
    public static int SSL_set_session_secret_cb ( Addressable s,  Addressable session_secret_cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$856.SSL_set_session_secret_cb$MH, "SSL_set_session_secret_cb");
        try {
            return (int)mh$.invokeExact(s, session_secret_cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_not_resumable_session_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$856.SSL_CTX_set_not_resumable_session_callback$MH,"SSL_CTX_set_not_resumable_session_callback");
    }
    public static void SSL_CTX_set_not_resumable_session_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$856.SSL_CTX_set_not_resumable_session_callback$MH, "SSL_CTX_set_not_resumable_session_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_not_resumable_session_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$857.SSL_set_not_resumable_session_callback$MH,"SSL_set_not_resumable_session_callback");
    }
    public static void SSL_set_not_resumable_session_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.SSL_set_not_resumable_session_callback$MH, "SSL_set_not_resumable_session_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_record_padding_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$857.SSL_CTX_set_record_padding_callback$MH,"SSL_CTX_set_record_padding_callback");
    }
    public static void SSL_CTX_set_record_padding_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.SSL_CTX_set_record_padding_callback$MH, "SSL_CTX_set_record_padding_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_record_padding_callback_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$857.SSL_CTX_set_record_padding_callback_arg$MH,"SSL_CTX_set_record_padding_callback_arg");
    }
    public static void SSL_CTX_set_record_padding_callback_arg ( Addressable ctx,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.SSL_CTX_set_record_padding_callback_arg$MH, "SSL_CTX_set_record_padding_callback_arg");
        try {
            mh$.invokeExact(ctx, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_record_padding_callback_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$857.SSL_CTX_get_record_padding_callback_arg$MH,"SSL_CTX_get_record_padding_callback_arg");
    }
    public static MemoryAddress SSL_CTX_get_record_padding_callback_arg ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$857.SSL_CTX_get_record_padding_callback_arg$MH, "SSL_CTX_get_record_padding_callback_arg");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_block_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$858.SSL_CTX_set_block_padding$MH,"SSL_CTX_set_block_padding");
    }
    public static int SSL_CTX_set_block_padding ( Addressable ctx,  long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.SSL_CTX_set_block_padding$MH, "SSL_CTX_set_block_padding");
        try {
            return (int)mh$.invokeExact(ctx, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_record_padding_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$858.SSL_set_record_padding_callback$MH,"SSL_set_record_padding_callback");
    }
    public static void SSL_set_record_padding_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.SSL_set_record_padding_callback$MH, "SSL_set_record_padding_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_record_padding_callback_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$858.SSL_set_record_padding_callback_arg$MH,"SSL_set_record_padding_callback_arg");
    }
    public static void SSL_set_record_padding_callback_arg ( Addressable ssl,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.SSL_set_record_padding_callback_arg$MH, "SSL_set_record_padding_callback_arg");
        try {
            mh$.invokeExact(ssl, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_record_padding_callback_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$858.SSL_get_record_padding_callback_arg$MH,"SSL_get_record_padding_callback_arg");
    }
    public static MemoryAddress SSL_get_record_padding_callback_arg ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$858.SSL_get_record_padding_callback_arg$MH, "SSL_get_record_padding_callback_arg");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_block_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$859.SSL_set_block_padding$MH,"SSL_set_block_padding");
    }
    public static int SSL_set_block_padding ( Addressable ssl,  long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.SSL_set_block_padding$MH, "SSL_set_block_padding");
        try {
            return (int)mh$.invokeExact(ssl, block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_num_tickets$MH() {
        return RuntimeHelper.requireNonNull(constants$859.SSL_set_num_tickets$MH,"SSL_set_num_tickets");
    }
    public static int SSL_set_num_tickets ( Addressable s,  long num_tickets) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.SSL_set_num_tickets$MH, "SSL_set_num_tickets");
        try {
            return (int)mh$.invokeExact(s, num_tickets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_num_tickets$MH() {
        return RuntimeHelper.requireNonNull(constants$859.SSL_get_num_tickets$MH,"SSL_get_num_tickets");
    }
    public static long SSL_get_num_tickets ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.SSL_get_num_tickets$MH, "SSL_get_num_tickets");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_num_tickets$MH() {
        return RuntimeHelper.requireNonNull(constants$859.SSL_CTX_set_num_tickets$MH,"SSL_CTX_set_num_tickets");
    }
    public static int SSL_CTX_set_num_tickets ( Addressable ctx,  long num_tickets) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.SSL_CTX_set_num_tickets$MH, "SSL_CTX_set_num_tickets");
        try {
            return (int)mh$.invokeExact(ctx, num_tickets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_num_tickets$MH() {
        return RuntimeHelper.requireNonNull(constants$859.SSL_CTX_get_num_tickets$MH,"SSL_CTX_get_num_tickets");
    }
    public static long SSL_CTX_get_num_tickets ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.SSL_CTX_get_num_tickets$MH, "SSL_CTX_get_num_tickets");
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_session_reused$MH() {
        return RuntimeHelper.requireNonNull(constants$859.SSL_session_reused$MH,"SSL_session_reused");
    }
    public static int SSL_session_reused ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$859.SSL_session_reused$MH, "SSL_session_reused");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_is_server$MH() {
        return RuntimeHelper.requireNonNull(constants$860.SSL_is_server$MH,"SSL_is_server");
    }
    public static int SSL_is_server ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.SSL_is_server$MH, "SSL_is_server");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_new$MH,"SSL_CONF_CTX_new");
    }
    public static MemoryAddress SSL_CONF_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_new$MH, "SSL_CONF_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_finish$MH() {
        return RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_finish$MH,"SSL_CONF_CTX_finish");
    }
    public static int SSL_CONF_CTX_finish ( Addressable cctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_finish$MH, "SSL_CONF_CTX_finish");
        try {
            return (int)mh$.invokeExact(cctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_free$MH,"SSL_CONF_CTX_free");
    }
    public static void SSL_CONF_CTX_free ( Addressable cctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_free$MH, "SSL_CONF_CTX_free");
        try {
            mh$.invokeExact(cctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_set_flags$MH,"SSL_CONF_CTX_set_flags");
    }
    public static int SSL_CONF_CTX_set_flags ( Addressable cctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_set_flags$MH, "SSL_CONF_CTX_set_flags");
        try {
            return (int)mh$.invokeExact(cctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_clear_flags$MH,"SSL_CONF_CTX_clear_flags");
    }
    public static int SSL_CONF_CTX_clear_flags ( Addressable cctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$860.SSL_CONF_CTX_clear_flags$MH, "SSL_CONF_CTX_clear_flags");
        try {
            return (int)mh$.invokeExact(cctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_set1_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$861.SSL_CONF_CTX_set1_prefix$MH,"SSL_CONF_CTX_set1_prefix");
    }
    public static int SSL_CONF_CTX_set1_prefix ( Addressable cctx,  Addressable pre) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.SSL_CONF_CTX_set1_prefix$MH, "SSL_CONF_CTX_set1_prefix");
        try {
            return (int)mh$.invokeExact(cctx, pre);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_set_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$861.SSL_CONF_CTX_set_ssl$MH,"SSL_CONF_CTX_set_ssl");
    }
    public static void SSL_CONF_CTX_set_ssl ( Addressable cctx,  Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.SSL_CONF_CTX_set_ssl$MH, "SSL_CONF_CTX_set_ssl");
        try {
            mh$.invokeExact(cctx, ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_set_ssl_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$861.SSL_CONF_CTX_set_ssl_ctx$MH,"SSL_CONF_CTX_set_ssl_ctx");
    }
    public static void SSL_CONF_CTX_set_ssl_ctx ( Addressable cctx,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.SSL_CONF_CTX_set_ssl_ctx$MH, "SSL_CONF_CTX_set_ssl_ctx");
        try {
            mh$.invokeExact(cctx, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_cmd$MH() {
        return RuntimeHelper.requireNonNull(constants$861.SSL_CONF_cmd$MH,"SSL_CONF_cmd");
    }
    public static int SSL_CONF_cmd ( Addressable cctx,  Addressable cmd,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.SSL_CONF_cmd$MH, "SSL_CONF_cmd");
        try {
            return (int)mh$.invokeExact(cctx, cmd, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_cmd_argv$MH() {
        return RuntimeHelper.requireNonNull(constants$861.SSL_CONF_cmd_argv$MH,"SSL_CONF_cmd_argv");
    }
    public static int SSL_CONF_cmd_argv ( Addressable cctx,  Addressable pargc,  Addressable pargv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.SSL_CONF_cmd_argv$MH, "SSL_CONF_cmd_argv");
        try {
            return (int)mh$.invokeExact(cctx, pargc, pargv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_cmd_value_type$MH() {
        return RuntimeHelper.requireNonNull(constants$861.SSL_CONF_cmd_value_type$MH,"SSL_CONF_cmd_value_type");
    }
    public static int SSL_CONF_cmd_value_type ( Addressable cctx,  Addressable cmd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$861.SSL_CONF_cmd_value_type$MH, "SSL_CONF_cmd_value_type");
        try {
            return (int)mh$.invokeExact(cctx, cmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add_ssl_module$MH() {
        return RuntimeHelper.requireNonNull(constants$862.SSL_add_ssl_module$MH,"SSL_add_ssl_module");
    }
    public static void SSL_add_ssl_module () {
        var mh$ = RuntimeHelper.requireNonNull(constants$862.SSL_add_ssl_module$MH, "SSL_add_ssl_module");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_config$MH() {
        return RuntimeHelper.requireNonNull(constants$862.SSL_config$MH,"SSL_config");
    }
    public static int SSL_config ( Addressable s,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$862.SSL_config$MH, "SSL_config");
        try {
            return (int)mh$.invokeExact(s, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_config$MH() {
        return RuntimeHelper.requireNonNull(constants$862.SSL_CTX_config$MH,"SSL_CTX_config");
    }
    public static int SSL_CTX_config ( Addressable ctx,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$862.SSL_CTX_config$MH, "SSL_CTX_config");
        try {
            return (int)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLSv1_listen$MH() {
        return RuntimeHelper.requireNonNull(constants$862.DTLSv1_listen$MH,"DTLSv1_listen");
    }
    public static int DTLSv1_listen ( Addressable s,  Addressable client) {
        var mh$ = RuntimeHelper.requireNonNull(constants$862.DTLSv1_listen$MH, "DTLSv1_listen");
        try {
            return (int)mh$.invokeExact(s, client);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_ct_validation_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$863.SSL_set_ct_validation_callback$MH,"SSL_set_ct_validation_callback");
    }
    public static int SSL_set_ct_validation_callback ( Addressable s,  Addressable callback,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.SSL_set_ct_validation_callback$MH, "SSL_set_ct_validation_callback");
        try {
            return (int)mh$.invokeExact(s, callback, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_ct_validation_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$863.SSL_CTX_set_ct_validation_callback$MH,"SSL_CTX_set_ct_validation_callback");
    }
    public static int SSL_CTX_set_ct_validation_callback ( Addressable ctx,  Addressable callback,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.SSL_CTX_set_ct_validation_callback$MH, "SSL_CTX_set_ct_validation_callback");
        try {
            return (int)mh$.invokeExact(ctx, callback, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SSL_CT_VALIDATION_PERMISSIVE() {
        return (int)0L;
    }
    public static int SSL_CT_VALIDATION_STRICT() {
        return (int)1L;
    }
    public static MethodHandle SSL_enable_ct$MH() {
        return RuntimeHelper.requireNonNull(constants$863.SSL_enable_ct$MH,"SSL_enable_ct");
    }
    public static int SSL_enable_ct ( Addressable s,  int validation_mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.SSL_enable_ct$MH, "SSL_enable_ct");
        try {
            return (int)mh$.invokeExact(s, validation_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_enable_ct$MH() {
        return RuntimeHelper.requireNonNull(constants$863.SSL_CTX_enable_ct$MH,"SSL_CTX_enable_ct");
    }
    public static int SSL_CTX_enable_ct ( Addressable ctx,  int validation_mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.SSL_CTX_enable_ct$MH, "SSL_CTX_enable_ct");
        try {
            return (int)mh$.invokeExact(ctx, validation_mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_ct_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$863.SSL_ct_is_enabled$MH,"SSL_ct_is_enabled");
    }
    public static int SSL_ct_is_enabled ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.SSL_ct_is_enabled$MH, "SSL_ct_is_enabled");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_ct_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$863.SSL_CTX_ct_is_enabled$MH,"SSL_CTX_ct_is_enabled");
    }
    public static int SSL_CTX_ct_is_enabled ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$863.SSL_CTX_ct_is_enabled$MH, "SSL_CTX_ct_is_enabled");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_peer_scts$MH() {
        return RuntimeHelper.requireNonNull(constants$864.SSL_get0_peer_scts$MH,"SSL_get0_peer_scts");
    }
    public static MemoryAddress SSL_get0_peer_scts ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.SSL_get0_peer_scts$MH, "SSL_get0_peer_scts");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_ctlog_list_file$MH() {
        return RuntimeHelper.requireNonNull(constants$864.SSL_CTX_set_default_ctlog_list_file$MH,"SSL_CTX_set_default_ctlog_list_file");
    }
    public static int SSL_CTX_set_default_ctlog_list_file ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.SSL_CTX_set_default_ctlog_list_file$MH, "SSL_CTX_set_default_ctlog_list_file");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_ctlog_list_file$MH() {
        return RuntimeHelper.requireNonNull(constants$864.SSL_CTX_set_ctlog_list_file$MH,"SSL_CTX_set_ctlog_list_file");
    }
    public static int SSL_CTX_set_ctlog_list_file ( Addressable ctx,  Addressable path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.SSL_CTX_set_ctlog_list_file$MH, "SSL_CTX_set_ctlog_list_file");
        try {
            return (int)mh$.invokeExact(ctx, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set0_ctlog_store$MH() {
        return RuntimeHelper.requireNonNull(constants$864.SSL_CTX_set0_ctlog_store$MH,"SSL_CTX_set0_ctlog_store");
    }
    public static void SSL_CTX_set0_ctlog_store ( Addressable ctx,  Addressable logs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.SSL_CTX_set0_ctlog_store$MH, "SSL_CTX_set0_ctlog_store");
        try {
            mh$.invokeExact(ctx, logs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get0_ctlog_store$MH() {
        return RuntimeHelper.requireNonNull(constants$864.SSL_CTX_get0_ctlog_store$MH,"SSL_CTX_get0_ctlog_store");
    }
    public static MemoryAddress SSL_CTX_get0_ctlog_store ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.SSL_CTX_get0_ctlog_store$MH, "SSL_CTX_get0_ctlog_store");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_security_level$MH() {
        return RuntimeHelper.requireNonNull(constants$864.SSL_set_security_level$MH,"SSL_set_security_level");
    }
    public static void SSL_set_security_level ( Addressable s,  int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$864.SSL_set_security_level$MH, "SSL_set_security_level");
        try {
            mh$.invokeExact(s, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_security_level$MH() {
        return RuntimeHelper.requireNonNull(constants$865.SSL_get_security_level$MH,"SSL_get_security_level");
    }
    public static int SSL_get_security_level ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.SSL_get_security_level$MH, "SSL_get_security_level");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_security_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$865.SSL_set_security_callback$MH,"SSL_set_security_callback");
    }
    public static void SSL_set_security_callback ( Addressable s,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.SSL_set_security_callback$MH, "SSL_set_security_callback");
        try {
            mh$.invokeExact(s, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_security_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$865.SSL_get_security_callback$MH,"SSL_get_security_callback");
    }
    public static MemoryAddress SSL_get_security_callback ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.SSL_get_security_callback$MH, "SSL_get_security_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set0_security_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$865.SSL_set0_security_ex_data$MH,"SSL_set0_security_ex_data");
    }
    public static void SSL_set0_security_ex_data ( Addressable s,  Addressable ex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$865.SSL_set0_security_ex_data$MH, "SSL_set0_security_ex_data");
        try {
            mh$.invokeExact(s, ex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_security_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$866.SSL_get0_security_ex_data$MH,"SSL_get0_security_ex_data");
    }
    public static MemoryAddress SSL_get0_security_ex_data ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.SSL_get0_security_ex_data$MH, "SSL_get0_security_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_security_level$MH() {
        return RuntimeHelper.requireNonNull(constants$866.SSL_CTX_set_security_level$MH,"SSL_CTX_set_security_level");
    }
    public static void SSL_CTX_set_security_level ( Addressable ctx,  int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.SSL_CTX_set_security_level$MH, "SSL_CTX_set_security_level");
        try {
            mh$.invokeExact(ctx, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_security_level$MH() {
        return RuntimeHelper.requireNonNull(constants$866.SSL_CTX_get_security_level$MH,"SSL_CTX_get_security_level");
    }
    public static int SSL_CTX_get_security_level ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.SSL_CTX_get_security_level$MH, "SSL_CTX_get_security_level");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_security_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$866.SSL_CTX_set_security_callback$MH,"SSL_CTX_set_security_callback");
    }
    public static void SSL_CTX_set_security_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$866.SSL_CTX_set_security_callback$MH, "SSL_CTX_set_security_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_security_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$867.SSL_CTX_get_security_callback$MH,"SSL_CTX_get_security_callback");
    }
    public static MemoryAddress SSL_CTX_get_security_callback ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.SSL_CTX_get_security_callback$MH, "SSL_CTX_get_security_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set0_security_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$867.SSL_CTX_set0_security_ex_data$MH,"SSL_CTX_set0_security_ex_data");
    }
    public static void SSL_CTX_set0_security_ex_data ( Addressable ctx,  Addressable ex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.SSL_CTX_set0_security_ex_data$MH, "SSL_CTX_set0_security_ex_data");
        try {
            mh$.invokeExact(ctx, ex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get0_security_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$867.SSL_CTX_get0_security_ex_data$MH,"SSL_CTX_get0_security_ex_data");
    }
    public static MemoryAddress SSL_CTX_get0_security_ex_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.SSL_CTX_get0_security_ex_data$MH, "SSL_CTX_get0_security_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_init_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$867.OPENSSL_init_ssl$MH,"OPENSSL_init_ssl");
    }
    public static int OPENSSL_init_ssl ( long opts,  Addressable settings) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.OPENSSL_init_ssl$MH, "OPENSSL_init_ssl");
        try {
            return (int)mh$.invokeExact(opts, settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_free_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$867.SSL_free_buffers$MH,"SSL_free_buffers");
    }
    public static int SSL_free_buffers ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.SSL_free_buffers$MH, "SSL_free_buffers");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_alloc_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$867.SSL_alloc_buffers$MH,"SSL_alloc_buffers");
    }
    public static int SSL_alloc_buffers ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$867.SSL_alloc_buffers$MH, "SSL_alloc_buffers");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfInt SSL_TICKET_STATUS = JAVA_INT;
    public static ValueLayout.OfInt SSL_TICKET_RETURN = JAVA_INT;
    public static MethodHandle SSL_CTX_set_session_ticket_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$868.SSL_CTX_set_session_ticket_cb$MH,"SSL_CTX_set_session_ticket_cb");
    }
    public static int SSL_CTX_set_session_ticket_cb ( Addressable ctx,  Addressable gen_cb,  Addressable dec_cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.SSL_CTX_set_session_ticket_cb$MH, "SSL_CTX_set_session_ticket_cb");
        try {
            return (int)mh$.invokeExact(ctx, gen_cb, dec_cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_set1_ticket_appdata$MH() {
        return RuntimeHelper.requireNonNull(constants$868.SSL_SESSION_set1_ticket_appdata$MH,"SSL_SESSION_set1_ticket_appdata");
    }
    public static int SSL_SESSION_set1_ticket_appdata ( Addressable ss,  Addressable data,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$868.SSL_SESSION_set1_ticket_appdata$MH, "SSL_SESSION_set1_ticket_appdata");
        try {
            return (int)mh$.invokeExact(ss, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get0_ticket_appdata$MH() {
        return RuntimeHelper.requireNonNull(constants$869.SSL_SESSION_get0_ticket_appdata$MH,"SSL_SESSION_get0_ticket_appdata");
    }
    public static int SSL_SESSION_get0_ticket_appdata ( Addressable ss,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.SSL_SESSION_get0_ticket_appdata$MH, "SSL_SESSION_get0_ticket_appdata");
        try {
            return (int)mh$.invokeExact(ss, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DTLS_set_timer_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$869.DTLS_set_timer_cb$MH,"DTLS_set_timer_cb");
    }
    public static void DTLS_set_timer_cb ( Addressable s,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$869.DTLS_set_timer_cb$MH, "DTLS_set_timer_cb");
        try {
            mh$.invokeExact(s, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_allow_early_data_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$870.SSL_CTX_set_allow_early_data_cb$MH,"SSL_CTX_set_allow_early_data_cb");
    }
    public static void SSL_CTX_set_allow_early_data_cb ( Addressable ctx,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$870.SSL_CTX_set_allow_early_data_cb$MH, "SSL_CTX_set_allow_early_data_cb");
        try {
            mh$.invokeExact(ctx, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_allow_early_data_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$870.SSL_set_allow_early_data_cb$MH,"SSL_set_allow_early_data_cb");
    }
    public static void SSL_set_allow_early_data_cb ( Addressable s,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$870.SSL_set_allow_early_data_cb$MH, "SSL_set_allow_early_data_cb");
        try {
            mh$.invokeExact(s, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$870.__errno_location$MH,"__errno_location");
    }
    public static MemoryAddress __errno_location () {
        var mh$ = RuntimeHelper.requireNonNull(constants$870.__errno_location$MH, "__errno_location");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_new$MH() {
        return RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_new$MH,"lh_ERR_STRING_DATA_new");
    }
    public static MemoryAddress lh_ERR_STRING_DATA_new ( Addressable hfn,  Addressable cfn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_new$MH, "lh_ERR_STRING_DATA_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hfn, cfn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_free$MH() {
        return RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_free$MH,"lh_ERR_STRING_DATA_free");
    }
    public static void lh_ERR_STRING_DATA_free ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_free$MH, "lh_ERR_STRING_DATA_free");
        try {
            mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_insert$MH,"lh_ERR_STRING_DATA_insert");
    }
    public static MemoryAddress lh_ERR_STRING_DATA_insert ( Addressable lh,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_insert$MH, "lh_ERR_STRING_DATA_insert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lh, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_delete$MH,"lh_ERR_STRING_DATA_delete");
    }
    public static MemoryAddress lh_ERR_STRING_DATA_delete ( Addressable lh,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_delete$MH, "lh_ERR_STRING_DATA_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lh, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_retrieve$MH() {
        return RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_retrieve$MH,"lh_ERR_STRING_DATA_retrieve");
    }
    public static MemoryAddress lh_ERR_STRING_DATA_retrieve ( Addressable lh,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$871.lh_ERR_STRING_DATA_retrieve$MH, "lh_ERR_STRING_DATA_retrieve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lh, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_error$MH() {
        return RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_error$MH,"lh_ERR_STRING_DATA_error");
    }
    public static int lh_ERR_STRING_DATA_error ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_error$MH, "lh_ERR_STRING_DATA_error");
        try {
            return (int)mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_num_items$MH() {
        return RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_num_items$MH,"lh_ERR_STRING_DATA_num_items");
    }
    public static long lh_ERR_STRING_DATA_num_items ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_num_items$MH, "lh_ERR_STRING_DATA_num_items");
        try {
            return (long)mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_node_stats_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_node_stats_bio$MH,"lh_ERR_STRING_DATA_node_stats_bio");
    }
    public static void lh_ERR_STRING_DATA_node_stats_bio ( Addressable lh,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_node_stats_bio$MH, "lh_ERR_STRING_DATA_node_stats_bio");
        try {
            mh$.invokeExact(lh, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_node_usage_stats_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_node_usage_stats_bio$MH,"lh_ERR_STRING_DATA_node_usage_stats_bio");
    }
    public static void lh_ERR_STRING_DATA_node_usage_stats_bio ( Addressable lh,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_node_usage_stats_bio$MH, "lh_ERR_STRING_DATA_node_usage_stats_bio");
        try {
            mh$.invokeExact(lh, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_stats_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_stats_bio$MH,"lh_ERR_STRING_DATA_stats_bio");
    }
    public static void lh_ERR_STRING_DATA_stats_bio ( Addressable lh,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_stats_bio$MH, "lh_ERR_STRING_DATA_stats_bio");
        try {
            mh$.invokeExact(lh, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_get_down_load$MH() {
        return RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_get_down_load$MH,"lh_ERR_STRING_DATA_get_down_load");
    }
    public static long lh_ERR_STRING_DATA_get_down_load ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$872.lh_ERR_STRING_DATA_get_down_load$MH, "lh_ERR_STRING_DATA_get_down_load");
        try {
            return (long)mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_set_down_load$MH() {
        return RuntimeHelper.requireNonNull(constants$873.lh_ERR_STRING_DATA_set_down_load$MH,"lh_ERR_STRING_DATA_set_down_load");
    }
    public static void lh_ERR_STRING_DATA_set_down_load ( Addressable lh,  long dl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$873.lh_ERR_STRING_DATA_set_down_load$MH, "lh_ERR_STRING_DATA_set_down_load");
        try {
            mh$.invokeExact(lh, dl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_ERR_STRING_DATA_doall$MH() {
        return RuntimeHelper.requireNonNull(constants$873.lh_ERR_STRING_DATA_doall$MH,"lh_ERR_STRING_DATA_doall");
    }
    public static void lh_ERR_STRING_DATA_doall ( Addressable lh,  Addressable doall) {
        var mh$ = RuntimeHelper.requireNonNull(constants$873.lh_ERR_STRING_DATA_doall$MH, "lh_ERR_STRING_DATA_doall");
        try {
            mh$.invokeExact(lh, doall);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_put_error$MH() {
        return RuntimeHelper.requireNonNull(constants$873.ERR_put_error$MH,"ERR_put_error");
    }
    public static void ERR_put_error ( int lib,  int func,  int reason,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$873.ERR_put_error$MH, "ERR_put_error");
        try {
            mh$.invokeExact(lib, func, reason, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_set_error_data$MH() {
        return RuntimeHelper.requireNonNull(constants$873.ERR_set_error_data$MH,"ERR_set_error_data");
    }
    public static void ERR_set_error_data ( Addressable data,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$873.ERR_set_error_data$MH, "ERR_set_error_data");
        try {
            mh$.invokeExact(data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_get_error$MH() {
        return RuntimeHelper.requireNonNull(constants$874.ERR_get_error$MH,"ERR_get_error");
    }
    public static long ERR_get_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.ERR_get_error$MH, "ERR_get_error");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_get_error_line$MH() {
        return RuntimeHelper.requireNonNull(constants$874.ERR_get_error_line$MH,"ERR_get_error_line");
    }
    public static long ERR_get_error_line ( Addressable file,  Addressable line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.ERR_get_error_line$MH, "ERR_get_error_line");
        try {
            return (long)mh$.invokeExact(file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_get_error_line_data$MH() {
        return RuntimeHelper.requireNonNull(constants$874.ERR_get_error_line_data$MH,"ERR_get_error_line_data");
    }
    public static long ERR_get_error_line_data ( Addressable file,  Addressable line,  Addressable data,  Addressable flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.ERR_get_error_line_data$MH, "ERR_get_error_line_data");
        try {
            return (long)mh$.invokeExact(file, line, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_error$MH() {
        return RuntimeHelper.requireNonNull(constants$874.ERR_peek_error$MH,"ERR_peek_error");
    }
    public static long ERR_peek_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.ERR_peek_error$MH, "ERR_peek_error");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_error_line$MH() {
        return RuntimeHelper.requireNonNull(constants$874.ERR_peek_error_line$MH,"ERR_peek_error_line");
    }
    public static long ERR_peek_error_line ( Addressable file,  Addressable line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.ERR_peek_error_line$MH, "ERR_peek_error_line");
        try {
            return (long)mh$.invokeExact(file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_error_line_data$MH() {
        return RuntimeHelper.requireNonNull(constants$874.ERR_peek_error_line_data$MH,"ERR_peek_error_line_data");
    }
    public static long ERR_peek_error_line_data ( Addressable file,  Addressable line,  Addressable data,  Addressable flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$874.ERR_peek_error_line_data$MH, "ERR_peek_error_line_data");
        try {
            return (long)mh$.invokeExact(file, line, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_last_error$MH() {
        return RuntimeHelper.requireNonNull(constants$875.ERR_peek_last_error$MH,"ERR_peek_last_error");
    }
    public static long ERR_peek_last_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$875.ERR_peek_last_error$MH, "ERR_peek_last_error");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_last_error_line$MH() {
        return RuntimeHelper.requireNonNull(constants$875.ERR_peek_last_error_line$MH,"ERR_peek_last_error_line");
    }
    public static long ERR_peek_last_error_line ( Addressable file,  Addressable line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$875.ERR_peek_last_error_line$MH, "ERR_peek_last_error_line");
        try {
            return (long)mh$.invokeExact(file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_last_error_line_data$MH() {
        return RuntimeHelper.requireNonNull(constants$875.ERR_peek_last_error_line_data$MH,"ERR_peek_last_error_line_data");
    }
    public static long ERR_peek_last_error_line_data ( Addressable file,  Addressable line,  Addressable data,  Addressable flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$875.ERR_peek_last_error_line_data$MH, "ERR_peek_last_error_line_data");
        try {
            return (long)mh$.invokeExact(file, line, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_clear_error$MH() {
        return RuntimeHelper.requireNonNull(constants$875.ERR_clear_error$MH,"ERR_clear_error");
    }
    public static void ERR_clear_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$875.ERR_clear_error$MH, "ERR_clear_error");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$875.ERR_error_string$MH,"ERR_error_string");
    }
    public static MemoryAddress ERR_error_string ( long e,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$875.ERR_error_string$MH, "ERR_error_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_error_string_n$MH() {
        return RuntimeHelper.requireNonNull(constants$875.ERR_error_string_n$MH,"ERR_error_string_n");
    }
    public static void ERR_error_string_n ( long e,  Addressable buf,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$875.ERR_error_string_n$MH, "ERR_error_string_n");
        try {
            mh$.invokeExact(e, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_lib_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$876.ERR_lib_error_string$MH,"ERR_lib_error_string");
    }
    public static MemoryAddress ERR_lib_error_string ( long e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$876.ERR_lib_error_string$MH, "ERR_lib_error_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_func_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$876.ERR_func_error_string$MH,"ERR_func_error_string");
    }
    public static MemoryAddress ERR_func_error_string ( long e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$876.ERR_func_error_string$MH, "ERR_func_error_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_reason_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$876.ERR_reason_error_string$MH,"ERR_reason_error_string");
    }
    public static MemoryAddress ERR_reason_error_string ( long e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$876.ERR_reason_error_string$MH, "ERR_reason_error_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_print_errors_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$876.ERR_print_errors_cb$MH,"ERR_print_errors_cb");
    }
    public static void ERR_print_errors_cb ( Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$876.ERR_print_errors_cb$MH, "ERR_print_errors_cb");
        try {
            mh$.invokeExact(cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_print_errors_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$877.ERR_print_errors_fp$MH,"ERR_print_errors_fp");
    }
    public static void ERR_print_errors_fp ( Addressable fp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$877.ERR_print_errors_fp$MH, "ERR_print_errors_fp");
        try {
            mh$.invokeExact(fp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_print_errors$MH() {
        return RuntimeHelper.requireNonNull(constants$877.ERR_print_errors$MH,"ERR_print_errors");
    }
    public static void ERR_print_errors ( Addressable bp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$877.ERR_print_errors$MH, "ERR_print_errors");
        try {
            mh$.invokeExact(bp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_add_error_data$MH() {
        return RuntimeHelper.requireNonNull(constants$877.ERR_add_error_data$MH,"ERR_add_error_data");
    }
    public static void ERR_add_error_data ( int num, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$877.ERR_add_error_data$MH, "ERR_add_error_data");
        try {
            mh$.invokeExact(num, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_add_error_vdata$MH() {
        return RuntimeHelper.requireNonNull(constants$877.ERR_add_error_vdata$MH,"ERR_add_error_vdata");
    }
    public static void ERR_add_error_vdata ( int num,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$877.ERR_add_error_vdata$MH, "ERR_add_error_vdata");
        try {
            mh$.invokeExact(num, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$877.ERR_load_strings$MH,"ERR_load_strings");
    }
    public static int ERR_load_strings ( int lib,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$877.ERR_load_strings$MH, "ERR_load_strings");
        try {
            return (int)mh$.invokeExact(lib, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_strings_const$MH() {
        return RuntimeHelper.requireNonNull(constants$877.ERR_load_strings_const$MH,"ERR_load_strings_const");
    }
    public static int ERR_load_strings_const ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$877.ERR_load_strings_const$MH, "ERR_load_strings_const");
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_unload_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$878.ERR_unload_strings$MH,"ERR_unload_strings");
    }
    public static int ERR_unload_strings ( int lib,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$878.ERR_unload_strings$MH, "ERR_unload_strings");
        try {
            return (int)mh$.invokeExact(lib, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_ERR_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$878.ERR_load_ERR_strings$MH,"ERR_load_ERR_strings");
    }
    public static int ERR_load_ERR_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$878.ERR_load_ERR_strings$MH, "ERR_load_ERR_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_remove_thread_state$MH() {
        return RuntimeHelper.requireNonNull(constants$878.ERR_remove_thread_state$MH,"ERR_remove_thread_state");
    }
    public static void ERR_remove_thread_state ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$878.ERR_remove_thread_state$MH, "ERR_remove_thread_state");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_remove_state$MH() {
        return RuntimeHelper.requireNonNull(constants$878.ERR_remove_state$MH,"ERR_remove_state");
    }
    public static void ERR_remove_state ( long pid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$878.ERR_remove_state$MH, "ERR_remove_state");
        try {
            mh$.invokeExact(pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$878.ERR_get_state$MH,"ERR_get_state");
    }
    public static MemoryAddress ERR_get_state () {
        var mh$ = RuntimeHelper.requireNonNull(constants$878.ERR_get_state$MH, "ERR_get_state");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_get_next_error_library$MH() {
        return RuntimeHelper.requireNonNull(constants$878.ERR_get_next_error_library$MH,"ERR_get_next_error_library");
    }
    public static int ERR_get_next_error_library () {
        var mh$ = RuntimeHelper.requireNonNull(constants$878.ERR_get_next_error_library$MH, "ERR_get_next_error_library");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_set_mark$MH() {
        return RuntimeHelper.requireNonNull(constants$879.ERR_set_mark$MH,"ERR_set_mark");
    }
    public static int ERR_set_mark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$879.ERR_set_mark$MH, "ERR_set_mark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_pop_to_mark$MH() {
        return RuntimeHelper.requireNonNull(constants$879.ERR_pop_to_mark$MH,"ERR_pop_to_mark");
    }
    public static int ERR_pop_to_mark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$879.ERR_pop_to_mark$MH, "ERR_pop_to_mark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_clear_last_mark$MH() {
        return RuntimeHelper.requireNonNull(constants$879.ERR_clear_last_mark$MH,"ERR_clear_last_mark");
    }
    public static int ERR_clear_last_mark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$879.ERR_clear_last_mark$MH, "ERR_clear_last_mark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_PKCS12_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$879.ERR_load_PKCS12_strings$MH,"ERR_load_PKCS12_strings");
    }
    public static int ERR_load_PKCS12_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$879.ERR_load_PKCS12_strings$MH, "ERR_load_PKCS12_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_num$MH() {
        return RuntimeHelper.requireNonNull(constants$880.sk_PKCS12_SAFEBAG_num$MH,"sk_PKCS12_SAFEBAG_num");
    }
    public static int sk_PKCS12_SAFEBAG_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$880.sk_PKCS12_SAFEBAG_num$MH, "sk_PKCS12_SAFEBAG_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_value$MH() {
        return RuntimeHelper.requireNonNull(constants$880.sk_PKCS12_SAFEBAG_value$MH,"sk_PKCS12_SAFEBAG_value");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$880.sk_PKCS12_SAFEBAG_value$MH, "sk_PKCS12_SAFEBAG_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_new$MH() {
        return RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_new$MH,"sk_PKCS12_SAFEBAG_new");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_new$MH, "sk_PKCS12_SAFEBAG_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_new_null$MH,"sk_PKCS12_SAFEBAG_new_null");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_new_null$MH, "sk_PKCS12_SAFEBAG_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_new_reserve$MH,"sk_PKCS12_SAFEBAG_new_reserve");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_new_reserve$MH, "sk_PKCS12_SAFEBAG_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_reserve$MH,"sk_PKCS12_SAFEBAG_reserve");
    }
    public static int sk_PKCS12_SAFEBAG_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_reserve$MH, "sk_PKCS12_SAFEBAG_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_free$MH() {
        return RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_free$MH,"sk_PKCS12_SAFEBAG_free");
    }
    public static void sk_PKCS12_SAFEBAG_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_free$MH, "sk_PKCS12_SAFEBAG_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_zero$MH,"sk_PKCS12_SAFEBAG_zero");
    }
    public static void sk_PKCS12_SAFEBAG_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$881.sk_PKCS12_SAFEBAG_zero$MH, "sk_PKCS12_SAFEBAG_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_delete$MH,"sk_PKCS12_SAFEBAG_delete");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_delete$MH, "sk_PKCS12_SAFEBAG_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_delete_ptr$MH,"sk_PKCS12_SAFEBAG_delete_ptr");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_delete_ptr$MH, "sk_PKCS12_SAFEBAG_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_push$MH() {
        return RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_push$MH,"sk_PKCS12_SAFEBAG_push");
    }
    public static int sk_PKCS12_SAFEBAG_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_push$MH, "sk_PKCS12_SAFEBAG_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_unshift$MH,"sk_PKCS12_SAFEBAG_unshift");
    }
    public static int sk_PKCS12_SAFEBAG_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_unshift$MH, "sk_PKCS12_SAFEBAG_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_pop$MH,"sk_PKCS12_SAFEBAG_pop");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_pop$MH, "sk_PKCS12_SAFEBAG_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_shift$MH,"sk_PKCS12_SAFEBAG_shift");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$882.sk_PKCS12_SAFEBAG_shift$MH, "sk_PKCS12_SAFEBAG_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_pop_free$MH,"sk_PKCS12_SAFEBAG_pop_free");
    }
    public static void sk_PKCS12_SAFEBAG_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_pop_free$MH, "sk_PKCS12_SAFEBAG_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_insert$MH,"sk_PKCS12_SAFEBAG_insert");
    }
    public static int sk_PKCS12_SAFEBAG_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_insert$MH, "sk_PKCS12_SAFEBAG_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_set$MH() {
        return RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_set$MH,"sk_PKCS12_SAFEBAG_set");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_set$MH, "sk_PKCS12_SAFEBAG_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_find$MH() {
        return RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_find$MH,"sk_PKCS12_SAFEBAG_find");
    }
    public static int sk_PKCS12_SAFEBAG_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_find$MH, "sk_PKCS12_SAFEBAG_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_find_ex$MH,"sk_PKCS12_SAFEBAG_find_ex");
    }
    public static int sk_PKCS12_SAFEBAG_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_find_ex$MH, "sk_PKCS12_SAFEBAG_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_sort$MH,"sk_PKCS12_SAFEBAG_sort");
    }
    public static void sk_PKCS12_SAFEBAG_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$883.sk_PKCS12_SAFEBAG_sort$MH, "sk_PKCS12_SAFEBAG_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_is_sorted$MH,"sk_PKCS12_SAFEBAG_is_sorted");
    }
    public static int sk_PKCS12_SAFEBAG_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_is_sorted$MH, "sk_PKCS12_SAFEBAG_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_dup$MH,"sk_PKCS12_SAFEBAG_dup");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_dup$MH, "sk_PKCS12_SAFEBAG_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_deep_copy$MH,"sk_PKCS12_SAFEBAG_deep_copy");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_deep_copy$MH, "sk_PKCS12_SAFEBAG_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_PKCS12_SAFEBAG_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_set_cmp_func$MH,"sk_PKCS12_SAFEBAG_set_cmp_func");
    }
    public static MemoryAddress sk_PKCS12_SAFEBAG_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.sk_PKCS12_SAFEBAG_set_cmp_func$MH, "sk_PKCS12_SAFEBAG_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$884.PKCS12_get_attr$MH,"PKCS12_get_attr");
    }
    public static MemoryAddress PKCS12_get_attr ( Addressable bag,  int attr_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.PKCS12_get_attr$MH, "PKCS12_get_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag, attr_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$884.PKCS8_get_attr$MH,"PKCS8_get_attr");
    }
    public static MemoryAddress PKCS8_get_attr ( Addressable p8,  int attr_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$884.PKCS8_get_attr$MH, "PKCS8_get_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p8, attr_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_mac_present$MH() {
        return RuntimeHelper.requireNonNull(constants$885.PKCS12_mac_present$MH,"PKCS12_mac_present");
    }
    public static int PKCS12_mac_present ( Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.PKCS12_mac_present$MH, "PKCS12_mac_present");
        try {
            return (int)mh$.invokeExact(p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_get0_mac$MH() {
        return RuntimeHelper.requireNonNull(constants$885.PKCS12_get0_mac$MH,"PKCS12_get0_mac");
    }
    public static void PKCS12_get0_mac ( Addressable pmac,  Addressable pmacalg,  Addressable psalt,  Addressable piter,  Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.PKCS12_get0_mac$MH, "PKCS12_get0_mac");
        try {
            mh$.invokeExact(pmac, pmacalg, psalt, piter, p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get0_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get0_attr$MH,"PKCS12_SAFEBAG_get0_attr");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get0_attr ( Addressable bag,  int attr_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get0_attr$MH, "PKCS12_SAFEBAG_get0_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag, attr_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get0_type$MH() {
        return RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get0_type$MH,"PKCS12_SAFEBAG_get0_type");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get0_type ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get0_type$MH, "PKCS12_SAFEBAG_get0_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get_nid$MH,"PKCS12_SAFEBAG_get_nid");
    }
    public static int PKCS12_SAFEBAG_get_nid ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get_nid$MH, "PKCS12_SAFEBAG_get_nid");
        try {
            return (int)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get_bag_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get_bag_nid$MH,"PKCS12_SAFEBAG_get_bag_nid");
    }
    public static int PKCS12_SAFEBAG_get_bag_nid ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$885.PKCS12_SAFEBAG_get_bag_nid$MH, "PKCS12_SAFEBAG_get_bag_nid");
        try {
            return (int)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get1_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get1_cert$MH,"PKCS12_SAFEBAG_get1_cert");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get1_cert ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get1_cert$MH, "PKCS12_SAFEBAG_get1_cert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get1_crl$MH() {
        return RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get1_crl$MH,"PKCS12_SAFEBAG_get1_crl");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get1_crl ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get1_crl$MH, "PKCS12_SAFEBAG_get1_crl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get0_safes$MH() {
        return RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get0_safes$MH,"PKCS12_SAFEBAG_get0_safes");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get0_safes ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get0_safes$MH, "PKCS12_SAFEBAG_get0_safes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get0_p8inf$MH() {
        return RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get0_p8inf$MH,"PKCS12_SAFEBAG_get0_p8inf");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get0_p8inf ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get0_p8inf$MH, "PKCS12_SAFEBAG_get0_p8inf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get0_pkcs8$MH() {
        return RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get0_pkcs8$MH,"PKCS12_SAFEBAG_get0_pkcs8");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get0_pkcs8 ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_get0_pkcs8$MH, "PKCS12_SAFEBAG_get0_pkcs8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_create_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_create_cert$MH,"PKCS12_SAFEBAG_create_cert");
    }
    public static MemoryAddress PKCS12_SAFEBAG_create_cert ( Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$886.PKCS12_SAFEBAG_create_cert$MH, "PKCS12_SAFEBAG_create_cert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_create_crl$MH() {
        return RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create_crl$MH,"PKCS12_SAFEBAG_create_crl");
    }
    public static MemoryAddress PKCS12_SAFEBAG_create_crl ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create_crl$MH, "PKCS12_SAFEBAG_create_crl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_create0_p8inf$MH() {
        return RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create0_p8inf$MH,"PKCS12_SAFEBAG_create0_p8inf");
    }
    public static MemoryAddress PKCS12_SAFEBAG_create0_p8inf ( Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create0_p8inf$MH, "PKCS12_SAFEBAG_create0_p8inf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_create0_pkcs8$MH() {
        return RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create0_pkcs8$MH,"PKCS12_SAFEBAG_create0_pkcs8");
    }
    public static MemoryAddress PKCS12_SAFEBAG_create0_pkcs8 ( Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create0_pkcs8$MH, "PKCS12_SAFEBAG_create0_pkcs8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_create_pkcs8_encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create_pkcs8_encrypt$MH,"PKCS12_SAFEBAG_create_pkcs8_encrypt");
    }
    public static MemoryAddress PKCS12_SAFEBAG_create_pkcs8_encrypt ( int pbe_nid,  Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int iter,  Addressable p8inf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.PKCS12_SAFEBAG_create_pkcs8_encrypt$MH, "PKCS12_SAFEBAG_create_pkcs8_encrypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pbe_nid, pass, passlen, salt, saltlen, iter, p8inf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_item_pack_safebag$MH() {
        return RuntimeHelper.requireNonNull(constants$887.PKCS12_item_pack_safebag$MH,"PKCS12_item_pack_safebag");
    }
    public static MemoryAddress PKCS12_item_pack_safebag ( Addressable obj,  Addressable it,  int nid1,  int nid2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.PKCS12_item_pack_safebag$MH, "PKCS12_item_pack_safebag");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(obj, it, nid1, nid2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_decrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$887.PKCS8_decrypt$MH,"PKCS8_decrypt");
    }
    public static MemoryAddress PKCS8_decrypt ( Addressable p8,  Addressable pass,  int passlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$887.PKCS8_decrypt$MH, "PKCS8_decrypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p8, pass, passlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_decrypt_skey$MH() {
        return RuntimeHelper.requireNonNull(constants$888.PKCS12_decrypt_skey$MH,"PKCS12_decrypt_skey");
    }
    public static MemoryAddress PKCS12_decrypt_skey ( Addressable bag,  Addressable pass,  int passlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.PKCS12_decrypt_skey$MH, "PKCS12_decrypt_skey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag, pass, passlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$888.PKCS8_encrypt$MH,"PKCS8_encrypt");
    }
    public static MemoryAddress PKCS8_encrypt ( int pbe_nid,  Addressable cipher,  Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int iter,  Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.PKCS8_encrypt$MH, "PKCS8_encrypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pbe_nid, cipher, pass, passlen, salt, saltlen, iter, p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_set0_pbe$MH() {
        return RuntimeHelper.requireNonNull(constants$888.PKCS8_set0_pbe$MH,"PKCS8_set0_pbe");
    }
    public static MemoryAddress PKCS8_set0_pbe ( Addressable pass,  int passlen,  Addressable p8inf,  Addressable pbe) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.PKCS8_set0_pbe$MH, "PKCS8_set0_pbe");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pass, passlen, p8inf, pbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_pack_p7data$MH() {
        return RuntimeHelper.requireNonNull(constants$888.PKCS12_pack_p7data$MH,"PKCS12_pack_p7data");
    }
    public static MemoryAddress PKCS12_pack_p7data ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.PKCS12_pack_p7data$MH, "PKCS12_pack_p7data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_unpack_p7data$MH() {
        return RuntimeHelper.requireNonNull(constants$888.PKCS12_unpack_p7data$MH,"PKCS12_unpack_p7data");
    }
    public static MemoryAddress PKCS12_unpack_p7data ( Addressable p7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.PKCS12_unpack_p7data$MH, "PKCS12_unpack_p7data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_pack_p7encdata$MH() {
        return RuntimeHelper.requireNonNull(constants$888.PKCS12_pack_p7encdata$MH,"PKCS12_pack_p7encdata");
    }
    public static MemoryAddress PKCS12_pack_p7encdata ( int pbe_nid,  Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int iter,  Addressable bags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$888.PKCS12_pack_p7encdata$MH, "PKCS12_pack_p7encdata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pbe_nid, pass, passlen, salt, saltlen, iter, bags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_unpack_p7encdata$MH() {
        return RuntimeHelper.requireNonNull(constants$889.PKCS12_unpack_p7encdata$MH,"PKCS12_unpack_p7encdata");
    }
    public static MemoryAddress PKCS12_unpack_p7encdata ( Addressable p7,  Addressable pass,  int passlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.PKCS12_unpack_p7encdata$MH, "PKCS12_unpack_p7encdata");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p7, pass, passlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_pack_authsafes$MH() {
        return RuntimeHelper.requireNonNull(constants$889.PKCS12_pack_authsafes$MH,"PKCS12_pack_authsafes");
    }
    public static int PKCS12_pack_authsafes ( Addressable p12,  Addressable safes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.PKCS12_pack_authsafes$MH, "PKCS12_pack_authsafes");
        try {
            return (int)mh$.invokeExact(p12, safes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_unpack_authsafes$MH() {
        return RuntimeHelper.requireNonNull(constants$889.PKCS12_unpack_authsafes$MH,"PKCS12_unpack_authsafes");
    }
    public static MemoryAddress PKCS12_unpack_authsafes ( Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.PKCS12_unpack_authsafes$MH, "PKCS12_unpack_authsafes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_localkeyid$MH() {
        return RuntimeHelper.requireNonNull(constants$889.PKCS12_add_localkeyid$MH,"PKCS12_add_localkeyid");
    }
    public static int PKCS12_add_localkeyid ( Addressable bag,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.PKCS12_add_localkeyid$MH, "PKCS12_add_localkeyid");
        try {
            return (int)mh$.invokeExact(bag, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_friendlyname_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$889.PKCS12_add_friendlyname_asc$MH,"PKCS12_add_friendlyname_asc");
    }
    public static int PKCS12_add_friendlyname_asc ( Addressable bag,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.PKCS12_add_friendlyname_asc$MH, "PKCS12_add_friendlyname_asc");
        try {
            return (int)mh$.invokeExact(bag, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_friendlyname_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$889.PKCS12_add_friendlyname_utf8$MH,"PKCS12_add_friendlyname_utf8");
    }
    public static int PKCS12_add_friendlyname_utf8 ( Addressable bag,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$889.PKCS12_add_friendlyname_utf8$MH, "PKCS12_add_friendlyname_utf8");
        try {
            return (int)mh$.invokeExact(bag, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_CSPName_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$890.PKCS12_add_CSPName_asc$MH,"PKCS12_add_CSPName_asc");
    }
    public static int PKCS12_add_CSPName_asc ( Addressable bag,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.PKCS12_add_CSPName_asc$MH, "PKCS12_add_CSPName_asc");
        try {
            return (int)mh$.invokeExact(bag, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_friendlyname_uni$MH() {
        return RuntimeHelper.requireNonNull(constants$890.PKCS12_add_friendlyname_uni$MH,"PKCS12_add_friendlyname_uni");
    }
    public static int PKCS12_add_friendlyname_uni ( Addressable bag,  Addressable name,  int namelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.PKCS12_add_friendlyname_uni$MH, "PKCS12_add_friendlyname_uni");
        try {
            return (int)mh$.invokeExact(bag, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_add_keyusage$MH() {
        return RuntimeHelper.requireNonNull(constants$890.PKCS8_add_keyusage$MH,"PKCS8_add_keyusage");
    }
    public static int PKCS8_add_keyusage ( Addressable p8,  int usage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.PKCS8_add_keyusage$MH, "PKCS8_add_keyusage");
        try {
            return (int)mh$.invokeExact(p8, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_get_attr_gen$MH() {
        return RuntimeHelper.requireNonNull(constants$890.PKCS12_get_attr_gen$MH,"PKCS12_get_attr_gen");
    }
    public static MemoryAddress PKCS12_get_attr_gen ( Addressable attrs,  int attr_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.PKCS12_get_attr_gen$MH, "PKCS12_get_attr_gen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attrs, attr_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_get_friendlyname$MH() {
        return RuntimeHelper.requireNonNull(constants$890.PKCS12_get_friendlyname$MH,"PKCS12_get_friendlyname");
    }
    public static MemoryAddress PKCS12_get_friendlyname ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.PKCS12_get_friendlyname$MH, "PKCS12_get_friendlyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_get0_attrs$MH() {
        return RuntimeHelper.requireNonNull(constants$890.PKCS12_SAFEBAG_get0_attrs$MH,"PKCS12_SAFEBAG_get0_attrs");
    }
    public static MemoryAddress PKCS12_SAFEBAG_get0_attrs ( Addressable bag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$890.PKCS12_SAFEBAG_get0_attrs$MH, "PKCS12_SAFEBAG_get0_attrs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_pbe_crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$891.PKCS12_pbe_crypt$MH,"PKCS12_pbe_crypt");
    }
    public static MemoryAddress PKCS12_pbe_crypt ( Addressable algor,  Addressable pass,  int passlen,  Addressable in,  int inlen,  Addressable data,  Addressable datalen,  int en_de) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.PKCS12_pbe_crypt$MH, "PKCS12_pbe_crypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(algor, pass, passlen, in, inlen, data, datalen, en_de);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_item_decrypt_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$891.PKCS12_item_decrypt_d2i$MH,"PKCS12_item_decrypt_d2i");
    }
    public static MemoryAddress PKCS12_item_decrypt_d2i ( Addressable algor,  Addressable it,  Addressable pass,  int passlen,  Addressable oct,  int zbuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.PKCS12_item_decrypt_d2i$MH, "PKCS12_item_decrypt_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(algor, it, pass, passlen, oct, zbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_item_i2d_encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$891.PKCS12_item_i2d_encrypt$MH,"PKCS12_item_i2d_encrypt");
    }
    public static MemoryAddress PKCS12_item_i2d_encrypt ( Addressable algor,  Addressable it,  Addressable pass,  int passlen,  Addressable obj,  int zbuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.PKCS12_item_i2d_encrypt$MH, "PKCS12_item_i2d_encrypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(algor, it, pass, passlen, obj, zbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_init$MH() {
        return RuntimeHelper.requireNonNull(constants$891.PKCS12_init$MH,"PKCS12_init");
    }
    public static MemoryAddress PKCS12_init ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.PKCS12_init$MH, "PKCS12_init");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_key_gen_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$891.PKCS12_key_gen_asc$MH,"PKCS12_key_gen_asc");
    }
    public static int PKCS12_key_gen_asc ( Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int id,  int iter,  int n,  Addressable out,  Addressable md_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.PKCS12_key_gen_asc$MH, "PKCS12_key_gen_asc");
        try {
            return (int)mh$.invokeExact(pass, passlen, salt, saltlen, id, iter, n, out, md_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_key_gen_uni$MH() {
        return RuntimeHelper.requireNonNull(constants$891.PKCS12_key_gen_uni$MH,"PKCS12_key_gen_uni");
    }
    public static int PKCS12_key_gen_uni ( Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int id,  int iter,  int n,  Addressable out,  Addressable md_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$891.PKCS12_key_gen_uni$MH, "PKCS12_key_gen_uni");
        try {
            return (int)mh$.invokeExact(pass, passlen, salt, saltlen, id, iter, n, out, md_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_key_gen_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$892.PKCS12_key_gen_utf8$MH,"PKCS12_key_gen_utf8");
    }
    public static int PKCS12_key_gen_utf8 ( Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int id,  int iter,  int n,  Addressable out,  Addressable md_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.PKCS12_key_gen_utf8$MH, "PKCS12_key_gen_utf8");
        try {
            return (int)mh$.invokeExact(pass, passlen, salt, saltlen, id, iter, n, out, md_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_PBE_keyivgen$MH() {
        return RuntimeHelper.requireNonNull(constants$892.PKCS12_PBE_keyivgen$MH,"PKCS12_PBE_keyivgen");
    }
    public static int PKCS12_PBE_keyivgen ( Addressable ctx,  Addressable pass,  int passlen,  Addressable param,  Addressable cipher,  Addressable md_type,  int en_de) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.PKCS12_PBE_keyivgen$MH, "PKCS12_PBE_keyivgen");
        try {
            return (int)mh$.invokeExact(ctx, pass, passlen, param, cipher, md_type, en_de);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_gen_mac$MH() {
        return RuntimeHelper.requireNonNull(constants$892.PKCS12_gen_mac$MH,"PKCS12_gen_mac");
    }
    public static int PKCS12_gen_mac ( Addressable p12,  Addressable pass,  int passlen,  Addressable mac,  Addressable maclen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.PKCS12_gen_mac$MH, "PKCS12_gen_mac");
        try {
            return (int)mh$.invokeExact(p12, pass, passlen, mac, maclen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_verify_mac$MH() {
        return RuntimeHelper.requireNonNull(constants$892.PKCS12_verify_mac$MH,"PKCS12_verify_mac");
    }
    public static int PKCS12_verify_mac ( Addressable p12,  Addressable pass,  int passlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.PKCS12_verify_mac$MH, "PKCS12_verify_mac");
        try {
            return (int)mh$.invokeExact(p12, pass, passlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_set_mac$MH() {
        return RuntimeHelper.requireNonNull(constants$892.PKCS12_set_mac$MH,"PKCS12_set_mac");
    }
    public static int PKCS12_set_mac ( Addressable p12,  Addressable pass,  int passlen,  Addressable salt,  int saltlen,  int iter,  Addressable md_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.PKCS12_set_mac$MH, "PKCS12_set_mac");
        try {
            return (int)mh$.invokeExact(p12, pass, passlen, salt, saltlen, iter, md_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_setup_mac$MH() {
        return RuntimeHelper.requireNonNull(constants$892.PKCS12_setup_mac$MH,"PKCS12_setup_mac");
    }
    public static int PKCS12_setup_mac ( Addressable p12,  int iter,  Addressable salt,  int saltlen,  Addressable md_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$892.PKCS12_setup_mac$MH, "PKCS12_setup_mac");
        try {
            return (int)mh$.invokeExact(p12, iter, salt, saltlen, md_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_asc2uni$MH() {
        return RuntimeHelper.requireNonNull(constants$893.OPENSSL_asc2uni$MH,"OPENSSL_asc2uni");
    }
    public static MemoryAddress OPENSSL_asc2uni ( Addressable asc,  int asclen,  Addressable uni,  Addressable unilen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.OPENSSL_asc2uni$MH, "OPENSSL_asc2uni");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(asc, asclen, uni, unilen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_uni2asc$MH() {
        return RuntimeHelper.requireNonNull(constants$893.OPENSSL_uni2asc$MH,"OPENSSL_uni2asc");
    }
    public static MemoryAddress OPENSSL_uni2asc ( Addressable uni,  int unilen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.OPENSSL_uni2asc$MH, "OPENSSL_uni2asc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uni, unilen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_utf82uni$MH() {
        return RuntimeHelper.requireNonNull(constants$893.OPENSSL_utf82uni$MH,"OPENSSL_utf82uni");
    }
    public static MemoryAddress OPENSSL_utf82uni ( Addressable asc,  int asclen,  Addressable uni,  Addressable unilen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.OPENSSL_utf82uni$MH, "OPENSSL_utf82uni");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(asc, asclen, uni, unilen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_uni2utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$893.OPENSSL_uni2utf8$MH,"OPENSSL_uni2utf8");
    }
    public static MemoryAddress OPENSSL_uni2utf8 ( Addressable uni,  int unilen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.OPENSSL_uni2utf8$MH, "OPENSSL_uni2utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(uni, unilen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_new$MH() {
        return RuntimeHelper.requireNonNull(constants$893.PKCS12_new$MH,"PKCS12_new");
    }
    public static MemoryAddress PKCS12_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.PKCS12_new$MH, "PKCS12_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_free$MH() {
        return RuntimeHelper.requireNonNull(constants$893.PKCS12_free$MH,"PKCS12_free");
    }
    public static void PKCS12_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$893.PKCS12_free$MH, "PKCS12_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12$MH() {
        return RuntimeHelper.requireNonNull(constants$894.d2i_PKCS12$MH,"d2i_PKCS12");
    }
    public static MemoryAddress d2i_PKCS12 ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.d2i_PKCS12$MH, "d2i_PKCS12");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS12$MH() {
        return RuntimeHelper.requireNonNull(constants$894.i2d_PKCS12$MH,"i2d_PKCS12");
    }
    public static int i2d_PKCS12 ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.i2d_PKCS12$MH, "i2d_PKCS12");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_MAC_DATA_new$MH() {
        return RuntimeHelper.requireNonNull(constants$894.PKCS12_MAC_DATA_new$MH,"PKCS12_MAC_DATA_new");
    }
    public static MemoryAddress PKCS12_MAC_DATA_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.PKCS12_MAC_DATA_new$MH, "PKCS12_MAC_DATA_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_MAC_DATA_free$MH() {
        return RuntimeHelper.requireNonNull(constants$894.PKCS12_MAC_DATA_free$MH,"PKCS12_MAC_DATA_free");
    }
    public static void PKCS12_MAC_DATA_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.PKCS12_MAC_DATA_free$MH, "PKCS12_MAC_DATA_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12_MAC_DATA$MH() {
        return RuntimeHelper.requireNonNull(constants$894.d2i_PKCS12_MAC_DATA$MH,"d2i_PKCS12_MAC_DATA");
    }
    public static MemoryAddress d2i_PKCS12_MAC_DATA ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.d2i_PKCS12_MAC_DATA$MH, "d2i_PKCS12_MAC_DATA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS12_MAC_DATA$MH() {
        return RuntimeHelper.requireNonNull(constants$894.i2d_PKCS12_MAC_DATA$MH,"i2d_PKCS12_MAC_DATA");
    }
    public static int i2d_PKCS12_MAC_DATA ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$894.i2d_PKCS12_MAC_DATA$MH, "i2d_PKCS12_MAC_DATA");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_new$MH() {
        return RuntimeHelper.requireNonNull(constants$895.PKCS12_SAFEBAG_new$MH,"PKCS12_SAFEBAG_new");
    }
    public static MemoryAddress PKCS12_SAFEBAG_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.PKCS12_SAFEBAG_new$MH, "PKCS12_SAFEBAG_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_SAFEBAG_free$MH() {
        return RuntimeHelper.requireNonNull(constants$895.PKCS12_SAFEBAG_free$MH,"PKCS12_SAFEBAG_free");
    }
    public static void PKCS12_SAFEBAG_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.PKCS12_SAFEBAG_free$MH, "PKCS12_SAFEBAG_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12_SAFEBAG$MH() {
        return RuntimeHelper.requireNonNull(constants$895.d2i_PKCS12_SAFEBAG$MH,"d2i_PKCS12_SAFEBAG");
    }
    public static MemoryAddress d2i_PKCS12_SAFEBAG ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.d2i_PKCS12_SAFEBAG$MH, "d2i_PKCS12_SAFEBAG");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS12_SAFEBAG$MH() {
        return RuntimeHelper.requireNonNull(constants$895.i2d_PKCS12_SAFEBAG$MH,"i2d_PKCS12_SAFEBAG");
    }
    public static int i2d_PKCS12_SAFEBAG ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.i2d_PKCS12_SAFEBAG$MH, "i2d_PKCS12_SAFEBAG");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_BAGS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$895.PKCS12_BAGS_new$MH,"PKCS12_BAGS_new");
    }
    public static MemoryAddress PKCS12_BAGS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.PKCS12_BAGS_new$MH, "PKCS12_BAGS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_BAGS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$895.PKCS12_BAGS_free$MH,"PKCS12_BAGS_free");
    }
    public static void PKCS12_BAGS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$895.PKCS12_BAGS_free$MH, "PKCS12_BAGS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12_BAGS$MH() {
        return RuntimeHelper.requireNonNull(constants$896.d2i_PKCS12_BAGS$MH,"d2i_PKCS12_BAGS");
    }
    public static MemoryAddress d2i_PKCS12_BAGS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.d2i_PKCS12_BAGS$MH, "d2i_PKCS12_BAGS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS12_BAGS$MH() {
        return RuntimeHelper.requireNonNull(constants$896.i2d_PKCS12_BAGS$MH,"i2d_PKCS12_BAGS");
    }
    public static int i2d_PKCS12_BAGS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.i2d_PKCS12_BAGS$MH, "i2d_PKCS12_BAGS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_PBE_add$MH() {
        return RuntimeHelper.requireNonNull(constants$896.PKCS12_PBE_add$MH,"PKCS12_PBE_add");
    }
    public static void PKCS12_PBE_add () {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.PKCS12_PBE_add$MH, "PKCS12_PBE_add");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$896.PKCS12_parse$MH,"PKCS12_parse");
    }
    public static int PKCS12_parse ( Addressable p12,  Addressable pass,  Addressable pkey,  Addressable cert,  Addressable ca) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.PKCS12_parse$MH, "PKCS12_parse");
        try {
            return (int)mh$.invokeExact(p12, pass, pkey, cert, ca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_create$MH() {
        return RuntimeHelper.requireNonNull(constants$896.PKCS12_create$MH,"PKCS12_create");
    }
    public static MemoryAddress PKCS12_create ( Addressable pass,  Addressable name,  Addressable pkey,  Addressable cert,  Addressable ca,  int nid_key,  int nid_cert,  int iter,  int mac_iter,  int keytype) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.PKCS12_create$MH, "PKCS12_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pass, name, pkey, cert, ca, nid_key, nid_cert, iter, mac_iter, keytype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$896.PKCS12_add_cert$MH,"PKCS12_add_cert");
    }
    public static MemoryAddress PKCS12_add_cert ( Addressable pbags,  Addressable cert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$896.PKCS12_add_cert$MH, "PKCS12_add_cert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pbags, cert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_key$MH() {
        return RuntimeHelper.requireNonNull(constants$897.PKCS12_add_key$MH,"PKCS12_add_key");
    }
    public static MemoryAddress PKCS12_add_key ( Addressable pbags,  Addressable key,  int key_usage,  int iter,  int key_nid,  Addressable pass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$897.PKCS12_add_key$MH, "PKCS12_add_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pbags, key, key_usage, iter, key_nid, pass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_safe$MH() {
        return RuntimeHelper.requireNonNull(constants$897.PKCS12_add_safe$MH,"PKCS12_add_safe");
    }
    public static int PKCS12_add_safe ( Addressable psafes,  Addressable bags,  int safe_nid,  int iter,  Addressable pass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$897.PKCS12_add_safe$MH, "PKCS12_add_safe");
        try {
            return (int)mh$.invokeExact(psafes, bags, safe_nid, iter, pass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_add_safes$MH() {
        return RuntimeHelper.requireNonNull(constants$897.PKCS12_add_safes$MH,"PKCS12_add_safes");
    }
    public static MemoryAddress PKCS12_add_safes ( Addressable safes,  int p7_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$897.PKCS12_add_safes$MH, "PKCS12_add_safes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(safes, p7_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS12_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$897.i2d_PKCS12_bio$MH,"i2d_PKCS12_bio");
    }
    public static int i2d_PKCS12_bio ( Addressable bp,  Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$897.i2d_PKCS12_bio$MH, "i2d_PKCS12_bio");
        try {
            return (int)mh$.invokeExact(bp, p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS12_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$897.i2d_PKCS12_fp$MH,"i2d_PKCS12_fp");
    }
    public static int i2d_PKCS12_fp ( Addressable fp,  Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$897.i2d_PKCS12_fp$MH, "i2d_PKCS12_fp");
        try {
            return (int)mh$.invokeExact(fp, p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$897.d2i_PKCS12_bio$MH,"d2i_PKCS12_bio");
    }
    public static MemoryAddress d2i_PKCS12_bio ( Addressable bp,  Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$897.d2i_PKCS12_bio$MH, "d2i_PKCS12_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$898.d2i_PKCS12_fp$MH,"d2i_PKCS12_fp");
    }
    public static MemoryAddress d2i_PKCS12_fp ( Addressable fp,  Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.d2i_PKCS12_fp$MH, "d2i_PKCS12_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_newpass$MH() {
        return RuntimeHelper.requireNonNull(constants$898.PKCS12_newpass$MH,"PKCS12_newpass");
    }
    public static int PKCS12_newpass ( Addressable p12,  Addressable oldpass,  Addressable newpass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.PKCS12_newpass$MH, "PKCS12_newpass");
        try {
            return (int)mh$.invokeExact(p12, oldpass, newpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_RAND_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$898.ERR_load_RAND_strings$MH,"ERR_load_RAND_strings");
    }
    public static int ERR_load_RAND_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.ERR_load_RAND_strings$MH, "ERR_load_RAND_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_set_rand_method$MH() {
        return RuntimeHelper.requireNonNull(constants$898.RAND_set_rand_method$MH,"RAND_set_rand_method");
    }
    public static int RAND_set_rand_method ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.RAND_set_rand_method$MH, "RAND_set_rand_method");
        try {
            return (int)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_get_rand_method$MH() {
        return RuntimeHelper.requireNonNull(constants$898.RAND_get_rand_method$MH,"RAND_get_rand_method");
    }
    public static MemoryAddress RAND_get_rand_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.RAND_get_rand_method$MH, "RAND_get_rand_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_set_rand_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$898.RAND_set_rand_engine$MH,"RAND_set_rand_engine");
    }
    public static int RAND_set_rand_engine ( Addressable engine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$898.RAND_set_rand_engine$MH, "RAND_set_rand_engine");
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_OpenSSL$MH() {
        return RuntimeHelper.requireNonNull(constants$899.RAND_OpenSSL$MH,"RAND_OpenSSL");
    }
    public static MemoryAddress RAND_OpenSSL () {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.RAND_OpenSSL$MH, "RAND_OpenSSL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$899.RAND_bytes$MH,"RAND_bytes");
    }
    public static int RAND_bytes ( Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.RAND_bytes$MH, "RAND_bytes");
        try {
            return (int)mh$.invokeExact(buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_priv_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$899.RAND_priv_bytes$MH,"RAND_priv_bytes");
    }
    public static int RAND_priv_bytes ( Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.RAND_priv_bytes$MH, "RAND_priv_bytes");
        try {
            return (int)mh$.invokeExact(buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_pseudo_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$899.RAND_pseudo_bytes$MH,"RAND_pseudo_bytes");
    }
    public static int RAND_pseudo_bytes ( Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.RAND_pseudo_bytes$MH, "RAND_pseudo_bytes");
        try {
            return (int)mh$.invokeExact(buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$899.RAND_seed$MH,"RAND_seed");
    }
    public static void RAND_seed ( Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.RAND_seed$MH, "RAND_seed");
        try {
            mh$.invokeExact(buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_keep_random_devices_open$MH() {
        return RuntimeHelper.requireNonNull(constants$899.RAND_keep_random_devices_open$MH,"RAND_keep_random_devices_open");
    }
    public static void RAND_keep_random_devices_open ( int keep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$899.RAND_keep_random_devices_open$MH, "RAND_keep_random_devices_open");
        try {
            mh$.invokeExact(keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_add$MH() {
        return RuntimeHelper.requireNonNull(constants$900.RAND_add$MH,"RAND_add");
    }
    public static void RAND_add ( Addressable buf,  int num,  double randomness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.RAND_add$MH, "RAND_add");
        try {
            mh$.invokeExact(buf, num, randomness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$900.RAND_load_file$MH,"RAND_load_file");
    }
    public static int RAND_load_file ( Addressable file,  long max_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.RAND_load_file$MH, "RAND_load_file");
        try {
            return (int)mh$.invokeExact(file, max_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_write_file$MH() {
        return RuntimeHelper.requireNonNull(constants$900.RAND_write_file$MH,"RAND_write_file");
    }
    public static int RAND_write_file ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.RAND_write_file$MH, "RAND_write_file");
        try {
            return (int)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$900.RAND_file_name$MH,"RAND_file_name");
    }
    public static MemoryAddress RAND_file_name ( Addressable file,  long num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.RAND_file_name$MH, "RAND_file_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_status$MH() {
        return RuntimeHelper.requireNonNull(constants$900.RAND_status$MH,"RAND_status");
    }
    public static int RAND_status () {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.RAND_status$MH, "RAND_status");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$900.RAND_poll$MH,"RAND_poll");
    }
    public static int RAND_poll () {
        var mh$ = RuntimeHelper.requireNonNull(constants$900.RAND_poll$MH, "RAND_poll");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_set_fips_drbg_type$MH() {
        return RuntimeHelper.requireNonNull(constants$901.RAND_set_fips_drbg_type$MH,"RAND_set_fips_drbg_type");
    }
    public static void RAND_set_fips_drbg_type ( int type,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.RAND_set_fips_drbg_type$MH, "RAND_set_fips_drbg_type");
        try {
            mh$.invokeExact(type, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_init_fips$MH() {
        return RuntimeHelper.requireNonNull(constants$901.RAND_init_fips$MH,"RAND_init_fips");
    }
    public static int RAND_init_fips () {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.RAND_init_fips$MH, "RAND_init_fips");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_CONF_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$901.ERR_load_CONF_strings$MH,"ERR_load_CONF_strings");
    }
    public static int ERR_load_CONF_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$901.ERR_load_CONF_strings$MH, "ERR_load_CONF_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$902.sk_CONF_VALUE_num$MH,"sk_CONF_VALUE_num");
    }
    public static int sk_CONF_VALUE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.sk_CONF_VALUE_num$MH, "sk_CONF_VALUE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$902.sk_CONF_VALUE_value$MH,"sk_CONF_VALUE_value");
    }
    public static MemoryAddress sk_CONF_VALUE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.sk_CONF_VALUE_value$MH, "sk_CONF_VALUE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$902.sk_CONF_VALUE_new$MH,"sk_CONF_VALUE_new");
    }
    public static MemoryAddress sk_CONF_VALUE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$902.sk_CONF_VALUE_new$MH, "sk_CONF_VALUE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_new_null$MH,"sk_CONF_VALUE_new_null");
    }
    public static MemoryAddress sk_CONF_VALUE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_new_null$MH, "sk_CONF_VALUE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_new_reserve$MH,"sk_CONF_VALUE_new_reserve");
    }
    public static MemoryAddress sk_CONF_VALUE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_new_reserve$MH, "sk_CONF_VALUE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_reserve$MH,"sk_CONF_VALUE_reserve");
    }
    public static int sk_CONF_VALUE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_reserve$MH, "sk_CONF_VALUE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_free$MH,"sk_CONF_VALUE_free");
    }
    public static void sk_CONF_VALUE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_free$MH, "sk_CONF_VALUE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_zero$MH,"sk_CONF_VALUE_zero");
    }
    public static void sk_CONF_VALUE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_zero$MH, "sk_CONF_VALUE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_delete$MH,"sk_CONF_VALUE_delete");
    }
    public static MemoryAddress sk_CONF_VALUE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$903.sk_CONF_VALUE_delete$MH, "sk_CONF_VALUE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_delete_ptr$MH,"sk_CONF_VALUE_delete_ptr");
    }
    public static MemoryAddress sk_CONF_VALUE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_delete_ptr$MH, "sk_CONF_VALUE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_push$MH,"sk_CONF_VALUE_push");
    }
    public static int sk_CONF_VALUE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_push$MH, "sk_CONF_VALUE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_unshift$MH,"sk_CONF_VALUE_unshift");
    }
    public static int sk_CONF_VALUE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_unshift$MH, "sk_CONF_VALUE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_pop$MH,"sk_CONF_VALUE_pop");
    }
    public static MemoryAddress sk_CONF_VALUE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_pop$MH, "sk_CONF_VALUE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_shift$MH,"sk_CONF_VALUE_shift");
    }
    public static MemoryAddress sk_CONF_VALUE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_shift$MH, "sk_CONF_VALUE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_pop_free$MH,"sk_CONF_VALUE_pop_free");
    }
    public static void sk_CONF_VALUE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$904.sk_CONF_VALUE_pop_free$MH, "sk_CONF_VALUE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_insert$MH,"sk_CONF_VALUE_insert");
    }
    public static int sk_CONF_VALUE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_insert$MH, "sk_CONF_VALUE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_set$MH,"sk_CONF_VALUE_set");
    }
    public static MemoryAddress sk_CONF_VALUE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_set$MH, "sk_CONF_VALUE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_find$MH,"sk_CONF_VALUE_find");
    }
    public static int sk_CONF_VALUE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_find$MH, "sk_CONF_VALUE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_find_ex$MH,"sk_CONF_VALUE_find_ex");
    }
    public static int sk_CONF_VALUE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_find_ex$MH, "sk_CONF_VALUE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_sort$MH,"sk_CONF_VALUE_sort");
    }
    public static void sk_CONF_VALUE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_sort$MH, "sk_CONF_VALUE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_is_sorted$MH,"sk_CONF_VALUE_is_sorted");
    }
    public static int sk_CONF_VALUE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$905.sk_CONF_VALUE_is_sorted$MH, "sk_CONF_VALUE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$906.sk_CONF_VALUE_dup$MH,"sk_CONF_VALUE_dup");
    }
    public static MemoryAddress sk_CONF_VALUE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.sk_CONF_VALUE_dup$MH, "sk_CONF_VALUE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$906.sk_CONF_VALUE_deep_copy$MH,"sk_CONF_VALUE_deep_copy");
    }
    public static MemoryAddress sk_CONF_VALUE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.sk_CONF_VALUE_deep_copy$MH, "sk_CONF_VALUE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_VALUE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$906.sk_CONF_VALUE_set_cmp_func$MH,"sk_CONF_VALUE_set_cmp_func");
    }
    public static MemoryAddress sk_CONF_VALUE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$906.sk_CONF_VALUE_set_cmp_func$MH, "sk_CONF_VALUE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_new$MH,"lh_CONF_VALUE_new");
    }
    public static MemoryAddress lh_CONF_VALUE_new ( Addressable hfn,  Addressable cfn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_new$MH, "lh_CONF_VALUE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hfn, cfn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_free$MH,"lh_CONF_VALUE_free");
    }
    public static void lh_CONF_VALUE_free ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_free$MH, "lh_CONF_VALUE_free");
        try {
            mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_insert$MH,"lh_CONF_VALUE_insert");
    }
    public static MemoryAddress lh_CONF_VALUE_insert ( Addressable lh,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_insert$MH, "lh_CONF_VALUE_insert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lh, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_delete$MH,"lh_CONF_VALUE_delete");
    }
    public static MemoryAddress lh_CONF_VALUE_delete ( Addressable lh,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_delete$MH, "lh_CONF_VALUE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lh, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_retrieve$MH() {
        return RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_retrieve$MH,"lh_CONF_VALUE_retrieve");
    }
    public static MemoryAddress lh_CONF_VALUE_retrieve ( Addressable lh,  Addressable d) {
        var mh$ = RuntimeHelper.requireNonNull(constants$907.lh_CONF_VALUE_retrieve$MH, "lh_CONF_VALUE_retrieve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lh, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_error$MH() {
        return RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_error$MH,"lh_CONF_VALUE_error");
    }
    public static int lh_CONF_VALUE_error ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_error$MH, "lh_CONF_VALUE_error");
        try {
            return (int)mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_num_items$MH() {
        return RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_num_items$MH,"lh_CONF_VALUE_num_items");
    }
    public static long lh_CONF_VALUE_num_items ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_num_items$MH, "lh_CONF_VALUE_num_items");
        try {
            return (long)mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_node_stats_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_node_stats_bio$MH,"lh_CONF_VALUE_node_stats_bio");
    }
    public static void lh_CONF_VALUE_node_stats_bio ( Addressable lh,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_node_stats_bio$MH, "lh_CONF_VALUE_node_stats_bio");
        try {
            mh$.invokeExact(lh, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_node_usage_stats_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_node_usage_stats_bio$MH,"lh_CONF_VALUE_node_usage_stats_bio");
    }
    public static void lh_CONF_VALUE_node_usage_stats_bio ( Addressable lh,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_node_usage_stats_bio$MH, "lh_CONF_VALUE_node_usage_stats_bio");
        try {
            mh$.invokeExact(lh, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_stats_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_stats_bio$MH,"lh_CONF_VALUE_stats_bio");
    }
    public static void lh_CONF_VALUE_stats_bio ( Addressable lh,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_stats_bio$MH, "lh_CONF_VALUE_stats_bio");
        try {
            mh$.invokeExact(lh, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_get_down_load$MH() {
        return RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_get_down_load$MH,"lh_CONF_VALUE_get_down_load");
    }
    public static long lh_CONF_VALUE_get_down_load ( Addressable lh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$908.lh_CONF_VALUE_get_down_load$MH, "lh_CONF_VALUE_get_down_load");
        try {
            return (long)mh$.invokeExact(lh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_set_down_load$MH() {
        return RuntimeHelper.requireNonNull(constants$909.lh_CONF_VALUE_set_down_load$MH,"lh_CONF_VALUE_set_down_load");
    }
    public static void lh_CONF_VALUE_set_down_load ( Addressable lh,  long dl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.lh_CONF_VALUE_set_down_load$MH, "lh_CONF_VALUE_set_down_load");
        try {
            mh$.invokeExact(lh, dl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lh_CONF_VALUE_doall$MH() {
        return RuntimeHelper.requireNonNull(constants$909.lh_CONF_VALUE_doall$MH,"lh_CONF_VALUE_doall");
    }
    public static void lh_CONF_VALUE_doall ( Addressable lh,  Addressable doall) {
        var mh$ = RuntimeHelper.requireNonNull(constants$909.lh_CONF_VALUE_doall$MH, "lh_CONF_VALUE_doall");
        try {
            mh$.invokeExact(lh, doall);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$910.sk_CONF_MODULE_num$MH,"sk_CONF_MODULE_num");
    }
    public static int sk_CONF_MODULE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.sk_CONF_MODULE_num$MH, "sk_CONF_MODULE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$910.sk_CONF_MODULE_value$MH,"sk_CONF_MODULE_value");
    }
    public static MemoryAddress sk_CONF_MODULE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$910.sk_CONF_MODULE_value$MH, "sk_CONF_MODULE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_new$MH,"sk_CONF_MODULE_new");
    }
    public static MemoryAddress sk_CONF_MODULE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_new$MH, "sk_CONF_MODULE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_new_null$MH,"sk_CONF_MODULE_new_null");
    }
    public static MemoryAddress sk_CONF_MODULE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_new_null$MH, "sk_CONF_MODULE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_new_reserve$MH,"sk_CONF_MODULE_new_reserve");
    }
    public static MemoryAddress sk_CONF_MODULE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_new_reserve$MH, "sk_CONF_MODULE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_reserve$MH,"sk_CONF_MODULE_reserve");
    }
    public static int sk_CONF_MODULE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_reserve$MH, "sk_CONF_MODULE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_free$MH,"sk_CONF_MODULE_free");
    }
    public static void sk_CONF_MODULE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_free$MH, "sk_CONF_MODULE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_zero$MH,"sk_CONF_MODULE_zero");
    }
    public static void sk_CONF_MODULE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$911.sk_CONF_MODULE_zero$MH, "sk_CONF_MODULE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_delete$MH,"sk_CONF_MODULE_delete");
    }
    public static MemoryAddress sk_CONF_MODULE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_delete$MH, "sk_CONF_MODULE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_delete_ptr$MH,"sk_CONF_MODULE_delete_ptr");
    }
    public static MemoryAddress sk_CONF_MODULE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_delete_ptr$MH, "sk_CONF_MODULE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_push$MH,"sk_CONF_MODULE_push");
    }
    public static int sk_CONF_MODULE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_push$MH, "sk_CONF_MODULE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_unshift$MH,"sk_CONF_MODULE_unshift");
    }
    public static int sk_CONF_MODULE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_unshift$MH, "sk_CONF_MODULE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_pop$MH,"sk_CONF_MODULE_pop");
    }
    public static MemoryAddress sk_CONF_MODULE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_pop$MH, "sk_CONF_MODULE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_shift$MH,"sk_CONF_MODULE_shift");
    }
    public static MemoryAddress sk_CONF_MODULE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$912.sk_CONF_MODULE_shift$MH, "sk_CONF_MODULE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_pop_free$MH,"sk_CONF_MODULE_pop_free");
    }
    public static void sk_CONF_MODULE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_pop_free$MH, "sk_CONF_MODULE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_insert$MH,"sk_CONF_MODULE_insert");
    }
    public static int sk_CONF_MODULE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_insert$MH, "sk_CONF_MODULE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_set$MH,"sk_CONF_MODULE_set");
    }
    public static MemoryAddress sk_CONF_MODULE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_set$MH, "sk_CONF_MODULE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_find$MH,"sk_CONF_MODULE_find");
    }
    public static int sk_CONF_MODULE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_find$MH, "sk_CONF_MODULE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_find_ex$MH,"sk_CONF_MODULE_find_ex");
    }
    public static int sk_CONF_MODULE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_find_ex$MH, "sk_CONF_MODULE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_sort$MH,"sk_CONF_MODULE_sort");
    }
    public static void sk_CONF_MODULE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$913.sk_CONF_MODULE_sort$MH, "sk_CONF_MODULE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_is_sorted$MH,"sk_CONF_MODULE_is_sorted");
    }
    public static int sk_CONF_MODULE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_is_sorted$MH, "sk_CONF_MODULE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_dup$MH,"sk_CONF_MODULE_dup");
    }
    public static MemoryAddress sk_CONF_MODULE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_dup$MH, "sk_CONF_MODULE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_deep_copy$MH,"sk_CONF_MODULE_deep_copy");
    }
    public static MemoryAddress sk_CONF_MODULE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_deep_copy$MH, "sk_CONF_MODULE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_MODULE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_set_cmp_func$MH,"sk_CONF_MODULE_set_cmp_func");
    }
    public static MemoryAddress sk_CONF_MODULE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$914.sk_CONF_MODULE_set_cmp_func$MH, "sk_CONF_MODULE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$915.sk_CONF_IMODULE_num$MH,"sk_CONF_IMODULE_num");
    }
    public static int sk_CONF_IMODULE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$915.sk_CONF_IMODULE_num$MH, "sk_CONF_IMODULE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$915.sk_CONF_IMODULE_value$MH,"sk_CONF_IMODULE_value");
    }
    public static MemoryAddress sk_CONF_IMODULE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$915.sk_CONF_IMODULE_value$MH, "sk_CONF_IMODULE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_new$MH,"sk_CONF_IMODULE_new");
    }
    public static MemoryAddress sk_CONF_IMODULE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_new$MH, "sk_CONF_IMODULE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_new_null$MH,"sk_CONF_IMODULE_new_null");
    }
    public static MemoryAddress sk_CONF_IMODULE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_new_null$MH, "sk_CONF_IMODULE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_new_reserve$MH,"sk_CONF_IMODULE_new_reserve");
    }
    public static MemoryAddress sk_CONF_IMODULE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_new_reserve$MH, "sk_CONF_IMODULE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_reserve$MH,"sk_CONF_IMODULE_reserve");
    }
    public static int sk_CONF_IMODULE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_reserve$MH, "sk_CONF_IMODULE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_free$MH,"sk_CONF_IMODULE_free");
    }
    public static void sk_CONF_IMODULE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_free$MH, "sk_CONF_IMODULE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_zero$MH,"sk_CONF_IMODULE_zero");
    }
    public static void sk_CONF_IMODULE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$916.sk_CONF_IMODULE_zero$MH, "sk_CONF_IMODULE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_delete$MH,"sk_CONF_IMODULE_delete");
    }
    public static MemoryAddress sk_CONF_IMODULE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_delete$MH, "sk_CONF_IMODULE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_delete_ptr$MH,"sk_CONF_IMODULE_delete_ptr");
    }
    public static MemoryAddress sk_CONF_IMODULE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_delete_ptr$MH, "sk_CONF_IMODULE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_push$MH,"sk_CONF_IMODULE_push");
    }
    public static int sk_CONF_IMODULE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_push$MH, "sk_CONF_IMODULE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_unshift$MH,"sk_CONF_IMODULE_unshift");
    }
    public static int sk_CONF_IMODULE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_unshift$MH, "sk_CONF_IMODULE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_pop$MH,"sk_CONF_IMODULE_pop");
    }
    public static MemoryAddress sk_CONF_IMODULE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_pop$MH, "sk_CONF_IMODULE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_shift$MH,"sk_CONF_IMODULE_shift");
    }
    public static MemoryAddress sk_CONF_IMODULE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$917.sk_CONF_IMODULE_shift$MH, "sk_CONF_IMODULE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_pop_free$MH,"sk_CONF_IMODULE_pop_free");
    }
    public static void sk_CONF_IMODULE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_pop_free$MH, "sk_CONF_IMODULE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_insert$MH,"sk_CONF_IMODULE_insert");
    }
    public static int sk_CONF_IMODULE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_insert$MH, "sk_CONF_IMODULE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_set$MH,"sk_CONF_IMODULE_set");
    }
    public static MemoryAddress sk_CONF_IMODULE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_set$MH, "sk_CONF_IMODULE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_find$MH,"sk_CONF_IMODULE_find");
    }
    public static int sk_CONF_IMODULE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_find$MH, "sk_CONF_IMODULE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_find_ex$MH,"sk_CONF_IMODULE_find_ex");
    }
    public static int sk_CONF_IMODULE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_find_ex$MH, "sk_CONF_IMODULE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_sort$MH,"sk_CONF_IMODULE_sort");
    }
    public static void sk_CONF_IMODULE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$918.sk_CONF_IMODULE_sort$MH, "sk_CONF_IMODULE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_is_sorted$MH,"sk_CONF_IMODULE_is_sorted");
    }
    public static int sk_CONF_IMODULE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_is_sorted$MH, "sk_CONF_IMODULE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_dup$MH,"sk_CONF_IMODULE_dup");
    }
    public static MemoryAddress sk_CONF_IMODULE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_dup$MH, "sk_CONF_IMODULE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_deep_copy$MH,"sk_CONF_IMODULE_deep_copy");
    }
    public static MemoryAddress sk_CONF_IMODULE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_deep_copy$MH, "sk_CONF_IMODULE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CONF_IMODULE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_set_cmp_func$MH,"sk_CONF_IMODULE_set_cmp_func");
    }
    public static MemoryAddress sk_CONF_IMODULE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$919.sk_CONF_IMODULE_set_cmp_func$MH, "sk_CONF_IMODULE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_set_default_method$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CONF_set_default_method$MH,"CONF_set_default_method");
    }
    public static int CONF_set_default_method ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CONF_set_default_method$MH, "CONF_set_default_method");
        try {
            return (int)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_set_nconf$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CONF_set_nconf$MH,"CONF_set_nconf");
    }
    public static void CONF_set_nconf ( Addressable conf,  Addressable hash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CONF_set_nconf$MH, "CONF_set_nconf");
        try {
            mh$.invokeExact(conf, hash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_load$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CONF_load$MH,"CONF_load");
    }
    public static MemoryAddress CONF_load ( Addressable conf,  Addressable file,  Addressable eline) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CONF_load$MH, "CONF_load");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, file, eline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_load_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$920.CONF_load_fp$MH,"CONF_load_fp");
    }
    public static MemoryAddress CONF_load_fp ( Addressable conf,  Addressable fp,  Addressable eline) {
        var mh$ = RuntimeHelper.requireNonNull(constants$920.CONF_load_fp$MH, "CONF_load_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, fp, eline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_load_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CONF_load_bio$MH,"CONF_load_bio");
    }
    public static MemoryAddress CONF_load_bio ( Addressable conf,  Addressable bp,  Addressable eline) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CONF_load_bio$MH, "CONF_load_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, bp, eline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_get_section$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CONF_get_section$MH,"CONF_get_section");
    }
    public static MemoryAddress CONF_get_section ( Addressable conf,  Addressable section) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CONF_get_section$MH, "CONF_get_section");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CONF_get_string$MH,"CONF_get_string");
    }
    public static MemoryAddress CONF_get_string ( Addressable conf,  Addressable group,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CONF_get_string$MH, "CONF_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, group, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_get_number$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CONF_get_number$MH,"CONF_get_number");
    }
    public static long CONF_get_number ( Addressable conf,  Addressable group,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CONF_get_number$MH, "CONF_get_number");
        try {
            return (long)mh$.invokeExact(conf, group, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_free$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CONF_free$MH,"CONF_free");
    }
    public static void CONF_free ( Addressable conf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CONF_free$MH, "CONF_free");
        try {
            mh$.invokeExact(conf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_dump_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$921.CONF_dump_fp$MH,"CONF_dump_fp");
    }
    public static int CONF_dump_fp ( Addressable conf,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$921.CONF_dump_fp$MH, "CONF_dump_fp");
        try {
            return (int)mh$.invokeExact(conf, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_dump_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$922.CONF_dump_bio$MH,"CONF_dump_bio");
    }
    public static int CONF_dump_bio ( Addressable conf,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.CONF_dump_bio$MH, "CONF_dump_bio");
        try {
            return (int)mh$.invokeExact(conf, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_config$MH() {
        return RuntimeHelper.requireNonNull(constants$922.OPENSSL_config$MH,"OPENSSL_config");
    }
    public static void OPENSSL_config ( Addressable config_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.OPENSSL_config$MH, "OPENSSL_config");
        try {
            mh$.invokeExact(config_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_new$MH() {
        return RuntimeHelper.requireNonNull(constants$922.NCONF_new$MH,"NCONF_new");
    }
    public static MemoryAddress NCONF_new ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.NCONF_new$MH, "NCONF_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_default$MH() {
        return RuntimeHelper.requireNonNull(constants$922.NCONF_default$MH,"NCONF_default");
    }
    public static MemoryAddress NCONF_default () {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.NCONF_default$MH, "NCONF_default");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_WIN32$MH() {
        return RuntimeHelper.requireNonNull(constants$922.NCONF_WIN32$MH,"NCONF_WIN32");
    }
    public static MemoryAddress NCONF_WIN32 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.NCONF_WIN32$MH, "NCONF_WIN32");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_free$MH() {
        return RuntimeHelper.requireNonNull(constants$922.NCONF_free$MH,"NCONF_free");
    }
    public static void NCONF_free ( Addressable conf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$922.NCONF_free$MH, "NCONF_free");
        try {
            mh$.invokeExact(conf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_free_data$MH() {
        return RuntimeHelper.requireNonNull(constants$923.NCONF_free_data$MH,"NCONF_free_data");
    }
    public static void NCONF_free_data ( Addressable conf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.NCONF_free_data$MH, "NCONF_free_data");
        try {
            mh$.invokeExact(conf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_load$MH() {
        return RuntimeHelper.requireNonNull(constants$923.NCONF_load$MH,"NCONF_load");
    }
    public static int NCONF_load ( Addressable conf,  Addressable file,  Addressable eline) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.NCONF_load$MH, "NCONF_load");
        try {
            return (int)mh$.invokeExact(conf, file, eline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_load_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$923.NCONF_load_fp$MH,"NCONF_load_fp");
    }
    public static int NCONF_load_fp ( Addressable conf,  Addressable fp,  Addressable eline) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.NCONF_load_fp$MH, "NCONF_load_fp");
        try {
            return (int)mh$.invokeExact(conf, fp, eline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_load_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$923.NCONF_load_bio$MH,"NCONF_load_bio");
    }
    public static int NCONF_load_bio ( Addressable conf,  Addressable bp,  Addressable eline) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.NCONF_load_bio$MH, "NCONF_load_bio");
        try {
            return (int)mh$.invokeExact(conf, bp, eline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_get_section$MH() {
        return RuntimeHelper.requireNonNull(constants$923.NCONF_get_section$MH,"NCONF_get_section");
    }
    public static MemoryAddress NCONF_get_section ( Addressable conf,  Addressable section) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.NCONF_get_section$MH, "NCONF_get_section");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, section);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$923.NCONF_get_string$MH,"NCONF_get_string");
    }
    public static MemoryAddress NCONF_get_string ( Addressable conf,  Addressable group,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$923.NCONF_get_string$MH, "NCONF_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(conf, group, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_get_number_e$MH() {
        return RuntimeHelper.requireNonNull(constants$924.NCONF_get_number_e$MH,"NCONF_get_number_e");
    }
    public static int NCONF_get_number_e ( Addressable conf,  Addressable group,  Addressable name,  Addressable result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.NCONF_get_number_e$MH, "NCONF_get_number_e");
        try {
            return (int)mh$.invokeExact(conf, group, name, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_dump_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$924.NCONF_dump_fp$MH,"NCONF_dump_fp");
    }
    public static int NCONF_dump_fp ( Addressable conf,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.NCONF_dump_fp$MH, "NCONF_dump_fp");
        try {
            return (int)mh$.invokeExact(conf, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCONF_dump_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$924.NCONF_dump_bio$MH,"NCONF_dump_bio");
    }
    public static int NCONF_dump_bio ( Addressable conf,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.NCONF_dump_bio$MH, "NCONF_dump_bio");
        try {
            return (int)mh$.invokeExact(conf, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_modules_load$MH() {
        return RuntimeHelper.requireNonNull(constants$924.CONF_modules_load$MH,"CONF_modules_load");
    }
    public static int CONF_modules_load ( Addressable cnf,  Addressable appname,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.CONF_modules_load$MH, "CONF_modules_load");
        try {
            return (int)mh$.invokeExact(cnf, appname, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_modules_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$924.CONF_modules_load_file$MH,"CONF_modules_load_file");
    }
    public static int CONF_modules_load_file ( Addressable filename,  Addressable appname,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.CONF_modules_load_file$MH, "CONF_modules_load_file");
        try {
            return (int)mh$.invokeExact(filename, appname, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_modules_unload$MH() {
        return RuntimeHelper.requireNonNull(constants$924.CONF_modules_unload$MH,"CONF_modules_unload");
    }
    public static void CONF_modules_unload ( int all) {
        var mh$ = RuntimeHelper.requireNonNull(constants$924.CONF_modules_unload$MH, "CONF_modules_unload");
        try {
            mh$.invokeExact(all);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_modules_finish$MH() {
        return RuntimeHelper.requireNonNull(constants$925.CONF_modules_finish$MH,"CONF_modules_finish");
    }
    public static void CONF_modules_finish () {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.CONF_modules_finish$MH, "CONF_modules_finish");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_module_add$MH() {
        return RuntimeHelper.requireNonNull(constants$925.CONF_module_add$MH,"CONF_module_add");
    }
    public static int CONF_module_add ( Addressable name,  Addressable ifunc,  Addressable ffunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.CONF_module_add$MH, "CONF_module_add");
        try {
            return (int)mh$.invokeExact(name, ifunc, ffunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$925.CONF_imodule_get_name$MH,"CONF_imodule_get_name");
    }
    public static MemoryAddress CONF_imodule_get_name ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.CONF_imodule_get_name$MH, "CONF_imodule_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_get_value$MH() {
        return RuntimeHelper.requireNonNull(constants$925.CONF_imodule_get_value$MH,"CONF_imodule_get_value");
    }
    public static MemoryAddress CONF_imodule_get_value ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.CONF_imodule_get_value$MH, "CONF_imodule_get_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_get_usr_data$MH() {
        return RuntimeHelper.requireNonNull(constants$925.CONF_imodule_get_usr_data$MH,"CONF_imodule_get_usr_data");
    }
    public static MemoryAddress CONF_imodule_get_usr_data ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.CONF_imodule_get_usr_data$MH, "CONF_imodule_get_usr_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_set_usr_data$MH() {
        return RuntimeHelper.requireNonNull(constants$925.CONF_imodule_set_usr_data$MH,"CONF_imodule_set_usr_data");
    }
    public static void CONF_imodule_set_usr_data ( Addressable md,  Addressable usr_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$925.CONF_imodule_set_usr_data$MH, "CONF_imodule_set_usr_data");
        try {
            mh$.invokeExact(md, usr_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_get_module$MH() {
        return RuntimeHelper.requireNonNull(constants$926.CONF_imodule_get_module$MH,"CONF_imodule_get_module");
    }
    public static MemoryAddress CONF_imodule_get_module ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.CONF_imodule_get_module$MH, "CONF_imodule_get_module");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$926.CONF_imodule_get_flags$MH,"CONF_imodule_get_flags");
    }
    public static long CONF_imodule_get_flags ( Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.CONF_imodule_get_flags$MH, "CONF_imodule_get_flags");
        try {
            return (long)mh$.invokeExact(md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_imodule_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$926.CONF_imodule_set_flags$MH,"CONF_imodule_set_flags");
    }
    public static void CONF_imodule_set_flags ( Addressable md,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.CONF_imodule_set_flags$MH, "CONF_imodule_set_flags");
        try {
            mh$.invokeExact(md, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_module_get_usr_data$MH() {
        return RuntimeHelper.requireNonNull(constants$926.CONF_module_get_usr_data$MH,"CONF_module_get_usr_data");
    }
    public static MemoryAddress CONF_module_get_usr_data ( Addressable pmod) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.CONF_module_get_usr_data$MH, "CONF_module_get_usr_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pmod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_module_set_usr_data$MH() {
        return RuntimeHelper.requireNonNull(constants$926.CONF_module_set_usr_data$MH,"CONF_module_set_usr_data");
    }
    public static void CONF_module_set_usr_data ( Addressable pmod,  Addressable usr_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.CONF_module_set_usr_data$MH, "CONF_module_set_usr_data");
        try {
            mh$.invokeExact(pmod, usr_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_get1_default_config_file$MH() {
        return RuntimeHelper.requireNonNull(constants$926.CONF_get1_default_config_file$MH,"CONF_get1_default_config_file");
    }
    public static MemoryAddress CONF_get1_default_config_file () {
        var mh$ = RuntimeHelper.requireNonNull(constants$926.CONF_get1_default_config_file$MH, "CONF_get1_default_config_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CONF_parse_list$MH() {
        return RuntimeHelper.requireNonNull(constants$927.CONF_parse_list$MH,"CONF_parse_list");
    }
    public static int CONF_parse_list ( Addressable list,  int sep,  int nospc,  Addressable list_cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.CONF_parse_list$MH, "CONF_parse_list");
        try {
            return (int)mh$.invokeExact(list, sep, nospc, list_cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_load_builtin_modules$MH() {
        return RuntimeHelper.requireNonNull(constants$927.OPENSSL_load_builtin_modules$MH,"OPENSSL_load_builtin_modules");
    }
    public static void OPENSSL_load_builtin_modules () {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.OPENSSL_load_builtin_modules$MH, "OPENSSL_load_builtin_modules");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_X509V3_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$927.ERR_load_X509V3_strings$MH,"ERR_load_X509V3_strings");
    }
    public static int ERR_load_X509V3_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$927.ERR_load_X509V3_strings$MH, "ERR_load_X509V3_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_num$MH() {
        return RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_num$MH,"sk_X509V3_EXT_METHOD_num");
    }
    public static int sk_X509V3_EXT_METHOD_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_num$MH, "sk_X509V3_EXT_METHOD_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_value$MH() {
        return RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_value$MH,"sk_X509V3_EXT_METHOD_value");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_value$MH, "sk_X509V3_EXT_METHOD_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_new$MH() {
        return RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_new$MH,"sk_X509V3_EXT_METHOD_new");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_new$MH, "sk_X509V3_EXT_METHOD_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_new_null$MH,"sk_X509V3_EXT_METHOD_new_null");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_new_null$MH, "sk_X509V3_EXT_METHOD_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_new_reserve$MH,"sk_X509V3_EXT_METHOD_new_reserve");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$932.sk_X509V3_EXT_METHOD_new_reserve$MH, "sk_X509V3_EXT_METHOD_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_reserve$MH,"sk_X509V3_EXT_METHOD_reserve");
    }
    public static int sk_X509V3_EXT_METHOD_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_reserve$MH, "sk_X509V3_EXT_METHOD_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_free$MH() {
        return RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_free$MH,"sk_X509V3_EXT_METHOD_free");
    }
    public static void sk_X509V3_EXT_METHOD_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_free$MH, "sk_X509V3_EXT_METHOD_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_zero$MH,"sk_X509V3_EXT_METHOD_zero");
    }
    public static void sk_X509V3_EXT_METHOD_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_zero$MH, "sk_X509V3_EXT_METHOD_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_delete$MH,"sk_X509V3_EXT_METHOD_delete");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_delete$MH, "sk_X509V3_EXT_METHOD_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_delete_ptr$MH,"sk_X509V3_EXT_METHOD_delete_ptr");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_delete_ptr$MH, "sk_X509V3_EXT_METHOD_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_push$MH() {
        return RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_push$MH,"sk_X509V3_EXT_METHOD_push");
    }
    public static int sk_X509V3_EXT_METHOD_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$933.sk_X509V3_EXT_METHOD_push$MH, "sk_X509V3_EXT_METHOD_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_unshift$MH,"sk_X509V3_EXT_METHOD_unshift");
    }
    public static int sk_X509V3_EXT_METHOD_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_unshift$MH, "sk_X509V3_EXT_METHOD_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_pop$MH,"sk_X509V3_EXT_METHOD_pop");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_pop$MH, "sk_X509V3_EXT_METHOD_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_shift$MH,"sk_X509V3_EXT_METHOD_shift");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_shift$MH, "sk_X509V3_EXT_METHOD_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_pop_free$MH,"sk_X509V3_EXT_METHOD_pop_free");
    }
    public static void sk_X509V3_EXT_METHOD_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_pop_free$MH, "sk_X509V3_EXT_METHOD_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_insert$MH,"sk_X509V3_EXT_METHOD_insert");
    }
    public static int sk_X509V3_EXT_METHOD_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_insert$MH, "sk_X509V3_EXT_METHOD_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_set$MH() {
        return RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_set$MH,"sk_X509V3_EXT_METHOD_set");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$934.sk_X509V3_EXT_METHOD_set$MH, "sk_X509V3_EXT_METHOD_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_find$MH() {
        return RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_find$MH,"sk_X509V3_EXT_METHOD_find");
    }
    public static int sk_X509V3_EXT_METHOD_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_find$MH, "sk_X509V3_EXT_METHOD_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_find_ex$MH,"sk_X509V3_EXT_METHOD_find_ex");
    }
    public static int sk_X509V3_EXT_METHOD_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_find_ex$MH, "sk_X509V3_EXT_METHOD_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_sort$MH,"sk_X509V3_EXT_METHOD_sort");
    }
    public static void sk_X509V3_EXT_METHOD_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_sort$MH, "sk_X509V3_EXT_METHOD_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_is_sorted$MH,"sk_X509V3_EXT_METHOD_is_sorted");
    }
    public static int sk_X509V3_EXT_METHOD_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_is_sorted$MH, "sk_X509V3_EXT_METHOD_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_dup$MH,"sk_X509V3_EXT_METHOD_dup");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_dup$MH, "sk_X509V3_EXT_METHOD_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_deep_copy$MH,"sk_X509V3_EXT_METHOD_deep_copy");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$935.sk_X509V3_EXT_METHOD_deep_copy$MH, "sk_X509V3_EXT_METHOD_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509V3_EXT_METHOD_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$936.sk_X509V3_EXT_METHOD_set_cmp_func$MH,"sk_X509V3_EXT_METHOD_set_cmp_func");
    }
    public static MemoryAddress sk_X509V3_EXT_METHOD_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$936.sk_X509V3_EXT_METHOD_set_cmp_func$MH, "sk_X509V3_EXT_METHOD_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_num$MH() {
        return RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_num$MH,"sk_GENERAL_NAME_num");
    }
    public static int sk_GENERAL_NAME_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_num$MH, "sk_GENERAL_NAME_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_value$MH() {
        return RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_value$MH,"sk_GENERAL_NAME_value");
    }
    public static MemoryAddress sk_GENERAL_NAME_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_value$MH, "sk_GENERAL_NAME_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_new$MH,"sk_GENERAL_NAME_new");
    }
    public static MemoryAddress sk_GENERAL_NAME_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_new$MH, "sk_GENERAL_NAME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_new_null$MH,"sk_GENERAL_NAME_new_null");
    }
    public static MemoryAddress sk_GENERAL_NAME_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_new_null$MH, "sk_GENERAL_NAME_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_new_reserve$MH,"sk_GENERAL_NAME_new_reserve");
    }
    public static MemoryAddress sk_GENERAL_NAME_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$937.sk_GENERAL_NAME_new_reserve$MH, "sk_GENERAL_NAME_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_reserve$MH,"sk_GENERAL_NAME_reserve");
    }
    public static int sk_GENERAL_NAME_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_reserve$MH, "sk_GENERAL_NAME_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_free$MH,"sk_GENERAL_NAME_free");
    }
    public static void sk_GENERAL_NAME_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_free$MH, "sk_GENERAL_NAME_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_zero$MH,"sk_GENERAL_NAME_zero");
    }
    public static void sk_GENERAL_NAME_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_zero$MH, "sk_GENERAL_NAME_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_delete$MH,"sk_GENERAL_NAME_delete");
    }
    public static MemoryAddress sk_GENERAL_NAME_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_delete$MH, "sk_GENERAL_NAME_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_delete_ptr$MH,"sk_GENERAL_NAME_delete_ptr");
    }
    public static MemoryAddress sk_GENERAL_NAME_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_delete_ptr$MH, "sk_GENERAL_NAME_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_push$MH() {
        return RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_push$MH,"sk_GENERAL_NAME_push");
    }
    public static int sk_GENERAL_NAME_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$938.sk_GENERAL_NAME_push$MH, "sk_GENERAL_NAME_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_unshift$MH,"sk_GENERAL_NAME_unshift");
    }
    public static int sk_GENERAL_NAME_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_unshift$MH, "sk_GENERAL_NAME_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_pop$MH,"sk_GENERAL_NAME_pop");
    }
    public static MemoryAddress sk_GENERAL_NAME_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_pop$MH, "sk_GENERAL_NAME_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_shift$MH,"sk_GENERAL_NAME_shift");
    }
    public static MemoryAddress sk_GENERAL_NAME_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_shift$MH, "sk_GENERAL_NAME_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_pop_free$MH,"sk_GENERAL_NAME_pop_free");
    }
    public static void sk_GENERAL_NAME_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_pop_free$MH, "sk_GENERAL_NAME_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_insert$MH,"sk_GENERAL_NAME_insert");
    }
    public static int sk_GENERAL_NAME_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_insert$MH, "sk_GENERAL_NAME_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_set$MH() {
        return RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_set$MH,"sk_GENERAL_NAME_set");
    }
    public static MemoryAddress sk_GENERAL_NAME_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$939.sk_GENERAL_NAME_set$MH, "sk_GENERAL_NAME_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_find$MH() {
        return RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_find$MH,"sk_GENERAL_NAME_find");
    }
    public static int sk_GENERAL_NAME_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_find$MH, "sk_GENERAL_NAME_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_find_ex$MH,"sk_GENERAL_NAME_find_ex");
    }
    public static int sk_GENERAL_NAME_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_find_ex$MH, "sk_GENERAL_NAME_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_sort$MH,"sk_GENERAL_NAME_sort");
    }
    public static void sk_GENERAL_NAME_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_sort$MH, "sk_GENERAL_NAME_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_is_sorted$MH,"sk_GENERAL_NAME_is_sorted");
    }
    public static int sk_GENERAL_NAME_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_is_sorted$MH, "sk_GENERAL_NAME_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_dup$MH,"sk_GENERAL_NAME_dup");
    }
    public static MemoryAddress sk_GENERAL_NAME_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_dup$MH, "sk_GENERAL_NAME_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_deep_copy$MH,"sk_GENERAL_NAME_deep_copy");
    }
    public static MemoryAddress sk_GENERAL_NAME_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$940.sk_GENERAL_NAME_deep_copy$MH, "sk_GENERAL_NAME_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAME_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$941.sk_GENERAL_NAME_set_cmp_func$MH,"sk_GENERAL_NAME_set_cmp_func");
    }
    public static MemoryAddress sk_GENERAL_NAME_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$941.sk_GENERAL_NAME_set_cmp_func$MH, "sk_GENERAL_NAME_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_num$MH() {
        return RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_num$MH,"sk_GENERAL_NAMES_num");
    }
    public static int sk_GENERAL_NAMES_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_num$MH, "sk_GENERAL_NAMES_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_value$MH() {
        return RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_value$MH,"sk_GENERAL_NAMES_value");
    }
    public static MemoryAddress sk_GENERAL_NAMES_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_value$MH, "sk_GENERAL_NAMES_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_new$MH() {
        return RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_new$MH,"sk_GENERAL_NAMES_new");
    }
    public static MemoryAddress sk_GENERAL_NAMES_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_new$MH, "sk_GENERAL_NAMES_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_new_null$MH,"sk_GENERAL_NAMES_new_null");
    }
    public static MemoryAddress sk_GENERAL_NAMES_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_new_null$MH, "sk_GENERAL_NAMES_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_new_reserve$MH,"sk_GENERAL_NAMES_new_reserve");
    }
    public static MemoryAddress sk_GENERAL_NAMES_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$942.sk_GENERAL_NAMES_new_reserve$MH, "sk_GENERAL_NAMES_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_reserve$MH,"sk_GENERAL_NAMES_reserve");
    }
    public static int sk_GENERAL_NAMES_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_reserve$MH, "sk_GENERAL_NAMES_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_free$MH() {
        return RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_free$MH,"sk_GENERAL_NAMES_free");
    }
    public static void sk_GENERAL_NAMES_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_free$MH, "sk_GENERAL_NAMES_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_zero$MH,"sk_GENERAL_NAMES_zero");
    }
    public static void sk_GENERAL_NAMES_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_zero$MH, "sk_GENERAL_NAMES_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_delete$MH,"sk_GENERAL_NAMES_delete");
    }
    public static MemoryAddress sk_GENERAL_NAMES_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_delete$MH, "sk_GENERAL_NAMES_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_delete_ptr$MH,"sk_GENERAL_NAMES_delete_ptr");
    }
    public static MemoryAddress sk_GENERAL_NAMES_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_delete_ptr$MH, "sk_GENERAL_NAMES_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_push$MH() {
        return RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_push$MH,"sk_GENERAL_NAMES_push");
    }
    public static int sk_GENERAL_NAMES_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$943.sk_GENERAL_NAMES_push$MH, "sk_GENERAL_NAMES_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_unshift$MH,"sk_GENERAL_NAMES_unshift");
    }
    public static int sk_GENERAL_NAMES_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_unshift$MH, "sk_GENERAL_NAMES_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_pop$MH,"sk_GENERAL_NAMES_pop");
    }
    public static MemoryAddress sk_GENERAL_NAMES_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_pop$MH, "sk_GENERAL_NAMES_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_shift$MH,"sk_GENERAL_NAMES_shift");
    }
    public static MemoryAddress sk_GENERAL_NAMES_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_shift$MH, "sk_GENERAL_NAMES_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_pop_free$MH,"sk_GENERAL_NAMES_pop_free");
    }
    public static void sk_GENERAL_NAMES_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_pop_free$MH, "sk_GENERAL_NAMES_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_insert$MH,"sk_GENERAL_NAMES_insert");
    }
    public static int sk_GENERAL_NAMES_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_insert$MH, "sk_GENERAL_NAMES_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_set$MH() {
        return RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_set$MH,"sk_GENERAL_NAMES_set");
    }
    public static MemoryAddress sk_GENERAL_NAMES_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$944.sk_GENERAL_NAMES_set$MH, "sk_GENERAL_NAMES_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_find$MH() {
        return RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_find$MH,"sk_GENERAL_NAMES_find");
    }
    public static int sk_GENERAL_NAMES_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_find$MH, "sk_GENERAL_NAMES_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_find_ex$MH,"sk_GENERAL_NAMES_find_ex");
    }
    public static int sk_GENERAL_NAMES_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_find_ex$MH, "sk_GENERAL_NAMES_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_sort$MH,"sk_GENERAL_NAMES_sort");
    }
    public static void sk_GENERAL_NAMES_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_sort$MH, "sk_GENERAL_NAMES_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_is_sorted$MH,"sk_GENERAL_NAMES_is_sorted");
    }
    public static int sk_GENERAL_NAMES_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_is_sorted$MH, "sk_GENERAL_NAMES_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_dup$MH,"sk_GENERAL_NAMES_dup");
    }
    public static MemoryAddress sk_GENERAL_NAMES_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_dup$MH, "sk_GENERAL_NAMES_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_deep_copy$MH,"sk_GENERAL_NAMES_deep_copy");
    }
    public static MemoryAddress sk_GENERAL_NAMES_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$945.sk_GENERAL_NAMES_deep_copy$MH, "sk_GENERAL_NAMES_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_NAMES_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$946.sk_GENERAL_NAMES_set_cmp_func$MH,"sk_GENERAL_NAMES_set_cmp_func");
    }
    public static MemoryAddress sk_GENERAL_NAMES_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$946.sk_GENERAL_NAMES_set_cmp_func$MH, "sk_GENERAL_NAMES_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_num$MH() {
        return RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_num$MH,"sk_ACCESS_DESCRIPTION_num");
    }
    public static int sk_ACCESS_DESCRIPTION_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_num$MH, "sk_ACCESS_DESCRIPTION_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_value$MH() {
        return RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_value$MH,"sk_ACCESS_DESCRIPTION_value");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_value$MH, "sk_ACCESS_DESCRIPTION_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_new$MH() {
        return RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_new$MH,"sk_ACCESS_DESCRIPTION_new");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_new$MH, "sk_ACCESS_DESCRIPTION_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_new_null$MH,"sk_ACCESS_DESCRIPTION_new_null");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_new_null$MH, "sk_ACCESS_DESCRIPTION_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_new_reserve$MH,"sk_ACCESS_DESCRIPTION_new_reserve");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$947.sk_ACCESS_DESCRIPTION_new_reserve$MH, "sk_ACCESS_DESCRIPTION_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_reserve$MH,"sk_ACCESS_DESCRIPTION_reserve");
    }
    public static int sk_ACCESS_DESCRIPTION_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_reserve$MH, "sk_ACCESS_DESCRIPTION_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_free$MH() {
        return RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_free$MH,"sk_ACCESS_DESCRIPTION_free");
    }
    public static void sk_ACCESS_DESCRIPTION_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_free$MH, "sk_ACCESS_DESCRIPTION_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_zero$MH,"sk_ACCESS_DESCRIPTION_zero");
    }
    public static void sk_ACCESS_DESCRIPTION_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_zero$MH, "sk_ACCESS_DESCRIPTION_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_delete$MH,"sk_ACCESS_DESCRIPTION_delete");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_delete$MH, "sk_ACCESS_DESCRIPTION_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_delete_ptr$MH,"sk_ACCESS_DESCRIPTION_delete_ptr");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_delete_ptr$MH, "sk_ACCESS_DESCRIPTION_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_push$MH() {
        return RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_push$MH,"sk_ACCESS_DESCRIPTION_push");
    }
    public static int sk_ACCESS_DESCRIPTION_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$948.sk_ACCESS_DESCRIPTION_push$MH, "sk_ACCESS_DESCRIPTION_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_unshift$MH,"sk_ACCESS_DESCRIPTION_unshift");
    }
    public static int sk_ACCESS_DESCRIPTION_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_unshift$MH, "sk_ACCESS_DESCRIPTION_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_pop$MH,"sk_ACCESS_DESCRIPTION_pop");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_pop$MH, "sk_ACCESS_DESCRIPTION_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_shift$MH,"sk_ACCESS_DESCRIPTION_shift");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_shift$MH, "sk_ACCESS_DESCRIPTION_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_pop_free$MH,"sk_ACCESS_DESCRIPTION_pop_free");
    }
    public static void sk_ACCESS_DESCRIPTION_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_pop_free$MH, "sk_ACCESS_DESCRIPTION_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_insert$MH,"sk_ACCESS_DESCRIPTION_insert");
    }
    public static int sk_ACCESS_DESCRIPTION_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_insert$MH, "sk_ACCESS_DESCRIPTION_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_set$MH() {
        return RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_set$MH,"sk_ACCESS_DESCRIPTION_set");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$949.sk_ACCESS_DESCRIPTION_set$MH, "sk_ACCESS_DESCRIPTION_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_find$MH() {
        return RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_find$MH,"sk_ACCESS_DESCRIPTION_find");
    }
    public static int sk_ACCESS_DESCRIPTION_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_find$MH, "sk_ACCESS_DESCRIPTION_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_find_ex$MH,"sk_ACCESS_DESCRIPTION_find_ex");
    }
    public static int sk_ACCESS_DESCRIPTION_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_find_ex$MH, "sk_ACCESS_DESCRIPTION_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_sort$MH,"sk_ACCESS_DESCRIPTION_sort");
    }
    public static void sk_ACCESS_DESCRIPTION_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_sort$MH, "sk_ACCESS_DESCRIPTION_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_is_sorted$MH,"sk_ACCESS_DESCRIPTION_is_sorted");
    }
    public static int sk_ACCESS_DESCRIPTION_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_is_sorted$MH, "sk_ACCESS_DESCRIPTION_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_dup$MH,"sk_ACCESS_DESCRIPTION_dup");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_dup$MH, "sk_ACCESS_DESCRIPTION_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_deep_copy$MH,"sk_ACCESS_DESCRIPTION_deep_copy");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$950.sk_ACCESS_DESCRIPTION_deep_copy$MH, "sk_ACCESS_DESCRIPTION_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ACCESS_DESCRIPTION_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$951.sk_ACCESS_DESCRIPTION_set_cmp_func$MH,"sk_ACCESS_DESCRIPTION_set_cmp_func");
    }
    public static MemoryAddress sk_ACCESS_DESCRIPTION_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$951.sk_ACCESS_DESCRIPTION_set_cmp_func$MH, "sk_ACCESS_DESCRIPTION_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_num$MH() {
        return RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_num$MH,"sk_DIST_POINT_num");
    }
    public static int sk_DIST_POINT_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_num$MH, "sk_DIST_POINT_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_value$MH() {
        return RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_value$MH,"sk_DIST_POINT_value");
    }
    public static MemoryAddress sk_DIST_POINT_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_value$MH, "sk_DIST_POINT_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_new$MH,"sk_DIST_POINT_new");
    }
    public static MemoryAddress sk_DIST_POINT_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_new$MH, "sk_DIST_POINT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_new_null$MH,"sk_DIST_POINT_new_null");
    }
    public static MemoryAddress sk_DIST_POINT_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_new_null$MH, "sk_DIST_POINT_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_new_reserve$MH,"sk_DIST_POINT_new_reserve");
    }
    public static MemoryAddress sk_DIST_POINT_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$952.sk_DIST_POINT_new_reserve$MH, "sk_DIST_POINT_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_reserve$MH,"sk_DIST_POINT_reserve");
    }
    public static int sk_DIST_POINT_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_reserve$MH, "sk_DIST_POINT_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_free$MH,"sk_DIST_POINT_free");
    }
    public static void sk_DIST_POINT_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_free$MH, "sk_DIST_POINT_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_zero$MH,"sk_DIST_POINT_zero");
    }
    public static void sk_DIST_POINT_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_zero$MH, "sk_DIST_POINT_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_delete$MH,"sk_DIST_POINT_delete");
    }
    public static MemoryAddress sk_DIST_POINT_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_delete$MH, "sk_DIST_POINT_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_delete_ptr$MH,"sk_DIST_POINT_delete_ptr");
    }
    public static MemoryAddress sk_DIST_POINT_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_delete_ptr$MH, "sk_DIST_POINT_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_push$MH() {
        return RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_push$MH,"sk_DIST_POINT_push");
    }
    public static int sk_DIST_POINT_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$953.sk_DIST_POINT_push$MH, "sk_DIST_POINT_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_unshift$MH,"sk_DIST_POINT_unshift");
    }
    public static int sk_DIST_POINT_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_unshift$MH, "sk_DIST_POINT_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_pop$MH,"sk_DIST_POINT_pop");
    }
    public static MemoryAddress sk_DIST_POINT_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_pop$MH, "sk_DIST_POINT_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_shift$MH,"sk_DIST_POINT_shift");
    }
    public static MemoryAddress sk_DIST_POINT_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_shift$MH, "sk_DIST_POINT_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_pop_free$MH,"sk_DIST_POINT_pop_free");
    }
    public static void sk_DIST_POINT_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_pop_free$MH, "sk_DIST_POINT_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_insert$MH,"sk_DIST_POINT_insert");
    }
    public static int sk_DIST_POINT_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_insert$MH, "sk_DIST_POINT_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_set$MH() {
        return RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_set$MH,"sk_DIST_POINT_set");
    }
    public static MemoryAddress sk_DIST_POINT_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$954.sk_DIST_POINT_set$MH, "sk_DIST_POINT_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_find$MH() {
        return RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_find$MH,"sk_DIST_POINT_find");
    }
    public static int sk_DIST_POINT_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_find$MH, "sk_DIST_POINT_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_find_ex$MH,"sk_DIST_POINT_find_ex");
    }
    public static int sk_DIST_POINT_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_find_ex$MH, "sk_DIST_POINT_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_sort$MH,"sk_DIST_POINT_sort");
    }
    public static void sk_DIST_POINT_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_sort$MH, "sk_DIST_POINT_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_is_sorted$MH,"sk_DIST_POINT_is_sorted");
    }
    public static int sk_DIST_POINT_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_is_sorted$MH, "sk_DIST_POINT_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_dup$MH,"sk_DIST_POINT_dup");
    }
    public static MemoryAddress sk_DIST_POINT_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_dup$MH, "sk_DIST_POINT_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_deep_copy$MH,"sk_DIST_POINT_deep_copy");
    }
    public static MemoryAddress sk_DIST_POINT_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$955.sk_DIST_POINT_deep_copy$MH, "sk_DIST_POINT_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_DIST_POINT_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$956.sk_DIST_POINT_set_cmp_func$MH,"sk_DIST_POINT_set_cmp_func");
    }
    public static MemoryAddress sk_DIST_POINT_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$956.sk_DIST_POINT_set_cmp_func$MH, "sk_DIST_POINT_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_num$MH() {
        return RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_num$MH,"sk_SXNETID_num");
    }
    public static int sk_SXNETID_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_num$MH, "sk_SXNETID_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_value$MH() {
        return RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_value$MH,"sk_SXNETID_value");
    }
    public static MemoryAddress sk_SXNETID_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_value$MH, "sk_SXNETID_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_new$MH() {
        return RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_new$MH,"sk_SXNETID_new");
    }
    public static MemoryAddress sk_SXNETID_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_new$MH, "sk_SXNETID_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_new_null$MH,"sk_SXNETID_new_null");
    }
    public static MemoryAddress sk_SXNETID_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_new_null$MH, "sk_SXNETID_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_new_reserve$MH,"sk_SXNETID_new_reserve");
    }
    public static MemoryAddress sk_SXNETID_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$957.sk_SXNETID_new_reserve$MH, "sk_SXNETID_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_reserve$MH,"sk_SXNETID_reserve");
    }
    public static int sk_SXNETID_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_reserve$MH, "sk_SXNETID_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_free$MH() {
        return RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_free$MH,"sk_SXNETID_free");
    }
    public static void sk_SXNETID_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_free$MH, "sk_SXNETID_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_zero$MH,"sk_SXNETID_zero");
    }
    public static void sk_SXNETID_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_zero$MH, "sk_SXNETID_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_delete$MH,"sk_SXNETID_delete");
    }
    public static MemoryAddress sk_SXNETID_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_delete$MH, "sk_SXNETID_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_delete_ptr$MH,"sk_SXNETID_delete_ptr");
    }
    public static MemoryAddress sk_SXNETID_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_delete_ptr$MH, "sk_SXNETID_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_push$MH() {
        return RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_push$MH,"sk_SXNETID_push");
    }
    public static int sk_SXNETID_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$958.sk_SXNETID_push$MH, "sk_SXNETID_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_unshift$MH,"sk_SXNETID_unshift");
    }
    public static int sk_SXNETID_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_unshift$MH, "sk_SXNETID_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_pop$MH,"sk_SXNETID_pop");
    }
    public static MemoryAddress sk_SXNETID_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_pop$MH, "sk_SXNETID_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_shift$MH,"sk_SXNETID_shift");
    }
    public static MemoryAddress sk_SXNETID_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_shift$MH, "sk_SXNETID_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_pop_free$MH,"sk_SXNETID_pop_free");
    }
    public static void sk_SXNETID_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_pop_free$MH, "sk_SXNETID_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_insert$MH,"sk_SXNETID_insert");
    }
    public static int sk_SXNETID_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_insert$MH, "sk_SXNETID_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_set$MH() {
        return RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_set$MH,"sk_SXNETID_set");
    }
    public static MemoryAddress sk_SXNETID_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$959.sk_SXNETID_set$MH, "sk_SXNETID_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_find$MH() {
        return RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_find$MH,"sk_SXNETID_find");
    }
    public static int sk_SXNETID_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_find$MH, "sk_SXNETID_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_find_ex$MH,"sk_SXNETID_find_ex");
    }
    public static int sk_SXNETID_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_find_ex$MH, "sk_SXNETID_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_sort$MH,"sk_SXNETID_sort");
    }
    public static void sk_SXNETID_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_sort$MH, "sk_SXNETID_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_is_sorted$MH,"sk_SXNETID_is_sorted");
    }
    public static int sk_SXNETID_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_is_sorted$MH, "sk_SXNETID_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_dup$MH,"sk_SXNETID_dup");
    }
    public static MemoryAddress sk_SXNETID_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_dup$MH, "sk_SXNETID_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_deep_copy$MH,"sk_SXNETID_deep_copy");
    }
    public static MemoryAddress sk_SXNETID_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$960.sk_SXNETID_deep_copy$MH, "sk_SXNETID_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SXNETID_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$961.sk_SXNETID_set_cmp_func$MH,"sk_SXNETID_set_cmp_func");
    }
    public static MemoryAddress sk_SXNETID_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$961.sk_SXNETID_set_cmp_func$MH, "sk_SXNETID_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_num$MH() {
        return RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_num$MH,"sk_POLICYQUALINFO_num");
    }
    public static int sk_POLICYQUALINFO_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_num$MH, "sk_POLICYQUALINFO_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_value$MH() {
        return RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_value$MH,"sk_POLICYQUALINFO_value");
    }
    public static MemoryAddress sk_POLICYQUALINFO_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_value$MH, "sk_POLICYQUALINFO_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_new$MH,"sk_POLICYQUALINFO_new");
    }
    public static MemoryAddress sk_POLICYQUALINFO_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_new$MH, "sk_POLICYQUALINFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_new_null$MH,"sk_POLICYQUALINFO_new_null");
    }
    public static MemoryAddress sk_POLICYQUALINFO_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_new_null$MH, "sk_POLICYQUALINFO_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_new_reserve$MH,"sk_POLICYQUALINFO_new_reserve");
    }
    public static MemoryAddress sk_POLICYQUALINFO_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$962.sk_POLICYQUALINFO_new_reserve$MH, "sk_POLICYQUALINFO_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_reserve$MH,"sk_POLICYQUALINFO_reserve");
    }
    public static int sk_POLICYQUALINFO_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_reserve$MH, "sk_POLICYQUALINFO_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_free$MH,"sk_POLICYQUALINFO_free");
    }
    public static void sk_POLICYQUALINFO_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_free$MH, "sk_POLICYQUALINFO_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_zero$MH,"sk_POLICYQUALINFO_zero");
    }
    public static void sk_POLICYQUALINFO_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_zero$MH, "sk_POLICYQUALINFO_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_delete$MH,"sk_POLICYQUALINFO_delete");
    }
    public static MemoryAddress sk_POLICYQUALINFO_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_delete$MH, "sk_POLICYQUALINFO_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_delete_ptr$MH,"sk_POLICYQUALINFO_delete_ptr");
    }
    public static MemoryAddress sk_POLICYQUALINFO_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_delete_ptr$MH, "sk_POLICYQUALINFO_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_push$MH() {
        return RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_push$MH,"sk_POLICYQUALINFO_push");
    }
    public static int sk_POLICYQUALINFO_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$963.sk_POLICYQUALINFO_push$MH, "sk_POLICYQUALINFO_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_unshift$MH,"sk_POLICYQUALINFO_unshift");
    }
    public static int sk_POLICYQUALINFO_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_unshift$MH, "sk_POLICYQUALINFO_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_pop$MH,"sk_POLICYQUALINFO_pop");
    }
    public static MemoryAddress sk_POLICYQUALINFO_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_pop$MH, "sk_POLICYQUALINFO_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_shift$MH,"sk_POLICYQUALINFO_shift");
    }
    public static MemoryAddress sk_POLICYQUALINFO_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_shift$MH, "sk_POLICYQUALINFO_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_pop_free$MH,"sk_POLICYQUALINFO_pop_free");
    }
    public static void sk_POLICYQUALINFO_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_pop_free$MH, "sk_POLICYQUALINFO_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_insert$MH,"sk_POLICYQUALINFO_insert");
    }
    public static int sk_POLICYQUALINFO_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_insert$MH, "sk_POLICYQUALINFO_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_set$MH() {
        return RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_set$MH,"sk_POLICYQUALINFO_set");
    }
    public static MemoryAddress sk_POLICYQUALINFO_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$964.sk_POLICYQUALINFO_set$MH, "sk_POLICYQUALINFO_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_find$MH() {
        return RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_find$MH,"sk_POLICYQUALINFO_find");
    }
    public static int sk_POLICYQUALINFO_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_find$MH, "sk_POLICYQUALINFO_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_find_ex$MH,"sk_POLICYQUALINFO_find_ex");
    }
    public static int sk_POLICYQUALINFO_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_find_ex$MH, "sk_POLICYQUALINFO_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_sort$MH,"sk_POLICYQUALINFO_sort");
    }
    public static void sk_POLICYQUALINFO_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_sort$MH, "sk_POLICYQUALINFO_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_is_sorted$MH,"sk_POLICYQUALINFO_is_sorted");
    }
    public static int sk_POLICYQUALINFO_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_is_sorted$MH, "sk_POLICYQUALINFO_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_dup$MH,"sk_POLICYQUALINFO_dup");
    }
    public static MemoryAddress sk_POLICYQUALINFO_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_dup$MH, "sk_POLICYQUALINFO_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_deep_copy$MH,"sk_POLICYQUALINFO_deep_copy");
    }
    public static MemoryAddress sk_POLICYQUALINFO_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$965.sk_POLICYQUALINFO_deep_copy$MH, "sk_POLICYQUALINFO_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYQUALINFO_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$966.sk_POLICYQUALINFO_set_cmp_func$MH,"sk_POLICYQUALINFO_set_cmp_func");
    }
    public static MemoryAddress sk_POLICYQUALINFO_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$966.sk_POLICYQUALINFO_set_cmp_func$MH, "sk_POLICYQUALINFO_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_num$MH() {
        return RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_num$MH,"sk_POLICYINFO_num");
    }
    public static int sk_POLICYINFO_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_num$MH, "sk_POLICYINFO_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_value$MH() {
        return RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_value$MH,"sk_POLICYINFO_value");
    }
    public static MemoryAddress sk_POLICYINFO_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_value$MH, "sk_POLICYINFO_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_new$MH,"sk_POLICYINFO_new");
    }
    public static MemoryAddress sk_POLICYINFO_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_new$MH, "sk_POLICYINFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_new_null$MH,"sk_POLICYINFO_new_null");
    }
    public static MemoryAddress sk_POLICYINFO_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_new_null$MH, "sk_POLICYINFO_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_new_reserve$MH,"sk_POLICYINFO_new_reserve");
    }
    public static MemoryAddress sk_POLICYINFO_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$967.sk_POLICYINFO_new_reserve$MH, "sk_POLICYINFO_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_reserve$MH,"sk_POLICYINFO_reserve");
    }
    public static int sk_POLICYINFO_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_reserve$MH, "sk_POLICYINFO_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_free$MH,"sk_POLICYINFO_free");
    }
    public static void sk_POLICYINFO_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_free$MH, "sk_POLICYINFO_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_zero$MH,"sk_POLICYINFO_zero");
    }
    public static void sk_POLICYINFO_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_zero$MH, "sk_POLICYINFO_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_delete$MH,"sk_POLICYINFO_delete");
    }
    public static MemoryAddress sk_POLICYINFO_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_delete$MH, "sk_POLICYINFO_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_delete_ptr$MH,"sk_POLICYINFO_delete_ptr");
    }
    public static MemoryAddress sk_POLICYINFO_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_delete_ptr$MH, "sk_POLICYINFO_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_push$MH() {
        return RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_push$MH,"sk_POLICYINFO_push");
    }
    public static int sk_POLICYINFO_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$968.sk_POLICYINFO_push$MH, "sk_POLICYINFO_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_unshift$MH,"sk_POLICYINFO_unshift");
    }
    public static int sk_POLICYINFO_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_unshift$MH, "sk_POLICYINFO_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_pop$MH,"sk_POLICYINFO_pop");
    }
    public static MemoryAddress sk_POLICYINFO_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_pop$MH, "sk_POLICYINFO_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_shift$MH,"sk_POLICYINFO_shift");
    }
    public static MemoryAddress sk_POLICYINFO_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_shift$MH, "sk_POLICYINFO_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_pop_free$MH,"sk_POLICYINFO_pop_free");
    }
    public static void sk_POLICYINFO_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_pop_free$MH, "sk_POLICYINFO_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_insert$MH,"sk_POLICYINFO_insert");
    }
    public static int sk_POLICYINFO_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_insert$MH, "sk_POLICYINFO_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_set$MH() {
        return RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_set$MH,"sk_POLICYINFO_set");
    }
    public static MemoryAddress sk_POLICYINFO_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$969.sk_POLICYINFO_set$MH, "sk_POLICYINFO_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_find$MH() {
        return RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_find$MH,"sk_POLICYINFO_find");
    }
    public static int sk_POLICYINFO_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_find$MH, "sk_POLICYINFO_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_find_ex$MH,"sk_POLICYINFO_find_ex");
    }
    public static int sk_POLICYINFO_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_find_ex$MH, "sk_POLICYINFO_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_sort$MH,"sk_POLICYINFO_sort");
    }
    public static void sk_POLICYINFO_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_sort$MH, "sk_POLICYINFO_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_is_sorted$MH,"sk_POLICYINFO_is_sorted");
    }
    public static int sk_POLICYINFO_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_is_sorted$MH, "sk_POLICYINFO_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_dup$MH,"sk_POLICYINFO_dup");
    }
    public static MemoryAddress sk_POLICYINFO_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_dup$MH, "sk_POLICYINFO_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_deep_copy$MH,"sk_POLICYINFO_deep_copy");
    }
    public static MemoryAddress sk_POLICYINFO_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$970.sk_POLICYINFO_deep_copy$MH, "sk_POLICYINFO_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICYINFO_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$971.sk_POLICYINFO_set_cmp_func$MH,"sk_POLICYINFO_set_cmp_func");
    }
    public static MemoryAddress sk_POLICYINFO_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$971.sk_POLICYINFO_set_cmp_func$MH, "sk_POLICYINFO_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_num$MH,"sk_POLICY_MAPPING_num");
    }
    public static int sk_POLICY_MAPPING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_num$MH, "sk_POLICY_MAPPING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_value$MH,"sk_POLICY_MAPPING_value");
    }
    public static MemoryAddress sk_POLICY_MAPPING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_value$MH, "sk_POLICY_MAPPING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_new$MH,"sk_POLICY_MAPPING_new");
    }
    public static MemoryAddress sk_POLICY_MAPPING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_new$MH, "sk_POLICY_MAPPING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_new_null$MH,"sk_POLICY_MAPPING_new_null");
    }
    public static MemoryAddress sk_POLICY_MAPPING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_new_null$MH, "sk_POLICY_MAPPING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_new_reserve$MH,"sk_POLICY_MAPPING_new_reserve");
    }
    public static MemoryAddress sk_POLICY_MAPPING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$972.sk_POLICY_MAPPING_new_reserve$MH, "sk_POLICY_MAPPING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_reserve$MH,"sk_POLICY_MAPPING_reserve");
    }
    public static int sk_POLICY_MAPPING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_reserve$MH, "sk_POLICY_MAPPING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_free$MH,"sk_POLICY_MAPPING_free");
    }
    public static void sk_POLICY_MAPPING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_free$MH, "sk_POLICY_MAPPING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_zero$MH,"sk_POLICY_MAPPING_zero");
    }
    public static void sk_POLICY_MAPPING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_zero$MH, "sk_POLICY_MAPPING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_delete$MH,"sk_POLICY_MAPPING_delete");
    }
    public static MemoryAddress sk_POLICY_MAPPING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_delete$MH, "sk_POLICY_MAPPING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_delete_ptr$MH,"sk_POLICY_MAPPING_delete_ptr");
    }
    public static MemoryAddress sk_POLICY_MAPPING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_delete_ptr$MH, "sk_POLICY_MAPPING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_push$MH,"sk_POLICY_MAPPING_push");
    }
    public static int sk_POLICY_MAPPING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$973.sk_POLICY_MAPPING_push$MH, "sk_POLICY_MAPPING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_unshift$MH,"sk_POLICY_MAPPING_unshift");
    }
    public static int sk_POLICY_MAPPING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_unshift$MH, "sk_POLICY_MAPPING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_pop$MH,"sk_POLICY_MAPPING_pop");
    }
    public static MemoryAddress sk_POLICY_MAPPING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_pop$MH, "sk_POLICY_MAPPING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_shift$MH,"sk_POLICY_MAPPING_shift");
    }
    public static MemoryAddress sk_POLICY_MAPPING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_shift$MH, "sk_POLICY_MAPPING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_pop_free$MH,"sk_POLICY_MAPPING_pop_free");
    }
    public static void sk_POLICY_MAPPING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_pop_free$MH, "sk_POLICY_MAPPING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_insert$MH,"sk_POLICY_MAPPING_insert");
    }
    public static int sk_POLICY_MAPPING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_insert$MH, "sk_POLICY_MAPPING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_set$MH,"sk_POLICY_MAPPING_set");
    }
    public static MemoryAddress sk_POLICY_MAPPING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$974.sk_POLICY_MAPPING_set$MH, "sk_POLICY_MAPPING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_find$MH,"sk_POLICY_MAPPING_find");
    }
    public static int sk_POLICY_MAPPING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_find$MH, "sk_POLICY_MAPPING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_find_ex$MH,"sk_POLICY_MAPPING_find_ex");
    }
    public static int sk_POLICY_MAPPING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_find_ex$MH, "sk_POLICY_MAPPING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_sort$MH,"sk_POLICY_MAPPING_sort");
    }
    public static void sk_POLICY_MAPPING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_sort$MH, "sk_POLICY_MAPPING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_is_sorted$MH,"sk_POLICY_MAPPING_is_sorted");
    }
    public static int sk_POLICY_MAPPING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_is_sorted$MH, "sk_POLICY_MAPPING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_dup$MH,"sk_POLICY_MAPPING_dup");
    }
    public static MemoryAddress sk_POLICY_MAPPING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_dup$MH, "sk_POLICY_MAPPING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_deep_copy$MH,"sk_POLICY_MAPPING_deep_copy");
    }
    public static MemoryAddress sk_POLICY_MAPPING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$975.sk_POLICY_MAPPING_deep_copy$MH, "sk_POLICY_MAPPING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_POLICY_MAPPING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$976.sk_POLICY_MAPPING_set_cmp_func$MH,"sk_POLICY_MAPPING_set_cmp_func");
    }
    public static MemoryAddress sk_POLICY_MAPPING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$976.sk_POLICY_MAPPING_set_cmp_func$MH, "sk_POLICY_MAPPING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_num$MH,"sk_GENERAL_SUBTREE_num");
    }
    public static int sk_GENERAL_SUBTREE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_num$MH, "sk_GENERAL_SUBTREE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_value$MH,"sk_GENERAL_SUBTREE_value");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_value$MH, "sk_GENERAL_SUBTREE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_new$MH,"sk_GENERAL_SUBTREE_new");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_new$MH, "sk_GENERAL_SUBTREE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_new_null$MH,"sk_GENERAL_SUBTREE_new_null");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_new_null$MH, "sk_GENERAL_SUBTREE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_new_reserve$MH,"sk_GENERAL_SUBTREE_new_reserve");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$977.sk_GENERAL_SUBTREE_new_reserve$MH, "sk_GENERAL_SUBTREE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_reserve$MH,"sk_GENERAL_SUBTREE_reserve");
    }
    public static int sk_GENERAL_SUBTREE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_reserve$MH, "sk_GENERAL_SUBTREE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_free$MH,"sk_GENERAL_SUBTREE_free");
    }
    public static void sk_GENERAL_SUBTREE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_free$MH, "sk_GENERAL_SUBTREE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_zero$MH,"sk_GENERAL_SUBTREE_zero");
    }
    public static void sk_GENERAL_SUBTREE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_zero$MH, "sk_GENERAL_SUBTREE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_delete$MH,"sk_GENERAL_SUBTREE_delete");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_delete$MH, "sk_GENERAL_SUBTREE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_delete_ptr$MH,"sk_GENERAL_SUBTREE_delete_ptr");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_delete_ptr$MH, "sk_GENERAL_SUBTREE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_push$MH,"sk_GENERAL_SUBTREE_push");
    }
    public static int sk_GENERAL_SUBTREE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$978.sk_GENERAL_SUBTREE_push$MH, "sk_GENERAL_SUBTREE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_unshift$MH,"sk_GENERAL_SUBTREE_unshift");
    }
    public static int sk_GENERAL_SUBTREE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_unshift$MH, "sk_GENERAL_SUBTREE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_pop$MH,"sk_GENERAL_SUBTREE_pop");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_pop$MH, "sk_GENERAL_SUBTREE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_shift$MH,"sk_GENERAL_SUBTREE_shift");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_shift$MH, "sk_GENERAL_SUBTREE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_pop_free$MH,"sk_GENERAL_SUBTREE_pop_free");
    }
    public static void sk_GENERAL_SUBTREE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_pop_free$MH, "sk_GENERAL_SUBTREE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_insert$MH,"sk_GENERAL_SUBTREE_insert");
    }
    public static int sk_GENERAL_SUBTREE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_insert$MH, "sk_GENERAL_SUBTREE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_set$MH,"sk_GENERAL_SUBTREE_set");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$979.sk_GENERAL_SUBTREE_set$MH, "sk_GENERAL_SUBTREE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_find$MH,"sk_GENERAL_SUBTREE_find");
    }
    public static int sk_GENERAL_SUBTREE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_find$MH, "sk_GENERAL_SUBTREE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_find_ex$MH,"sk_GENERAL_SUBTREE_find_ex");
    }
    public static int sk_GENERAL_SUBTREE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_find_ex$MH, "sk_GENERAL_SUBTREE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_sort$MH,"sk_GENERAL_SUBTREE_sort");
    }
    public static void sk_GENERAL_SUBTREE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_sort$MH, "sk_GENERAL_SUBTREE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_is_sorted$MH,"sk_GENERAL_SUBTREE_is_sorted");
    }
    public static int sk_GENERAL_SUBTREE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_is_sorted$MH, "sk_GENERAL_SUBTREE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_dup$MH,"sk_GENERAL_SUBTREE_dup");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_dup$MH, "sk_GENERAL_SUBTREE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_deep_copy$MH,"sk_GENERAL_SUBTREE_deep_copy");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$980.sk_GENERAL_SUBTREE_deep_copy$MH, "sk_GENERAL_SUBTREE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_GENERAL_SUBTREE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$981.sk_GENERAL_SUBTREE_set_cmp_func$MH,"sk_GENERAL_SUBTREE_set_cmp_func");
    }
    public static MemoryAddress sk_GENERAL_SUBTREE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$981.sk_GENERAL_SUBTREE_set_cmp_func$MH, "sk_GENERAL_SUBTREE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROXY_POLICY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$981.PROXY_POLICY_new$MH,"PROXY_POLICY_new");
    }
    public static MemoryAddress PROXY_POLICY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$981.PROXY_POLICY_new$MH, "PROXY_POLICY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROXY_POLICY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$981.PROXY_POLICY_free$MH,"PROXY_POLICY_free");
    }
    public static void PROXY_POLICY_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$981.PROXY_POLICY_free$MH, "PROXY_POLICY_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PROXY_POLICY$MH() {
        return RuntimeHelper.requireNonNull(constants$981.d2i_PROXY_POLICY$MH,"d2i_PROXY_POLICY");
    }
    public static MemoryAddress d2i_PROXY_POLICY ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$981.d2i_PROXY_POLICY$MH, "d2i_PROXY_POLICY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PROXY_POLICY$MH() {
        return RuntimeHelper.requireNonNull(constants$981.i2d_PROXY_POLICY$MH,"i2d_PROXY_POLICY");
    }
    public static int i2d_PROXY_POLICY ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$981.i2d_PROXY_POLICY$MH, "i2d_PROXY_POLICY");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROXY_CERT_INFO_EXTENSION_new$MH() {
        return RuntimeHelper.requireNonNull(constants$981.PROXY_CERT_INFO_EXTENSION_new$MH,"PROXY_CERT_INFO_EXTENSION_new");
    }
    public static MemoryAddress PROXY_CERT_INFO_EXTENSION_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$981.PROXY_CERT_INFO_EXTENSION_new$MH, "PROXY_CERT_INFO_EXTENSION_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PROXY_CERT_INFO_EXTENSION_free$MH() {
        return RuntimeHelper.requireNonNull(constants$982.PROXY_CERT_INFO_EXTENSION_free$MH,"PROXY_CERT_INFO_EXTENSION_free");
    }
    public static void PROXY_CERT_INFO_EXTENSION_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$982.PROXY_CERT_INFO_EXTENSION_free$MH, "PROXY_CERT_INFO_EXTENSION_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PROXY_CERT_INFO_EXTENSION$MH() {
        return RuntimeHelper.requireNonNull(constants$982.d2i_PROXY_CERT_INFO_EXTENSION$MH,"d2i_PROXY_CERT_INFO_EXTENSION");
    }
    public static MemoryAddress d2i_PROXY_CERT_INFO_EXTENSION ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$982.d2i_PROXY_CERT_INFO_EXTENSION$MH, "d2i_PROXY_CERT_INFO_EXTENSION");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PROXY_CERT_INFO_EXTENSION$MH() {
        return RuntimeHelper.requireNonNull(constants$982.i2d_PROXY_CERT_INFO_EXTENSION$MH,"i2d_PROXY_CERT_INFO_EXTENSION");
    }
    public static int i2d_PROXY_CERT_INFO_EXTENSION ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$982.i2d_PROXY_CERT_INFO_EXTENSION$MH, "i2d_PROXY_CERT_INFO_EXTENSION");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$983.sk_X509_PURPOSE_num$MH,"sk_X509_PURPOSE_num");
    }
    public static int sk_X509_PURPOSE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$983.sk_X509_PURPOSE_num$MH, "sk_X509_PURPOSE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$983.sk_X509_PURPOSE_value$MH,"sk_X509_PURPOSE_value");
    }
    public static MemoryAddress sk_X509_PURPOSE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$983.sk_X509_PURPOSE_value$MH, "sk_X509_PURPOSE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$983.sk_X509_PURPOSE_new$MH,"sk_X509_PURPOSE_new");
    }
    public static MemoryAddress sk_X509_PURPOSE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$983.sk_X509_PURPOSE_new$MH, "sk_X509_PURPOSE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_new_null$MH,"sk_X509_PURPOSE_new_null");
    }
    public static MemoryAddress sk_X509_PURPOSE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_new_null$MH, "sk_X509_PURPOSE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_new_reserve$MH,"sk_X509_PURPOSE_new_reserve");
    }
    public static MemoryAddress sk_X509_PURPOSE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_new_reserve$MH, "sk_X509_PURPOSE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_reserve$MH,"sk_X509_PURPOSE_reserve");
    }
    public static int sk_X509_PURPOSE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_reserve$MH, "sk_X509_PURPOSE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_free$MH,"sk_X509_PURPOSE_free");
    }
    public static void sk_X509_PURPOSE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_free$MH, "sk_X509_PURPOSE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_zero$MH,"sk_X509_PURPOSE_zero");
    }
    public static void sk_X509_PURPOSE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_zero$MH, "sk_X509_PURPOSE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_delete$MH,"sk_X509_PURPOSE_delete");
    }
    public static MemoryAddress sk_X509_PURPOSE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$984.sk_X509_PURPOSE_delete$MH, "sk_X509_PURPOSE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_delete_ptr$MH,"sk_X509_PURPOSE_delete_ptr");
    }
    public static MemoryAddress sk_X509_PURPOSE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_delete_ptr$MH, "sk_X509_PURPOSE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_push$MH,"sk_X509_PURPOSE_push");
    }
    public static int sk_X509_PURPOSE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_push$MH, "sk_X509_PURPOSE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_unshift$MH,"sk_X509_PURPOSE_unshift");
    }
    public static int sk_X509_PURPOSE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_unshift$MH, "sk_X509_PURPOSE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_pop$MH,"sk_X509_PURPOSE_pop");
    }
    public static MemoryAddress sk_X509_PURPOSE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_pop$MH, "sk_X509_PURPOSE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_shift$MH,"sk_X509_PURPOSE_shift");
    }
    public static MemoryAddress sk_X509_PURPOSE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_shift$MH, "sk_X509_PURPOSE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_pop_free$MH,"sk_X509_PURPOSE_pop_free");
    }
    public static void sk_X509_PURPOSE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$985.sk_X509_PURPOSE_pop_free$MH, "sk_X509_PURPOSE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_insert$MH,"sk_X509_PURPOSE_insert");
    }
    public static int sk_X509_PURPOSE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_insert$MH, "sk_X509_PURPOSE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_set$MH,"sk_X509_PURPOSE_set");
    }
    public static MemoryAddress sk_X509_PURPOSE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_set$MH, "sk_X509_PURPOSE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_find$MH,"sk_X509_PURPOSE_find");
    }
    public static int sk_X509_PURPOSE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_find$MH, "sk_X509_PURPOSE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_find_ex$MH,"sk_X509_PURPOSE_find_ex");
    }
    public static int sk_X509_PURPOSE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_find_ex$MH, "sk_X509_PURPOSE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_sort$MH,"sk_X509_PURPOSE_sort");
    }
    public static void sk_X509_PURPOSE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_sort$MH, "sk_X509_PURPOSE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_is_sorted$MH,"sk_X509_PURPOSE_is_sorted");
    }
    public static int sk_X509_PURPOSE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$986.sk_X509_PURPOSE_is_sorted$MH, "sk_X509_PURPOSE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$987.sk_X509_PURPOSE_dup$MH,"sk_X509_PURPOSE_dup");
    }
    public static MemoryAddress sk_X509_PURPOSE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$987.sk_X509_PURPOSE_dup$MH, "sk_X509_PURPOSE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$987.sk_X509_PURPOSE_deep_copy$MH,"sk_X509_PURPOSE_deep_copy");
    }
    public static MemoryAddress sk_X509_PURPOSE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$987.sk_X509_PURPOSE_deep_copy$MH, "sk_X509_PURPOSE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_PURPOSE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$987.sk_X509_PURPOSE_set_cmp_func$MH,"sk_X509_PURPOSE_set_cmp_func");
    }
    public static MemoryAddress sk_X509_PURPOSE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$987.sk_X509_PURPOSE_set_cmp_func$MH, "sk_X509_PURPOSE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BASIC_CONSTRAINTS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$987.BASIC_CONSTRAINTS_new$MH,"BASIC_CONSTRAINTS_new");
    }
    public static MemoryAddress BASIC_CONSTRAINTS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$987.BASIC_CONSTRAINTS_new$MH, "BASIC_CONSTRAINTS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BASIC_CONSTRAINTS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$987.BASIC_CONSTRAINTS_free$MH,"BASIC_CONSTRAINTS_free");
    }
    public static void BASIC_CONSTRAINTS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$987.BASIC_CONSTRAINTS_free$MH, "BASIC_CONSTRAINTS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_BASIC_CONSTRAINTS$MH() {
        return RuntimeHelper.requireNonNull(constants$987.d2i_BASIC_CONSTRAINTS$MH,"d2i_BASIC_CONSTRAINTS");
    }
    public static MemoryAddress d2i_BASIC_CONSTRAINTS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$987.d2i_BASIC_CONSTRAINTS$MH, "d2i_BASIC_CONSTRAINTS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_BASIC_CONSTRAINTS$MH() {
        return RuntimeHelper.requireNonNull(constants$988.i2d_BASIC_CONSTRAINTS$MH,"i2d_BASIC_CONSTRAINTS");
    }
    public static int i2d_BASIC_CONSTRAINTS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$988.i2d_BASIC_CONSTRAINTS$MH, "i2d_BASIC_CONSTRAINTS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_new$MH() {
        return RuntimeHelper.requireNonNull(constants$988.SXNET_new$MH,"SXNET_new");
    }
    public static MemoryAddress SXNET_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$988.SXNET_new$MH, "SXNET_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_free$MH() {
        return RuntimeHelper.requireNonNull(constants$988.SXNET_free$MH,"SXNET_free");
    }
    public static void SXNET_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$988.SXNET_free$MH, "SXNET_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_SXNET$MH() {
        return RuntimeHelper.requireNonNull(constants$988.d2i_SXNET$MH,"d2i_SXNET");
    }
    public static MemoryAddress d2i_SXNET ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$988.d2i_SXNET$MH, "d2i_SXNET");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_SXNET$MH() {
        return RuntimeHelper.requireNonNull(constants$988.i2d_SXNET$MH,"i2d_SXNET");
    }
    public static int i2d_SXNET ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$988.i2d_SXNET$MH, "i2d_SXNET");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNETID_new$MH() {
        return RuntimeHelper.requireNonNull(constants$988.SXNETID_new$MH,"SXNETID_new");
    }
    public static MemoryAddress SXNETID_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$988.SXNETID_new$MH, "SXNETID_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNETID_free$MH() {
        return RuntimeHelper.requireNonNull(constants$989.SXNETID_free$MH,"SXNETID_free");
    }
    public static void SXNETID_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$989.SXNETID_free$MH, "SXNETID_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_SXNETID$MH() {
        return RuntimeHelper.requireNonNull(constants$989.d2i_SXNETID$MH,"d2i_SXNETID");
    }
    public static MemoryAddress d2i_SXNETID ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$989.d2i_SXNETID$MH, "d2i_SXNETID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_SXNETID$MH() {
        return RuntimeHelper.requireNonNull(constants$989.i2d_SXNETID$MH,"i2d_SXNETID");
    }
    public static int i2d_SXNETID ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$989.i2d_SXNETID$MH, "i2d_SXNETID");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_add_id_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$989.SXNET_add_id_asc$MH,"SXNET_add_id_asc");
    }
    public static int SXNET_add_id_asc ( Addressable psx,  Addressable zone,  Addressable user,  int userlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$989.SXNET_add_id_asc$MH, "SXNET_add_id_asc");
        try {
            return (int)mh$.invokeExact(psx, zone, user, userlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_add_id_ulong$MH() {
        return RuntimeHelper.requireNonNull(constants$989.SXNET_add_id_ulong$MH,"SXNET_add_id_ulong");
    }
    public static int SXNET_add_id_ulong ( Addressable psx,  long lzone,  Addressable user,  int userlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$989.SXNET_add_id_ulong$MH, "SXNET_add_id_ulong");
        try {
            return (int)mh$.invokeExact(psx, lzone, user, userlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_add_id_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$989.SXNET_add_id_INTEGER$MH,"SXNET_add_id_INTEGER");
    }
    public static int SXNET_add_id_INTEGER ( Addressable psx,  Addressable izone,  Addressable user,  int userlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$989.SXNET_add_id_INTEGER$MH, "SXNET_add_id_INTEGER");
        try {
            return (int)mh$.invokeExact(psx, izone, user, userlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_get_id_asc$MH() {
        return RuntimeHelper.requireNonNull(constants$990.SXNET_get_id_asc$MH,"SXNET_get_id_asc");
    }
    public static MemoryAddress SXNET_get_id_asc ( Addressable sx,  Addressable zone) {
        var mh$ = RuntimeHelper.requireNonNull(constants$990.SXNET_get_id_asc$MH, "SXNET_get_id_asc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sx, zone);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_get_id_ulong$MH() {
        return RuntimeHelper.requireNonNull(constants$990.SXNET_get_id_ulong$MH,"SXNET_get_id_ulong");
    }
    public static MemoryAddress SXNET_get_id_ulong ( Addressable sx,  long lzone) {
        var mh$ = RuntimeHelper.requireNonNull(constants$990.SXNET_get_id_ulong$MH, "SXNET_get_id_ulong");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sx, lzone);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SXNET_get_id_INTEGER$MH() {
        return RuntimeHelper.requireNonNull(constants$990.SXNET_get_id_INTEGER$MH,"SXNET_get_id_INTEGER");
    }
    public static MemoryAddress SXNET_get_id_INTEGER ( Addressable sx,  Addressable zone) {
        var mh$ = RuntimeHelper.requireNonNull(constants$990.SXNET_get_id_INTEGER$MH, "SXNET_get_id_INTEGER");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sx, zone);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AUTHORITY_KEYID_new$MH() {
        return RuntimeHelper.requireNonNull(constants$990.AUTHORITY_KEYID_new$MH,"AUTHORITY_KEYID_new");
    }
    public static MemoryAddress AUTHORITY_KEYID_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$990.AUTHORITY_KEYID_new$MH, "AUTHORITY_KEYID_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AUTHORITY_KEYID_free$MH() {
        return RuntimeHelper.requireNonNull(constants$990.AUTHORITY_KEYID_free$MH,"AUTHORITY_KEYID_free");
    }
    public static void AUTHORITY_KEYID_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$990.AUTHORITY_KEYID_free$MH, "AUTHORITY_KEYID_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_AUTHORITY_KEYID$MH() {
        return RuntimeHelper.requireNonNull(constants$990.d2i_AUTHORITY_KEYID$MH,"d2i_AUTHORITY_KEYID");
    }
    public static MemoryAddress d2i_AUTHORITY_KEYID ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$990.d2i_AUTHORITY_KEYID$MH, "d2i_AUTHORITY_KEYID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_AUTHORITY_KEYID$MH() {
        return RuntimeHelper.requireNonNull(constants$991.i2d_AUTHORITY_KEYID$MH,"i2d_AUTHORITY_KEYID");
    }
    public static int i2d_AUTHORITY_KEYID ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$991.i2d_AUTHORITY_KEYID$MH, "i2d_AUTHORITY_KEYID");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKEY_USAGE_PERIOD_new$MH() {
        return RuntimeHelper.requireNonNull(constants$991.PKEY_USAGE_PERIOD_new$MH,"PKEY_USAGE_PERIOD_new");
    }
    public static MemoryAddress PKEY_USAGE_PERIOD_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$991.PKEY_USAGE_PERIOD_new$MH, "PKEY_USAGE_PERIOD_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKEY_USAGE_PERIOD_free$MH() {
        return RuntimeHelper.requireNonNull(constants$991.PKEY_USAGE_PERIOD_free$MH,"PKEY_USAGE_PERIOD_free");
    }
    public static void PKEY_USAGE_PERIOD_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$991.PKEY_USAGE_PERIOD_free$MH, "PKEY_USAGE_PERIOD_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKEY_USAGE_PERIOD$MH() {
        return RuntimeHelper.requireNonNull(constants$991.d2i_PKEY_USAGE_PERIOD$MH,"d2i_PKEY_USAGE_PERIOD");
    }
    public static MemoryAddress d2i_PKEY_USAGE_PERIOD ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$991.d2i_PKEY_USAGE_PERIOD$MH, "d2i_PKEY_USAGE_PERIOD");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKEY_USAGE_PERIOD$MH() {
        return RuntimeHelper.requireNonNull(constants$991.i2d_PKEY_USAGE_PERIOD$MH,"i2d_PKEY_USAGE_PERIOD");
    }
    public static int i2d_PKEY_USAGE_PERIOD ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$991.i2d_PKEY_USAGE_PERIOD$MH, "i2d_PKEY_USAGE_PERIOD");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$991.GENERAL_NAME_new$MH,"GENERAL_NAME_new");
    }
    public static MemoryAddress GENERAL_NAME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$991.GENERAL_NAME_new$MH, "GENERAL_NAME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$992.GENERAL_NAME_free$MH,"GENERAL_NAME_free");
    }
    public static void GENERAL_NAME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$992.GENERAL_NAME_free$MH, "GENERAL_NAME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_GENERAL_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$992.d2i_GENERAL_NAME$MH,"d2i_GENERAL_NAME");
    }
    public static MemoryAddress d2i_GENERAL_NAME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$992.d2i_GENERAL_NAME$MH, "d2i_GENERAL_NAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_GENERAL_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$992.i2d_GENERAL_NAME$MH,"i2d_GENERAL_NAME");
    }
    public static int i2d_GENERAL_NAME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$992.i2d_GENERAL_NAME$MH, "i2d_GENERAL_NAME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$992.GENERAL_NAME_dup$MH,"GENERAL_NAME_dup");
    }
    public static MemoryAddress GENERAL_NAME_dup ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$992.GENERAL_NAME_dup$MH, "GENERAL_NAME_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GENERAL_NAME_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$992.GENERAL_NAME_cmp$MH,"GENERAL_NAME_cmp");
    }
    public static int GENERAL_NAME_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$992.GENERAL_NAME_cmp$MH, "GENERAL_NAME_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle v2i_ASN1_BIT_STRING$MH() {
        return RuntimeHelper.requireNonNull(constants$992.v2i_ASN1_BIT_STRING$MH,"v2i_ASN1_BIT_STRING");
    }
    public static MemoryAddress v2i_ASN1_BIT_STRING ( Addressable method,  Addressable ctx,  Addressable nval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$992.v2i_ASN1_BIT_STRING$MH, "v2i_ASN1_BIT_STRING");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(method, ctx, nval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


