// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$665 {

    static final FunctionDescriptor i2d_NETSCAPE_CERT_SEQUENCE$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle i2d_NETSCAPE_CERT_SEQUENCE$MH = RuntimeHelper.downcallHandle(
        "i2d_NETSCAPE_CERT_SEQUENCE",
        constants$665.i2d_NETSCAPE_CERT_SEQUENCE$FUNC, false
    );
    static final FunctionDescriptor X509_INFO_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle X509_INFO_new$MH = RuntimeHelper.downcallHandle(
        "X509_INFO_new",
        constants$665.X509_INFO_new$FUNC, false
    );
    static final FunctionDescriptor X509_INFO_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle X509_INFO_free$MH = RuntimeHelper.downcallHandle(
        "X509_INFO_free",
        constants$665.X509_INFO_free$FUNC, false
    );
    static final FunctionDescriptor X509_NAME_oneline$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        JAVA_INT
    );
    static final MethodHandle X509_NAME_oneline$MH = RuntimeHelper.downcallHandle(
        "X509_NAME_oneline",
        constants$665.X509_NAME_oneline$FUNC, false
    );
    static final FunctionDescriptor ASN1_verify$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle ASN1_verify$MH = RuntimeHelper.downcallHandle(
        "ASN1_verify",
        constants$665.ASN1_verify$FUNC, false
    );
    static final FunctionDescriptor ASN1_digest$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle ASN1_digest$MH = RuntimeHelper.downcallHandle(
        "ASN1_digest",
        constants$665.ASN1_digest$FUNC, false
    );
}


