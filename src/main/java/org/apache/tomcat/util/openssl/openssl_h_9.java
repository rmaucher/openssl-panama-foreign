// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_9 extends openssl_h_8 {

    public static MethodHandle X509_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$625.X509_verify$MH,"X509_verify");
    }
    public static int X509_verify ( Addressable a,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.X509_verify$MH, "X509_verify");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$625.X509_REQ_verify$MH,"X509_REQ_verify");
    }
    public static int X509_REQ_verify ( Addressable a,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.X509_REQ_verify$MH, "X509_REQ_verify");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$626.X509_CRL_verify$MH,"X509_CRL_verify");
    }
    public static int X509_CRL_verify ( Addressable a,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.X509_CRL_verify$MH, "X509_CRL_verify");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_verify$MH,"NETSCAPE_SPKI_verify");
    }
    public static int NETSCAPE_SPKI_verify ( Addressable a,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_verify$MH, "NETSCAPE_SPKI_verify");
        try {
            return (int)mh$.invokeExact(a, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_b64_decode$MH() {
        return RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_b64_decode$MH,"NETSCAPE_SPKI_b64_decode");
    }
    public static MemoryAddress NETSCAPE_SPKI_b64_decode ( Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_b64_decode$MH, "NETSCAPE_SPKI_b64_decode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_b64_encode$MH() {
        return RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_b64_encode$MH,"NETSCAPE_SPKI_b64_encode");
    }
    public static MemoryAddress NETSCAPE_SPKI_b64_encode ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_b64_encode$MH, "NETSCAPE_SPKI_b64_encode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_get_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_get_pubkey$MH,"NETSCAPE_SPKI_get_pubkey");
    }
    public static MemoryAddress NETSCAPE_SPKI_get_pubkey ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_get_pubkey$MH, "NETSCAPE_SPKI_get_pubkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_set_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_set_pubkey$MH,"NETSCAPE_SPKI_set_pubkey");
    }
    public static int NETSCAPE_SPKI_set_pubkey ( Addressable x,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.NETSCAPE_SPKI_set_pubkey$MH, "NETSCAPE_SPKI_set_pubkey");
        try {
            return (int)mh$.invokeExact(x, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_print$MH() {
        return RuntimeHelper.requireNonNull(constants$627.NETSCAPE_SPKI_print$MH,"NETSCAPE_SPKI_print");
    }
    public static int NETSCAPE_SPKI_print ( Addressable out,  Addressable spki) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.NETSCAPE_SPKI_print$MH, "NETSCAPE_SPKI_print");
        try {
            return (int)mh$.invokeExact(out, spki);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_signature_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$627.X509_signature_dump$MH,"X509_signature_dump");
    }
    public static int X509_signature_dump ( Addressable bp,  Addressable sig,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.X509_signature_dump$MH, "X509_signature_dump");
        try {
            return (int)mh$.invokeExact(bp, sig, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_signature_print$MH() {
        return RuntimeHelper.requireNonNull(constants$627.X509_signature_print$MH,"X509_signature_print");
    }
    public static int X509_signature_print ( Addressable bp,  Addressable alg,  Addressable sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.X509_signature_print$MH, "X509_signature_print");
        try {
            return (int)mh$.invokeExact(bp, alg, sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$627.X509_sign$MH,"X509_sign");
    }
    public static int X509_sign ( Addressable x,  Addressable pkey,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.X509_sign$MH, "X509_sign");
        try {
            return (int)mh$.invokeExact(x, pkey, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_sign_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$627.X509_sign_ctx$MH,"X509_sign_ctx");
    }
    public static int X509_sign_ctx ( Addressable x,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.X509_sign_ctx$MH, "X509_sign_ctx");
        try {
            return (int)mh$.invokeExact(x, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_http_nbio$MH() {
        return RuntimeHelper.requireNonNull(constants$627.X509_http_nbio$MH,"X509_http_nbio");
    }
    public static int X509_http_nbio ( Addressable rctx,  Addressable pcert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.X509_http_nbio$MH, "X509_http_nbio");
        try {
            return (int)mh$.invokeExact(rctx, pcert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$628.X509_REQ_sign$MH,"X509_REQ_sign");
    }
    public static int X509_REQ_sign ( Addressable x,  Addressable pkey,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.X509_REQ_sign$MH, "X509_REQ_sign");
        try {
            return (int)mh$.invokeExact(x, pkey, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_sign_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$628.X509_REQ_sign_ctx$MH,"X509_REQ_sign_ctx");
    }
    public static int X509_REQ_sign_ctx ( Addressable x,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.X509_REQ_sign_ctx$MH, "X509_REQ_sign_ctx");
        try {
            return (int)mh$.invokeExact(x, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$628.X509_CRL_sign$MH,"X509_CRL_sign");
    }
    public static int X509_CRL_sign ( Addressable x,  Addressable pkey,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.X509_CRL_sign$MH, "X509_CRL_sign");
        try {
            return (int)mh$.invokeExact(x, pkey, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_sign_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$628.X509_CRL_sign_ctx$MH,"X509_CRL_sign_ctx");
    }
    public static int X509_CRL_sign_ctx ( Addressable x,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.X509_CRL_sign_ctx$MH, "X509_CRL_sign_ctx");
        try {
            return (int)mh$.invokeExact(x, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_http_nbio$MH() {
        return RuntimeHelper.requireNonNull(constants$628.X509_CRL_http_nbio$MH,"X509_CRL_http_nbio");
    }
    public static int X509_CRL_http_nbio ( Addressable rctx,  Addressable pcrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.X509_CRL_http_nbio$MH, "X509_CRL_http_nbio");
        try {
            return (int)mh$.invokeExact(rctx, pcrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$628.NETSCAPE_SPKI_sign$MH,"NETSCAPE_SPKI_sign");
    }
    public static int NETSCAPE_SPKI_sign ( Addressable x,  Addressable pkey,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.NETSCAPE_SPKI_sign$MH, "NETSCAPE_SPKI_sign");
        try {
            return (int)mh$.invokeExact(x, pkey, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_pubkey_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$629.X509_pubkey_digest$MH,"X509_pubkey_digest");
    }
    public static int X509_pubkey_digest ( Addressable data,  Addressable type,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.X509_pubkey_digest$MH, "X509_pubkey_digest");
        try {
            return (int)mh$.invokeExact(data, type, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$629.X509_digest$MH,"X509_digest");
    }
    public static int X509_digest ( Addressable data,  Addressable type,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.X509_digest$MH, "X509_digest");
        try {
            return (int)mh$.invokeExact(data, type, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$629.X509_CRL_digest$MH,"X509_CRL_digest");
    }
    public static int X509_CRL_digest ( Addressable data,  Addressable type,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.X509_CRL_digest$MH, "X509_CRL_digest");
        try {
            return (int)mh$.invokeExact(data, type, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$629.X509_REQ_digest$MH,"X509_REQ_digest");
    }
    public static int X509_REQ_digest ( Addressable data,  Addressable type,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.X509_REQ_digest$MH, "X509_REQ_digest");
        try {
            return (int)mh$.invokeExact(data, type, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$629.X509_NAME_digest$MH,"X509_NAME_digest");
    }
    public static int X509_NAME_digest ( Addressable data,  Addressable type,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.X509_NAME_digest$MH, "X509_NAME_digest");
        try {
            return (int)mh$.invokeExact(data, type, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$629.d2i_X509_fp$MH,"d2i_X509_fp");
    }
    public static MemoryAddress d2i_X509_fp ( Addressable fp,  Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.d2i_X509_fp$MH, "d2i_X509_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$630.i2d_X509_fp$MH,"i2d_X509_fp");
    }
    public static int i2d_X509_fp ( Addressable fp,  Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.i2d_X509_fp$MH, "i2d_X509_fp");
        try {
            return (int)mh$.invokeExact(fp, x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_CRL_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$630.d2i_X509_CRL_fp$MH,"d2i_X509_CRL_fp");
    }
    public static MemoryAddress d2i_X509_CRL_fp ( Addressable fp,  Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.d2i_X509_CRL_fp$MH, "d2i_X509_CRL_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_CRL_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$630.i2d_X509_CRL_fp$MH,"i2d_X509_CRL_fp");
    }
    public static int i2d_X509_CRL_fp ( Addressable fp,  Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.i2d_X509_CRL_fp$MH, "i2d_X509_CRL_fp");
        try {
            return (int)mh$.invokeExact(fp, crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_REQ_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$630.d2i_X509_REQ_fp$MH,"d2i_X509_REQ_fp");
    }
    public static MemoryAddress d2i_X509_REQ_fp ( Addressable fp,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.d2i_X509_REQ_fp$MH, "d2i_X509_REQ_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_REQ_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$630.i2d_X509_REQ_fp$MH,"i2d_X509_REQ_fp");
    }
    public static int i2d_X509_REQ_fp ( Addressable fp,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.i2d_X509_REQ_fp$MH, "i2d_X509_REQ_fp");
        try {
            return (int)mh$.invokeExact(fp, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSAPrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$630.d2i_RSAPrivateKey_fp$MH,"d2i_RSAPrivateKey_fp");
    }
    public static MemoryAddress d2i_RSAPrivateKey_fp ( Addressable fp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.d2i_RSAPrivateKey_fp$MH, "d2i_RSAPrivateKey_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSAPrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$631.i2d_RSAPrivateKey_fp$MH,"i2d_RSAPrivateKey_fp");
    }
    public static int i2d_RSAPrivateKey_fp ( Addressable fp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.i2d_RSAPrivateKey_fp$MH, "i2d_RSAPrivateKey_fp");
        try {
            return (int)mh$.invokeExact(fp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSAPublicKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$631.d2i_RSAPublicKey_fp$MH,"d2i_RSAPublicKey_fp");
    }
    public static MemoryAddress d2i_RSAPublicKey_fp ( Addressable fp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.d2i_RSAPublicKey_fp$MH, "d2i_RSAPublicKey_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSAPublicKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$631.i2d_RSAPublicKey_fp$MH,"i2d_RSAPublicKey_fp");
    }
    public static int i2d_RSAPublicKey_fp ( Addressable fp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.i2d_RSAPublicKey_fp$MH, "i2d_RSAPublicKey_fp");
        try {
            return (int)mh$.invokeExact(fp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSA_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$631.d2i_RSA_PUBKEY_fp$MH,"d2i_RSA_PUBKEY_fp");
    }
    public static MemoryAddress d2i_RSA_PUBKEY_fp ( Addressable fp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.d2i_RSA_PUBKEY_fp$MH, "d2i_RSA_PUBKEY_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSA_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$631.i2d_RSA_PUBKEY_fp$MH,"i2d_RSA_PUBKEY_fp");
    }
    public static int i2d_RSA_PUBKEY_fp ( Addressable fp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.i2d_RSA_PUBKEY_fp$MH, "i2d_RSA_PUBKEY_fp");
        try {
            return (int)mh$.invokeExact(fp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DSA_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$631.d2i_DSA_PUBKEY_fp$MH,"d2i_DSA_PUBKEY_fp");
    }
    public static MemoryAddress d2i_DSA_PUBKEY_fp ( Addressable fp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.d2i_DSA_PUBKEY_fp$MH, "d2i_DSA_PUBKEY_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DSA_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$632.i2d_DSA_PUBKEY_fp$MH,"i2d_DSA_PUBKEY_fp");
    }
    public static int i2d_DSA_PUBKEY_fp ( Addressable fp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.i2d_DSA_PUBKEY_fp$MH, "i2d_DSA_PUBKEY_fp");
        try {
            return (int)mh$.invokeExact(fp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DSAPrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$632.d2i_DSAPrivateKey_fp$MH,"d2i_DSAPrivateKey_fp");
    }
    public static MemoryAddress d2i_DSAPrivateKey_fp ( Addressable fp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.d2i_DSAPrivateKey_fp$MH, "d2i_DSAPrivateKey_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DSAPrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$632.i2d_DSAPrivateKey_fp$MH,"i2d_DSAPrivateKey_fp");
    }
    public static int i2d_DSAPrivateKey_fp ( Addressable fp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.i2d_DSAPrivateKey_fp$MH, "i2d_DSAPrivateKey_fp");
        try {
            return (int)mh$.invokeExact(fp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_EC_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$632.d2i_EC_PUBKEY_fp$MH,"d2i_EC_PUBKEY_fp");
    }
    public static MemoryAddress d2i_EC_PUBKEY_fp ( Addressable fp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.d2i_EC_PUBKEY_fp$MH, "d2i_EC_PUBKEY_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_EC_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$632.i2d_EC_PUBKEY_fp$MH,"i2d_EC_PUBKEY_fp");
    }
    public static int i2d_EC_PUBKEY_fp ( Addressable fp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.i2d_EC_PUBKEY_fp$MH, "i2d_EC_PUBKEY_fp");
        try {
            return (int)mh$.invokeExact(fp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ECPrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$632.d2i_ECPrivateKey_fp$MH,"d2i_ECPrivateKey_fp");
    }
    public static MemoryAddress d2i_ECPrivateKey_fp ( Addressable fp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.d2i_ECPrivateKey_fp$MH, "d2i_ECPrivateKey_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ECPrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$633.i2d_ECPrivateKey_fp$MH,"i2d_ECPrivateKey_fp");
    }
    public static int i2d_ECPrivateKey_fp ( Addressable fp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.i2d_ECPrivateKey_fp$MH, "i2d_ECPrivateKey_fp");
        try {
            return (int)mh$.invokeExact(fp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$633.d2i_PKCS8_fp$MH,"d2i_PKCS8_fp");
    }
    public static MemoryAddress d2i_PKCS8_fp ( Addressable fp,  Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.d2i_PKCS8_fp$MH, "d2i_PKCS8_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$633.i2d_PKCS8_fp$MH,"i2d_PKCS8_fp");
    }
    public static int i2d_PKCS8_fp ( Addressable fp,  Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.i2d_PKCS8_fp$MH, "i2d_PKCS8_fp");
        try {
            return (int)mh$.invokeExact(fp, p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8_PRIV_KEY_INFO_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$633.d2i_PKCS8_PRIV_KEY_INFO_fp$MH,"d2i_PKCS8_PRIV_KEY_INFO_fp");
    }
    public static MemoryAddress d2i_PKCS8_PRIV_KEY_INFO_fp ( Addressable fp,  Addressable p8inf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.d2i_PKCS8_PRIV_KEY_INFO_fp$MH, "d2i_PKCS8_PRIV_KEY_INFO_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, p8inf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8_PRIV_KEY_INFO_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$633.i2d_PKCS8_PRIV_KEY_INFO_fp$MH,"i2d_PKCS8_PRIV_KEY_INFO_fp");
    }
    public static int i2d_PKCS8_PRIV_KEY_INFO_fp ( Addressable fp,  Addressable p8inf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.i2d_PKCS8_PRIV_KEY_INFO_fp$MH, "i2d_PKCS8_PRIV_KEY_INFO_fp");
        try {
            return (int)mh$.invokeExact(fp, p8inf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8PrivateKeyInfo_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$633.i2d_PKCS8PrivateKeyInfo_fp$MH,"i2d_PKCS8PrivateKeyInfo_fp");
    }
    public static int i2d_PKCS8PrivateKeyInfo_fp ( Addressable fp,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.i2d_PKCS8PrivateKeyInfo_fp$MH, "i2d_PKCS8PrivateKeyInfo_fp");
        try {
            return (int)mh$.invokeExact(fp, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$634.i2d_PrivateKey_fp$MH,"i2d_PrivateKey_fp");
    }
    public static int i2d_PrivateKey_fp ( Addressable fp,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.i2d_PrivateKey_fp$MH, "i2d_PrivateKey_fp");
        try {
            return (int)mh$.invokeExact(fp, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$634.d2i_PrivateKey_fp$MH,"d2i_PrivateKey_fp");
    }
    public static MemoryAddress d2i_PrivateKey_fp ( Addressable fp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.d2i_PrivateKey_fp$MH, "d2i_PrivateKey_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$634.i2d_PUBKEY_fp$MH,"i2d_PUBKEY_fp");
    }
    public static int i2d_PUBKEY_fp ( Addressable fp,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.i2d_PUBKEY_fp$MH, "i2d_PUBKEY_fp");
        try {
            return (int)mh$.invokeExact(fp, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PUBKEY_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$634.d2i_PUBKEY_fp$MH,"d2i_PUBKEY_fp");
    }
    public static MemoryAddress d2i_PUBKEY_fp ( Addressable fp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.d2i_PUBKEY_fp$MH, "d2i_PUBKEY_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$634.d2i_X509_bio$MH,"d2i_X509_bio");
    }
    public static MemoryAddress d2i_X509_bio ( Addressable bp,  Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.d2i_X509_bio$MH, "d2i_X509_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$634.i2d_X509_bio$MH,"i2d_X509_bio");
    }
    public static int i2d_X509_bio ( Addressable bp,  Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.i2d_X509_bio$MH, "i2d_X509_bio");
        try {
            return (int)mh$.invokeExact(bp, x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_CRL_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$635.d2i_X509_CRL_bio$MH,"d2i_X509_CRL_bio");
    }
    public static MemoryAddress d2i_X509_CRL_bio ( Addressable bp,  Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.d2i_X509_CRL_bio$MH, "d2i_X509_CRL_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_CRL_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$635.i2d_X509_CRL_bio$MH,"i2d_X509_CRL_bio");
    }
    public static int i2d_X509_CRL_bio ( Addressable bp,  Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.i2d_X509_CRL_bio$MH, "i2d_X509_CRL_bio");
        try {
            return (int)mh$.invokeExact(bp, crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_REQ_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$635.d2i_X509_REQ_bio$MH,"d2i_X509_REQ_bio");
    }
    public static MemoryAddress d2i_X509_REQ_bio ( Addressable bp,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.d2i_X509_REQ_bio$MH, "d2i_X509_REQ_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_REQ_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$635.i2d_X509_REQ_bio$MH,"i2d_X509_REQ_bio");
    }
    public static int i2d_X509_REQ_bio ( Addressable bp,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.i2d_X509_REQ_bio$MH, "i2d_X509_REQ_bio");
        try {
            return (int)mh$.invokeExact(bp, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSAPrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$635.d2i_RSAPrivateKey_bio$MH,"d2i_RSAPrivateKey_bio");
    }
    public static MemoryAddress d2i_RSAPrivateKey_bio ( Addressable bp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.d2i_RSAPrivateKey_bio$MH, "d2i_RSAPrivateKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSAPrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$635.i2d_RSAPrivateKey_bio$MH,"i2d_RSAPrivateKey_bio");
    }
    public static int i2d_RSAPrivateKey_bio ( Addressable bp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.i2d_RSAPrivateKey_bio$MH, "i2d_RSAPrivateKey_bio");
        try {
            return (int)mh$.invokeExact(bp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSAPublicKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$636.d2i_RSAPublicKey_bio$MH,"d2i_RSAPublicKey_bio");
    }
    public static MemoryAddress d2i_RSAPublicKey_bio ( Addressable bp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.d2i_RSAPublicKey_bio$MH, "d2i_RSAPublicKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSAPublicKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$636.i2d_RSAPublicKey_bio$MH,"i2d_RSAPublicKey_bio");
    }
    public static int i2d_RSAPublicKey_bio ( Addressable bp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.i2d_RSAPublicKey_bio$MH, "i2d_RSAPublicKey_bio");
        try {
            return (int)mh$.invokeExact(bp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSA_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$636.d2i_RSA_PUBKEY_bio$MH,"d2i_RSA_PUBKEY_bio");
    }
    public static MemoryAddress d2i_RSA_PUBKEY_bio ( Addressable bp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.d2i_RSA_PUBKEY_bio$MH, "d2i_RSA_PUBKEY_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSA_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$636.i2d_RSA_PUBKEY_bio$MH,"i2d_RSA_PUBKEY_bio");
    }
    public static int i2d_RSA_PUBKEY_bio ( Addressable bp,  Addressable rsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.i2d_RSA_PUBKEY_bio$MH, "i2d_RSA_PUBKEY_bio");
        try {
            return (int)mh$.invokeExact(bp, rsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DSA_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$636.d2i_DSA_PUBKEY_bio$MH,"d2i_DSA_PUBKEY_bio");
    }
    public static MemoryAddress d2i_DSA_PUBKEY_bio ( Addressable bp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.d2i_DSA_PUBKEY_bio$MH, "d2i_DSA_PUBKEY_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DSA_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$636.i2d_DSA_PUBKEY_bio$MH,"i2d_DSA_PUBKEY_bio");
    }
    public static int i2d_DSA_PUBKEY_bio ( Addressable bp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.i2d_DSA_PUBKEY_bio$MH, "i2d_DSA_PUBKEY_bio");
        try {
            return (int)mh$.invokeExact(bp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DSAPrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$637.d2i_DSAPrivateKey_bio$MH,"d2i_DSAPrivateKey_bio");
    }
    public static MemoryAddress d2i_DSAPrivateKey_bio ( Addressable bp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.d2i_DSAPrivateKey_bio$MH, "d2i_DSAPrivateKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DSAPrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$637.i2d_DSAPrivateKey_bio$MH,"i2d_DSAPrivateKey_bio");
    }
    public static int i2d_DSAPrivateKey_bio ( Addressable bp,  Addressable dsa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.i2d_DSAPrivateKey_bio$MH, "i2d_DSAPrivateKey_bio");
        try {
            return (int)mh$.invokeExact(bp, dsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_EC_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$637.d2i_EC_PUBKEY_bio$MH,"d2i_EC_PUBKEY_bio");
    }
    public static MemoryAddress d2i_EC_PUBKEY_bio ( Addressable bp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.d2i_EC_PUBKEY_bio$MH, "d2i_EC_PUBKEY_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_EC_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$637.i2d_EC_PUBKEY_bio$MH,"i2d_EC_PUBKEY_bio");
    }
    public static int i2d_EC_PUBKEY_bio ( Addressable bp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.i2d_EC_PUBKEY_bio$MH, "i2d_EC_PUBKEY_bio");
        try {
            return (int)mh$.invokeExact(bp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ECPrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$637.d2i_ECPrivateKey_bio$MH,"d2i_ECPrivateKey_bio");
    }
    public static MemoryAddress d2i_ECPrivateKey_bio ( Addressable bp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.d2i_ECPrivateKey_bio$MH, "d2i_ECPrivateKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ECPrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$637.i2d_ECPrivateKey_bio$MH,"i2d_ECPrivateKey_bio");
    }
    public static int i2d_ECPrivateKey_bio ( Addressable bp,  Addressable eckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.i2d_ECPrivateKey_bio$MH, "i2d_ECPrivateKey_bio");
        try {
            return (int)mh$.invokeExact(bp, eckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$638.d2i_PKCS8_bio$MH,"d2i_PKCS8_bio");
    }
    public static MemoryAddress d2i_PKCS8_bio ( Addressable bp,  Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.d2i_PKCS8_bio$MH, "d2i_PKCS8_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$638.i2d_PKCS8_bio$MH,"i2d_PKCS8_bio");
    }
    public static int i2d_PKCS8_bio ( Addressable bp,  Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.i2d_PKCS8_bio$MH, "i2d_PKCS8_bio");
        try {
            return (int)mh$.invokeExact(bp, p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8_PRIV_KEY_INFO_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$638.d2i_PKCS8_PRIV_KEY_INFO_bio$MH,"d2i_PKCS8_PRIV_KEY_INFO_bio");
    }
    public static MemoryAddress d2i_PKCS8_PRIV_KEY_INFO_bio ( Addressable bp,  Addressable p8inf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.d2i_PKCS8_PRIV_KEY_INFO_bio$MH, "d2i_PKCS8_PRIV_KEY_INFO_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, p8inf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8_PRIV_KEY_INFO_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$638.i2d_PKCS8_PRIV_KEY_INFO_bio$MH,"i2d_PKCS8_PRIV_KEY_INFO_bio");
    }
    public static int i2d_PKCS8_PRIV_KEY_INFO_bio ( Addressable bp,  Addressable p8inf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.i2d_PKCS8_PRIV_KEY_INFO_bio$MH, "i2d_PKCS8_PRIV_KEY_INFO_bio");
        try {
            return (int)mh$.invokeExact(bp, p8inf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8PrivateKeyInfo_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$638.i2d_PKCS8PrivateKeyInfo_bio$MH,"i2d_PKCS8PrivateKeyInfo_bio");
    }
    public static int i2d_PKCS8PrivateKeyInfo_bio ( Addressable bp,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.i2d_PKCS8PrivateKeyInfo_bio$MH, "i2d_PKCS8PrivateKeyInfo_bio");
        try {
            return (int)mh$.invokeExact(bp, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$638.i2d_PrivateKey_bio$MH,"i2d_PrivateKey_bio");
    }
    public static int i2d_PrivateKey_bio ( Addressable bp,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.i2d_PrivateKey_bio$MH, "i2d_PrivateKey_bio");
        try {
            return (int)mh$.invokeExact(bp, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$639.d2i_PrivateKey_bio$MH,"d2i_PrivateKey_bio");
    }
    public static MemoryAddress d2i_PrivateKey_bio ( Addressable bp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.d2i_PrivateKey_bio$MH, "d2i_PrivateKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$639.i2d_PUBKEY_bio$MH,"i2d_PUBKEY_bio");
    }
    public static int i2d_PUBKEY_bio ( Addressable bp,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.i2d_PUBKEY_bio$MH, "i2d_PUBKEY_bio");
        try {
            return (int)mh$.invokeExact(bp, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PUBKEY_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$639.d2i_PUBKEY_bio$MH,"d2i_PUBKEY_bio");
    }
    public static MemoryAddress d2i_PUBKEY_bio ( Addressable bp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.d2i_PUBKEY_bio$MH, "d2i_PUBKEY_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$639.X509_dup$MH,"X509_dup");
    }
    public static MemoryAddress X509_dup ( Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.X509_dup$MH, "X509_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$639.X509_ATTRIBUTE_dup$MH,"X509_ATTRIBUTE_dup");
    }
    public static MemoryAddress X509_ATTRIBUTE_dup ( Addressable xa) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.X509_ATTRIBUTE_dup$MH, "X509_ATTRIBUTE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$639.X509_EXTENSION_dup$MH,"X509_EXTENSION_dup");
    }
    public static MemoryAddress X509_EXTENSION_dup ( Addressable ex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.X509_EXTENSION_dup$MH, "X509_EXTENSION_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$640.X509_CRL_dup$MH,"X509_CRL_dup");
    }
    public static MemoryAddress X509_CRL_dup ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.X509_CRL_dup$MH, "X509_CRL_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$640.X509_REVOKED_dup$MH,"X509_REVOKED_dup");
    }
    public static MemoryAddress X509_REVOKED_dup ( Addressable rev) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.X509_REVOKED_dup$MH, "X509_REVOKED_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$640.X509_REQ_dup$MH,"X509_REQ_dup");
    }
    public static MemoryAddress X509_REQ_dup ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.X509_REQ_dup$MH, "X509_REQ_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$640.X509_ALGOR_dup$MH,"X509_ALGOR_dup");
    }
    public static MemoryAddress X509_ALGOR_dup ( Addressable xn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.X509_ALGOR_dup$MH, "X509_ALGOR_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_set0$MH() {
        return RuntimeHelper.requireNonNull(constants$640.X509_ALGOR_set0$MH,"X509_ALGOR_set0");
    }
    public static int X509_ALGOR_set0 ( Addressable alg,  Addressable aobj,  int ptype,  Addressable pval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.X509_ALGOR_set0$MH, "X509_ALGOR_set0");
        try {
            return (int)mh$.invokeExact(alg, aobj, ptype, pval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$640.X509_ALGOR_get0$MH,"X509_ALGOR_get0");
    }
    public static void X509_ALGOR_get0 ( Addressable paobj,  Addressable pptype,  Addressable ppval,  Addressable algor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.X509_ALGOR_get0$MH, "X509_ALGOR_get0");
        try {
            mh$.invokeExact(paobj, pptype, ppval, algor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_set_md$MH() {
        return RuntimeHelper.requireNonNull(constants$641.X509_ALGOR_set_md$MH,"X509_ALGOR_set_md");
    }
    public static void X509_ALGOR_set_md ( Addressable alg,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$641.X509_ALGOR_set_md$MH, "X509_ALGOR_set_md");
        try {
            mh$.invokeExact(alg, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$641.X509_ALGOR_cmp$MH,"X509_ALGOR_cmp");
    }
    public static int X509_ALGOR_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$641.X509_ALGOR_cmp$MH, "X509_ALGOR_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$641.X509_ALGOR_copy$MH,"X509_ALGOR_copy");
    }
    public static int X509_ALGOR_copy ( Addressable dest,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$641.X509_ALGOR_copy$MH, "X509_ALGOR_copy");
        try {
            return (int)mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$641.X509_NAME_dup$MH,"X509_NAME_dup");
    }
    public static MemoryAddress X509_NAME_dup ( Addressable xn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$641.X509_NAME_dup$MH, "X509_NAME_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$641.X509_NAME_ENTRY_dup$MH,"X509_NAME_ENTRY_dup");
    }
    public static MemoryAddress X509_NAME_ENTRY_dup ( Addressable ne) {
        var mh$ = RuntimeHelper.requireNonNull(constants$641.X509_NAME_ENTRY_dup$MH, "X509_NAME_ENTRY_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_cmp_time$MH() {
        return RuntimeHelper.requireNonNull(constants$641.X509_cmp_time$MH,"X509_cmp_time");
    }
    public static int X509_cmp_time ( Addressable s,  Addressable t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$641.X509_cmp_time$MH, "X509_cmp_time");
        try {
            return (int)mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_cmp_current_time$MH() {
        return RuntimeHelper.requireNonNull(constants$642.X509_cmp_current_time$MH,"X509_cmp_current_time");
    }
    public static int X509_cmp_current_time ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$642.X509_cmp_current_time$MH, "X509_cmp_current_time");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_time_adj$MH() {
        return RuntimeHelper.requireNonNull(constants$642.X509_time_adj$MH,"X509_time_adj");
    }
    public static MemoryAddress X509_time_adj ( Addressable s,  long adj,  Addressable t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$642.X509_time_adj$MH, "X509_time_adj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, adj, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_time_adj_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$642.X509_time_adj_ex$MH,"X509_time_adj_ex");
    }
    public static MemoryAddress X509_time_adj_ex ( Addressable s,  int offset_day,  long offset_sec,  Addressable t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$642.X509_time_adj_ex$MH, "X509_time_adj_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, offset_day, offset_sec, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_gmtime_adj$MH() {
        return RuntimeHelper.requireNonNull(constants$642.X509_gmtime_adj$MH,"X509_gmtime_adj");
    }
    public static MemoryAddress X509_gmtime_adj ( Addressable s,  long adj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$642.X509_gmtime_adj$MH, "X509_gmtime_adj");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, adj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_default_cert_area$MH() {
        return RuntimeHelper.requireNonNull(constants$642.X509_get_default_cert_area$MH,"X509_get_default_cert_area");
    }
    public static MemoryAddress X509_get_default_cert_area () {
        var mh$ = RuntimeHelper.requireNonNull(constants$642.X509_get_default_cert_area$MH, "X509_get_default_cert_area");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_default_cert_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$642.X509_get_default_cert_dir$MH,"X509_get_default_cert_dir");
    }
    public static MemoryAddress X509_get_default_cert_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$642.X509_get_default_cert_dir$MH, "X509_get_default_cert_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_default_cert_file$MH() {
        return RuntimeHelper.requireNonNull(constants$643.X509_get_default_cert_file$MH,"X509_get_default_cert_file");
    }
    public static MemoryAddress X509_get_default_cert_file () {
        var mh$ = RuntimeHelper.requireNonNull(constants$643.X509_get_default_cert_file$MH, "X509_get_default_cert_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_default_cert_dir_env$MH() {
        return RuntimeHelper.requireNonNull(constants$643.X509_get_default_cert_dir_env$MH,"X509_get_default_cert_dir_env");
    }
    public static MemoryAddress X509_get_default_cert_dir_env () {
        var mh$ = RuntimeHelper.requireNonNull(constants$643.X509_get_default_cert_dir_env$MH, "X509_get_default_cert_dir_env");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_default_cert_file_env$MH() {
        return RuntimeHelper.requireNonNull(constants$643.X509_get_default_cert_file_env$MH,"X509_get_default_cert_file_env");
    }
    public static MemoryAddress X509_get_default_cert_file_env () {
        var mh$ = RuntimeHelper.requireNonNull(constants$643.X509_get_default_cert_file_env$MH, "X509_get_default_cert_file_env");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_default_private_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$643.X509_get_default_private_dir$MH,"X509_get_default_private_dir");
    }
    public static MemoryAddress X509_get_default_private_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$643.X509_get_default_private_dir$MH, "X509_get_default_private_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_to_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$643.X509_to_X509_REQ$MH,"X509_to_X509_REQ");
    }
    public static MemoryAddress X509_to_X509_REQ ( Addressable x,  Addressable pkey,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$643.X509_to_X509_REQ$MH, "X509_to_X509_REQ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, pkey, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_to_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$643.X509_REQ_to_X509$MH,"X509_REQ_to_X509");
    }
    public static MemoryAddress X509_REQ_to_X509 ( Addressable r,  int days,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$643.X509_REQ_to_X509$MH, "X509_REQ_to_X509");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(r, days, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_new$MH() {
        return RuntimeHelper.requireNonNull(constants$644.X509_ALGOR_new$MH,"X509_ALGOR_new");
    }
    public static MemoryAddress X509_ALGOR_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$644.X509_ALGOR_new$MH, "X509_ALGOR_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ALGOR_free$MH() {
        return RuntimeHelper.requireNonNull(constants$644.X509_ALGOR_free$MH,"X509_ALGOR_free");
    }
    public static void X509_ALGOR_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$644.X509_ALGOR_free$MH, "X509_ALGOR_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_ALGOR$MH() {
        return RuntimeHelper.requireNonNull(constants$644.d2i_X509_ALGOR$MH,"d2i_X509_ALGOR");
    }
    public static MemoryAddress d2i_X509_ALGOR ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$644.d2i_X509_ALGOR$MH, "d2i_X509_ALGOR");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_ALGOR$MH() {
        return RuntimeHelper.requireNonNull(constants$644.i2d_X509_ALGOR$MH,"i2d_X509_ALGOR");
    }
    public static int i2d_X509_ALGOR ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$644.i2d_X509_ALGOR$MH, "i2d_X509_ALGOR");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_ALGORS$MH() {
        return RuntimeHelper.requireNonNull(constants$644.d2i_X509_ALGORS$MH,"d2i_X509_ALGORS");
    }
    public static MemoryAddress d2i_X509_ALGORS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$644.d2i_X509_ALGORS$MH, "d2i_X509_ALGORS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_ALGORS$MH() {
        return RuntimeHelper.requireNonNull(constants$644.i2d_X509_ALGORS$MH,"i2d_X509_ALGORS");
    }
    public static int i2d_X509_ALGORS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$644.i2d_X509_ALGORS$MH, "i2d_X509_ALGORS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_VAL_new$MH() {
        return RuntimeHelper.requireNonNull(constants$645.X509_VAL_new$MH,"X509_VAL_new");
    }
    public static MemoryAddress X509_VAL_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$645.X509_VAL_new$MH, "X509_VAL_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_VAL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$645.X509_VAL_free$MH,"X509_VAL_free");
    }
    public static void X509_VAL_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$645.X509_VAL_free$MH, "X509_VAL_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_VAL$MH() {
        return RuntimeHelper.requireNonNull(constants$645.d2i_X509_VAL$MH,"d2i_X509_VAL");
    }
    public static MemoryAddress d2i_X509_VAL ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$645.d2i_X509_VAL$MH, "d2i_X509_VAL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_VAL$MH() {
        return RuntimeHelper.requireNonNull(constants$645.i2d_X509_VAL$MH,"i2d_X509_VAL");
    }
    public static int i2d_X509_VAL ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$645.i2d_X509_VAL$MH, "i2d_X509_VAL");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$645.X509_PUBKEY_new$MH,"X509_PUBKEY_new");
    }
    public static MemoryAddress X509_PUBKEY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$645.X509_PUBKEY_new$MH, "X509_PUBKEY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$645.X509_PUBKEY_free$MH,"X509_PUBKEY_free");
    }
    public static void X509_PUBKEY_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$645.X509_PUBKEY_free$MH, "X509_PUBKEY_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$646.d2i_X509_PUBKEY$MH,"d2i_X509_PUBKEY");
    }
    public static MemoryAddress d2i_X509_PUBKEY ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$646.d2i_X509_PUBKEY$MH, "d2i_X509_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$646.i2d_X509_PUBKEY$MH,"i2d_X509_PUBKEY");
    }
    public static int i2d_X509_PUBKEY ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$646.i2d_X509_PUBKEY$MH, "i2d_X509_PUBKEY");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_set$MH() {
        return RuntimeHelper.requireNonNull(constants$646.X509_PUBKEY_set$MH,"X509_PUBKEY_set");
    }
    public static int X509_PUBKEY_set ( Addressable x,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$646.X509_PUBKEY_set$MH, "X509_PUBKEY_set");
        try {
            return (int)mh$.invokeExact(x, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$646.X509_PUBKEY_get0$MH,"X509_PUBKEY_get0");
    }
    public static MemoryAddress X509_PUBKEY_get0 ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$646.X509_PUBKEY_get0$MH, "X509_PUBKEY_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_get$MH() {
        return RuntimeHelper.requireNonNull(constants$646.X509_PUBKEY_get$MH,"X509_PUBKEY_get");
    }
    public static MemoryAddress X509_PUBKEY_get ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$646.X509_PUBKEY_get$MH, "X509_PUBKEY_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_pubkey_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$646.X509_get_pubkey_parameters$MH,"X509_get_pubkey_parameters");
    }
    public static int X509_get_pubkey_parameters ( Addressable pkey,  Addressable chain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$646.X509_get_pubkey_parameters$MH, "X509_get_pubkey_parameters");
        try {
            return (int)mh$.invokeExact(pkey, chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_pathlen$MH() {
        return RuntimeHelper.requireNonNull(constants$647.X509_get_pathlen$MH,"X509_get_pathlen");
    }
    public static long X509_get_pathlen ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$647.X509_get_pathlen$MH, "X509_get_pathlen");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$647.i2d_PUBKEY$MH,"i2d_PUBKEY");
    }
    public static int i2d_PUBKEY ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$647.i2d_PUBKEY$MH, "i2d_PUBKEY");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$647.d2i_PUBKEY$MH,"d2i_PUBKEY");
    }
    public static MemoryAddress d2i_PUBKEY ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$647.d2i_PUBKEY$MH, "d2i_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_RSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$647.i2d_RSA_PUBKEY$MH,"i2d_RSA_PUBKEY");
    }
    public static int i2d_RSA_PUBKEY ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$647.i2d_RSA_PUBKEY$MH, "i2d_RSA_PUBKEY");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_RSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$647.d2i_RSA_PUBKEY$MH,"d2i_RSA_PUBKEY");
    }
    public static MemoryAddress d2i_RSA_PUBKEY ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$647.d2i_RSA_PUBKEY$MH, "d2i_RSA_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_DSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$647.i2d_DSA_PUBKEY$MH,"i2d_DSA_PUBKEY");
    }
    public static int i2d_DSA_PUBKEY ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$647.i2d_DSA_PUBKEY$MH, "i2d_DSA_PUBKEY");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_DSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$648.d2i_DSA_PUBKEY$MH,"d2i_DSA_PUBKEY");
    }
    public static MemoryAddress d2i_DSA_PUBKEY ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$648.d2i_DSA_PUBKEY$MH, "d2i_DSA_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_EC_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$648.i2d_EC_PUBKEY$MH,"i2d_EC_PUBKEY");
    }
    public static int i2d_EC_PUBKEY ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$648.i2d_EC_PUBKEY$MH, "i2d_EC_PUBKEY");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_EC_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$648.d2i_EC_PUBKEY$MH,"d2i_EC_PUBKEY");
    }
    public static MemoryAddress d2i_EC_PUBKEY ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$648.d2i_EC_PUBKEY$MH, "d2i_EC_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_SIG_new$MH() {
        return RuntimeHelper.requireNonNull(constants$648.X509_SIG_new$MH,"X509_SIG_new");
    }
    public static MemoryAddress X509_SIG_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$648.X509_SIG_new$MH, "X509_SIG_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_SIG_free$MH() {
        return RuntimeHelper.requireNonNull(constants$648.X509_SIG_free$MH,"X509_SIG_free");
    }
    public static void X509_SIG_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$648.X509_SIG_free$MH, "X509_SIG_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_SIG$MH() {
        return RuntimeHelper.requireNonNull(constants$648.d2i_X509_SIG$MH,"d2i_X509_SIG");
    }
    public static MemoryAddress d2i_X509_SIG ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$648.d2i_X509_SIG$MH, "d2i_X509_SIG");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_SIG$MH() {
        return RuntimeHelper.requireNonNull(constants$649.i2d_X509_SIG$MH,"i2d_X509_SIG");
    }
    public static int i2d_X509_SIG ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$649.i2d_X509_SIG$MH, "i2d_X509_SIG");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_SIG_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$649.X509_SIG_get0$MH,"X509_SIG_get0");
    }
    public static void X509_SIG_get0 ( Addressable sig,  Addressable palg,  Addressable pdigest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$649.X509_SIG_get0$MH, "X509_SIG_get0");
        try {
            mh$.invokeExact(sig, palg, pdigest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_SIG_getm$MH() {
        return RuntimeHelper.requireNonNull(constants$649.X509_SIG_getm$MH,"X509_SIG_getm");
    }
    public static void X509_SIG_getm ( Addressable sig,  Addressable palg,  Addressable pdigest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$649.X509_SIG_getm$MH, "X509_SIG_getm");
        try {
            mh$.invokeExact(sig, palg, pdigest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_INFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$649.X509_REQ_INFO_new$MH,"X509_REQ_INFO_new");
    }
    public static MemoryAddress X509_REQ_INFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$649.X509_REQ_INFO_new$MH, "X509_REQ_INFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_INFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$649.X509_REQ_INFO_free$MH,"X509_REQ_INFO_free");
    }
    public static void X509_REQ_INFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$649.X509_REQ_INFO_free$MH, "X509_REQ_INFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_REQ_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$649.d2i_X509_REQ_INFO$MH,"d2i_X509_REQ_INFO");
    }
    public static MemoryAddress d2i_X509_REQ_INFO ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$649.d2i_X509_REQ_INFO$MH, "d2i_X509_REQ_INFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_REQ_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$650.i2d_X509_REQ_INFO$MH,"i2d_X509_REQ_INFO");
    }
    public static int i2d_X509_REQ_INFO ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$650.i2d_X509_REQ_INFO$MH, "i2d_X509_REQ_INFO");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_new$MH() {
        return RuntimeHelper.requireNonNull(constants$650.X509_REQ_new$MH,"X509_REQ_new");
    }
    public static MemoryAddress X509_REQ_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$650.X509_REQ_new$MH, "X509_REQ_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_free$MH() {
        return RuntimeHelper.requireNonNull(constants$650.X509_REQ_free$MH,"X509_REQ_free");
    }
    public static void X509_REQ_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$650.X509_REQ_free$MH, "X509_REQ_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$650.d2i_X509_REQ$MH,"d2i_X509_REQ");
    }
    public static MemoryAddress d2i_X509_REQ ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$650.d2i_X509_REQ$MH, "d2i_X509_REQ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$650.i2d_X509_REQ$MH,"i2d_X509_REQ");
    }
    public static int i2d_X509_REQ ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$650.i2d_X509_REQ$MH, "i2d_X509_REQ");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$650.X509_ATTRIBUTE_new$MH,"X509_ATTRIBUTE_new");
    }
    public static MemoryAddress X509_ATTRIBUTE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$650.X509_ATTRIBUTE_new$MH, "X509_ATTRIBUTE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$651.X509_ATTRIBUTE_free$MH,"X509_ATTRIBUTE_free");
    }
    public static void X509_ATTRIBUTE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$651.X509_ATTRIBUTE_free$MH, "X509_ATTRIBUTE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_ATTRIBUTE$MH() {
        return RuntimeHelper.requireNonNull(constants$651.d2i_X509_ATTRIBUTE$MH,"d2i_X509_ATTRIBUTE");
    }
    public static MemoryAddress d2i_X509_ATTRIBUTE ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$651.d2i_X509_ATTRIBUTE$MH, "d2i_X509_ATTRIBUTE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_ATTRIBUTE$MH() {
        return RuntimeHelper.requireNonNull(constants$651.i2d_X509_ATTRIBUTE$MH,"i2d_X509_ATTRIBUTE");
    }
    public static int i2d_X509_ATTRIBUTE ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$651.i2d_X509_ATTRIBUTE$MH, "i2d_X509_ATTRIBUTE");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_create$MH() {
        return RuntimeHelper.requireNonNull(constants$651.X509_ATTRIBUTE_create$MH,"X509_ATTRIBUTE_create");
    }
    public static MemoryAddress X509_ATTRIBUTE_create ( int nid,  int atrtype,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$651.X509_ATTRIBUTE_create$MH, "X509_ATTRIBUTE_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid, atrtype, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_new$MH() {
        return RuntimeHelper.requireNonNull(constants$651.X509_EXTENSION_new$MH,"X509_EXTENSION_new");
    }
    public static MemoryAddress X509_EXTENSION_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$651.X509_EXTENSION_new$MH, "X509_EXTENSION_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_free$MH() {
        return RuntimeHelper.requireNonNull(constants$651.X509_EXTENSION_free$MH,"X509_EXTENSION_free");
    }
    public static void X509_EXTENSION_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$651.X509_EXTENSION_free$MH, "X509_EXTENSION_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_EXTENSION$MH() {
        return RuntimeHelper.requireNonNull(constants$652.d2i_X509_EXTENSION$MH,"d2i_X509_EXTENSION");
    }
    public static MemoryAddress d2i_X509_EXTENSION ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$652.d2i_X509_EXTENSION$MH, "d2i_X509_EXTENSION");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_EXTENSION$MH() {
        return RuntimeHelper.requireNonNull(constants$652.i2d_X509_EXTENSION$MH,"i2d_X509_EXTENSION");
    }
    public static int i2d_X509_EXTENSION ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$652.i2d_X509_EXTENSION$MH, "i2d_X509_EXTENSION");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_EXTENSIONS$MH() {
        return RuntimeHelper.requireNonNull(constants$652.d2i_X509_EXTENSIONS$MH,"d2i_X509_EXTENSIONS");
    }
    public static MemoryAddress d2i_X509_EXTENSIONS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$652.d2i_X509_EXTENSIONS$MH, "d2i_X509_EXTENSIONS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_EXTENSIONS$MH() {
        return RuntimeHelper.requireNonNull(constants$652.i2d_X509_EXTENSIONS$MH,"i2d_X509_EXTENSIONS");
    }
    public static int i2d_X509_EXTENSIONS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$652.i2d_X509_EXTENSIONS$MH, "i2d_X509_EXTENSIONS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$652.X509_NAME_ENTRY_new$MH,"X509_NAME_ENTRY_new");
    }
    public static MemoryAddress X509_NAME_ENTRY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$652.X509_NAME_ENTRY_new$MH, "X509_NAME_ENTRY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$652.X509_NAME_ENTRY_free$MH,"X509_NAME_ENTRY_free");
    }
    public static void X509_NAME_ENTRY_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$652.X509_NAME_ENTRY_free$MH, "X509_NAME_ENTRY_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_NAME_ENTRY$MH() {
        return RuntimeHelper.requireNonNull(constants$653.d2i_X509_NAME_ENTRY$MH,"d2i_X509_NAME_ENTRY");
    }
    public static MemoryAddress d2i_X509_NAME_ENTRY ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$653.d2i_X509_NAME_ENTRY$MH, "d2i_X509_NAME_ENTRY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_NAME_ENTRY$MH() {
        return RuntimeHelper.requireNonNull(constants$653.i2d_X509_NAME_ENTRY$MH,"i2d_X509_NAME_ENTRY");
    }
    public static int i2d_X509_NAME_ENTRY ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$653.i2d_X509_NAME_ENTRY$MH, "i2d_X509_NAME_ENTRY");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_new$MH() {
        return RuntimeHelper.requireNonNull(constants$653.X509_NAME_new$MH,"X509_NAME_new");
    }
    public static MemoryAddress X509_NAME_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$653.X509_NAME_new$MH, "X509_NAME_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_free$MH() {
        return RuntimeHelper.requireNonNull(constants$653.X509_NAME_free$MH,"X509_NAME_free");
    }
    public static void X509_NAME_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$653.X509_NAME_free$MH, "X509_NAME_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$653.d2i_X509_NAME$MH,"d2i_X509_NAME");
    }
    public static MemoryAddress d2i_X509_NAME ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$653.d2i_X509_NAME$MH, "d2i_X509_NAME");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_NAME$MH() {
        return RuntimeHelper.requireNonNull(constants$653.i2d_X509_NAME$MH,"i2d_X509_NAME");
    }
    public static int i2d_X509_NAME ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$653.i2d_X509_NAME$MH, "i2d_X509_NAME");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_set$MH() {
        return RuntimeHelper.requireNonNull(constants$654.X509_NAME_set$MH,"X509_NAME_set");
    }
    public static int X509_NAME_set ( Addressable xn,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$654.X509_NAME_set$MH, "X509_NAME_set");
        try {
            return (int)mh$.invokeExact(xn, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CINF_new$MH() {
        return RuntimeHelper.requireNonNull(constants$654.X509_CINF_new$MH,"X509_CINF_new");
    }
    public static MemoryAddress X509_CINF_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$654.X509_CINF_new$MH, "X509_CINF_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CINF_free$MH() {
        return RuntimeHelper.requireNonNull(constants$654.X509_CINF_free$MH,"X509_CINF_free");
    }
    public static void X509_CINF_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$654.X509_CINF_free$MH, "X509_CINF_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_CINF$MH() {
        return RuntimeHelper.requireNonNull(constants$654.d2i_X509_CINF$MH,"d2i_X509_CINF");
    }
    public static MemoryAddress d2i_X509_CINF ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$654.d2i_X509_CINF$MH, "d2i_X509_CINF");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_CINF$MH() {
        return RuntimeHelper.requireNonNull(constants$654.i2d_X509_CINF$MH,"i2d_X509_CINF");
    }
    public static int i2d_X509_CINF ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$654.i2d_X509_CINF$MH, "i2d_X509_CINF");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_new$MH() {
        return RuntimeHelper.requireNonNull(constants$654.X509_new$MH,"X509_new");
    }
    public static MemoryAddress X509_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$654.X509_new$MH, "X509_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_free$MH() {
        return RuntimeHelper.requireNonNull(constants$655.X509_free$MH,"X509_free");
    }
    public static void X509_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$655.X509_free$MH, "X509_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$655.d2i_X509$MH,"d2i_X509");
    }
    public static MemoryAddress d2i_X509 ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$655.d2i_X509$MH, "d2i_X509");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$655.i2d_X509$MH,"i2d_X509");
    }
    public static int i2d_X509 ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$655.i2d_X509$MH, "i2d_X509");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CERT_AUX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$655.X509_CERT_AUX_new$MH,"X509_CERT_AUX_new");
    }
    public static MemoryAddress X509_CERT_AUX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$655.X509_CERT_AUX_new$MH, "X509_CERT_AUX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CERT_AUX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$655.X509_CERT_AUX_free$MH,"X509_CERT_AUX_free");
    }
    public static void X509_CERT_AUX_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$655.X509_CERT_AUX_free$MH, "X509_CERT_AUX_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_CERT_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$655.d2i_X509_CERT_AUX$MH,"d2i_X509_CERT_AUX");
    }
    public static MemoryAddress d2i_X509_CERT_AUX ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$655.d2i_X509_CERT_AUX$MH, "d2i_X509_CERT_AUX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_CERT_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$656.i2d_X509_CERT_AUX$MH,"i2d_X509_CERT_AUX");
    }
    public static int i2d_X509_CERT_AUX ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$656.i2d_X509_CERT_AUX$MH, "i2d_X509_CERT_AUX");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$656.X509_set_ex_data$MH,"X509_set_ex_data");
    }
    public static int X509_set_ex_data ( Addressable r,  int idx,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$656.X509_set_ex_data$MH, "X509_set_ex_data");
        try {
            return (int)mh$.invokeExact(r, idx, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$656.X509_get_ex_data$MH,"X509_get_ex_data");
    }
    public static MemoryAddress X509_get_ex_data ( Addressable r,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$656.X509_get_ex_data$MH, "X509_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(r, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$656.i2d_X509_AUX$MH,"i2d_X509_AUX");
    }
    public static int i2d_X509_AUX ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$656.i2d_X509_AUX$MH, "i2d_X509_AUX");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$656.d2i_X509_AUX$MH,"d2i_X509_AUX");
    }
    public static MemoryAddress d2i_X509_AUX ( Addressable a,  Addressable pp,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$656.d2i_X509_AUX$MH, "d2i_X509_AUX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_re_X509_tbs$MH() {
        return RuntimeHelper.requireNonNull(constants$656.i2d_re_X509_tbs$MH,"i2d_re_X509_tbs");
    }
    public static int i2d_re_X509_tbs ( Addressable x,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$656.i2d_re_X509_tbs$MH, "i2d_re_X509_tbs");
        try {
            return (int)mh$.invokeExact(x, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_SIG_INFO_get$MH() {
        return RuntimeHelper.requireNonNull(constants$657.X509_SIG_INFO_get$MH,"X509_SIG_INFO_get");
    }
    public static int X509_SIG_INFO_get ( Addressable siginf,  Addressable mdnid,  Addressable pknid,  Addressable secbits,  Addressable flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$657.X509_SIG_INFO_get$MH, "X509_SIG_INFO_get");
        try {
            return (int)mh$.invokeExact(siginf, mdnid, pknid, secbits, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_SIG_INFO_set$MH() {
        return RuntimeHelper.requireNonNull(constants$657.X509_SIG_INFO_set$MH,"X509_SIG_INFO_set");
    }
    public static void X509_SIG_INFO_set ( Addressable siginf,  int mdnid,  int pknid,  int secbits,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$657.X509_SIG_INFO_set$MH, "X509_SIG_INFO_set");
        try {
            mh$.invokeExact(siginf, mdnid, pknid, secbits, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_signature_info$MH() {
        return RuntimeHelper.requireNonNull(constants$657.X509_get_signature_info$MH,"X509_get_signature_info");
    }
    public static int X509_get_signature_info ( Addressable x,  Addressable mdnid,  Addressable pknid,  Addressable secbits,  Addressable flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$657.X509_get_signature_info$MH, "X509_get_signature_info");
        try {
            return (int)mh$.invokeExact(x, mdnid, pknid, secbits, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$657.X509_get0_signature$MH,"X509_get0_signature");
    }
    public static void X509_get0_signature ( Addressable psig,  Addressable palg,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$657.X509_get0_signature$MH, "X509_get0_signature");
        try {
            mh$.invokeExact(psig, palg, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_signature_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$657.X509_get_signature_nid$MH,"X509_get_signature_nid");
    }
    public static int X509_get_signature_nid ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$657.X509_get_signature_nid$MH, "X509_get_signature_nid");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_trusted$MH() {
        return RuntimeHelper.requireNonNull(constants$657.X509_trusted$MH,"X509_trusted");
    }
    public static int X509_trusted ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$657.X509_trusted$MH, "X509_trusted");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_alias_set1$MH() {
        return RuntimeHelper.requireNonNull(constants$658.X509_alias_set1$MH,"X509_alias_set1");
    }
    public static int X509_alias_set1 ( Addressable x,  Addressable name,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$658.X509_alias_set1$MH, "X509_alias_set1");
        try {
            return (int)mh$.invokeExact(x, name, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_keyid_set1$MH() {
        return RuntimeHelper.requireNonNull(constants$658.X509_keyid_set1$MH,"X509_keyid_set1");
    }
    public static int X509_keyid_set1 ( Addressable x,  Addressable id,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$658.X509_keyid_set1$MH, "X509_keyid_set1");
        try {
            return (int)mh$.invokeExact(x, id, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_alias_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$658.X509_alias_get0$MH,"X509_alias_get0");
    }
    public static MemoryAddress X509_alias_get0 ( Addressable x,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$658.X509_alias_get0$MH, "X509_alias_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_keyid_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$658.X509_keyid_get0$MH,"X509_keyid_get0");
    }
    public static MemoryAddress X509_keyid_get0 ( Addressable x,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$658.X509_keyid_get0$MH, "X509_keyid_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_set_default$MH() {
        return RuntimeHelper.requireNonNull(constants$659.X509_TRUST_set_default$MH,"X509_TRUST_set_default");
    }
    public static MemoryAddress X509_TRUST_set_default ( Addressable trust) {
        var mh$ = RuntimeHelper.requireNonNull(constants$659.X509_TRUST_set_default$MH, "X509_TRUST_set_default");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(trust);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_set$MH() {
        return RuntimeHelper.requireNonNull(constants$659.X509_TRUST_set$MH,"X509_TRUST_set");
    }
    public static int X509_TRUST_set ( Addressable t,  int trust) {
        var mh$ = RuntimeHelper.requireNonNull(constants$659.X509_TRUST_set$MH, "X509_TRUST_set");
        try {
            return (int)mh$.invokeExact(t, trust);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_add1_trust_object$MH() {
        return RuntimeHelper.requireNonNull(constants$659.X509_add1_trust_object$MH,"X509_add1_trust_object");
    }
    public static int X509_add1_trust_object ( Addressable x,  Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$659.X509_add1_trust_object$MH, "X509_add1_trust_object");
        try {
            return (int)mh$.invokeExact(x, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_add1_reject_object$MH() {
        return RuntimeHelper.requireNonNull(constants$659.X509_add1_reject_object$MH,"X509_add1_reject_object");
    }
    public static int X509_add1_reject_object ( Addressable x,  Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$659.X509_add1_reject_object$MH, "X509_add1_reject_object");
        try {
            return (int)mh$.invokeExact(x, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_trust_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$659.X509_trust_clear$MH,"X509_trust_clear");
    }
    public static void X509_trust_clear ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$659.X509_trust_clear$MH, "X509_trust_clear");
        try {
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_reject_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$659.X509_reject_clear$MH,"X509_reject_clear");
    }
    public static void X509_reject_clear ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$659.X509_reject_clear$MH, "X509_reject_clear");
        try {
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_trust_objects$MH() {
        return RuntimeHelper.requireNonNull(constants$660.X509_get0_trust_objects$MH,"X509_get0_trust_objects");
    }
    public static MemoryAddress X509_get0_trust_objects ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$660.X509_get0_trust_objects$MH, "X509_get0_trust_objects");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_reject_objects$MH() {
        return RuntimeHelper.requireNonNull(constants$660.X509_get0_reject_objects$MH,"X509_get0_reject_objects");
    }
    public static MemoryAddress X509_get0_reject_objects ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$660.X509_get0_reject_objects$MH, "X509_get0_reject_objects");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_new$MH() {
        return RuntimeHelper.requireNonNull(constants$660.X509_REVOKED_new$MH,"X509_REVOKED_new");
    }
    public static MemoryAddress X509_REVOKED_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$660.X509_REVOKED_new$MH, "X509_REVOKED_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_free$MH() {
        return RuntimeHelper.requireNonNull(constants$660.X509_REVOKED_free$MH,"X509_REVOKED_free");
    }
    public static void X509_REVOKED_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$660.X509_REVOKED_free$MH, "X509_REVOKED_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_REVOKED$MH() {
        return RuntimeHelper.requireNonNull(constants$660.d2i_X509_REVOKED$MH,"d2i_X509_REVOKED");
    }
    public static MemoryAddress d2i_X509_REVOKED ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$660.d2i_X509_REVOKED$MH, "d2i_X509_REVOKED");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_REVOKED$MH() {
        return RuntimeHelper.requireNonNull(constants$660.i2d_X509_REVOKED$MH,"i2d_X509_REVOKED");
    }
    public static int i2d_X509_REVOKED ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$660.i2d_X509_REVOKED$MH, "i2d_X509_REVOKED");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_INFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$661.X509_CRL_INFO_new$MH,"X509_CRL_INFO_new");
    }
    public static MemoryAddress X509_CRL_INFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$661.X509_CRL_INFO_new$MH, "X509_CRL_INFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_INFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$661.X509_CRL_INFO_free$MH,"X509_CRL_INFO_free");
    }
    public static void X509_CRL_INFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$661.X509_CRL_INFO_free$MH, "X509_CRL_INFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_CRL_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$661.d2i_X509_CRL_INFO$MH,"d2i_X509_CRL_INFO");
    }
    public static MemoryAddress d2i_X509_CRL_INFO ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$661.d2i_X509_CRL_INFO$MH, "d2i_X509_CRL_INFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_CRL_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$661.i2d_X509_CRL_INFO$MH,"i2d_X509_CRL_INFO");
    }
    public static int i2d_X509_CRL_INFO ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$661.i2d_X509_CRL_INFO$MH, "i2d_X509_CRL_INFO");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_new$MH() {
        return RuntimeHelper.requireNonNull(constants$661.X509_CRL_new$MH,"X509_CRL_new");
    }
    public static MemoryAddress X509_CRL_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$661.X509_CRL_new$MH, "X509_CRL_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$661.X509_CRL_free$MH,"X509_CRL_free");
    }
    public static void X509_CRL_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$661.X509_CRL_free$MH, "X509_CRL_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_CRL$MH() {
        return RuntimeHelper.requireNonNull(constants$662.d2i_X509_CRL$MH,"d2i_X509_CRL");
    }
    public static MemoryAddress d2i_X509_CRL ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$662.d2i_X509_CRL$MH, "d2i_X509_CRL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509_CRL$MH() {
        return RuntimeHelper.requireNonNull(constants$662.i2d_X509_CRL$MH,"i2d_X509_CRL");
    }
    public static int i2d_X509_CRL ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$662.i2d_X509_CRL$MH, "i2d_X509_CRL");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_add0_revoked$MH() {
        return RuntimeHelper.requireNonNull(constants$662.X509_CRL_add0_revoked$MH,"X509_CRL_add0_revoked");
    }
    public static int X509_CRL_add0_revoked ( Addressable crl,  Addressable rev) {
        var mh$ = RuntimeHelper.requireNonNull(constants$662.X509_CRL_add0_revoked$MH, "X509_CRL_add0_revoked");
        try {
            return (int)mh$.invokeExact(crl, rev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get0_by_serial$MH() {
        return RuntimeHelper.requireNonNull(constants$662.X509_CRL_get0_by_serial$MH,"X509_CRL_get0_by_serial");
    }
    public static int X509_CRL_get0_by_serial ( Addressable crl,  Addressable ret,  Addressable serial) {
        var mh$ = RuntimeHelper.requireNonNull(constants$662.X509_CRL_get0_by_serial$MH, "X509_CRL_get0_by_serial");
        try {
            return (int)mh$.invokeExact(crl, ret, serial);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get0_by_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$662.X509_CRL_get0_by_cert$MH,"X509_CRL_get0_by_cert");
    }
    public static int X509_CRL_get0_by_cert ( Addressable crl,  Addressable ret,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$662.X509_CRL_get0_by_cert$MH, "X509_CRL_get0_by_cert");
        try {
            return (int)mh$.invokeExact(crl, ret, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PKEY_new$MH() {
        return RuntimeHelper.requireNonNull(constants$662.X509_PKEY_new$MH,"X509_PKEY_new");
    }
    public static MemoryAddress X509_PKEY_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$662.X509_PKEY_new$MH, "X509_PKEY_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PKEY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$663.X509_PKEY_free$MH,"X509_PKEY_free");
    }
    public static void X509_PKEY_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$663.X509_PKEY_free$MH, "X509_PKEY_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_new$MH() {
        return RuntimeHelper.requireNonNull(constants$663.NETSCAPE_SPKI_new$MH,"NETSCAPE_SPKI_new");
    }
    public static MemoryAddress NETSCAPE_SPKI_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$663.NETSCAPE_SPKI_new$MH, "NETSCAPE_SPKI_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKI_free$MH() {
        return RuntimeHelper.requireNonNull(constants$663.NETSCAPE_SPKI_free$MH,"NETSCAPE_SPKI_free");
    }
    public static void NETSCAPE_SPKI_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$663.NETSCAPE_SPKI_free$MH, "NETSCAPE_SPKI_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_NETSCAPE_SPKI$MH() {
        return RuntimeHelper.requireNonNull(constants$663.d2i_NETSCAPE_SPKI$MH,"d2i_NETSCAPE_SPKI");
    }
    public static MemoryAddress d2i_NETSCAPE_SPKI ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$663.d2i_NETSCAPE_SPKI$MH, "d2i_NETSCAPE_SPKI");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_NETSCAPE_SPKI$MH() {
        return RuntimeHelper.requireNonNull(constants$663.i2d_NETSCAPE_SPKI$MH,"i2d_NETSCAPE_SPKI");
    }
    public static int i2d_NETSCAPE_SPKI ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$663.i2d_NETSCAPE_SPKI$MH, "i2d_NETSCAPE_SPKI");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKAC_new$MH() {
        return RuntimeHelper.requireNonNull(constants$663.NETSCAPE_SPKAC_new$MH,"NETSCAPE_SPKAC_new");
    }
    public static MemoryAddress NETSCAPE_SPKAC_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$663.NETSCAPE_SPKAC_new$MH, "NETSCAPE_SPKAC_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_SPKAC_free$MH() {
        return RuntimeHelper.requireNonNull(constants$664.NETSCAPE_SPKAC_free$MH,"NETSCAPE_SPKAC_free");
    }
    public static void NETSCAPE_SPKAC_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$664.NETSCAPE_SPKAC_free$MH, "NETSCAPE_SPKAC_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_NETSCAPE_SPKAC$MH() {
        return RuntimeHelper.requireNonNull(constants$664.d2i_NETSCAPE_SPKAC$MH,"d2i_NETSCAPE_SPKAC");
    }
    public static MemoryAddress d2i_NETSCAPE_SPKAC ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$664.d2i_NETSCAPE_SPKAC$MH, "d2i_NETSCAPE_SPKAC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_NETSCAPE_SPKAC$MH() {
        return RuntimeHelper.requireNonNull(constants$664.i2d_NETSCAPE_SPKAC$MH,"i2d_NETSCAPE_SPKAC");
    }
    public static int i2d_NETSCAPE_SPKAC ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$664.i2d_NETSCAPE_SPKAC$MH, "i2d_NETSCAPE_SPKAC");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_CERT_SEQUENCE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$664.NETSCAPE_CERT_SEQUENCE_new$MH,"NETSCAPE_CERT_SEQUENCE_new");
    }
    public static MemoryAddress NETSCAPE_CERT_SEQUENCE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$664.NETSCAPE_CERT_SEQUENCE_new$MH, "NETSCAPE_CERT_SEQUENCE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NETSCAPE_CERT_SEQUENCE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$664.NETSCAPE_CERT_SEQUENCE_free$MH,"NETSCAPE_CERT_SEQUENCE_free");
    }
    public static void NETSCAPE_CERT_SEQUENCE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$664.NETSCAPE_CERT_SEQUENCE_free$MH, "NETSCAPE_CERT_SEQUENCE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_NETSCAPE_CERT_SEQUENCE$MH() {
        return RuntimeHelper.requireNonNull(constants$664.d2i_NETSCAPE_CERT_SEQUENCE$MH,"d2i_NETSCAPE_CERT_SEQUENCE");
    }
    public static MemoryAddress d2i_NETSCAPE_CERT_SEQUENCE ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$664.d2i_NETSCAPE_CERT_SEQUENCE$MH, "d2i_NETSCAPE_CERT_SEQUENCE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_NETSCAPE_CERT_SEQUENCE$MH() {
        return RuntimeHelper.requireNonNull(constants$665.i2d_NETSCAPE_CERT_SEQUENCE$MH,"i2d_NETSCAPE_CERT_SEQUENCE");
    }
    public static int i2d_NETSCAPE_CERT_SEQUENCE ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$665.i2d_NETSCAPE_CERT_SEQUENCE$MH, "i2d_NETSCAPE_CERT_SEQUENCE");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_INFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$665.X509_INFO_new$MH,"X509_INFO_new");
    }
    public static MemoryAddress X509_INFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$665.X509_INFO_new$MH, "X509_INFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_INFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$665.X509_INFO_free$MH,"X509_INFO_free");
    }
    public static void X509_INFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$665.X509_INFO_free$MH, "X509_INFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_oneline$MH() {
        return RuntimeHelper.requireNonNull(constants$665.X509_NAME_oneline$MH,"X509_NAME_oneline");
    }
    public static MemoryAddress X509_NAME_oneline ( Addressable a,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$665.X509_NAME_oneline$MH, "X509_NAME_oneline");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$665.ASN1_verify$MH,"ASN1_verify");
    }
    public static int ASN1_verify ( Addressable i2d,  Addressable algor1,  Addressable signature,  Addressable data,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$665.ASN1_verify$MH, "ASN1_verify");
        try {
            return (int)mh$.invokeExact(i2d, algor1, signature, data, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$665.ASN1_digest$MH,"ASN1_digest");
    }
    public static int ASN1_digest ( Addressable i2d,  Addressable type,  Addressable data,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$665.ASN1_digest$MH, "ASN1_digest");
        try {
            return (int)mh$.invokeExact(i2d, type, data, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$666.ASN1_sign$MH,"ASN1_sign");
    }
    public static int ASN1_sign ( Addressable i2d,  Addressable algor1,  Addressable algor2,  Addressable signature,  Addressable data,  Addressable pkey,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$666.ASN1_sign$MH, "ASN1_sign");
        try {
            return (int)mh$.invokeExact(i2d, algor1, algor2, signature, data, pkey, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_digest$MH() {
        return RuntimeHelper.requireNonNull(constants$666.ASN1_item_digest$MH,"ASN1_item_digest");
    }
    public static int ASN1_item_digest ( Addressable it,  Addressable type,  Addressable data,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$666.ASN1_item_digest$MH, "ASN1_item_digest");
        try {
            return (int)mh$.invokeExact(it, type, data, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$666.ASN1_item_verify$MH,"ASN1_item_verify");
    }
    public static int ASN1_item_verify ( Addressable it,  Addressable algor1,  Addressable signature,  Addressable data,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$666.ASN1_item_verify$MH, "ASN1_item_verify");
        try {
            return (int)mh$.invokeExact(it, algor1, signature, data, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_sign$MH() {
        return RuntimeHelper.requireNonNull(constants$666.ASN1_item_sign$MH,"ASN1_item_sign");
    }
    public static int ASN1_item_sign ( Addressable it,  Addressable algor1,  Addressable algor2,  Addressable signature,  Addressable data,  Addressable pkey,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$666.ASN1_item_sign$MH, "ASN1_item_sign");
        try {
            return (int)mh$.invokeExact(it, algor1, algor2, signature, data, pkey, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_item_sign_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$666.ASN1_item_sign_ctx$MH,"ASN1_item_sign_ctx");
    }
    public static int ASN1_item_sign_ctx ( Addressable it,  Addressable algor1,  Addressable algor2,  Addressable signature,  Addressable asn,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$666.ASN1_item_sign_ctx$MH, "ASN1_item_sign_ctx");
        try {
            return (int)mh$.invokeExact(it, algor1, algor2, signature, asn, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$666.X509_get_version$MH,"X509_get_version");
    }
    public static long X509_get_version ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$666.X509_get_version$MH, "X509_get_version");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_version$MH() {
        return RuntimeHelper.requireNonNull(constants$667.X509_set_version$MH,"X509_set_version");
    }
    public static int X509_set_version ( Addressable x,  long version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$667.X509_set_version$MH, "X509_set_version");
        try {
            return (int)mh$.invokeExact(x, version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_serialNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$667.X509_set_serialNumber$MH,"X509_set_serialNumber");
    }
    public static int X509_set_serialNumber ( Addressable x,  Addressable serial) {
        var mh$ = RuntimeHelper.requireNonNull(constants$667.X509_set_serialNumber$MH, "X509_set_serialNumber");
        try {
            return (int)mh$.invokeExact(x, serial);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_serialNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$667.X509_get_serialNumber$MH,"X509_get_serialNumber");
    }
    public static MemoryAddress X509_get_serialNumber ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$667.X509_get_serialNumber$MH, "X509_get_serialNumber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_serialNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$667.X509_get0_serialNumber$MH,"X509_get0_serialNumber");
    }
    public static MemoryAddress X509_get0_serialNumber ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$667.X509_get0_serialNumber$MH, "X509_get0_serialNumber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_issuer_name$MH() {
        return RuntimeHelper.requireNonNull(constants$667.X509_set_issuer_name$MH,"X509_set_issuer_name");
    }
    public static int X509_set_issuer_name ( Addressable x,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$667.X509_set_issuer_name$MH, "X509_set_issuer_name");
        try {
            return (int)mh$.invokeExact(x, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_issuer_name$MH() {
        return RuntimeHelper.requireNonNull(constants$667.X509_get_issuer_name$MH,"X509_get_issuer_name");
    }
    public static MemoryAddress X509_get_issuer_name ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$667.X509_get_issuer_name$MH, "X509_get_issuer_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_subject_name$MH() {
        return RuntimeHelper.requireNonNull(constants$668.X509_set_subject_name$MH,"X509_set_subject_name");
    }
    public static int X509_set_subject_name ( Addressable x,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$668.X509_set_subject_name$MH, "X509_set_subject_name");
        try {
            return (int)mh$.invokeExact(x, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_subject_name$MH() {
        return RuntimeHelper.requireNonNull(constants$668.X509_get_subject_name$MH,"X509_get_subject_name");
    }
    public static MemoryAddress X509_get_subject_name ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$668.X509_get_subject_name$MH, "X509_get_subject_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_notBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$668.X509_get0_notBefore$MH,"X509_get0_notBefore");
    }
    public static MemoryAddress X509_get0_notBefore ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$668.X509_get0_notBefore$MH, "X509_get0_notBefore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_getm_notBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$668.X509_getm_notBefore$MH,"X509_getm_notBefore");
    }
    public static MemoryAddress X509_getm_notBefore ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$668.X509_getm_notBefore$MH, "X509_getm_notBefore");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set1_notBefore$MH() {
        return RuntimeHelper.requireNonNull(constants$668.X509_set1_notBefore$MH,"X509_set1_notBefore");
    }
    public static int X509_set1_notBefore ( Addressable x,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$668.X509_set1_notBefore$MH, "X509_set1_notBefore");
        try {
            return (int)mh$.invokeExact(x, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_notAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$668.X509_get0_notAfter$MH,"X509_get0_notAfter");
    }
    public static MemoryAddress X509_get0_notAfter ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$668.X509_get0_notAfter$MH, "X509_get0_notAfter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_getm_notAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$669.X509_getm_notAfter$MH,"X509_getm_notAfter");
    }
    public static MemoryAddress X509_getm_notAfter ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$669.X509_getm_notAfter$MH, "X509_getm_notAfter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set1_notAfter$MH() {
        return RuntimeHelper.requireNonNull(constants$669.X509_set1_notAfter$MH,"X509_set1_notAfter");
    }
    public static int X509_set1_notAfter ( Addressable x,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$669.X509_set1_notAfter$MH, "X509_set1_notAfter");
        try {
            return (int)mh$.invokeExact(x, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_set_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$669.X509_set_pubkey$MH,"X509_set_pubkey");
    }
    public static int X509_set_pubkey ( Addressable x,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$669.X509_set_pubkey$MH, "X509_set_pubkey");
        try {
            return (int)mh$.invokeExact(x, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$669.X509_up_ref$MH,"X509_up_ref");
    }
    public static int X509_up_ref ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$669.X509_up_ref$MH, "X509_up_ref");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_signature_type$MH() {
        return RuntimeHelper.requireNonNull(constants$669.X509_get_signature_type$MH,"X509_get_signature_type");
    }
    public static int X509_get_signature_type ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$669.X509_get_signature_type$MH, "X509_get_signature_type");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_X509_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$669.X509_get_X509_PUBKEY$MH,"X509_get_X509_PUBKEY");
    }
    public static MemoryAddress X509_get_X509_PUBKEY ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$669.X509_get_X509_PUBKEY$MH, "X509_get_X509_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$670.X509_get0_extensions$MH,"X509_get0_extensions");
    }
    public static MemoryAddress X509_get0_extensions ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$670.X509_get0_extensions$MH, "X509_get0_extensions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_uids$MH() {
        return RuntimeHelper.requireNonNull(constants$670.X509_get0_uids$MH,"X509_get0_uids");
    }
    public static void X509_get0_uids ( Addressable x,  Addressable piuid,  Addressable psuid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$670.X509_get0_uids$MH, "X509_get0_uids");
        try {
            mh$.invokeExact(x, piuid, psuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_tbs_sigalg$MH() {
        return RuntimeHelper.requireNonNull(constants$670.X509_get0_tbs_sigalg$MH,"X509_get0_tbs_sigalg");
    }
    public static MemoryAddress X509_get0_tbs_sigalg ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$670.X509_get0_tbs_sigalg$MH, "X509_get0_tbs_sigalg");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$670.X509_get0_pubkey$MH,"X509_get0_pubkey");
    }
    public static MemoryAddress X509_get0_pubkey ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$670.X509_get0_pubkey$MH, "X509_get0_pubkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$670.X509_get_pubkey$MH,"X509_get_pubkey");
    }
    public static MemoryAddress X509_get_pubkey ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$670.X509_get_pubkey$MH, "X509_get_pubkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get0_pubkey_bitstr$MH() {
        return RuntimeHelper.requireNonNull(constants$670.X509_get0_pubkey_bitstr$MH,"X509_get0_pubkey_bitstr");
    }
    public static MemoryAddress X509_get0_pubkey_bitstr ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$670.X509_get0_pubkey_bitstr$MH, "X509_get0_pubkey_bitstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_certificate_type$MH() {
        return RuntimeHelper.requireNonNull(constants$671.X509_certificate_type$MH,"X509_certificate_type");
    }
    public static int X509_certificate_type ( Addressable x,  Addressable pubkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$671.X509_certificate_type$MH, "X509_certificate_type");
        try {
            return (int)mh$.invokeExact(x, pubkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$671.X509_REQ_get_version$MH,"X509_REQ_get_version");
    }
    public static long X509_REQ_get_version ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$671.X509_REQ_get_version$MH, "X509_REQ_get_version");
        try {
            return (long)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_set_version$MH() {
        return RuntimeHelper.requireNonNull(constants$671.X509_REQ_set_version$MH,"X509_REQ_set_version");
    }
    public static int X509_REQ_set_version ( Addressable x,  long version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$671.X509_REQ_set_version$MH, "X509_REQ_set_version");
        try {
            return (int)mh$.invokeExact(x, version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_subject_name$MH() {
        return RuntimeHelper.requireNonNull(constants$671.X509_REQ_get_subject_name$MH,"X509_REQ_get_subject_name");
    }
    public static MemoryAddress X509_REQ_get_subject_name ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$671.X509_REQ_get_subject_name$MH, "X509_REQ_get_subject_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_set_subject_name$MH() {
        return RuntimeHelper.requireNonNull(constants$671.X509_REQ_set_subject_name$MH,"X509_REQ_set_subject_name");
    }
    public static int X509_REQ_set_subject_name ( Addressable req,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$671.X509_REQ_set_subject_name$MH, "X509_REQ_set_subject_name");
        try {
            return (int)mh$.invokeExact(req, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get0_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$671.X509_REQ_get0_signature$MH,"X509_REQ_get0_signature");
    }
    public static void X509_REQ_get0_signature ( Addressable req,  Addressable psig,  Addressable palg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$671.X509_REQ_get0_signature$MH, "X509_REQ_get0_signature");
        try {
            mh$.invokeExact(req, psig, palg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_set0_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$672.X509_REQ_set0_signature$MH,"X509_REQ_set0_signature");
    }
    public static void X509_REQ_set0_signature ( Addressable req,  Addressable psig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$672.X509_REQ_set0_signature$MH, "X509_REQ_set0_signature");
        try {
            mh$.invokeExact(req, psig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_set1_signature_algo$MH() {
        return RuntimeHelper.requireNonNull(constants$672.X509_REQ_set1_signature_algo$MH,"X509_REQ_set1_signature_algo");
    }
    public static int X509_REQ_set1_signature_algo ( Addressable req,  Addressable palg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$672.X509_REQ_set1_signature_algo$MH, "X509_REQ_set1_signature_algo");
        try {
            return (int)mh$.invokeExact(req, palg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_signature_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$672.X509_REQ_get_signature_nid$MH,"X509_REQ_get_signature_nid");
    }
    public static int X509_REQ_get_signature_nid ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$672.X509_REQ_get_signature_nid$MH, "X509_REQ_get_signature_nid");
        try {
            return (int)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_re_X509_REQ_tbs$MH() {
        return RuntimeHelper.requireNonNull(constants$672.i2d_re_X509_REQ_tbs$MH,"i2d_re_X509_REQ_tbs");
    }
    public static int i2d_re_X509_REQ_tbs ( Addressable req,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$672.i2d_re_X509_REQ_tbs$MH, "i2d_re_X509_REQ_tbs");
        try {
            return (int)mh$.invokeExact(req, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_set_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$672.X509_REQ_set_pubkey$MH,"X509_REQ_set_pubkey");
    }
    public static int X509_REQ_set_pubkey ( Addressable x,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$672.X509_REQ_set_pubkey$MH, "X509_REQ_set_pubkey");
        try {
            return (int)mh$.invokeExact(x, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$672.X509_REQ_get_pubkey$MH,"X509_REQ_get_pubkey");
    }
    public static MemoryAddress X509_REQ_get_pubkey ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$672.X509_REQ_get_pubkey$MH, "X509_REQ_get_pubkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get0_pubkey$MH() {
        return RuntimeHelper.requireNonNull(constants$673.X509_REQ_get0_pubkey$MH,"X509_REQ_get0_pubkey");
    }
    public static MemoryAddress X509_REQ_get0_pubkey ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$673.X509_REQ_get0_pubkey$MH, "X509_REQ_get0_pubkey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_X509_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$673.X509_REQ_get_X509_PUBKEY$MH,"X509_REQ_get_X509_PUBKEY");
    }
    public static MemoryAddress X509_REQ_get_X509_PUBKEY ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$673.X509_REQ_get_X509_PUBKEY$MH, "X509_REQ_get_X509_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_extension_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$673.X509_REQ_extension_nid$MH,"X509_REQ_extension_nid");
    }
    public static int X509_REQ_extension_nid ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$673.X509_REQ_extension_nid$MH, "X509_REQ_extension_nid");
        try {
            return (int)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_extension_nids$MH() {
        return RuntimeHelper.requireNonNull(constants$673.X509_REQ_get_extension_nids$MH,"X509_REQ_get_extension_nids");
    }
    public static MemoryAddress X509_REQ_get_extension_nids () {
        var mh$ = RuntimeHelper.requireNonNull(constants$673.X509_REQ_get_extension_nids$MH, "X509_REQ_get_extension_nids");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_set_extension_nids$MH() {
        return RuntimeHelper.requireNonNull(constants$673.X509_REQ_set_extension_nids$MH,"X509_REQ_set_extension_nids");
    }
    public static void X509_REQ_set_extension_nids ( Addressable nids) {
        var mh$ = RuntimeHelper.requireNonNull(constants$673.X509_REQ_set_extension_nids$MH, "X509_REQ_set_extension_nids");
        try {
            mh$.invokeExact(nids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$673.X509_REQ_get_extensions$MH,"X509_REQ_get_extensions");
    }
    public static MemoryAddress X509_REQ_get_extensions ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$673.X509_REQ_get_extensions$MH, "X509_REQ_get_extensions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_add_extensions_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$674.X509_REQ_add_extensions_nid$MH,"X509_REQ_add_extensions_nid");
    }
    public static int X509_REQ_add_extensions_nid ( Addressable req,  Addressable exts,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$674.X509_REQ_add_extensions_nid$MH, "X509_REQ_add_extensions_nid");
        try {
            return (int)mh$.invokeExact(req, exts, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_add_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$674.X509_REQ_add_extensions$MH,"X509_REQ_add_extensions");
    }
    public static int X509_REQ_add_extensions ( Addressable req,  Addressable exts) {
        var mh$ = RuntimeHelper.requireNonNull(constants$674.X509_REQ_add_extensions$MH, "X509_REQ_add_extensions");
        try {
            return (int)mh$.invokeExact(req, exts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_attr_count$MH() {
        return RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr_count$MH,"X509_REQ_get_attr_count");
    }
    public static int X509_REQ_get_attr_count ( Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr_count$MH, "X509_REQ_get_attr_count");
        try {
            return (int)mh$.invokeExact(req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr_by_NID$MH,"X509_REQ_get_attr_by_NID");
    }
    public static int X509_REQ_get_attr_by_NID ( Addressable req,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr_by_NID$MH, "X509_REQ_get_attr_by_NID");
        try {
            return (int)mh$.invokeExact(req, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_attr_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr_by_OBJ$MH,"X509_REQ_get_attr_by_OBJ");
    }
    public static int X509_REQ_get_attr_by_OBJ ( Addressable req,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr_by_OBJ$MH, "X509_REQ_get_attr_by_OBJ");
        try {
            return (int)mh$.invokeExact(req, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr$MH,"X509_REQ_get_attr");
    }
    public static MemoryAddress X509_REQ_get_attr ( Addressable req,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$674.X509_REQ_get_attr$MH, "X509_REQ_get_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_delete_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$675.X509_REQ_delete_attr$MH,"X509_REQ_delete_attr");
    }
    public static MemoryAddress X509_REQ_delete_attr ( Addressable req,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$675.X509_REQ_delete_attr$MH, "X509_REQ_delete_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(req, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_add1_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr$MH,"X509_REQ_add1_attr");
    }
    public static int X509_REQ_add1_attr ( Addressable req,  Addressable attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr$MH, "X509_REQ_add1_attr");
        try {
            return (int)mh$.invokeExact(req, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_add1_attr_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr_by_OBJ$MH,"X509_REQ_add1_attr_by_OBJ");
    }
    public static int X509_REQ_add1_attr_by_OBJ ( Addressable req,  Addressable obj,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr_by_OBJ$MH, "X509_REQ_add1_attr_by_OBJ");
        try {
            return (int)mh$.invokeExact(req, obj, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_add1_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr_by_NID$MH,"X509_REQ_add1_attr_by_NID");
    }
    public static int X509_REQ_add1_attr_by_NID ( Addressable req,  int nid,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr_by_NID$MH, "X509_REQ_add1_attr_by_NID");
        try {
            return (int)mh$.invokeExact(req, nid, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_add1_attr_by_txt$MH() {
        return RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr_by_txt$MH,"X509_REQ_add1_attr_by_txt");
    }
    public static int X509_REQ_add1_attr_by_txt ( Addressable req,  Addressable attrname,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$675.X509_REQ_add1_attr_by_txt$MH, "X509_REQ_add1_attr_by_txt");
        try {
            return (int)mh$.invokeExact(req, attrname, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_set_version$MH() {
        return RuntimeHelper.requireNonNull(constants$675.X509_CRL_set_version$MH,"X509_CRL_set_version");
    }
    public static int X509_CRL_set_version ( Addressable x,  long version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$675.X509_CRL_set_version$MH, "X509_CRL_set_version");
        try {
            return (int)mh$.invokeExact(x, version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_set_issuer_name$MH() {
        return RuntimeHelper.requireNonNull(constants$676.X509_CRL_set_issuer_name$MH,"X509_CRL_set_issuer_name");
    }
    public static int X509_CRL_set_issuer_name ( Addressable x,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$676.X509_CRL_set_issuer_name$MH, "X509_CRL_set_issuer_name");
        try {
            return (int)mh$.invokeExact(x, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_set1_lastUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$676.X509_CRL_set1_lastUpdate$MH,"X509_CRL_set1_lastUpdate");
    }
    public static int X509_CRL_set1_lastUpdate ( Addressable x,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$676.X509_CRL_set1_lastUpdate$MH, "X509_CRL_set1_lastUpdate");
        try {
            return (int)mh$.invokeExact(x, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_set1_nextUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$676.X509_CRL_set1_nextUpdate$MH,"X509_CRL_set1_nextUpdate");
    }
    public static int X509_CRL_set1_nextUpdate ( Addressable x,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$676.X509_CRL_set1_nextUpdate$MH, "X509_CRL_set1_nextUpdate");
        try {
            return (int)mh$.invokeExact(x, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$676.X509_CRL_sort$MH,"X509_CRL_sort");
    }
    public static int X509_CRL_sort ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$676.X509_CRL_sort$MH, "X509_CRL_sort");
        try {
            return (int)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$676.X509_CRL_up_ref$MH,"X509_CRL_up_ref");
    }
    public static int X509_CRL_up_ref ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$676.X509_CRL_up_ref$MH, "X509_CRL_up_ref");
        try {
            return (int)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$676.X509_CRL_get_version$MH,"X509_CRL_get_version");
    }
    public static long X509_CRL_get_version ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$676.X509_CRL_get_version$MH, "X509_CRL_get_version");
        try {
            return (long)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get0_lastUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$677.X509_CRL_get0_lastUpdate$MH,"X509_CRL_get0_lastUpdate");
    }
    public static MemoryAddress X509_CRL_get0_lastUpdate ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$677.X509_CRL_get0_lastUpdate$MH, "X509_CRL_get0_lastUpdate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get0_nextUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$677.X509_CRL_get0_nextUpdate$MH,"X509_CRL_get0_nextUpdate");
    }
    public static MemoryAddress X509_CRL_get0_nextUpdate ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$677.X509_CRL_get0_nextUpdate$MH, "X509_CRL_get0_nextUpdate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_lastUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$677.X509_CRL_get_lastUpdate$MH,"X509_CRL_get_lastUpdate");
    }
    public static MemoryAddress X509_CRL_get_lastUpdate ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$677.X509_CRL_get_lastUpdate$MH, "X509_CRL_get_lastUpdate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_nextUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$677.X509_CRL_get_nextUpdate$MH,"X509_CRL_get_nextUpdate");
    }
    public static MemoryAddress X509_CRL_get_nextUpdate ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$677.X509_CRL_get_nextUpdate$MH, "X509_CRL_get_nextUpdate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_issuer$MH() {
        return RuntimeHelper.requireNonNull(constants$677.X509_CRL_get_issuer$MH,"X509_CRL_get_issuer");
    }
    public static MemoryAddress X509_CRL_get_issuer ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$677.X509_CRL_get_issuer$MH, "X509_CRL_get_issuer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get0_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$677.X509_CRL_get0_extensions$MH,"X509_CRL_get0_extensions");
    }
    public static MemoryAddress X509_CRL_get0_extensions ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$677.X509_CRL_get0_extensions$MH, "X509_CRL_get0_extensions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_REVOKED$MH() {
        return RuntimeHelper.requireNonNull(constants$678.X509_CRL_get_REVOKED$MH,"X509_CRL_get_REVOKED");
    }
    public static MemoryAddress X509_CRL_get_REVOKED ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$678.X509_CRL_get_REVOKED$MH, "X509_CRL_get_REVOKED");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get0_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$678.X509_CRL_get0_signature$MH,"X509_CRL_get0_signature");
    }
    public static void X509_CRL_get0_signature ( Addressable crl,  Addressable psig,  Addressable palg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$678.X509_CRL_get0_signature$MH, "X509_CRL_get0_signature");
        try {
            mh$.invokeExact(crl, psig, palg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_signature_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$678.X509_CRL_get_signature_nid$MH,"X509_CRL_get_signature_nid");
    }
    public static int X509_CRL_get_signature_nid ( Addressable crl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$678.X509_CRL_get_signature_nid$MH, "X509_CRL_get_signature_nid");
        try {
            return (int)mh$.invokeExact(crl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_re_X509_CRL_tbs$MH() {
        return RuntimeHelper.requireNonNull(constants$678.i2d_re_X509_CRL_tbs$MH,"i2d_re_X509_CRL_tbs");
    }
    public static int i2d_re_X509_CRL_tbs ( Addressable req,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$678.i2d_re_X509_CRL_tbs$MH, "i2d_re_X509_CRL_tbs");
        try {
            return (int)mh$.invokeExact(req, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get0_serialNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$678.X509_REVOKED_get0_serialNumber$MH,"X509_REVOKED_get0_serialNumber");
    }
    public static MemoryAddress X509_REVOKED_get0_serialNumber ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$678.X509_REVOKED_get0_serialNumber$MH, "X509_REVOKED_get0_serialNumber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_set_serialNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$678.X509_REVOKED_set_serialNumber$MH,"X509_REVOKED_set_serialNumber");
    }
    public static int X509_REVOKED_set_serialNumber ( Addressable x,  Addressable serial) {
        var mh$ = RuntimeHelper.requireNonNull(constants$678.X509_REVOKED_set_serialNumber$MH, "X509_REVOKED_set_serialNumber");
        try {
            return (int)mh$.invokeExact(x, serial);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get0_revocationDate$MH() {
        return RuntimeHelper.requireNonNull(constants$679.X509_REVOKED_get0_revocationDate$MH,"X509_REVOKED_get0_revocationDate");
    }
    public static MemoryAddress X509_REVOKED_get0_revocationDate ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$679.X509_REVOKED_get0_revocationDate$MH, "X509_REVOKED_get0_revocationDate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_set_revocationDate$MH() {
        return RuntimeHelper.requireNonNull(constants$679.X509_REVOKED_set_revocationDate$MH,"X509_REVOKED_set_revocationDate");
    }
    public static int X509_REVOKED_set_revocationDate ( Addressable r,  Addressable tm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$679.X509_REVOKED_set_revocationDate$MH, "X509_REVOKED_set_revocationDate");
        try {
            return (int)mh$.invokeExact(r, tm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get0_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$679.X509_REVOKED_get0_extensions$MH,"X509_REVOKED_get0_extensions");
    }
    public static MemoryAddress X509_REVOKED_get0_extensions ( Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$679.X509_REVOKED_get0_extensions$MH, "X509_REVOKED_get0_extensions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_diff$MH() {
        return RuntimeHelper.requireNonNull(constants$679.X509_CRL_diff$MH,"X509_CRL_diff");
    }
    public static MemoryAddress X509_CRL_diff ( Addressable base,  Addressable newer,  Addressable skey,  Addressable md,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$679.X509_CRL_diff$MH, "X509_CRL_diff");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(base, newer, skey, md, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_check_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$679.X509_REQ_check_private_key$MH,"X509_REQ_check_private_key");
    }
    public static int X509_REQ_check_private_key ( Addressable x509,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$679.X509_REQ_check_private_key$MH, "X509_REQ_check_private_key");
        try {
            return (int)mh$.invokeExact(x509, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$679.X509_check_private_key$MH,"X509_check_private_key");
    }
    public static int X509_check_private_key ( Addressable x509,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$679.X509_check_private_key$MH, "X509_check_private_key");
        try {
            return (int)mh$.invokeExact(x509, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_chain_check_suiteb$MH() {
        return RuntimeHelper.requireNonNull(constants$680.X509_chain_check_suiteb$MH,"X509_chain_check_suiteb");
    }
    public static int X509_chain_check_suiteb ( Addressable perror_depth,  Addressable x,  Addressable chain,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$680.X509_chain_check_suiteb$MH, "X509_chain_check_suiteb");
        try {
            return (int)mh$.invokeExact(perror_depth, x, chain, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_check_suiteb$MH() {
        return RuntimeHelper.requireNonNull(constants$680.X509_CRL_check_suiteb$MH,"X509_CRL_check_suiteb");
    }
    public static int X509_CRL_check_suiteb ( Addressable crl,  Addressable pk,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$680.X509_CRL_check_suiteb$MH, "X509_CRL_check_suiteb");
        try {
            return (int)mh$.invokeExact(crl, pk, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_chain_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$680.X509_chain_up_ref$MH,"X509_chain_up_ref");
    }
    public static MemoryAddress X509_chain_up_ref ( Addressable chain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$680.X509_chain_up_ref$MH, "X509_chain_up_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_issuer_and_serial_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$680.X509_issuer_and_serial_cmp$MH,"X509_issuer_and_serial_cmp");
    }
    public static int X509_issuer_and_serial_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$680.X509_issuer_and_serial_cmp$MH, "X509_issuer_and_serial_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_issuer_and_serial_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$680.X509_issuer_and_serial_hash$MH,"X509_issuer_and_serial_hash");
    }
    public static long X509_issuer_and_serial_hash ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$680.X509_issuer_and_serial_hash$MH, "X509_issuer_and_serial_hash");
        try {
            return (long)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_issuer_name_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$680.X509_issuer_name_cmp$MH,"X509_issuer_name_cmp");
    }
    public static int X509_issuer_name_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$680.X509_issuer_name_cmp$MH, "X509_issuer_name_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_issuer_name_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$681.X509_issuer_name_hash$MH,"X509_issuer_name_hash");
    }
    public static long X509_issuer_name_hash ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$681.X509_issuer_name_hash$MH, "X509_issuer_name_hash");
        try {
            return (long)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_subject_name_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$681.X509_subject_name_cmp$MH,"X509_subject_name_cmp");
    }
    public static int X509_subject_name_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$681.X509_subject_name_cmp$MH, "X509_subject_name_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_subject_name_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$681.X509_subject_name_hash$MH,"X509_subject_name_hash");
    }
    public static long X509_subject_name_hash ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$681.X509_subject_name_hash$MH, "X509_subject_name_hash");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_issuer_name_hash_old$MH() {
        return RuntimeHelper.requireNonNull(constants$681.X509_issuer_name_hash_old$MH,"X509_issuer_name_hash_old");
    }
    public static long X509_issuer_name_hash_old ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$681.X509_issuer_name_hash_old$MH, "X509_issuer_name_hash_old");
        try {
            return (long)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_subject_name_hash_old$MH() {
        return RuntimeHelper.requireNonNull(constants$681.X509_subject_name_hash_old$MH,"X509_subject_name_hash_old");
    }
    public static long X509_subject_name_hash_old ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$681.X509_subject_name_hash_old$MH, "X509_subject_name_hash_old");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$681.X509_cmp$MH,"X509_cmp");
    }
    public static int X509_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$681.X509_cmp$MH, "X509_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$682.X509_NAME_cmp$MH,"X509_NAME_cmp");
    }
    public static int X509_NAME_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$682.X509_NAME_cmp$MH, "X509_NAME_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$682.X509_NAME_hash$MH,"X509_NAME_hash");
    }
    public static long X509_NAME_hash ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$682.X509_NAME_hash$MH, "X509_NAME_hash");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_hash_old$MH() {
        return RuntimeHelper.requireNonNull(constants$682.X509_NAME_hash_old$MH,"X509_NAME_hash_old");
    }
    public static long X509_NAME_hash_old ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$682.X509_NAME_hash_old$MH, "X509_NAME_hash_old");
        try {
            return (long)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$682.X509_CRL_cmp$MH,"X509_CRL_cmp");
    }
    public static int X509_CRL_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$682.X509_CRL_cmp$MH, "X509_CRL_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_match$MH() {
        return RuntimeHelper.requireNonNull(constants$682.X509_CRL_match$MH,"X509_CRL_match");
    }
    public static int X509_CRL_match ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$682.X509_CRL_match$MH, "X509_CRL_match");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_aux_print$MH() {
        return RuntimeHelper.requireNonNull(constants$682.X509_aux_print$MH,"X509_aux_print");
    }
    public static int X509_aux_print ( Addressable out,  Addressable x,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$682.X509_aux_print$MH, "X509_aux_print");
        try {
            return (int)mh$.invokeExact(out, x, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_print_ex_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.X509_print_ex_fp$MH,"X509_print_ex_fp");
    }
    public static int X509_print_ex_fp ( Addressable bp,  Addressable x,  long nmflag,  long cflag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$683.X509_print_ex_fp$MH, "X509_print_ex_fp");
        try {
            return (int)mh$.invokeExact(bp, x, nmflag, cflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.X509_print_fp$MH,"X509_print_fp");
    }
    public static int X509_print_fp ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$683.X509_print_fp$MH, "X509_print_fp");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.X509_CRL_print_fp$MH,"X509_CRL_print_fp");
    }
    public static int X509_CRL_print_fp ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$683.X509_CRL_print_fp$MH, "X509_CRL_print_fp");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.X509_REQ_print_fp$MH,"X509_REQ_print_fp");
    }
    public static int X509_REQ_print_fp ( Addressable bp,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$683.X509_REQ_print_fp$MH, "X509_REQ_print_fp");
        try {
            return (int)mh$.invokeExact(bp, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_print_ex_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$683.X509_NAME_print_ex_fp$MH,"X509_NAME_print_ex_fp");
    }
    public static int X509_NAME_print_ex_fp ( Addressable fp,  Addressable nm,  int indent,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$683.X509_NAME_print_ex_fp$MH, "X509_NAME_print_ex_fp");
        try {
            return (int)mh$.invokeExact(fp, nm, indent, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_print$MH() {
        return RuntimeHelper.requireNonNull(constants$683.X509_NAME_print$MH,"X509_NAME_print");
    }
    public static int X509_NAME_print ( Addressable bp,  Addressable name,  int obase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$683.X509_NAME_print$MH, "X509_NAME_print");
        try {
            return (int)mh$.invokeExact(bp, name, obase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_print_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$684.X509_NAME_print_ex$MH,"X509_NAME_print_ex");
    }
    public static int X509_NAME_print_ex ( Addressable out,  Addressable nm,  int indent,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$684.X509_NAME_print_ex$MH, "X509_NAME_print_ex");
        try {
            return (int)mh$.invokeExact(out, nm, indent, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_print_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$684.X509_print_ex$MH,"X509_print_ex");
    }
    public static int X509_print_ex ( Addressable bp,  Addressable x,  long nmflag,  long cflag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$684.X509_print_ex$MH, "X509_print_ex");
        try {
            return (int)mh$.invokeExact(bp, x, nmflag, cflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_print$MH() {
        return RuntimeHelper.requireNonNull(constants$684.X509_print$MH,"X509_print");
    }
    public static int X509_print ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$684.X509_print$MH, "X509_print");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ocspid_print$MH() {
        return RuntimeHelper.requireNonNull(constants$684.X509_ocspid_print$MH,"X509_ocspid_print");
    }
    public static int X509_ocspid_print ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$684.X509_ocspid_print$MH, "X509_ocspid_print");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_print_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$684.X509_CRL_print_ex$MH,"X509_CRL_print_ex");
    }
    public static int X509_CRL_print_ex ( Addressable out,  Addressable x,  long nmflag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$684.X509_CRL_print_ex$MH, "X509_CRL_print_ex");
        try {
            return (int)mh$.invokeExact(out, x, nmflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_print$MH() {
        return RuntimeHelper.requireNonNull(constants$684.X509_CRL_print$MH,"X509_CRL_print");
    }
    public static int X509_CRL_print ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$684.X509_CRL_print$MH, "X509_CRL_print");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_print_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$685.X509_REQ_print_ex$MH,"X509_REQ_print_ex");
    }
    public static int X509_REQ_print_ex ( Addressable bp,  Addressable x,  long nmflag,  long cflag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$685.X509_REQ_print_ex$MH, "X509_REQ_print_ex");
        try {
            return (int)mh$.invokeExact(bp, x, nmflag, cflag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REQ_print$MH() {
        return RuntimeHelper.requireNonNull(constants$685.X509_REQ_print$MH,"X509_REQ_print");
    }
    public static int X509_REQ_print ( Addressable bp,  Addressable req) {
        var mh$ = RuntimeHelper.requireNonNull(constants$685.X509_REQ_print$MH, "X509_REQ_print");
        try {
            return (int)mh$.invokeExact(bp, req);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_entry_count$MH() {
        return RuntimeHelper.requireNonNull(constants$685.X509_NAME_entry_count$MH,"X509_NAME_entry_count");
    }
    public static int X509_NAME_entry_count ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$685.X509_NAME_entry_count$MH, "X509_NAME_entry_count");
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_get_text_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$685.X509_NAME_get_text_by_NID$MH,"X509_NAME_get_text_by_NID");
    }
    public static int X509_NAME_get_text_by_NID ( Addressable name,  int nid,  Addressable buf,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$685.X509_NAME_get_text_by_NID$MH, "X509_NAME_get_text_by_NID");
        try {
            return (int)mh$.invokeExact(name, nid, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_get_text_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$685.X509_NAME_get_text_by_OBJ$MH,"X509_NAME_get_text_by_OBJ");
    }
    public static int X509_NAME_get_text_by_OBJ ( Addressable name,  Addressable obj,  Addressable buf,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$685.X509_NAME_get_text_by_OBJ$MH, "X509_NAME_get_text_by_OBJ");
        try {
            return (int)mh$.invokeExact(name, obj, buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_get_index_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$685.X509_NAME_get_index_by_NID$MH,"X509_NAME_get_index_by_NID");
    }
    public static int X509_NAME_get_index_by_NID ( Addressable name,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$685.X509_NAME_get_index_by_NID$MH, "X509_NAME_get_index_by_NID");
        try {
            return (int)mh$.invokeExact(name, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_get_index_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$686.X509_NAME_get_index_by_OBJ$MH,"X509_NAME_get_index_by_OBJ");
    }
    public static int X509_NAME_get_index_by_OBJ ( Addressable name,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$686.X509_NAME_get_index_by_OBJ$MH, "X509_NAME_get_index_by_OBJ");
        try {
            return (int)mh$.invokeExact(name, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_get_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$686.X509_NAME_get_entry$MH,"X509_NAME_get_entry");
    }
    public static MemoryAddress X509_NAME_get_entry ( Addressable name,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$686.X509_NAME_get_entry$MH, "X509_NAME_get_entry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_delete_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$686.X509_NAME_delete_entry$MH,"X509_NAME_delete_entry");
    }
    public static MemoryAddress X509_NAME_delete_entry ( Addressable name,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$686.X509_NAME_delete_entry$MH, "X509_NAME_delete_entry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_add_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$686.X509_NAME_add_entry$MH,"X509_NAME_add_entry");
    }
    public static int X509_NAME_add_entry ( Addressable name,  Addressable ne,  int loc,  int set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$686.X509_NAME_add_entry$MH, "X509_NAME_add_entry");
        try {
            return (int)mh$.invokeExact(name, ne, loc, set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_add_entry_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$686.X509_NAME_add_entry_by_OBJ$MH,"X509_NAME_add_entry_by_OBJ");
    }
    public static int X509_NAME_add_entry_by_OBJ ( Addressable name,  Addressable obj,  int type,  Addressable bytes,  int len,  int loc,  int set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$686.X509_NAME_add_entry_by_OBJ$MH, "X509_NAME_add_entry_by_OBJ");
        try {
            return (int)mh$.invokeExact(name, obj, type, bytes, len, loc, set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_add_entry_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$686.X509_NAME_add_entry_by_NID$MH,"X509_NAME_add_entry_by_NID");
    }
    public static int X509_NAME_add_entry_by_NID ( Addressable name,  int nid,  int type,  Addressable bytes,  int len,  int loc,  int set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$686.X509_NAME_add_entry_by_NID$MH, "X509_NAME_add_entry_by_NID");
        try {
            return (int)mh$.invokeExact(name, nid, type, bytes, len, loc, set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_create_by_txt$MH() {
        return RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_create_by_txt$MH,"X509_NAME_ENTRY_create_by_txt");
    }
    public static MemoryAddress X509_NAME_ENTRY_create_by_txt ( Addressable ne,  Addressable field,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_create_by_txt$MH, "X509_NAME_ENTRY_create_by_txt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne, field, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_create_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_create_by_NID$MH,"X509_NAME_ENTRY_create_by_NID");
    }
    public static MemoryAddress X509_NAME_ENTRY_create_by_NID ( Addressable ne,  int nid,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_create_by_NID$MH, "X509_NAME_ENTRY_create_by_NID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne, nid, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_add_entry_by_txt$MH() {
        return RuntimeHelper.requireNonNull(constants$687.X509_NAME_add_entry_by_txt$MH,"X509_NAME_add_entry_by_txt");
    }
    public static int X509_NAME_add_entry_by_txt ( Addressable name,  Addressable field,  int type,  Addressable bytes,  int len,  int loc,  int set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$687.X509_NAME_add_entry_by_txt$MH, "X509_NAME_add_entry_by_txt");
        try {
            return (int)mh$.invokeExact(name, field, type, bytes, len, loc, set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_create_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_create_by_OBJ$MH,"X509_NAME_ENTRY_create_by_OBJ");
    }
    public static MemoryAddress X509_NAME_ENTRY_create_by_OBJ ( Addressable ne,  Addressable obj,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_create_by_OBJ$MH, "X509_NAME_ENTRY_create_by_OBJ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne, obj, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_set_object$MH() {
        return RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_set_object$MH,"X509_NAME_ENTRY_set_object");
    }
    public static int X509_NAME_ENTRY_set_object ( Addressable ne,  Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_set_object$MH, "X509_NAME_ENTRY_set_object");
        try {
            return (int)mh$.invokeExact(ne, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_set_data$MH,"X509_NAME_ENTRY_set_data");
    }
    public static int X509_NAME_ENTRY_set_data ( Addressable ne,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$687.X509_NAME_ENTRY_set_data$MH, "X509_NAME_ENTRY_set_data");
        try {
            return (int)mh$.invokeExact(ne, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_get_object$MH() {
        return RuntimeHelper.requireNonNull(constants$688.X509_NAME_ENTRY_get_object$MH,"X509_NAME_ENTRY_get_object");
    }
    public static MemoryAddress X509_NAME_ENTRY_get_object ( Addressable ne) {
        var mh$ = RuntimeHelper.requireNonNull(constants$688.X509_NAME_ENTRY_get_object$MH, "X509_NAME_ENTRY_get_object");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$688.X509_NAME_ENTRY_get_data$MH,"X509_NAME_ENTRY_get_data");
    }
    public static MemoryAddress X509_NAME_ENTRY_get_data ( Addressable ne) {
        var mh$ = RuntimeHelper.requireNonNull(constants$688.X509_NAME_ENTRY_get_data$MH, "X509_NAME_ENTRY_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_ENTRY_set$MH() {
        return RuntimeHelper.requireNonNull(constants$688.X509_NAME_ENTRY_set$MH,"X509_NAME_ENTRY_set");
    }
    public static int X509_NAME_ENTRY_set ( Addressable ne) {
        var mh$ = RuntimeHelper.requireNonNull(constants$688.X509_NAME_ENTRY_set$MH, "X509_NAME_ENTRY_set");
        try {
            return (int)mh$.invokeExact(ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_NAME_get0_der$MH() {
        return RuntimeHelper.requireNonNull(constants$688.X509_NAME_get0_der$MH,"X509_NAME_get0_der");
    }
    public static int X509_NAME_get0_der ( Addressable nm,  Addressable pder,  Addressable pderlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$688.X509_NAME_get0_der$MH, "X509_NAME_get0_der");
        try {
            return (int)mh$.invokeExact(nm, pder, pderlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_get_ext_count$MH() {
        return RuntimeHelper.requireNonNull(constants$688.X509v3_get_ext_count$MH,"X509v3_get_ext_count");
    }
    public static int X509v3_get_ext_count ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$688.X509v3_get_ext_count$MH, "X509v3_get_ext_count");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_get_ext_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$688.X509v3_get_ext_by_NID$MH,"X509v3_get_ext_by_NID");
    }
    public static int X509v3_get_ext_by_NID ( Addressable x,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$688.X509v3_get_ext_by_NID$MH, "X509v3_get_ext_by_NID");
        try {
            return (int)mh$.invokeExact(x, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_get_ext_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$689.X509v3_get_ext_by_OBJ$MH,"X509v3_get_ext_by_OBJ");
    }
    public static int X509v3_get_ext_by_OBJ ( Addressable x,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$689.X509v3_get_ext_by_OBJ$MH, "X509v3_get_ext_by_OBJ");
        try {
            return (int)mh$.invokeExact(x, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_get_ext_by_critical$MH() {
        return RuntimeHelper.requireNonNull(constants$689.X509v3_get_ext_by_critical$MH,"X509v3_get_ext_by_critical");
    }
    public static int X509v3_get_ext_by_critical ( Addressable x,  int crit,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$689.X509v3_get_ext_by_critical$MH, "X509v3_get_ext_by_critical");
        try {
            return (int)mh$.invokeExact(x, crit, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_get_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$689.X509v3_get_ext$MH,"X509v3_get_ext");
    }
    public static MemoryAddress X509v3_get_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$689.X509v3_get_ext$MH, "X509v3_get_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_delete_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$689.X509v3_delete_ext$MH,"X509v3_delete_ext");
    }
    public static MemoryAddress X509v3_delete_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$689.X509v3_delete_ext$MH, "X509v3_delete_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509v3_add_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$689.X509v3_add_ext$MH,"X509v3_add_ext");
    }
    public static MemoryAddress X509v3_add_ext ( Addressable x,  Addressable ex,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$689.X509v3_add_ext$MH, "X509v3_add_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, ex, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext_count$MH() {
        return RuntimeHelper.requireNonNull(constants$689.X509_get_ext_count$MH,"X509_get_ext_count");
    }
    public static int X509_get_ext_count ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$689.X509_get_ext_count$MH, "X509_get_ext_count");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$690.X509_get_ext_by_NID$MH,"X509_get_ext_by_NID");
    }
    public static int X509_get_ext_by_NID ( Addressable x,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$690.X509_get_ext_by_NID$MH, "X509_get_ext_by_NID");
        try {
            return (int)mh$.invokeExact(x, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$690.X509_get_ext_by_OBJ$MH,"X509_get_ext_by_OBJ");
    }
    public static int X509_get_ext_by_OBJ ( Addressable x,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$690.X509_get_ext_by_OBJ$MH, "X509_get_ext_by_OBJ");
        try {
            return (int)mh$.invokeExact(x, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext_by_critical$MH() {
        return RuntimeHelper.requireNonNull(constants$690.X509_get_ext_by_critical$MH,"X509_get_ext_by_critical");
    }
    public static int X509_get_ext_by_critical ( Addressable x,  int crit,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$690.X509_get_ext_by_critical$MH, "X509_get_ext_by_critical");
        try {
            return (int)mh$.invokeExact(x, crit, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$690.X509_get_ext$MH,"X509_get_ext");
    }
    public static MemoryAddress X509_get_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$690.X509_get_ext$MH, "X509_get_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_delete_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$690.X509_delete_ext$MH,"X509_delete_ext");
    }
    public static MemoryAddress X509_delete_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$690.X509_delete_ext$MH, "X509_delete_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_add_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$690.X509_add_ext$MH,"X509_add_ext");
    }
    public static int X509_add_ext ( Addressable x,  Addressable ex,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$690.X509_add_ext$MH, "X509_add_ext");
        try {
            return (int)mh$.invokeExact(x, ex, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$691.X509_get_ext_d2i$MH,"X509_get_ext_d2i");
    }
    public static MemoryAddress X509_get_ext_d2i ( Addressable x,  int nid,  Addressable crit,  Addressable idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$691.X509_get_ext_d2i$MH, "X509_get_ext_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, nid, crit, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_add1_ext_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$691.X509_add1_ext_i2d$MH,"X509_add1_ext_i2d");
    }
    public static int X509_add1_ext_i2d ( Addressable x,  int nid,  Addressable value,  int crit,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$691.X509_add1_ext_i2d$MH, "X509_add1_ext_i2d");
        try {
            return (int)mh$.invokeExact(x, nid, value, crit, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_ext_count$MH() {
        return RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_count$MH,"X509_CRL_get_ext_count");
    }
    public static int X509_CRL_get_ext_count ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_count$MH, "X509_CRL_get_ext_count");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_ext_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_by_NID$MH,"X509_CRL_get_ext_by_NID");
    }
    public static int X509_CRL_get_ext_by_NID ( Addressable x,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_by_NID$MH, "X509_CRL_get_ext_by_NID");
        try {
            return (int)mh$.invokeExact(x, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_ext_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_by_OBJ$MH,"X509_CRL_get_ext_by_OBJ");
    }
    public static int X509_CRL_get_ext_by_OBJ ( Addressable x,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_by_OBJ$MH, "X509_CRL_get_ext_by_OBJ");
        try {
            return (int)mh$.invokeExact(x, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_ext_by_critical$MH() {
        return RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_by_critical$MH,"X509_CRL_get_ext_by_critical");
    }
    public static int X509_CRL_get_ext_by_critical ( Addressable x,  int crit,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$691.X509_CRL_get_ext_by_critical$MH, "X509_CRL_get_ext_by_critical");
        try {
            return (int)mh$.invokeExact(x, crit, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$692.X509_CRL_get_ext$MH,"X509_CRL_get_ext");
    }
    public static MemoryAddress X509_CRL_get_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$692.X509_CRL_get_ext$MH, "X509_CRL_get_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_delete_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$692.X509_CRL_delete_ext$MH,"X509_CRL_delete_ext");
    }
    public static MemoryAddress X509_CRL_delete_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$692.X509_CRL_delete_ext$MH, "X509_CRL_delete_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_add_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$692.X509_CRL_add_ext$MH,"X509_CRL_add_ext");
    }
    public static int X509_CRL_add_ext ( Addressable x,  Addressable ex,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$692.X509_CRL_add_ext$MH, "X509_CRL_add_ext");
        try {
            return (int)mh$.invokeExact(x, ex, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_get_ext_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$692.X509_CRL_get_ext_d2i$MH,"X509_CRL_get_ext_d2i");
    }
    public static MemoryAddress X509_CRL_get_ext_d2i ( Addressable x,  int nid,  Addressable crit,  Addressable idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$692.X509_CRL_get_ext_d2i$MH, "X509_CRL_get_ext_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, nid, crit, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_CRL_add1_ext_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$692.X509_CRL_add1_ext_i2d$MH,"X509_CRL_add1_ext_i2d");
    }
    public static int X509_CRL_add1_ext_i2d ( Addressable x,  int nid,  Addressable value,  int crit,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$692.X509_CRL_add1_ext_i2d$MH, "X509_CRL_add1_ext_i2d");
        try {
            return (int)mh$.invokeExact(x, nid, value, crit, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get_ext_count$MH() {
        return RuntimeHelper.requireNonNull(constants$692.X509_REVOKED_get_ext_count$MH,"X509_REVOKED_get_ext_count");
    }
    public static int X509_REVOKED_get_ext_count ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$692.X509_REVOKED_get_ext_count$MH, "X509_REVOKED_get_ext_count");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get_ext_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext_by_NID$MH,"X509_REVOKED_get_ext_by_NID");
    }
    public static int X509_REVOKED_get_ext_by_NID ( Addressable x,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext_by_NID$MH, "X509_REVOKED_get_ext_by_NID");
        try {
            return (int)mh$.invokeExact(x, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get_ext_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext_by_OBJ$MH,"X509_REVOKED_get_ext_by_OBJ");
    }
    public static int X509_REVOKED_get_ext_by_OBJ ( Addressable x,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext_by_OBJ$MH, "X509_REVOKED_get_ext_by_OBJ");
        try {
            return (int)mh$.invokeExact(x, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get_ext_by_critical$MH() {
        return RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext_by_critical$MH,"X509_REVOKED_get_ext_by_critical");
    }
    public static int X509_REVOKED_get_ext_by_critical ( Addressable x,  int crit,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext_by_critical$MH, "X509_REVOKED_get_ext_by_critical");
        try {
            return (int)mh$.invokeExact(x, crit, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext$MH,"X509_REVOKED_get_ext");
    }
    public static MemoryAddress X509_REVOKED_get_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_get_ext$MH, "X509_REVOKED_get_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_delete_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_delete_ext$MH,"X509_REVOKED_delete_ext");
    }
    public static MemoryAddress X509_REVOKED_delete_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_delete_ext$MH, "X509_REVOKED_delete_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_add_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_add_ext$MH,"X509_REVOKED_add_ext");
    }
    public static int X509_REVOKED_add_ext ( Addressable x,  Addressable ex,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$693.X509_REVOKED_add_ext$MH, "X509_REVOKED_add_ext");
        try {
            return (int)mh$.invokeExact(x, ex, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_get_ext_d2i$MH() {
        return RuntimeHelper.requireNonNull(constants$694.X509_REVOKED_get_ext_d2i$MH,"X509_REVOKED_get_ext_d2i");
    }
    public static MemoryAddress X509_REVOKED_get_ext_d2i ( Addressable x,  int nid,  Addressable crit,  Addressable idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$694.X509_REVOKED_get_ext_d2i$MH, "X509_REVOKED_get_ext_d2i");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, nid, crit, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_REVOKED_add1_ext_i2d$MH() {
        return RuntimeHelper.requireNonNull(constants$694.X509_REVOKED_add1_ext_i2d$MH,"X509_REVOKED_add1_ext_i2d");
    }
    public static int X509_REVOKED_add1_ext_i2d ( Addressable x,  int nid,  Addressable value,  int crit,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$694.X509_REVOKED_add1_ext_i2d$MH, "X509_REVOKED_add1_ext_i2d");
        try {
            return (int)mh$.invokeExact(x, nid, value, crit, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_create_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_create_by_NID$MH,"X509_EXTENSION_create_by_NID");
    }
    public static MemoryAddress X509_EXTENSION_create_by_NID ( Addressable ex,  int nid,  int crit,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_create_by_NID$MH, "X509_EXTENSION_create_by_NID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ex, nid, crit, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_create_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_create_by_OBJ$MH,"X509_EXTENSION_create_by_OBJ");
    }
    public static MemoryAddress X509_EXTENSION_create_by_OBJ ( Addressable ex,  Addressable obj,  int crit,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_create_by_OBJ$MH, "X509_EXTENSION_create_by_OBJ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ex, obj, crit, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_set_object$MH() {
        return RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_set_object$MH,"X509_EXTENSION_set_object");
    }
    public static int X509_EXTENSION_set_object ( Addressable ex,  Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_set_object$MH, "X509_EXTENSION_set_object");
        try {
            return (int)mh$.invokeExact(ex, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_set_critical$MH() {
        return RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_set_critical$MH,"X509_EXTENSION_set_critical");
    }
    public static int X509_EXTENSION_set_critical ( Addressable ex,  int crit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$694.X509_EXTENSION_set_critical$MH, "X509_EXTENSION_set_critical");
        try {
            return (int)mh$.invokeExact(ex, crit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_set_data$MH,"X509_EXTENSION_set_data");
    }
    public static int X509_EXTENSION_set_data ( Addressable ex,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_set_data$MH, "X509_EXTENSION_set_data");
        try {
            return (int)mh$.invokeExact(ex, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_get_object$MH() {
        return RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_get_object$MH,"X509_EXTENSION_get_object");
    }
    public static MemoryAddress X509_EXTENSION_get_object ( Addressable ex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_get_object$MH, "X509_EXTENSION_get_object");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_get_data$MH,"X509_EXTENSION_get_data");
    }
    public static MemoryAddress X509_EXTENSION_get_data ( Addressable ne) {
        var mh$ = RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_get_data$MH, "X509_EXTENSION_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_get_critical$MH() {
        return RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_get_critical$MH,"X509_EXTENSION_get_critical");
    }
    public static int X509_EXTENSION_get_critical ( Addressable ex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$695.X509_EXTENSION_get_critical$MH, "X509_EXTENSION_get_critical");
        try {
            return (int)mh$.invokeExact(ex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_get_attr_count$MH() {
        return RuntimeHelper.requireNonNull(constants$695.X509at_get_attr_count$MH,"X509at_get_attr_count");
    }
    public static int X509at_get_attr_count ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$695.X509at_get_attr_count$MH, "X509at_get_attr_count");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_get_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$695.X509at_get_attr_by_NID$MH,"X509at_get_attr_by_NID");
    }
    public static int X509at_get_attr_by_NID ( Addressable x,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$695.X509at_get_attr_by_NID$MH, "X509at_get_attr_by_NID");
        try {
            return (int)mh$.invokeExact(x, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_get_attr_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$696.X509at_get_attr_by_OBJ$MH,"X509at_get_attr_by_OBJ");
    }
    public static int X509at_get_attr_by_OBJ ( Addressable sk,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$696.X509at_get_attr_by_OBJ$MH, "X509at_get_attr_by_OBJ");
        try {
            return (int)mh$.invokeExact(sk, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$696.X509at_get_attr$MH,"X509at_get_attr");
    }
    public static MemoryAddress X509at_get_attr ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$696.X509at_get_attr$MH, "X509at_get_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_delete_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$696.X509at_delete_attr$MH,"X509at_delete_attr");
    }
    public static MemoryAddress X509at_delete_attr ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$696.X509at_delete_attr$MH, "X509at_delete_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_add1_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$696.X509at_add1_attr$MH,"X509at_add1_attr");
    }
    public static MemoryAddress X509at_add1_attr ( Addressable x,  Addressable attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$696.X509at_add1_attr$MH, "X509at_add1_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_add1_attr_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$696.X509at_add1_attr_by_OBJ$MH,"X509at_add1_attr_by_OBJ");
    }
    public static MemoryAddress X509at_add1_attr_by_OBJ ( Addressable x,  Addressable obj,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$696.X509at_add1_attr_by_OBJ$MH, "X509at_add1_attr_by_OBJ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, obj, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_add1_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$696.X509at_add1_attr_by_NID$MH,"X509at_add1_attr_by_NID");
    }
    public static MemoryAddress X509at_add1_attr_by_NID ( Addressable x,  int nid,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$696.X509at_add1_attr_by_NID$MH, "X509at_add1_attr_by_NID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, nid, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_add1_attr_by_txt$MH() {
        return RuntimeHelper.requireNonNull(constants$697.X509at_add1_attr_by_txt$MH,"X509at_add1_attr_by_txt");
    }
    public static MemoryAddress X509at_add1_attr_by_txt ( Addressable x,  Addressable attrname,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$697.X509at_add1_attr_by_txt$MH, "X509at_add1_attr_by_txt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, attrname, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509at_get0_data_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$697.X509at_get0_data_by_OBJ$MH,"X509at_get0_data_by_OBJ");
    }
    public static MemoryAddress X509at_get0_data_by_OBJ ( Addressable x,  Addressable obj,  int lastpos,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$697.X509at_get0_data_by_OBJ$MH, "X509at_get0_data_by_OBJ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, obj, lastpos, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_create_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_create_by_NID$MH,"X509_ATTRIBUTE_create_by_NID");
    }
    public static MemoryAddress X509_ATTRIBUTE_create_by_NID ( Addressable attr,  int nid,  int atrtype,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_create_by_NID$MH, "X509_ATTRIBUTE_create_by_NID");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attr, nid, atrtype, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_create_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_create_by_OBJ$MH,"X509_ATTRIBUTE_create_by_OBJ");
    }
    public static MemoryAddress X509_ATTRIBUTE_create_by_OBJ ( Addressable attr,  Addressable obj,  int atrtype,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_create_by_OBJ$MH, "X509_ATTRIBUTE_create_by_OBJ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attr, obj, atrtype, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_create_by_txt$MH() {
        return RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_create_by_txt$MH,"X509_ATTRIBUTE_create_by_txt");
    }
    public static MemoryAddress X509_ATTRIBUTE_create_by_txt ( Addressable attr,  Addressable atrname,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_create_by_txt$MH, "X509_ATTRIBUTE_create_by_txt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attr, atrname, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_set1_object$MH() {
        return RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_set1_object$MH,"X509_ATTRIBUTE_set1_object");
    }
    public static int X509_ATTRIBUTE_set1_object ( Addressable attr,  Addressable obj) {
        var mh$ = RuntimeHelper.requireNonNull(constants$697.X509_ATTRIBUTE_set1_object$MH, "X509_ATTRIBUTE_set1_object");
        try {
            return (int)mh$.invokeExact(attr, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_set1_data$MH() {
        return RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_set1_data$MH,"X509_ATTRIBUTE_set1_data");
    }
    public static int X509_ATTRIBUTE_set1_data ( Addressable attr,  int attrtype,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_set1_data$MH, "X509_ATTRIBUTE_set1_data");
        try {
            return (int)mh$.invokeExact(attr, attrtype, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_get0_data$MH() {
        return RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_get0_data$MH,"X509_ATTRIBUTE_get0_data");
    }
    public static MemoryAddress X509_ATTRIBUTE_get0_data ( Addressable attr,  int idx,  int atrtype,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_get0_data$MH, "X509_ATTRIBUTE_get0_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attr, idx, atrtype, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_count$MH() {
        return RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_count$MH,"X509_ATTRIBUTE_count");
    }
    public static int X509_ATTRIBUTE_count ( Addressable attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_count$MH, "X509_ATTRIBUTE_count");
        try {
            return (int)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_get0_object$MH() {
        return RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_get0_object$MH,"X509_ATTRIBUTE_get0_object");
    }
    public static MemoryAddress X509_ATTRIBUTE_get0_object ( Addressable attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_get0_object$MH, "X509_ATTRIBUTE_get0_object");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_ATTRIBUTE_get0_type$MH() {
        return RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_get0_type$MH,"X509_ATTRIBUTE_get0_type");
    }
    public static MemoryAddress X509_ATTRIBUTE_get0_type ( Addressable attr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$698.X509_ATTRIBUTE_get0_type$MH, "X509_ATTRIBUTE_get0_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(attr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_attr_count$MH() {
        return RuntimeHelper.requireNonNull(constants$698.EVP_PKEY_get_attr_count$MH,"EVP_PKEY_get_attr_count");
    }
    public static int EVP_PKEY_get_attr_count ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$698.EVP_PKEY_get_attr_count$MH, "EVP_PKEY_get_attr_count");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_get_attr_by_NID$MH,"EVP_PKEY_get_attr_by_NID");
    }
    public static int EVP_PKEY_get_attr_by_NID ( Addressable key,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_get_attr_by_NID$MH, "EVP_PKEY_get_attr_by_NID");
        try {
            return (int)mh$.invokeExact(key, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_attr_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_get_attr_by_OBJ$MH,"EVP_PKEY_get_attr_by_OBJ");
    }
    public static int EVP_PKEY_get_attr_by_OBJ ( Addressable key,  Addressable obj,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_get_attr_by_OBJ$MH, "EVP_PKEY_get_attr_by_OBJ");
        try {
            return (int)mh$.invokeExact(key, obj, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_get_attr$MH,"EVP_PKEY_get_attr");
    }
    public static MemoryAddress EVP_PKEY_get_attr ( Addressable key,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_get_attr$MH, "EVP_PKEY_get_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_delete_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_delete_attr$MH,"EVP_PKEY_delete_attr");
    }
    public static MemoryAddress EVP_PKEY_delete_attr ( Addressable key,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_delete_attr$MH, "EVP_PKEY_delete_attr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_add1_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_add1_attr$MH,"EVP_PKEY_add1_attr");
    }
    public static int EVP_PKEY_add1_attr ( Addressable key,  Addressable attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_add1_attr$MH, "EVP_PKEY_add1_attr");
        try {
            return (int)mh$.invokeExact(key, attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_add1_attr_by_OBJ$MH() {
        return RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_add1_attr_by_OBJ$MH,"EVP_PKEY_add1_attr_by_OBJ");
    }
    public static int EVP_PKEY_add1_attr_by_OBJ ( Addressable key,  Addressable obj,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$699.EVP_PKEY_add1_attr_by_OBJ$MH, "EVP_PKEY_add1_attr_by_OBJ");
        try {
            return (int)mh$.invokeExact(key, obj, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_add1_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$700.EVP_PKEY_add1_attr_by_NID$MH,"EVP_PKEY_add1_attr_by_NID");
    }
    public static int EVP_PKEY_add1_attr_by_NID ( Addressable key,  int nid,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$700.EVP_PKEY_add1_attr_by_NID$MH, "EVP_PKEY_add1_attr_by_NID");
        try {
            return (int)mh$.invokeExact(key, nid, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_add1_attr_by_txt$MH() {
        return RuntimeHelper.requireNonNull(constants$700.EVP_PKEY_add1_attr_by_txt$MH,"EVP_PKEY_add1_attr_by_txt");
    }
    public static int EVP_PKEY_add1_attr_by_txt ( Addressable key,  Addressable attrname,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$700.EVP_PKEY_add1_attr_by_txt$MH, "EVP_PKEY_add1_attr_by_txt");
        try {
            return (int)mh$.invokeExact(key, attrname, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_verify_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$700.X509_verify_cert$MH,"X509_verify_cert");
    }
    public static int X509_verify_cert ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$700.X509_verify_cert$MH, "X509_verify_cert");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_find_by_issuer_and_serial$MH() {
        return RuntimeHelper.requireNonNull(constants$700.X509_find_by_issuer_and_serial$MH,"X509_find_by_issuer_and_serial");
    }
    public static MemoryAddress X509_find_by_issuer_and_serial ( Addressable sk,  Addressable name,  Addressable serial) {
        var mh$ = RuntimeHelper.requireNonNull(constants$700.X509_find_by_issuer_and_serial$MH, "X509_find_by_issuer_and_serial");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, name, serial);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_find_by_subject$MH() {
        return RuntimeHelper.requireNonNull(constants$700.X509_find_by_subject$MH,"X509_find_by_subject");
    }
    public static MemoryAddress X509_find_by_subject ( Addressable sk,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$700.X509_find_by_subject$MH, "X509_find_by_subject");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PBEPARAM_new$MH() {
        return RuntimeHelper.requireNonNull(constants$700.PBEPARAM_new$MH,"PBEPARAM_new");
    }
    public static MemoryAddress PBEPARAM_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$700.PBEPARAM_new$MH, "PBEPARAM_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PBEPARAM_free$MH() {
        return RuntimeHelper.requireNonNull(constants$701.PBEPARAM_free$MH,"PBEPARAM_free");
    }
    public static void PBEPARAM_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$701.PBEPARAM_free$MH, "PBEPARAM_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PBEPARAM$MH() {
        return RuntimeHelper.requireNonNull(constants$701.d2i_PBEPARAM$MH,"d2i_PBEPARAM");
    }
    public static MemoryAddress d2i_PBEPARAM ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$701.d2i_PBEPARAM$MH, "d2i_PBEPARAM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PBEPARAM$MH() {
        return RuntimeHelper.requireNonNull(constants$701.i2d_PBEPARAM$MH,"i2d_PBEPARAM");
    }
    public static int i2d_PBEPARAM ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$701.i2d_PBEPARAM$MH, "i2d_PBEPARAM");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PBE2PARAM_new$MH() {
        return RuntimeHelper.requireNonNull(constants$701.PBE2PARAM_new$MH,"PBE2PARAM_new");
    }
    public static MemoryAddress PBE2PARAM_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$701.PBE2PARAM_new$MH, "PBE2PARAM_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PBE2PARAM_free$MH() {
        return RuntimeHelper.requireNonNull(constants$701.PBE2PARAM_free$MH,"PBE2PARAM_free");
    }
    public static void PBE2PARAM_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$701.PBE2PARAM_free$MH, "PBE2PARAM_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PBE2PARAM$MH() {
        return RuntimeHelper.requireNonNull(constants$701.d2i_PBE2PARAM$MH,"d2i_PBE2PARAM");
    }
    public static MemoryAddress d2i_PBE2PARAM ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$701.d2i_PBE2PARAM$MH, "d2i_PBE2PARAM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PBE2PARAM$MH() {
        return RuntimeHelper.requireNonNull(constants$702.i2d_PBE2PARAM$MH,"i2d_PBE2PARAM");
    }
    public static int i2d_PBE2PARAM ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$702.i2d_PBE2PARAM$MH, "i2d_PBE2PARAM");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PBKDF2PARAM_new$MH() {
        return RuntimeHelper.requireNonNull(constants$702.PBKDF2PARAM_new$MH,"PBKDF2PARAM_new");
    }
    public static MemoryAddress PBKDF2PARAM_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$702.PBKDF2PARAM_new$MH, "PBKDF2PARAM_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PBKDF2PARAM_free$MH() {
        return RuntimeHelper.requireNonNull(constants$702.PBKDF2PARAM_free$MH,"PBKDF2PARAM_free");
    }
    public static void PBKDF2PARAM_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$702.PBKDF2PARAM_free$MH, "PBKDF2PARAM_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PBKDF2PARAM$MH() {
        return RuntimeHelper.requireNonNull(constants$702.d2i_PBKDF2PARAM$MH,"d2i_PBKDF2PARAM");
    }
    public static MemoryAddress d2i_PBKDF2PARAM ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$702.d2i_PBKDF2PARAM$MH, "d2i_PBKDF2PARAM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PBKDF2PARAM$MH() {
        return RuntimeHelper.requireNonNull(constants$702.i2d_PBKDF2PARAM$MH,"i2d_PBKDF2PARAM");
    }
    public static int i2d_PBKDF2PARAM ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$702.i2d_PBKDF2PARAM$MH, "i2d_PBKDF2PARAM");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCRYPT_PARAMS_new$MH() {
        return RuntimeHelper.requireNonNull(constants$702.SCRYPT_PARAMS_new$MH,"SCRYPT_PARAMS_new");
    }
    public static MemoryAddress SCRYPT_PARAMS_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$702.SCRYPT_PARAMS_new$MH, "SCRYPT_PARAMS_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCRYPT_PARAMS_free$MH() {
        return RuntimeHelper.requireNonNull(constants$703.SCRYPT_PARAMS_free$MH,"SCRYPT_PARAMS_free");
    }
    public static void SCRYPT_PARAMS_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$703.SCRYPT_PARAMS_free$MH, "SCRYPT_PARAMS_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_SCRYPT_PARAMS$MH() {
        return RuntimeHelper.requireNonNull(constants$703.d2i_SCRYPT_PARAMS$MH,"d2i_SCRYPT_PARAMS");
    }
    public static MemoryAddress d2i_SCRYPT_PARAMS ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$703.d2i_SCRYPT_PARAMS$MH, "d2i_SCRYPT_PARAMS");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_SCRYPT_PARAMS$MH() {
        return RuntimeHelper.requireNonNull(constants$703.i2d_SCRYPT_PARAMS$MH,"i2d_SCRYPT_PARAMS");
    }
    public static int i2d_SCRYPT_PARAMS ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$703.i2d_SCRYPT_PARAMS$MH, "i2d_SCRYPT_PARAMS");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_pbe_set0_algor$MH() {
        return RuntimeHelper.requireNonNull(constants$703.PKCS5_pbe_set0_algor$MH,"PKCS5_pbe_set0_algor");
    }
    public static int PKCS5_pbe_set0_algor ( Addressable algor,  int alg,  int iter,  Addressable salt,  int saltlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$703.PKCS5_pbe_set0_algor$MH, "PKCS5_pbe_set0_algor");
        try {
            return (int)mh$.invokeExact(algor, alg, iter, salt, saltlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_pbe_set$MH() {
        return RuntimeHelper.requireNonNull(constants$703.PKCS5_pbe_set$MH,"PKCS5_pbe_set");
    }
    public static MemoryAddress PKCS5_pbe_set ( int alg,  int iter,  Addressable salt,  int saltlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$703.PKCS5_pbe_set$MH, "PKCS5_pbe_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(alg, iter, salt, saltlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_pbe2_set$MH() {
        return RuntimeHelper.requireNonNull(constants$703.PKCS5_pbe2_set$MH,"PKCS5_pbe2_set");
    }
    public static MemoryAddress PKCS5_pbe2_set ( Addressable cipher,  int iter,  Addressable salt,  int saltlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$703.PKCS5_pbe2_set$MH, "PKCS5_pbe2_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher, iter, salt, saltlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_pbe2_set_iv$MH() {
        return RuntimeHelper.requireNonNull(constants$704.PKCS5_pbe2_set_iv$MH,"PKCS5_pbe2_set_iv");
    }
    public static MemoryAddress PKCS5_pbe2_set_iv ( Addressable cipher,  int iter,  Addressable salt,  int saltlen,  Addressable aiv,  int prf_nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$704.PKCS5_pbe2_set_iv$MH, "PKCS5_pbe2_set_iv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher, iter, salt, saltlen, aiv, prf_nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_pbe2_set_scrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$704.PKCS5_pbe2_set_scrypt$MH,"PKCS5_pbe2_set_scrypt");
    }
    public static MemoryAddress PKCS5_pbe2_set_scrypt ( Addressable cipher,  Addressable salt,  int saltlen,  Addressable aiv,  long N,  long r,  long p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$704.PKCS5_pbe2_set_scrypt$MH, "PKCS5_pbe2_set_scrypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cipher, salt, saltlen, aiv, N, r, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS5_pbkdf2_set$MH() {
        return RuntimeHelper.requireNonNull(constants$704.PKCS5_pbkdf2_set$MH,"PKCS5_pbkdf2_set");
    }
    public static MemoryAddress PKCS5_pbkdf2_set ( int iter,  Addressable salt,  int saltlen,  int prf_nid,  int keylen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$704.PKCS5_pbkdf2_set$MH, "PKCS5_pbkdf2_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter, salt, saltlen, prf_nid, keylen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_PRIV_KEY_INFO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$704.PKCS8_PRIV_KEY_INFO_new$MH,"PKCS8_PRIV_KEY_INFO_new");
    }
    public static MemoryAddress PKCS8_PRIV_KEY_INFO_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$704.PKCS8_PRIV_KEY_INFO_new$MH, "PKCS8_PRIV_KEY_INFO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_PRIV_KEY_INFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$704.PKCS8_PRIV_KEY_INFO_free$MH,"PKCS8_PRIV_KEY_INFO_free");
    }
    public static void PKCS8_PRIV_KEY_INFO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$704.PKCS8_PRIV_KEY_INFO_free$MH, "PKCS8_PRIV_KEY_INFO_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8_PRIV_KEY_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$704.d2i_PKCS8_PRIV_KEY_INFO$MH,"d2i_PKCS8_PRIV_KEY_INFO");
    }
    public static MemoryAddress d2i_PKCS8_PRIV_KEY_INFO ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$704.d2i_PKCS8_PRIV_KEY_INFO$MH, "d2i_PKCS8_PRIV_KEY_INFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8_PRIV_KEY_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$705.i2d_PKCS8_PRIV_KEY_INFO$MH,"i2d_PKCS8_PRIV_KEY_INFO");
    }
    public static int i2d_PKCS8_PRIV_KEY_INFO ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$705.i2d_PKCS8_PRIV_KEY_INFO$MH, "i2d_PKCS8_PRIV_KEY_INFO");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKCS82PKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$705.EVP_PKCS82PKEY$MH,"EVP_PKCS82PKEY");
    }
    public static MemoryAddress EVP_PKCS82PKEY ( Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$705.EVP_PKCS82PKEY$MH, "EVP_PKCS82PKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY2PKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$705.EVP_PKEY2PKCS8$MH,"EVP_PKEY2PKCS8");
    }
    public static MemoryAddress EVP_PKEY2PKCS8 ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$705.EVP_PKEY2PKCS8$MH, "EVP_PKEY2PKCS8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_pkey_set0$MH() {
        return RuntimeHelper.requireNonNull(constants$705.PKCS8_pkey_set0$MH,"PKCS8_pkey_set0");
    }
    public static int PKCS8_pkey_set0 ( Addressable priv,  Addressable aobj,  int version,  int ptype,  Addressable pval,  Addressable penc,  int penclen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$705.PKCS8_pkey_set0$MH, "PKCS8_pkey_set0");
        try {
            return (int)mh$.invokeExact(priv, aobj, version, ptype, pval, penc, penclen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_pkey_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$705.PKCS8_pkey_get0$MH,"PKCS8_pkey_get0");
    }
    public static int PKCS8_pkey_get0 ( Addressable ppkalg,  Addressable pk,  Addressable ppklen,  Addressable pa,  Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$705.PKCS8_pkey_get0$MH, "PKCS8_pkey_get0");
        try {
            return (int)mh$.invokeExact(ppkalg, pk, ppklen, pa, p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_pkey_get0_attrs$MH() {
        return RuntimeHelper.requireNonNull(constants$705.PKCS8_pkey_get0_attrs$MH,"PKCS8_pkey_get0_attrs");
    }
    public static MemoryAddress PKCS8_pkey_get0_attrs ( Addressable p8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$705.PKCS8_pkey_get0_attrs$MH, "PKCS8_pkey_get0_attrs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS8_pkey_add1_attr_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$706.PKCS8_pkey_add1_attr_by_NID$MH,"PKCS8_pkey_add1_attr_by_NID");
    }
    public static int PKCS8_pkey_add1_attr_by_NID ( Addressable p8,  int nid,  int type,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$706.PKCS8_pkey_add1_attr_by_NID$MH, "PKCS8_pkey_add1_attr_by_NID");
        try {
            return (int)mh$.invokeExact(p8, nid, type, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_set0_param$MH() {
        return RuntimeHelper.requireNonNull(constants$706.X509_PUBKEY_set0_param$MH,"X509_PUBKEY_set0_param");
    }
    public static int X509_PUBKEY_set0_param ( Addressable pub,  Addressable aobj,  int ptype,  Addressable pval,  Addressable penc,  int penclen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$706.X509_PUBKEY_set0_param$MH, "X509_PUBKEY_set0_param");
        try {
            return (int)mh$.invokeExact(pub, aobj, ptype, pval, penc, penclen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_PUBKEY_get0_param$MH() {
        return RuntimeHelper.requireNonNull(constants$706.X509_PUBKEY_get0_param$MH,"X509_PUBKEY_get0_param");
    }
    public static int X509_PUBKEY_get0_param ( Addressable ppkalg,  Addressable pk,  Addressable ppklen,  Addressable pa,  Addressable pub) {
        var mh$ = RuntimeHelper.requireNonNull(constants$706.X509_PUBKEY_get0_param$MH, "X509_PUBKEY_get0_param");
        try {
            return (int)mh$.invokeExact(ppkalg, pk, ppklen, pa, pub);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_trust$MH() {
        return RuntimeHelper.requireNonNull(constants$706.X509_check_trust$MH,"X509_check_trust");
    }
    public static int X509_check_trust ( Addressable x,  int id,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$706.X509_check_trust$MH, "X509_check_trust");
        try {
            return (int)mh$.invokeExact(x, id, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_get_count$MH() {
        return RuntimeHelper.requireNonNull(constants$706.X509_TRUST_get_count$MH,"X509_TRUST_get_count");
    }
    public static int X509_TRUST_get_count () {
        var mh$ = RuntimeHelper.requireNonNull(constants$706.X509_TRUST_get_count$MH, "X509_TRUST_get_count");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_get0$MH() {
        return RuntimeHelper.requireNonNull(constants$706.X509_TRUST_get0$MH,"X509_TRUST_get0");
    }
    public static MemoryAddress X509_TRUST_get0 ( int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$706.X509_TRUST_get0$MH, "X509_TRUST_get0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_get_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$707.X509_TRUST_get_by_id$MH,"X509_TRUST_get_by_id");
    }
    public static int X509_TRUST_get_by_id ( int id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$707.X509_TRUST_get_by_id$MH, "X509_TRUST_get_by_id");
        try {
            return (int)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_add$MH() {
        return RuntimeHelper.requireNonNull(constants$707.X509_TRUST_add$MH,"X509_TRUST_add");
    }
    public static int X509_TRUST_add ( int id,  int flags,  Addressable ck,  Addressable name,  int arg1,  Addressable arg2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$707.X509_TRUST_add$MH, "X509_TRUST_add");
        try {
            return (int)mh$.invokeExact(id, flags, ck, name, arg1, arg2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$707.X509_TRUST_cleanup$MH,"X509_TRUST_cleanup");
    }
    public static void X509_TRUST_cleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$707.X509_TRUST_cleanup$MH, "X509_TRUST_cleanup");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$707.X509_TRUST_get_flags$MH,"X509_TRUST_get_flags");
    }
    public static int X509_TRUST_get_flags ( Addressable xp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$707.X509_TRUST_get_flags$MH, "X509_TRUST_get_flags");
        try {
            return (int)mh$.invokeExact(xp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_get0_name$MH() {
        return RuntimeHelper.requireNonNull(constants$708.X509_TRUST_get0_name$MH,"X509_TRUST_get0_name");
    }
    public static MemoryAddress X509_TRUST_get0_name ( Addressable xp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$708.X509_TRUST_get0_name$MH, "X509_TRUST_get0_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(xp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_TRUST_get_trust$MH() {
        return RuntimeHelper.requireNonNull(constants$708.X509_TRUST_get_trust$MH,"X509_TRUST_get_trust");
    }
    public static int X509_TRUST_get_trust ( Addressable xp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$708.X509_TRUST_get_trust$MH, "X509_TRUST_get_trust");
        try {
            return (int)mh$.invokeExact(xp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_PEM_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$708.ERR_load_PEM_strings$MH,"ERR_load_PEM_strings");
    }
    public static int ERR_load_PEM_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$708.ERR_load_PEM_strings$MH, "ERR_load_PEM_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_get_EVP_CIPHER_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$708.PEM_get_EVP_CIPHER_INFO$MH,"PEM_get_EVP_CIPHER_INFO");
    }
    public static int PEM_get_EVP_CIPHER_INFO ( Addressable header,  Addressable cipher) {
        var mh$ = RuntimeHelper.requireNonNull(constants$708.PEM_get_EVP_CIPHER_INFO$MH, "PEM_get_EVP_CIPHER_INFO");
        try {
            return (int)mh$.invokeExact(header, cipher);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_do_header$MH() {
        return RuntimeHelper.requireNonNull(constants$709.PEM_do_header$MH,"PEM_do_header");
    }
    public static int PEM_do_header ( Addressable cipher,  Addressable data,  Addressable len,  Addressable callback,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$709.PEM_do_header$MH, "PEM_do_header");
        try {
            return (int)mh$.invokeExact(cipher, data, len, callback, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$709.PEM_read_bio$MH,"PEM_read_bio");
    }
    public static int PEM_read_bio ( Addressable bp,  Addressable name,  Addressable header,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$709.PEM_read_bio$MH, "PEM_read_bio");
        try {
            return (int)mh$.invokeExact(bp, name, header, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$709.PEM_read_bio_ex$MH,"PEM_read_bio_ex");
    }
    public static int PEM_read_bio_ex ( Addressable bp,  Addressable name,  Addressable header,  Addressable data,  Addressable len,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$709.PEM_read_bio_ex$MH, "PEM_read_bio_ex");
        try {
            return (int)mh$.invokeExact(bp, name, header, data, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_bytes_read_bio_secmem$MH() {
        return RuntimeHelper.requireNonNull(constants$709.PEM_bytes_read_bio_secmem$MH,"PEM_bytes_read_bio_secmem");
    }
    public static int PEM_bytes_read_bio_secmem ( Addressable pdata,  Addressable plen,  Addressable pnm,  Addressable name,  Addressable bp,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$709.PEM_bytes_read_bio_secmem$MH, "PEM_bytes_read_bio_secmem");
        try {
            return (int)mh$.invokeExact(pdata, plen, pnm, name, bp, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$709.PEM_write_bio$MH,"PEM_write_bio");
    }
    public static int PEM_write_bio ( Addressable bp,  Addressable name,  Addressable hdr,  Addressable data,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$709.PEM_write_bio$MH, "PEM_write_bio");
        try {
            return (int)mh$.invokeExact(bp, name, hdr, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_bytes_read_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$709.PEM_bytes_read_bio$MH,"PEM_bytes_read_bio");
    }
    public static int PEM_bytes_read_bio ( Addressable pdata,  Addressable plen,  Addressable pnm,  Addressable name,  Addressable bp,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$709.PEM_bytes_read_bio$MH, "PEM_bytes_read_bio");
        try {
            return (int)mh$.invokeExact(pdata, plen, pnm, name, bp, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_ASN1_read_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$710.PEM_ASN1_read_bio$MH,"PEM_ASN1_read_bio");
    }
    public static MemoryAddress PEM_ASN1_read_bio ( Addressable d2i,  Addressable name,  Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$710.PEM_ASN1_read_bio$MH, "PEM_ASN1_read_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(d2i, name, bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_ASN1_write_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$710.PEM_ASN1_write_bio$MH,"PEM_ASN1_write_bio");
    }
    public static int PEM_ASN1_write_bio ( Addressable i2d,  Addressable name,  Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$710.PEM_ASN1_write_bio$MH, "PEM_ASN1_write_bio");
        try {
            return (int)mh$.invokeExact(i2d, name, bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_X509_INFO_read_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$710.PEM_X509_INFO_read_bio$MH,"PEM_X509_INFO_read_bio");
    }
    public static MemoryAddress PEM_X509_INFO_read_bio ( Addressable bp,  Addressable sk,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$710.PEM_X509_INFO_read_bio$MH, "PEM_X509_INFO_read_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, sk, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_X509_INFO_write_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$710.PEM_X509_INFO_write_bio$MH,"PEM_X509_INFO_write_bio");
    }
    public static int PEM_X509_INFO_write_bio ( Addressable bp,  Addressable xi,  Addressable enc,  Addressable kstr,  int klen,  Addressable cd,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$710.PEM_X509_INFO_write_bio$MH, "PEM_X509_INFO_write_bio");
        try {
            return (int)mh$.invokeExact(bp, xi, enc, kstr, klen, cd, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read$MH() {
        return RuntimeHelper.requireNonNull(constants$710.PEM_read$MH,"PEM_read");
    }
    public static int PEM_read ( Addressable fp,  Addressable name,  Addressable header,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$710.PEM_read$MH, "PEM_read");
        try {
            return (int)mh$.invokeExact(fp, name, header, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write$MH() {
        return RuntimeHelper.requireNonNull(constants$710.PEM_write$MH,"PEM_write");
    }
    public static int PEM_write ( Addressable fp,  Addressable name,  Addressable hdr,  Addressable data,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$710.PEM_write$MH, "PEM_write");
        try {
            return (int)mh$.invokeExact(fp, name, hdr, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_ASN1_read$MH() {
        return RuntimeHelper.requireNonNull(constants$711.PEM_ASN1_read$MH,"PEM_ASN1_read");
    }
    public static MemoryAddress PEM_ASN1_read ( Addressable d2i,  Addressable name,  Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$711.PEM_ASN1_read$MH, "PEM_ASN1_read");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(d2i, name, fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_ASN1_write$MH() {
        return RuntimeHelper.requireNonNull(constants$711.PEM_ASN1_write$MH,"PEM_ASN1_write");
    }
    public static int PEM_ASN1_write ( Addressable i2d,  Addressable name,  Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable callback,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$711.PEM_ASN1_write$MH, "PEM_ASN1_write");
        try {
            return (int)mh$.invokeExact(i2d, name, fp, x, enc, kstr, klen, callback, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_X509_INFO_read$MH() {
        return RuntimeHelper.requireNonNull(constants$711.PEM_X509_INFO_read$MH,"PEM_X509_INFO_read");
    }
    public static MemoryAddress PEM_X509_INFO_read ( Addressable fp,  Addressable sk,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$711.PEM_X509_INFO_read$MH, "PEM_X509_INFO_read");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, sk, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_SignInit$MH() {
        return RuntimeHelper.requireNonNull(constants$711.PEM_SignInit$MH,"PEM_SignInit");
    }
    public static int PEM_SignInit ( Addressable ctx,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$711.PEM_SignInit$MH, "PEM_SignInit");
        try {
            return (int)mh$.invokeExact(ctx, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_SignUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$711.PEM_SignUpdate$MH,"PEM_SignUpdate");
    }
    public static int PEM_SignUpdate ( Addressable ctx,  Addressable d,  int cnt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$711.PEM_SignUpdate$MH, "PEM_SignUpdate");
        try {
            return (int)mh$.invokeExact(ctx, d, cnt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_SignFinal$MH() {
        return RuntimeHelper.requireNonNull(constants$711.PEM_SignFinal$MH,"PEM_SignFinal");
    }
    public static int PEM_SignFinal ( Addressable ctx,  Addressable sigret,  Addressable siglen,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$711.PEM_SignFinal$MH, "PEM_SignFinal");
        try {
            return (int)mh$.invokeExact(ctx, sigret, siglen, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_def_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$712.PEM_def_callback$MH,"PEM_def_callback");
    }
    public static int PEM_def_callback ( Addressable buf,  int num,  int rwflag,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(constants$712.PEM_def_callback$MH, "PEM_def_callback");
        try {
            return (int)mh$.invokeExact(buf, num, rwflag, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_proc_type$MH() {
        return RuntimeHelper.requireNonNull(constants$712.PEM_proc_type$MH,"PEM_proc_type");
    }
    public static void PEM_proc_type ( Addressable buf,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$712.PEM_proc_type$MH, "PEM_proc_type");
        try {
            mh$.invokeExact(buf, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_dek_info$MH() {
        return RuntimeHelper.requireNonNull(constants$712.PEM_dek_info$MH,"PEM_dek_info");
    }
    public static void PEM_dek_info ( Addressable buf,  Addressable type,  int len,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$712.PEM_dek_info$MH, "PEM_dek_info");
        try {
            mh$.invokeExact(buf, type, len, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$712.PEM_read_bio_X509$MH,"PEM_read_bio_X509");
    }
    public static MemoryAddress PEM_read_bio_X509 ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$712.PEM_read_bio_X509$MH, "PEM_read_bio_X509");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$712.PEM_read_X509$MH,"PEM_read_X509");
    }
    public static MemoryAddress PEM_read_X509 ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$712.PEM_read_X509$MH, "PEM_read_X509");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$712.PEM_write_bio_X509$MH,"PEM_write_bio_X509");
    }
    public static int PEM_write_bio_X509 ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$712.PEM_write_bio_X509$MH, "PEM_write_bio_X509");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$713.PEM_write_X509$MH,"PEM_write_X509");
    }
    public static int PEM_write_X509 ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$713.PEM_write_X509$MH, "PEM_write_X509");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$713.PEM_read_bio_X509_AUX$MH,"PEM_read_bio_X509_AUX");
    }
    public static MemoryAddress PEM_read_bio_X509_AUX ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$713.PEM_read_bio_X509_AUX$MH, "PEM_read_bio_X509_AUX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$713.PEM_read_X509_AUX$MH,"PEM_read_X509_AUX");
    }
    public static MemoryAddress PEM_read_X509_AUX ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$713.PEM_read_X509_AUX$MH, "PEM_read_X509_AUX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$713.PEM_write_bio_X509_AUX$MH,"PEM_write_bio_X509_AUX");
    }
    public static int PEM_write_bio_X509_AUX ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$713.PEM_write_bio_X509_AUX$MH, "PEM_write_bio_X509_AUX");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$713.PEM_write_X509_AUX$MH,"PEM_write_X509_AUX");
    }
    public static int PEM_write_X509_AUX ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$713.PEM_write_X509_AUX$MH, "PEM_write_X509_AUX");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$713.PEM_read_bio_X509_REQ$MH,"PEM_read_bio_X509_REQ");
    }
    public static MemoryAddress PEM_read_bio_X509_REQ ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$713.PEM_read_bio_X509_REQ$MH, "PEM_read_bio_X509_REQ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$714.PEM_read_X509_REQ$MH,"PEM_read_X509_REQ");
    }
    public static MemoryAddress PEM_read_X509_REQ ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$714.PEM_read_X509_REQ$MH, "PEM_read_X509_REQ");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$714.PEM_write_bio_X509_REQ$MH,"PEM_write_bio_X509_REQ");
    }
    public static int PEM_write_bio_X509_REQ ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$714.PEM_write_bio_X509_REQ$MH, "PEM_write_bio_X509_REQ");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_X509_REQ$MH() {
        return RuntimeHelper.requireNonNull(constants$714.PEM_write_X509_REQ$MH,"PEM_write_X509_REQ");
    }
    public static int PEM_write_X509_REQ ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$714.PEM_write_X509_REQ$MH, "PEM_write_X509_REQ");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_X509_REQ_NEW$MH() {
        return RuntimeHelper.requireNonNull(constants$714.PEM_write_bio_X509_REQ_NEW$MH,"PEM_write_bio_X509_REQ_NEW");
    }
    public static int PEM_write_bio_X509_REQ_NEW ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$714.PEM_write_bio_X509_REQ_NEW$MH, "PEM_write_bio_X509_REQ_NEW");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_X509_REQ_NEW$MH() {
        return RuntimeHelper.requireNonNull(constants$714.PEM_write_X509_REQ_NEW$MH,"PEM_write_X509_REQ_NEW");
    }
    public static int PEM_write_X509_REQ_NEW ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$714.PEM_write_X509_REQ_NEW$MH, "PEM_write_X509_REQ_NEW");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_X509_CRL$MH() {
        return RuntimeHelper.requireNonNull(constants$714.PEM_read_bio_X509_CRL$MH,"PEM_read_bio_X509_CRL");
    }
    public static MemoryAddress PEM_read_bio_X509_CRL ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$714.PEM_read_bio_X509_CRL$MH, "PEM_read_bio_X509_CRL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_X509_CRL$MH() {
        return RuntimeHelper.requireNonNull(constants$715.PEM_read_X509_CRL$MH,"PEM_read_X509_CRL");
    }
    public static MemoryAddress PEM_read_X509_CRL ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$715.PEM_read_X509_CRL$MH, "PEM_read_X509_CRL");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_X509_CRL$MH() {
        return RuntimeHelper.requireNonNull(constants$715.PEM_write_bio_X509_CRL$MH,"PEM_write_bio_X509_CRL");
    }
    public static int PEM_write_bio_X509_CRL ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$715.PEM_write_bio_X509_CRL$MH, "PEM_write_bio_X509_CRL");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_X509_CRL$MH() {
        return RuntimeHelper.requireNonNull(constants$715.PEM_write_X509_CRL$MH,"PEM_write_X509_CRL");
    }
    public static int PEM_write_X509_CRL ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$715.PEM_write_X509_CRL$MH, "PEM_write_X509_CRL");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_PKCS7$MH() {
        return RuntimeHelper.requireNonNull(constants$715.PEM_read_bio_PKCS7$MH,"PEM_read_bio_PKCS7");
    }
    public static MemoryAddress PEM_read_bio_PKCS7 ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$715.PEM_read_bio_PKCS7$MH, "PEM_read_bio_PKCS7");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_PKCS7$MH() {
        return RuntimeHelper.requireNonNull(constants$715.PEM_read_PKCS7$MH,"PEM_read_PKCS7");
    }
    public static MemoryAddress PEM_read_PKCS7 ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$715.PEM_read_PKCS7$MH, "PEM_read_PKCS7");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PKCS7$MH() {
        return RuntimeHelper.requireNonNull(constants$715.PEM_write_bio_PKCS7$MH,"PEM_write_bio_PKCS7");
    }
    public static int PEM_write_bio_PKCS7 ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$715.PEM_write_bio_PKCS7$MH, "PEM_write_bio_PKCS7");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PKCS7$MH() {
        return RuntimeHelper.requireNonNull(constants$716.PEM_write_PKCS7$MH,"PEM_write_PKCS7");
    }
    public static int PEM_write_PKCS7 ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$716.PEM_write_PKCS7$MH, "PEM_write_PKCS7");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_NETSCAPE_CERT_SEQUENCE$MH() {
        return RuntimeHelper.requireNonNull(constants$716.PEM_read_bio_NETSCAPE_CERT_SEQUENCE$MH,"PEM_read_bio_NETSCAPE_CERT_SEQUENCE");
    }
    public static MemoryAddress PEM_read_bio_NETSCAPE_CERT_SEQUENCE ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$716.PEM_read_bio_NETSCAPE_CERT_SEQUENCE$MH, "PEM_read_bio_NETSCAPE_CERT_SEQUENCE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_NETSCAPE_CERT_SEQUENCE$MH() {
        return RuntimeHelper.requireNonNull(constants$716.PEM_read_NETSCAPE_CERT_SEQUENCE$MH,"PEM_read_NETSCAPE_CERT_SEQUENCE");
    }
    public static MemoryAddress PEM_read_NETSCAPE_CERT_SEQUENCE ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$716.PEM_read_NETSCAPE_CERT_SEQUENCE$MH, "PEM_read_NETSCAPE_CERT_SEQUENCE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_NETSCAPE_CERT_SEQUENCE$MH() {
        return RuntimeHelper.requireNonNull(constants$716.PEM_write_bio_NETSCAPE_CERT_SEQUENCE$MH,"PEM_write_bio_NETSCAPE_CERT_SEQUENCE");
    }
    public static int PEM_write_bio_NETSCAPE_CERT_SEQUENCE ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$716.PEM_write_bio_NETSCAPE_CERT_SEQUENCE$MH, "PEM_write_bio_NETSCAPE_CERT_SEQUENCE");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_NETSCAPE_CERT_SEQUENCE$MH() {
        return RuntimeHelper.requireNonNull(constants$716.PEM_write_NETSCAPE_CERT_SEQUENCE$MH,"PEM_write_NETSCAPE_CERT_SEQUENCE");
    }
    public static int PEM_write_NETSCAPE_CERT_SEQUENCE ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$716.PEM_write_NETSCAPE_CERT_SEQUENCE$MH, "PEM_write_NETSCAPE_CERT_SEQUENCE");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_PKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$716.PEM_read_bio_PKCS8$MH,"PEM_read_bio_PKCS8");
    }
    public static MemoryAddress PEM_read_bio_PKCS8 ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$716.PEM_read_bio_PKCS8$MH, "PEM_read_bio_PKCS8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_PKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$717.PEM_read_PKCS8$MH,"PEM_read_PKCS8");
    }
    public static MemoryAddress PEM_read_PKCS8 ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$717.PEM_read_PKCS8$MH, "PEM_read_PKCS8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$717.PEM_write_bio_PKCS8$MH,"PEM_write_bio_PKCS8");
    }
    public static int PEM_write_bio_PKCS8 ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$717.PEM_write_bio_PKCS8$MH, "PEM_write_bio_PKCS8");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$717.PEM_write_PKCS8$MH,"PEM_write_PKCS8");
    }
    public static int PEM_write_PKCS8 ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$717.PEM_write_PKCS8$MH, "PEM_write_PKCS8");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_PKCS8_PRIV_KEY_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$717.PEM_read_bio_PKCS8_PRIV_KEY_INFO$MH,"PEM_read_bio_PKCS8_PRIV_KEY_INFO");
    }
    public static MemoryAddress PEM_read_bio_PKCS8_PRIV_KEY_INFO ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$717.PEM_read_bio_PKCS8_PRIV_KEY_INFO$MH, "PEM_read_bio_PKCS8_PRIV_KEY_INFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_PKCS8_PRIV_KEY_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$717.PEM_read_PKCS8_PRIV_KEY_INFO$MH,"PEM_read_PKCS8_PRIV_KEY_INFO");
    }
    public static MemoryAddress PEM_read_PKCS8_PRIV_KEY_INFO ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$717.PEM_read_PKCS8_PRIV_KEY_INFO$MH, "PEM_read_PKCS8_PRIV_KEY_INFO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PKCS8_PRIV_KEY_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$717.PEM_write_bio_PKCS8_PRIV_KEY_INFO$MH,"PEM_write_bio_PKCS8_PRIV_KEY_INFO");
    }
    public static int PEM_write_bio_PKCS8_PRIV_KEY_INFO ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$717.PEM_write_bio_PKCS8_PRIV_KEY_INFO$MH, "PEM_write_bio_PKCS8_PRIV_KEY_INFO");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PKCS8_PRIV_KEY_INFO$MH() {
        return RuntimeHelper.requireNonNull(constants$718.PEM_write_PKCS8_PRIV_KEY_INFO$MH,"PEM_write_PKCS8_PRIV_KEY_INFO");
    }
    public static int PEM_write_PKCS8_PRIV_KEY_INFO ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$718.PEM_write_PKCS8_PRIV_KEY_INFO$MH, "PEM_write_PKCS8_PRIV_KEY_INFO");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_RSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$718.PEM_read_bio_RSAPrivateKey$MH,"PEM_read_bio_RSAPrivateKey");
    }
    public static MemoryAddress PEM_read_bio_RSAPrivateKey ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$718.PEM_read_bio_RSAPrivateKey$MH, "PEM_read_bio_RSAPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_RSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$718.PEM_read_RSAPrivateKey$MH,"PEM_read_RSAPrivateKey");
    }
    public static MemoryAddress PEM_read_RSAPrivateKey ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$718.PEM_read_RSAPrivateKey$MH, "PEM_read_RSAPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_RSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$718.PEM_write_bio_RSAPrivateKey$MH,"PEM_write_bio_RSAPrivateKey");
    }
    public static int PEM_write_bio_RSAPrivateKey ( Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$718.PEM_write_bio_RSAPrivateKey$MH, "PEM_write_bio_RSAPrivateKey");
        try {
            return (int)mh$.invokeExact(bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_RSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$718.PEM_write_RSAPrivateKey$MH,"PEM_write_RSAPrivateKey");
    }
    public static int PEM_write_RSAPrivateKey ( Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$718.PEM_write_RSAPrivateKey$MH, "PEM_write_RSAPrivateKey");
        try {
            return (int)mh$.invokeExact(fp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_RSAPublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$718.PEM_read_bio_RSAPublicKey$MH,"PEM_read_bio_RSAPublicKey");
    }
    public static MemoryAddress PEM_read_bio_RSAPublicKey ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$718.PEM_read_bio_RSAPublicKey$MH, "PEM_read_bio_RSAPublicKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_RSAPublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$719.PEM_read_RSAPublicKey$MH,"PEM_read_RSAPublicKey");
    }
    public static MemoryAddress PEM_read_RSAPublicKey ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$719.PEM_read_RSAPublicKey$MH, "PEM_read_RSAPublicKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_RSAPublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$719.PEM_write_bio_RSAPublicKey$MH,"PEM_write_bio_RSAPublicKey");
    }
    public static int PEM_write_bio_RSAPublicKey ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$719.PEM_write_bio_RSAPublicKey$MH, "PEM_write_bio_RSAPublicKey");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_RSAPublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$719.PEM_write_RSAPublicKey$MH,"PEM_write_RSAPublicKey");
    }
    public static int PEM_write_RSAPublicKey ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$719.PEM_write_RSAPublicKey$MH, "PEM_write_RSAPublicKey");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_RSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$719.PEM_read_bio_RSA_PUBKEY$MH,"PEM_read_bio_RSA_PUBKEY");
    }
    public static MemoryAddress PEM_read_bio_RSA_PUBKEY ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$719.PEM_read_bio_RSA_PUBKEY$MH, "PEM_read_bio_RSA_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_RSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$719.PEM_read_RSA_PUBKEY$MH,"PEM_read_RSA_PUBKEY");
    }
    public static MemoryAddress PEM_read_RSA_PUBKEY ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$719.PEM_read_RSA_PUBKEY$MH, "PEM_read_RSA_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_RSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$719.PEM_write_bio_RSA_PUBKEY$MH,"PEM_write_bio_RSA_PUBKEY");
    }
    public static int PEM_write_bio_RSA_PUBKEY ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$719.PEM_write_bio_RSA_PUBKEY$MH, "PEM_write_bio_RSA_PUBKEY");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_RSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$720.PEM_write_RSA_PUBKEY$MH,"PEM_write_RSA_PUBKEY");
    }
    public static int PEM_write_RSA_PUBKEY ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$720.PEM_write_RSA_PUBKEY$MH, "PEM_write_RSA_PUBKEY");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_DSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$720.PEM_read_bio_DSAPrivateKey$MH,"PEM_read_bio_DSAPrivateKey");
    }
    public static MemoryAddress PEM_read_bio_DSAPrivateKey ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$720.PEM_read_bio_DSAPrivateKey$MH, "PEM_read_bio_DSAPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_DSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$720.PEM_read_DSAPrivateKey$MH,"PEM_read_DSAPrivateKey");
    }
    public static MemoryAddress PEM_read_DSAPrivateKey ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$720.PEM_read_DSAPrivateKey$MH, "PEM_read_DSAPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_DSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$720.PEM_write_bio_DSAPrivateKey$MH,"PEM_write_bio_DSAPrivateKey");
    }
    public static int PEM_write_bio_DSAPrivateKey ( Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$720.PEM_write_bio_DSAPrivateKey$MH, "PEM_write_bio_DSAPrivateKey");
        try {
            return (int)mh$.invokeExact(bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_DSAPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$720.PEM_write_DSAPrivateKey$MH,"PEM_write_DSAPrivateKey");
    }
    public static int PEM_write_DSAPrivateKey ( Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$720.PEM_write_DSAPrivateKey$MH, "PEM_write_DSAPrivateKey");
        try {
            return (int)mh$.invokeExact(fp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_DSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$720.PEM_read_bio_DSA_PUBKEY$MH,"PEM_read_bio_DSA_PUBKEY");
    }
    public static MemoryAddress PEM_read_bio_DSA_PUBKEY ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$720.PEM_read_bio_DSA_PUBKEY$MH, "PEM_read_bio_DSA_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_DSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$721.PEM_read_DSA_PUBKEY$MH,"PEM_read_DSA_PUBKEY");
    }
    public static MemoryAddress PEM_read_DSA_PUBKEY ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$721.PEM_read_DSA_PUBKEY$MH, "PEM_read_DSA_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_DSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$721.PEM_write_bio_DSA_PUBKEY$MH,"PEM_write_bio_DSA_PUBKEY");
    }
    public static int PEM_write_bio_DSA_PUBKEY ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$721.PEM_write_bio_DSA_PUBKEY$MH, "PEM_write_bio_DSA_PUBKEY");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_DSA_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$721.PEM_write_DSA_PUBKEY$MH,"PEM_write_DSA_PUBKEY");
    }
    public static int PEM_write_DSA_PUBKEY ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$721.PEM_write_DSA_PUBKEY$MH, "PEM_write_DSA_PUBKEY");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_DSAparams$MH() {
        return RuntimeHelper.requireNonNull(constants$721.PEM_read_bio_DSAparams$MH,"PEM_read_bio_DSAparams");
    }
    public static MemoryAddress PEM_read_bio_DSAparams ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$721.PEM_read_bio_DSAparams$MH, "PEM_read_bio_DSAparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_DSAparams$MH() {
        return RuntimeHelper.requireNonNull(constants$721.PEM_read_DSAparams$MH,"PEM_read_DSAparams");
    }
    public static MemoryAddress PEM_read_DSAparams ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$721.PEM_read_DSAparams$MH, "PEM_read_DSAparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_DSAparams$MH() {
        return RuntimeHelper.requireNonNull(constants$721.PEM_write_bio_DSAparams$MH,"PEM_write_bio_DSAparams");
    }
    public static int PEM_write_bio_DSAparams ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$721.PEM_write_bio_DSAparams$MH, "PEM_write_bio_DSAparams");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_DSAparams$MH() {
        return RuntimeHelper.requireNonNull(constants$722.PEM_write_DSAparams$MH,"PEM_write_DSAparams");
    }
    public static int PEM_write_DSAparams ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$722.PEM_write_DSAparams$MH, "PEM_write_DSAparams");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$722.PEM_read_bio_ECPKParameters$MH,"PEM_read_bio_ECPKParameters");
    }
    public static MemoryAddress PEM_read_bio_ECPKParameters ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$722.PEM_read_bio_ECPKParameters$MH, "PEM_read_bio_ECPKParameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$722.PEM_read_ECPKParameters$MH,"PEM_read_ECPKParameters");
    }
    public static MemoryAddress PEM_read_ECPKParameters ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$722.PEM_read_ECPKParameters$MH, "PEM_read_ECPKParameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$722.PEM_write_bio_ECPKParameters$MH,"PEM_write_bio_ECPKParameters");
    }
    public static int PEM_write_bio_ECPKParameters ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$722.PEM_write_bio_ECPKParameters$MH, "PEM_write_bio_ECPKParameters");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$722.PEM_write_ECPKParameters$MH,"PEM_write_ECPKParameters");
    }
    public static int PEM_write_ECPKParameters ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$722.PEM_write_ECPKParameters$MH, "PEM_write_ECPKParameters");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_ECPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$722.PEM_read_bio_ECPrivateKey$MH,"PEM_read_bio_ECPrivateKey");
    }
    public static MemoryAddress PEM_read_bio_ECPrivateKey ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$722.PEM_read_bio_ECPrivateKey$MH, "PEM_read_bio_ECPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_ECPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$723.PEM_read_ECPrivateKey$MH,"PEM_read_ECPrivateKey");
    }
    public static MemoryAddress PEM_read_ECPrivateKey ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$723.PEM_read_ECPrivateKey$MH, "PEM_read_ECPrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_ECPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$723.PEM_write_bio_ECPrivateKey$MH,"PEM_write_bio_ECPrivateKey");
    }
    public static int PEM_write_bio_ECPrivateKey ( Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$723.PEM_write_bio_ECPrivateKey$MH, "PEM_write_bio_ECPrivateKey");
        try {
            return (int)mh$.invokeExact(bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_ECPrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$723.PEM_write_ECPrivateKey$MH,"PEM_write_ECPrivateKey");
    }
    public static int PEM_write_ECPrivateKey ( Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$723.PEM_write_ECPrivateKey$MH, "PEM_write_ECPrivateKey");
        try {
            return (int)mh$.invokeExact(fp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_EC_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$723.PEM_read_bio_EC_PUBKEY$MH,"PEM_read_bio_EC_PUBKEY");
    }
    public static MemoryAddress PEM_read_bio_EC_PUBKEY ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$723.PEM_read_bio_EC_PUBKEY$MH, "PEM_read_bio_EC_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_EC_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$723.PEM_read_EC_PUBKEY$MH,"PEM_read_EC_PUBKEY");
    }
    public static MemoryAddress PEM_read_EC_PUBKEY ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$723.PEM_read_EC_PUBKEY$MH, "PEM_read_EC_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_EC_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$723.PEM_write_bio_EC_PUBKEY$MH,"PEM_write_bio_EC_PUBKEY");
    }
    public static int PEM_write_bio_EC_PUBKEY ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$723.PEM_write_bio_EC_PUBKEY$MH, "PEM_write_bio_EC_PUBKEY");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_EC_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$724.PEM_write_EC_PUBKEY$MH,"PEM_write_EC_PUBKEY");
    }
    public static int PEM_write_EC_PUBKEY ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$724.PEM_write_EC_PUBKEY$MH, "PEM_write_EC_PUBKEY");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_DHparams$MH() {
        return RuntimeHelper.requireNonNull(constants$724.PEM_read_bio_DHparams$MH,"PEM_read_bio_DHparams");
    }
    public static MemoryAddress PEM_read_bio_DHparams ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$724.PEM_read_bio_DHparams$MH, "PEM_read_bio_DHparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_DHparams$MH() {
        return RuntimeHelper.requireNonNull(constants$724.PEM_read_DHparams$MH,"PEM_read_DHparams");
    }
    public static MemoryAddress PEM_read_DHparams ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$724.PEM_read_DHparams$MH, "PEM_read_DHparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_DHparams$MH() {
        return RuntimeHelper.requireNonNull(constants$724.PEM_write_bio_DHparams$MH,"PEM_write_bio_DHparams");
    }
    public static int PEM_write_bio_DHparams ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$724.PEM_write_bio_DHparams$MH, "PEM_write_bio_DHparams");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_DHparams$MH() {
        return RuntimeHelper.requireNonNull(constants$724.PEM_write_DHparams$MH,"PEM_write_DHparams");
    }
    public static int PEM_write_DHparams ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$724.PEM_write_DHparams$MH, "PEM_write_DHparams");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_DHxparams$MH() {
        return RuntimeHelper.requireNonNull(constants$724.PEM_write_bio_DHxparams$MH,"PEM_write_bio_DHxparams");
    }
    public static int PEM_write_bio_DHxparams ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$724.PEM_write_bio_DHxparams$MH, "PEM_write_bio_DHxparams");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_DHxparams$MH() {
        return RuntimeHelper.requireNonNull(constants$725.PEM_write_DHxparams$MH,"PEM_write_DHxparams");
    }
    public static int PEM_write_DHxparams ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$725.PEM_write_DHxparams$MH, "PEM_write_DHxparams");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$725.PEM_read_bio_PrivateKey$MH,"PEM_read_bio_PrivateKey");
    }
    public static MemoryAddress PEM_read_bio_PrivateKey ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$725.PEM_read_bio_PrivateKey$MH, "PEM_read_bio_PrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$725.PEM_read_PrivateKey$MH,"PEM_read_PrivateKey");
    }
    public static MemoryAddress PEM_read_PrivateKey ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$725.PEM_read_PrivateKey$MH, "PEM_read_PrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$725.PEM_write_bio_PrivateKey$MH,"PEM_write_bio_PrivateKey");
    }
    public static int PEM_write_bio_PrivateKey ( Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$725.PEM_write_bio_PrivateKey$MH, "PEM_write_bio_PrivateKey");
        try {
            return (int)mh$.invokeExact(bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$725.PEM_write_PrivateKey$MH,"PEM_write_PrivateKey");
    }
    public static int PEM_write_PrivateKey ( Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$725.PEM_write_PrivateKey$MH, "PEM_write_PrivateKey");
        try {
            return (int)mh$.invokeExact(fp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$725.PEM_read_bio_PUBKEY$MH,"PEM_read_bio_PUBKEY");
    }
    public static MemoryAddress PEM_read_bio_PUBKEY ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$725.PEM_read_bio_PUBKEY$MH, "PEM_read_bio_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$726.PEM_read_PUBKEY$MH,"PEM_read_PUBKEY");
    }
    public static MemoryAddress PEM_read_PUBKEY ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$726.PEM_read_PUBKEY$MH, "PEM_read_PUBKEY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PUBKEY$MH,"PEM_write_bio_PUBKEY");
    }
    public static int PEM_write_bio_PUBKEY ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PUBKEY$MH, "PEM_write_bio_PUBKEY");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PUBKEY$MH() {
        return RuntimeHelper.requireNonNull(constants$726.PEM_write_PUBKEY$MH,"PEM_write_PUBKEY");
    }
    public static int PEM_write_PUBKEY ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$726.PEM_write_PUBKEY$MH, "PEM_write_PUBKEY");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PrivateKey_traditional$MH() {
        return RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PrivateKey_traditional$MH,"PEM_write_bio_PrivateKey_traditional");
    }
    public static int PEM_write_bio_PrivateKey_traditional ( Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PrivateKey_traditional$MH, "PEM_write_bio_PrivateKey_traditional");
        try {
            return (int)mh$.invokeExact(bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PKCS8PrivateKey_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PKCS8PrivateKey_nid$MH,"PEM_write_bio_PKCS8PrivateKey_nid");
    }
    public static int PEM_write_bio_PKCS8PrivateKey_nid ( Addressable bp,  Addressable x,  int nid,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PKCS8PrivateKey_nid$MH, "PEM_write_bio_PKCS8PrivateKey_nid");
        try {
            return (int)mh$.invokeExact(bp, x, nid, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_PKCS8PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PKCS8PrivateKey$MH,"PEM_write_bio_PKCS8PrivateKey");
    }
    public static int PEM_write_bio_PKCS8PrivateKey ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  int x4,  Addressable x5,  Addressable x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$726.PEM_write_bio_PKCS8PrivateKey$MH, "PEM_write_bio_PKCS8PrivateKey");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8PrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_bio$MH,"i2d_PKCS8PrivateKey_bio");
    }
    public static int i2d_PKCS8PrivateKey_bio ( Addressable bp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_bio$MH, "i2d_PKCS8PrivateKey_bio");
        try {
            return (int)mh$.invokeExact(bp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8PrivateKey_nid_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_nid_bio$MH,"i2d_PKCS8PrivateKey_nid_bio");
    }
    public static int i2d_PKCS8PrivateKey_nid_bio ( Addressable bp,  Addressable x,  int nid,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_nid_bio$MH, "i2d_PKCS8PrivateKey_nid_bio");
        try {
            return (int)mh$.invokeExact(bp, x, nid, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8PrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$727.d2i_PKCS8PrivateKey_bio$MH,"d2i_PKCS8PrivateKey_bio");
    }
    public static MemoryAddress d2i_PKCS8PrivateKey_bio ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$727.d2i_PKCS8PrivateKey_bio$MH, "d2i_PKCS8PrivateKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8PrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_fp$MH,"i2d_PKCS8PrivateKey_fp");
    }
    public static int i2d_PKCS8PrivateKey_fp ( Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_fp$MH, "i2d_PKCS8PrivateKey_fp");
        try {
            return (int)mh$.invokeExact(fp, x, enc, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_PKCS8PrivateKey_nid_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_nid_fp$MH,"i2d_PKCS8PrivateKey_nid_fp");
    }
    public static int i2d_PKCS8PrivateKey_nid_fp ( Addressable fp,  Addressable x,  int nid,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$727.i2d_PKCS8PrivateKey_nid_fp$MH, "i2d_PKCS8PrivateKey_nid_fp");
        try {
            return (int)mh$.invokeExact(fp, x, nid, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PKCS8PrivateKey_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$727.PEM_write_PKCS8PrivateKey_nid$MH,"PEM_write_PKCS8PrivateKey_nid");
    }
    public static int PEM_write_PKCS8PrivateKey_nid ( Addressable fp,  Addressable x,  int nid,  Addressable kstr,  int klen,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$727.PEM_write_PKCS8PrivateKey_nid$MH, "PEM_write_PKCS8PrivateKey_nid");
        try {
            return (int)mh$.invokeExact(fp, x, nid, kstr, klen, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS8PrivateKey_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$728.d2i_PKCS8PrivateKey_fp$MH,"d2i_PKCS8PrivateKey_fp");
    }
    public static MemoryAddress d2i_PKCS8PrivateKey_fp ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$728.d2i_PKCS8PrivateKey_fp$MH, "d2i_PKCS8PrivateKey_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_PKCS8PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$728.PEM_write_PKCS8PrivateKey$MH,"PEM_write_PKCS8PrivateKey");
    }
    public static int PEM_write_PKCS8PrivateKey ( Addressable fp,  Addressable x,  Addressable enc,  Addressable kstr,  int klen,  Addressable cd,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$728.PEM_write_PKCS8PrivateKey$MH, "PEM_write_PKCS8PrivateKey");
        try {
            return (int)mh$.invokeExact(fp, x, enc, kstr, klen, cd, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_Parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$728.PEM_read_bio_Parameters$MH,"PEM_read_bio_Parameters");
    }
    public static MemoryAddress PEM_read_bio_Parameters ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$728.PEM_read_bio_Parameters$MH, "PEM_read_bio_Parameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_Parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$728.PEM_write_bio_Parameters$MH,"PEM_write_bio_Parameters");
    }
    public static int PEM_write_bio_Parameters ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$728.PEM_write_bio_Parameters$MH, "PEM_write_bio_Parameters");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle b2i_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$728.b2i_PrivateKey$MH,"b2i_PrivateKey");
    }
    public static MemoryAddress b2i_PrivateKey ( Addressable in,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$728.b2i_PrivateKey$MH, "b2i_PrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle b2i_PublicKey$MH() {
        return RuntimeHelper.requireNonNull(constants$728.b2i_PublicKey$MH,"b2i_PublicKey");
    }
    public static MemoryAddress b2i_PublicKey ( Addressable in,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$728.b2i_PublicKey$MH, "b2i_PublicKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle b2i_PrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$729.b2i_PrivateKey_bio$MH,"b2i_PrivateKey_bio");
    }
    public static MemoryAddress b2i_PrivateKey_bio ( Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$729.b2i_PrivateKey_bio$MH, "b2i_PrivateKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle b2i_PublicKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$729.b2i_PublicKey_bio$MH,"b2i_PublicKey_bio");
    }
    public static MemoryAddress b2i_PublicKey_bio ( Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$729.b2i_PublicKey_bio$MH, "b2i_PublicKey_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2b_PrivateKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$729.i2b_PrivateKey_bio$MH,"i2b_PrivateKey_bio");
    }
    public static int i2b_PrivateKey_bio ( Addressable out,  Addressable pk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$729.i2b_PrivateKey_bio$MH, "i2b_PrivateKey_bio");
        try {
            return (int)mh$.invokeExact(out, pk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2b_PublicKey_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$729.i2b_PublicKey_bio$MH,"i2b_PublicKey_bio");
    }
    public static int i2b_PublicKey_bio ( Addressable out,  Addressable pk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$729.i2b_PublicKey_bio$MH, "i2b_PublicKey_bio");
        try {
            return (int)mh$.invokeExact(out, pk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle b2i_PVK_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$729.b2i_PVK_bio$MH,"b2i_PVK_bio");
    }
    public static MemoryAddress b2i_PVK_bio ( Addressable in,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$729.b2i_PVK_bio$MH, "b2i_PVK_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2b_PVK_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$729.i2b_PVK_bio$MH,"i2b_PVK_bio");
    }
    public static int i2b_PVK_bio ( Addressable out,  Addressable pk,  int enclevel,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$729.i2b_PVK_bio$MH, "i2b_PVK_bio");
        try {
            return (int)mh$.invokeExact(out, pk, enclevel, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_size$MH() {
        return RuntimeHelper.requireNonNull(constants$730.HMAC_size$MH,"HMAC_size");
    }
    public static long HMAC_size ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$730.HMAC_size$MH, "HMAC_size");
        try {
            return (long)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$730.HMAC_CTX_new$MH,"HMAC_CTX_new");
    }
    public static MemoryAddress HMAC_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$730.HMAC_CTX_new$MH, "HMAC_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_CTX_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$730.HMAC_CTX_reset$MH,"HMAC_CTX_reset");
    }
    public static int HMAC_CTX_reset ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$730.HMAC_CTX_reset$MH, "HMAC_CTX_reset");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$730.HMAC_CTX_free$MH,"HMAC_CTX_free");
    }
    public static void HMAC_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$730.HMAC_CTX_free$MH, "HMAC_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_Init$MH() {
        return RuntimeHelper.requireNonNull(constants$730.HMAC_Init$MH,"HMAC_Init");
    }
    public static int HMAC_Init ( Addressable ctx,  Addressable key,  int len,  Addressable md) {
        var mh$ = RuntimeHelper.requireNonNull(constants$730.HMAC_Init$MH, "HMAC_Init");
        try {
            return (int)mh$.invokeExact(ctx, key, len, md);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_Init_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$730.HMAC_Init_ex$MH,"HMAC_Init_ex");
    }
    public static int HMAC_Init_ex ( Addressable ctx,  Addressable key,  int len,  Addressable md,  Addressable impl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$730.HMAC_Init_ex$MH, "HMAC_Init_ex");
        try {
            return (int)mh$.invokeExact(ctx, key, len, md, impl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_Update$MH() {
        return RuntimeHelper.requireNonNull(constants$731.HMAC_Update$MH,"HMAC_Update");
    }
    public static int HMAC_Update ( Addressable ctx,  Addressable data,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$731.HMAC_Update$MH, "HMAC_Update");
        try {
            return (int)mh$.invokeExact(ctx, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_Final$MH() {
        return RuntimeHelper.requireNonNull(constants$731.HMAC_Final$MH,"HMAC_Final");
    }
    public static int HMAC_Final ( Addressable ctx,  Addressable md,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$731.HMAC_Final$MH, "HMAC_Final");
        try {
            return (int)mh$.invokeExact(ctx, md, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC$MH() {
        return RuntimeHelper.requireNonNull(constants$731.HMAC$MH,"HMAC");
    }
    public static MemoryAddress HMAC ( Addressable evp_md,  Addressable key,  int key_len,  Addressable d,  long n,  Addressable md,  Addressable md_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$731.HMAC$MH, "HMAC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(evp_md, key, key_len, d, n, md, md_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_CTX_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$731.HMAC_CTX_copy$MH,"HMAC_CTX_copy");
    }
    public static int HMAC_CTX_copy ( Addressable dctx,  Addressable sctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$731.HMAC_CTX_copy$MH, "HMAC_CTX_copy");
        try {
            return (int)mh$.invokeExact(dctx, sctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_CTX_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$731.HMAC_CTX_set_flags$MH,"HMAC_CTX_set_flags");
    }
    public static void HMAC_CTX_set_flags ( Addressable ctx,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$731.HMAC_CTX_set_flags$MH, "HMAC_CTX_set_flags");
        try {
            mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HMAC_CTX_get_md$MH() {
        return RuntimeHelper.requireNonNull(constants$731.HMAC_CTX_get_md$MH,"HMAC_CTX_get_md");
    }
    public static MemoryAddress HMAC_CTX_get_md ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$731.HMAC_CTX_get_md$MH, "HMAC_CTX_get_md");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_ASYNC_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$732.ERR_load_ASYNC_strings$MH,"ERR_load_ASYNC_strings");
    }
    public static int ERR_load_ASYNC_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$732.ERR_load_ASYNC_strings$MH, "ERR_load_ASYNC_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_init_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$732.ASYNC_init_thread$MH,"ASYNC_init_thread");
    }
    public static int ASYNC_init_thread ( long max_size,  long init_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$732.ASYNC_init_thread$MH, "ASYNC_init_thread");
        try {
            return (int)mh$.invokeExact(max_size, init_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_cleanup_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$732.ASYNC_cleanup_thread$MH,"ASYNC_cleanup_thread");
    }
    public static void ASYNC_cleanup_thread () {
        var mh$ = RuntimeHelper.requireNonNull(constants$732.ASYNC_cleanup_thread$MH, "ASYNC_cleanup_thread");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$732.ASYNC_WAIT_CTX_new$MH,"ASYNC_WAIT_CTX_new");
    }
    public static MemoryAddress ASYNC_WAIT_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$732.ASYNC_WAIT_CTX_new$MH, "ASYNC_WAIT_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$732.ASYNC_WAIT_CTX_free$MH,"ASYNC_WAIT_CTX_free");
    }
    public static void ASYNC_WAIT_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$732.ASYNC_WAIT_CTX_free$MH, "ASYNC_WAIT_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_set_wait_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_set_wait_fd$MH,"ASYNC_WAIT_CTX_set_wait_fd");
    }
    public static int ASYNC_WAIT_CTX_set_wait_fd ( Addressable ctx,  Addressable key,  int fd,  Addressable custom_data,  Addressable cleanup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_set_wait_fd$MH, "ASYNC_WAIT_CTX_set_wait_fd");
        try {
            return (int)mh$.invokeExact(ctx, key, fd, custom_data, cleanup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_get_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_get_fd$MH,"ASYNC_WAIT_CTX_get_fd");
    }
    public static int ASYNC_WAIT_CTX_get_fd ( Addressable ctx,  Addressable key,  Addressable fd,  Addressable custom_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_get_fd$MH, "ASYNC_WAIT_CTX_get_fd");
        try {
            return (int)mh$.invokeExact(ctx, key, fd, custom_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_get_all_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_get_all_fds$MH,"ASYNC_WAIT_CTX_get_all_fds");
    }
    public static int ASYNC_WAIT_CTX_get_all_fds ( Addressable ctx,  Addressable fd,  Addressable numfds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_get_all_fds$MH, "ASYNC_WAIT_CTX_get_all_fds");
        try {
            return (int)mh$.invokeExact(ctx, fd, numfds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_get_changed_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_get_changed_fds$MH,"ASYNC_WAIT_CTX_get_changed_fds");
    }
    public static int ASYNC_WAIT_CTX_get_changed_fds ( Addressable ctx,  Addressable addfd,  Addressable numaddfds,  Addressable delfd,  Addressable numdelfds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_get_changed_fds$MH, "ASYNC_WAIT_CTX_get_changed_fds");
        try {
            return (int)mh$.invokeExact(ctx, addfd, numaddfds, delfd, numdelfds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_WAIT_CTX_clear_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_clear_fd$MH,"ASYNC_WAIT_CTX_clear_fd");
    }
    public static int ASYNC_WAIT_CTX_clear_fd ( Addressable ctx,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$733.ASYNC_WAIT_CTX_clear_fd$MH, "ASYNC_WAIT_CTX_clear_fd");
        try {
            return (int)mh$.invokeExact(ctx, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_is_capable$MH() {
        return RuntimeHelper.requireNonNull(constants$734.ASYNC_is_capable$MH,"ASYNC_is_capable");
    }
    public static int ASYNC_is_capable () {
        var mh$ = RuntimeHelper.requireNonNull(constants$734.ASYNC_is_capable$MH, "ASYNC_is_capable");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_start_job$MH() {
        return RuntimeHelper.requireNonNull(constants$734.ASYNC_start_job$MH,"ASYNC_start_job");
    }
    public static int ASYNC_start_job ( Addressable job,  Addressable ctx,  Addressable ret,  Addressable func,  Addressable args,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$734.ASYNC_start_job$MH, "ASYNC_start_job");
        try {
            return (int)mh$.invokeExact(job, ctx, ret, func, args, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_pause_job$MH() {
        return RuntimeHelper.requireNonNull(constants$734.ASYNC_pause_job$MH,"ASYNC_pause_job");
    }
    public static int ASYNC_pause_job () {
        var mh$ = RuntimeHelper.requireNonNull(constants$734.ASYNC_pause_job$MH, "ASYNC_pause_job");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_get_current_job$MH() {
        return RuntimeHelper.requireNonNull(constants$734.ASYNC_get_current_job$MH,"ASYNC_get_current_job");
    }
    public static MemoryAddress ASYNC_get_current_job () {
        var mh$ = RuntimeHelper.requireNonNull(constants$734.ASYNC_get_current_job$MH, "ASYNC_get_current_job");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_get_wait_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$735.ASYNC_get_wait_ctx$MH,"ASYNC_get_wait_ctx");
    }
    public static MemoryAddress ASYNC_get_wait_ctx ( Addressable job) {
        var mh$ = RuntimeHelper.requireNonNull(constants$735.ASYNC_get_wait_ctx$MH, "ASYNC_get_wait_ctx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(job);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_block_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$735.ASYNC_block_pause$MH,"ASYNC_block_pause");
    }
    public static void ASYNC_block_pause () {
        var mh$ = RuntimeHelper.requireNonNull(constants$735.ASYNC_block_pause$MH, "ASYNC_block_pause");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASYNC_unblock_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$735.ASYNC_unblock_pause$MH,"ASYNC_unblock_pause");
    }
    public static void ASYNC_unblock_pause () {
        var mh$ = RuntimeHelper.requireNonNull(constants$735.ASYNC_unblock_pause$MH, "ASYNC_unblock_pause");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_CT_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$735.ERR_load_CT_strings$MH,"ERR_load_CT_strings");
    }
    public static int ERR_load_CT_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$735.ERR_load_CT_strings$MH, "ERR_load_CT_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CT_LOG_ENTRY_TYPE_NOT_SET() {
        return (int)-1L;
    }
    public static int CT_LOG_ENTRY_TYPE_X509() {
        return (int)0L;
    }
    public static int CT_LOG_ENTRY_TYPE_PRECERT() {
        return (int)1L;
    }
    public static int SCT_VERSION_NOT_SET() {
        return (int)-1L;
    }
    public static int SCT_VERSION_V1() {
        return (int)0L;
    }
    public static int SCT_SOURCE_UNKNOWN() {
        return (int)0L;
    }
    public static int SCT_SOURCE_TLS_EXTENSION() {
        return (int)1L;
    }
    public static int SCT_SOURCE_X509V3_EXTENSION() {
        return (int)2L;
    }
    public static int SCT_SOURCE_OCSP_STAPLED_RESPONSE() {
        return (int)3L;
    }
    public static int SCT_VALIDATION_STATUS_NOT_SET() {
        return (int)0L;
    }
    public static int SCT_VALIDATION_STATUS_UNKNOWN_LOG() {
        return (int)1L;
    }
    public static int SCT_VALIDATION_STATUS_VALID() {
        return (int)2L;
    }
    public static int SCT_VALIDATION_STATUS_INVALID() {
        return (int)3L;
    }
    public static int SCT_VALIDATION_STATUS_UNVERIFIED() {
        return (int)4L;
    }
    public static int SCT_VALIDATION_STATUS_UNKNOWN_VERSION() {
        return (int)5L;
    }
    public static MethodHandle sk_SCT_num$MH() {
        return RuntimeHelper.requireNonNull(constants$736.sk_SCT_num$MH,"sk_SCT_num");
    }
    public static int sk_SCT_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$736.sk_SCT_num$MH, "sk_SCT_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_value$MH() {
        return RuntimeHelper.requireNonNull(constants$736.sk_SCT_value$MH,"sk_SCT_value");
    }
    public static MemoryAddress sk_SCT_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$736.sk_SCT_value$MH, "sk_SCT_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$737.sk_SCT_new$MH,"sk_SCT_new");
    }
    public static MemoryAddress sk_SCT_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$737.sk_SCT_new$MH, "sk_SCT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$737.sk_SCT_new_null$MH,"sk_SCT_new_null");
    }
    public static MemoryAddress sk_SCT_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$737.sk_SCT_new_null$MH, "sk_SCT_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$737.sk_SCT_new_reserve$MH,"sk_SCT_new_reserve");
    }
    public static MemoryAddress sk_SCT_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$737.sk_SCT_new_reserve$MH, "sk_SCT_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$737.sk_SCT_reserve$MH,"sk_SCT_reserve");
    }
    public static int sk_SCT_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$737.sk_SCT_reserve$MH, "sk_SCT_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$737.sk_SCT_free$MH,"sk_SCT_free");
    }
    public static void sk_SCT_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$737.sk_SCT_free$MH, "sk_SCT_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$737.sk_SCT_zero$MH,"sk_SCT_zero");
    }
    public static void sk_SCT_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$737.sk_SCT_zero$MH, "sk_SCT_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$738.sk_SCT_delete$MH,"sk_SCT_delete");
    }
    public static MemoryAddress sk_SCT_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$738.sk_SCT_delete$MH, "sk_SCT_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$738.sk_SCT_delete_ptr$MH,"sk_SCT_delete_ptr");
    }
    public static MemoryAddress sk_SCT_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$738.sk_SCT_delete_ptr$MH, "sk_SCT_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_push$MH() {
        return RuntimeHelper.requireNonNull(constants$738.sk_SCT_push$MH,"sk_SCT_push");
    }
    public static int sk_SCT_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$738.sk_SCT_push$MH, "sk_SCT_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$738.sk_SCT_unshift$MH,"sk_SCT_unshift");
    }
    public static int sk_SCT_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$738.sk_SCT_unshift$MH, "sk_SCT_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$738.sk_SCT_pop$MH,"sk_SCT_pop");
    }
    public static MemoryAddress sk_SCT_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$738.sk_SCT_pop$MH, "sk_SCT_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$738.sk_SCT_shift$MH,"sk_SCT_shift");
    }
    public static MemoryAddress sk_SCT_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$738.sk_SCT_shift$MH, "sk_SCT_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$739.sk_SCT_pop_free$MH,"sk_SCT_pop_free");
    }
    public static void sk_SCT_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$739.sk_SCT_pop_free$MH, "sk_SCT_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$739.sk_SCT_insert$MH,"sk_SCT_insert");
    }
    public static int sk_SCT_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$739.sk_SCT_insert$MH, "sk_SCT_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_set$MH() {
        return RuntimeHelper.requireNonNull(constants$739.sk_SCT_set$MH,"sk_SCT_set");
    }
    public static MemoryAddress sk_SCT_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$739.sk_SCT_set$MH, "sk_SCT_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_find$MH() {
        return RuntimeHelper.requireNonNull(constants$739.sk_SCT_find$MH,"sk_SCT_find");
    }
    public static int sk_SCT_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$739.sk_SCT_find$MH, "sk_SCT_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$739.sk_SCT_find_ex$MH,"sk_SCT_find_ex");
    }
    public static int sk_SCT_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$739.sk_SCT_find_ex$MH, "sk_SCT_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$739.sk_SCT_sort$MH,"sk_SCT_sort");
    }
    public static void sk_SCT_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$739.sk_SCT_sort$MH, "sk_SCT_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$740.sk_SCT_is_sorted$MH,"sk_SCT_is_sorted");
    }
    public static int sk_SCT_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$740.sk_SCT_is_sorted$MH, "sk_SCT_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$740.sk_SCT_dup$MH,"sk_SCT_dup");
    }
    public static MemoryAddress sk_SCT_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$740.sk_SCT_dup$MH, "sk_SCT_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$740.sk_SCT_deep_copy$MH,"sk_SCT_deep_copy");
    }
    public static MemoryAddress sk_SCT_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$740.sk_SCT_deep_copy$MH, "sk_SCT_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SCT_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$740.sk_SCT_set_cmp_func$MH,"sk_SCT_set_cmp_func");
    }
    public static MemoryAddress sk_SCT_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$740.sk_SCT_set_cmp_func$MH, "sk_SCT_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_num$MH() {
        return RuntimeHelper.requireNonNull(constants$741.sk_CTLOG_num$MH,"sk_CTLOG_num");
    }
    public static int sk_CTLOG_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$741.sk_CTLOG_num$MH, "sk_CTLOG_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_value$MH() {
        return RuntimeHelper.requireNonNull(constants$741.sk_CTLOG_value$MH,"sk_CTLOG_value");
    }
    public static MemoryAddress sk_CTLOG_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$741.sk_CTLOG_value$MH, "sk_CTLOG_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_new$MH() {
        return RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_new$MH,"sk_CTLOG_new");
    }
    public static MemoryAddress sk_CTLOG_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_new$MH, "sk_CTLOG_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_new_null$MH,"sk_CTLOG_new_null");
    }
    public static MemoryAddress sk_CTLOG_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_new_null$MH, "sk_CTLOG_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_new_reserve$MH,"sk_CTLOG_new_reserve");
    }
    public static MemoryAddress sk_CTLOG_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_new_reserve$MH, "sk_CTLOG_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_reserve$MH,"sk_CTLOG_reserve");
    }
    public static int sk_CTLOG_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_reserve$MH, "sk_CTLOG_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_free$MH() {
        return RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_free$MH,"sk_CTLOG_free");
    }
    public static void sk_CTLOG_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_free$MH, "sk_CTLOG_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_zero$MH,"sk_CTLOG_zero");
    }
    public static void sk_CTLOG_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$742.sk_CTLOG_zero$MH, "sk_CTLOG_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_delete$MH,"sk_CTLOG_delete");
    }
    public static MemoryAddress sk_CTLOG_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_delete$MH, "sk_CTLOG_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_delete_ptr$MH,"sk_CTLOG_delete_ptr");
    }
    public static MemoryAddress sk_CTLOG_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_delete_ptr$MH, "sk_CTLOG_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_push$MH() {
        return RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_push$MH,"sk_CTLOG_push");
    }
    public static int sk_CTLOG_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_push$MH, "sk_CTLOG_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_unshift$MH,"sk_CTLOG_unshift");
    }
    public static int sk_CTLOG_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_unshift$MH, "sk_CTLOG_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_pop$MH,"sk_CTLOG_pop");
    }
    public static MemoryAddress sk_CTLOG_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_pop$MH, "sk_CTLOG_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_shift$MH,"sk_CTLOG_shift");
    }
    public static MemoryAddress sk_CTLOG_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$743.sk_CTLOG_shift$MH, "sk_CTLOG_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_pop_free$MH,"sk_CTLOG_pop_free");
    }
    public static void sk_CTLOG_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_pop_free$MH, "sk_CTLOG_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_insert$MH,"sk_CTLOG_insert");
    }
    public static int sk_CTLOG_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_insert$MH, "sk_CTLOG_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_set$MH() {
        return RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_set$MH,"sk_CTLOG_set");
    }
    public static MemoryAddress sk_CTLOG_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_set$MH, "sk_CTLOG_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_find$MH() {
        return RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_find$MH,"sk_CTLOG_find");
    }
    public static int sk_CTLOG_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_find$MH, "sk_CTLOG_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_find_ex$MH,"sk_CTLOG_find_ex");
    }
    public static int sk_CTLOG_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_find_ex$MH, "sk_CTLOG_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_sort$MH,"sk_CTLOG_sort");
    }
    public static void sk_CTLOG_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$744.sk_CTLOG_sort$MH, "sk_CTLOG_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_is_sorted$MH,"sk_CTLOG_is_sorted");
    }
    public static int sk_CTLOG_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_is_sorted$MH, "sk_CTLOG_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_dup$MH,"sk_CTLOG_dup");
    }
    public static MemoryAddress sk_CTLOG_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_dup$MH, "sk_CTLOG_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_deep_copy$MH,"sk_CTLOG_deep_copy");
    }
    public static MemoryAddress sk_CTLOG_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_deep_copy$MH, "sk_CTLOG_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_CTLOG_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_set_cmp_func$MH,"sk_CTLOG_set_cmp_func");
    }
    public static MemoryAddress sk_CTLOG_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$745.sk_CTLOG_set_cmp_func$MH, "sk_CTLOG_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$745.CT_POLICY_EVAL_CTX_new$MH,"CT_POLICY_EVAL_CTX_new");
    }
    public static MemoryAddress CT_POLICY_EVAL_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$745.CT_POLICY_EVAL_CTX_new$MH, "CT_POLICY_EVAL_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$745.CT_POLICY_EVAL_CTX_free$MH,"CT_POLICY_EVAL_CTX_free");
    }
    public static void CT_POLICY_EVAL_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$745.CT_POLICY_EVAL_CTX_free$MH, "CT_POLICY_EVAL_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_get0_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_get0_cert$MH,"CT_POLICY_EVAL_CTX_get0_cert");
    }
    public static MemoryAddress CT_POLICY_EVAL_CTX_get0_cert ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_get0_cert$MH, "CT_POLICY_EVAL_CTX_get0_cert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_set1_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_set1_cert$MH,"CT_POLICY_EVAL_CTX_set1_cert");
    }
    public static int CT_POLICY_EVAL_CTX_set1_cert ( Addressable ctx,  Addressable cert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_set1_cert$MH, "CT_POLICY_EVAL_CTX_set1_cert");
        try {
            return (int)mh$.invokeExact(ctx, cert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_get0_issuer$MH() {
        return RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_get0_issuer$MH,"CT_POLICY_EVAL_CTX_get0_issuer");
    }
    public static MemoryAddress CT_POLICY_EVAL_CTX_get0_issuer ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_get0_issuer$MH, "CT_POLICY_EVAL_CTX_get0_issuer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_set1_issuer$MH() {
        return RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_set1_issuer$MH,"CT_POLICY_EVAL_CTX_set1_issuer");
    }
    public static int CT_POLICY_EVAL_CTX_set1_issuer ( Addressable ctx,  Addressable issuer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_set1_issuer$MH, "CT_POLICY_EVAL_CTX_set1_issuer");
        try {
            return (int)mh$.invokeExact(ctx, issuer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_get0_log_store$MH() {
        return RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_get0_log_store$MH,"CT_POLICY_EVAL_CTX_get0_log_store");
    }
    public static MemoryAddress CT_POLICY_EVAL_CTX_get0_log_store ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_get0_log_store$MH, "CT_POLICY_EVAL_CTX_get0_log_store");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE$MH() {
        return RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE$MH,"CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE");
    }
    public static void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE ( Addressable ctx,  Addressable log_store) {
        var mh$ = RuntimeHelper.requireNonNull(constants$746.CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE$MH, "CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE");
        try {
            mh$.invokeExact(ctx, log_store);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_get_time$MH() {
        return RuntimeHelper.requireNonNull(constants$747.CT_POLICY_EVAL_CTX_get_time$MH,"CT_POLICY_EVAL_CTX_get_time");
    }
    public static long CT_POLICY_EVAL_CTX_get_time ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$747.CT_POLICY_EVAL_CTX_get_time$MH, "CT_POLICY_EVAL_CTX_get_time");
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CT_POLICY_EVAL_CTX_set_time$MH() {
        return RuntimeHelper.requireNonNull(constants$747.CT_POLICY_EVAL_CTX_set_time$MH,"CT_POLICY_EVAL_CTX_set_time");
    }
    public static void CT_POLICY_EVAL_CTX_set_time ( Addressable ctx,  long time_in_ms) {
        var mh$ = RuntimeHelper.requireNonNull(constants$747.CT_POLICY_EVAL_CTX_set_time$MH, "CT_POLICY_EVAL_CTX_set_time");
        try {
            mh$.invokeExact(ctx, time_in_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$747.SCT_new$MH,"SCT_new");
    }
    public static MemoryAddress SCT_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$747.SCT_new$MH, "SCT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_new_from_base64$MH() {
        return RuntimeHelper.requireNonNull(constants$747.SCT_new_from_base64$MH,"SCT_new_from_base64");
    }
    public static MemoryAddress SCT_new_from_base64 ( byte version,  Addressable logid_base64,  int entry_type,  long timestamp,  Addressable extensions_base64,  Addressable signature_base64) {
        var mh$ = RuntimeHelper.requireNonNull(constants$747.SCT_new_from_base64$MH, "SCT_new_from_base64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(version, logid_base64, entry_type, timestamp, extensions_base64, signature_base64);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$747.SCT_free$MH,"SCT_free");
    }
    public static void SCT_free ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$747.SCT_free$MH, "SCT_free");
        try {
            mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_LIST_free$MH() {
        return RuntimeHelper.requireNonNull(constants$747.SCT_LIST_free$MH,"SCT_LIST_free");
    }
    public static void SCT_LIST_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$747.SCT_LIST_free$MH, "SCT_LIST_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$748.SCT_get_version$MH,"SCT_get_version");
    }
    public static int SCT_get_version ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$748.SCT_get_version$MH, "SCT_get_version");
        try {
            return (int)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set_version$MH() {
        return RuntimeHelper.requireNonNull(constants$748.SCT_set_version$MH,"SCT_set_version");
    }
    public static int SCT_set_version ( Addressable sct,  int version) {
        var mh$ = RuntimeHelper.requireNonNull(constants$748.SCT_set_version$MH, "SCT_set_version");
        try {
            return (int)mh$.invokeExact(sct, version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get_log_entry_type$MH() {
        return RuntimeHelper.requireNonNull(constants$748.SCT_get_log_entry_type$MH,"SCT_get_log_entry_type");
    }
    public static int SCT_get_log_entry_type ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$748.SCT_get_log_entry_type$MH, "SCT_get_log_entry_type");
        try {
            return (int)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set_log_entry_type$MH() {
        return RuntimeHelper.requireNonNull(constants$748.SCT_set_log_entry_type$MH,"SCT_set_log_entry_type");
    }
    public static int SCT_set_log_entry_type ( Addressable sct,  int entry_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$748.SCT_set_log_entry_type$MH, "SCT_set_log_entry_type");
        try {
            return (int)mh$.invokeExact(sct, entry_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get0_log_id$MH() {
        return RuntimeHelper.requireNonNull(constants$748.SCT_get0_log_id$MH,"SCT_get0_log_id");
    }
    public static long SCT_get0_log_id ( Addressable sct,  Addressable log_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$748.SCT_get0_log_id$MH, "SCT_get0_log_id");
        try {
            return (long)mh$.invokeExact(sct, log_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set0_log_id$MH() {
        return RuntimeHelper.requireNonNull(constants$748.SCT_set0_log_id$MH,"SCT_set0_log_id");
    }
    public static int SCT_set0_log_id ( Addressable sct,  Addressable log_id,  long log_id_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$748.SCT_set0_log_id$MH, "SCT_set0_log_id");
        try {
            return (int)mh$.invokeExact(sct, log_id, log_id_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set1_log_id$MH() {
        return RuntimeHelper.requireNonNull(constants$749.SCT_set1_log_id$MH,"SCT_set1_log_id");
    }
    public static int SCT_set1_log_id ( Addressable sct,  Addressable log_id,  long log_id_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$749.SCT_set1_log_id$MH, "SCT_set1_log_id");
        try {
            return (int)mh$.invokeExact(sct, log_id, log_id_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get_timestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$749.SCT_get_timestamp$MH,"SCT_get_timestamp");
    }
    public static long SCT_get_timestamp ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$749.SCT_get_timestamp$MH, "SCT_get_timestamp");
        try {
            return (long)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set_timestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$749.SCT_set_timestamp$MH,"SCT_set_timestamp");
    }
    public static void SCT_set_timestamp ( Addressable sct,  long timestamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$749.SCT_set_timestamp$MH, "SCT_set_timestamp");
        try {
            mh$.invokeExact(sct, timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get_signature_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$749.SCT_get_signature_nid$MH,"SCT_get_signature_nid");
    }
    public static int SCT_get_signature_nid ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$749.SCT_get_signature_nid$MH, "SCT_get_signature_nid");
        try {
            return (int)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set_signature_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$749.SCT_set_signature_nid$MH,"SCT_set_signature_nid");
    }
    public static int SCT_set_signature_nid ( Addressable sct,  int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$749.SCT_set_signature_nid$MH, "SCT_set_signature_nid");
        try {
            return (int)mh$.invokeExact(sct, nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get0_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$749.SCT_get0_extensions$MH,"SCT_get0_extensions");
    }
    public static long SCT_get0_extensions ( Addressable sct,  Addressable ext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$749.SCT_get0_extensions$MH, "SCT_get0_extensions");
        try {
            return (long)mh$.invokeExact(sct, ext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set0_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$750.SCT_set0_extensions$MH,"SCT_set0_extensions");
    }
    public static void SCT_set0_extensions ( Addressable sct,  Addressable ext,  long ext_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$750.SCT_set0_extensions$MH, "SCT_set0_extensions");
        try {
            mh$.invokeExact(sct, ext, ext_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set1_extensions$MH() {
        return RuntimeHelper.requireNonNull(constants$750.SCT_set1_extensions$MH,"SCT_set1_extensions");
    }
    public static int SCT_set1_extensions ( Addressable sct,  Addressable ext,  long ext_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$750.SCT_set1_extensions$MH, "SCT_set1_extensions");
        try {
            return (int)mh$.invokeExact(sct, ext, ext_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get0_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$750.SCT_get0_signature$MH,"SCT_get0_signature");
    }
    public static long SCT_get0_signature ( Addressable sct,  Addressable sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$750.SCT_get0_signature$MH, "SCT_get0_signature");
        try {
            return (long)mh$.invokeExact(sct, sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set0_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$750.SCT_set0_signature$MH,"SCT_set0_signature");
    }
    public static void SCT_set0_signature ( Addressable sct,  Addressable sig,  long sig_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$750.SCT_set0_signature$MH, "SCT_set0_signature");
        try {
            mh$.invokeExact(sct, sig, sig_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set1_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$750.SCT_set1_signature$MH,"SCT_set1_signature");
    }
    public static int SCT_set1_signature ( Addressable sct,  Addressable sig,  long sig_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$750.SCT_set1_signature$MH, "SCT_set1_signature");
        try {
            return (int)mh$.invokeExact(sct, sig, sig_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get_source$MH() {
        return RuntimeHelper.requireNonNull(constants$750.SCT_get_source$MH,"SCT_get_source");
    }
    public static int SCT_get_source ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$750.SCT_get_source$MH, "SCT_get_source");
        try {
            return (int)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_set_source$MH() {
        return RuntimeHelper.requireNonNull(constants$751.SCT_set_source$MH,"SCT_set_source");
    }
    public static int SCT_set_source ( Addressable sct,  int source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$751.SCT_set_source$MH, "SCT_set_source");
        try {
            return (int)mh$.invokeExact(sct, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_validation_status_string$MH() {
        return RuntimeHelper.requireNonNull(constants$751.SCT_validation_status_string$MH,"SCT_validation_status_string");
    }
    public static MemoryAddress SCT_validation_status_string ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$751.SCT_validation_status_string$MH, "SCT_validation_status_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_print$MH() {
        return RuntimeHelper.requireNonNull(constants$751.SCT_print$MH,"SCT_print");
    }
    public static void SCT_print ( Addressable sct,  Addressable out,  int indent,  Addressable logs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$751.SCT_print$MH, "SCT_print");
        try {
            mh$.invokeExact(sct, out, indent, logs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_LIST_print$MH() {
        return RuntimeHelper.requireNonNull(constants$751.SCT_LIST_print$MH,"SCT_LIST_print");
    }
    public static void SCT_LIST_print ( Addressable sct_list,  Addressable out,  int indent,  Addressable separator,  Addressable logs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$751.SCT_LIST_print$MH, "SCT_LIST_print");
        try {
            mh$.invokeExact(sct_list, out, indent, separator, logs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_get_validation_status$MH() {
        return RuntimeHelper.requireNonNull(constants$751.SCT_get_validation_status$MH,"SCT_get_validation_status");
    }
    public static int SCT_get_validation_status ( Addressable sct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$751.SCT_get_validation_status$MH, "SCT_get_validation_status");
        try {
            return (int)mh$.invokeExact(sct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_validate$MH() {
        return RuntimeHelper.requireNonNull(constants$751.SCT_validate$MH,"SCT_validate");
    }
    public static int SCT_validate ( Addressable sct,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$751.SCT_validate$MH, "SCT_validate");
        try {
            return (int)mh$.invokeExact(sct, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SCT_LIST_validate$MH() {
        return RuntimeHelper.requireNonNull(constants$752.SCT_LIST_validate$MH,"SCT_LIST_validate");
    }
    public static int SCT_LIST_validate ( Addressable scts,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$752.SCT_LIST_validate$MH, "SCT_LIST_validate");
        try {
            return (int)mh$.invokeExact(scts, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2o_SCT_LIST$MH() {
        return RuntimeHelper.requireNonNull(constants$752.i2o_SCT_LIST$MH,"i2o_SCT_LIST");
    }
    public static int i2o_SCT_LIST ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$752.i2o_SCT_LIST$MH, "i2o_SCT_LIST");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle o2i_SCT_LIST$MH() {
        return RuntimeHelper.requireNonNull(constants$752.o2i_SCT_LIST$MH,"o2i_SCT_LIST");
    }
    public static MemoryAddress o2i_SCT_LIST ( Addressable a,  Addressable pp,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$752.o2i_SCT_LIST$MH, "o2i_SCT_LIST");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_SCT_LIST$MH() {
        return RuntimeHelper.requireNonNull(constants$752.i2d_SCT_LIST$MH,"i2d_SCT_LIST");
    }
    public static int i2d_SCT_LIST ( Addressable a,  Addressable pp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$752.i2d_SCT_LIST$MH, "i2d_SCT_LIST");
        try {
            return (int)mh$.invokeExact(a, pp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_SCT_LIST$MH() {
        return RuntimeHelper.requireNonNull(constants$752.d2i_SCT_LIST$MH,"d2i_SCT_LIST");
    }
    public static MemoryAddress d2i_SCT_LIST ( Addressable a,  Addressable pp,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$752.d2i_SCT_LIST$MH, "d2i_SCT_LIST");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, pp, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2o_SCT$MH() {
        return RuntimeHelper.requireNonNull(constants$752.i2o_SCT$MH,"i2o_SCT");
    }
    public static int i2o_SCT ( Addressable sct,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$752.i2o_SCT$MH, "i2o_SCT");
        try {
            return (int)mh$.invokeExact(sct, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle o2i_SCT$MH() {
        return RuntimeHelper.requireNonNull(constants$753.o2i_SCT$MH,"o2i_SCT");
    }
    public static MemoryAddress o2i_SCT ( Addressable psct,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$753.o2i_SCT$MH, "o2i_SCT");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(psct, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_new$MH() {
        return RuntimeHelper.requireNonNull(constants$753.CTLOG_new$MH,"CTLOG_new");
    }
    public static MemoryAddress CTLOG_new ( Addressable public_key,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$753.CTLOG_new$MH, "CTLOG_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(public_key, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_new_from_base64$MH() {
        return RuntimeHelper.requireNonNull(constants$753.CTLOG_new_from_base64$MH,"CTLOG_new_from_base64");
    }
    public static int CTLOG_new_from_base64 ( Addressable ct_log,  Addressable pkey_base64,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$753.CTLOG_new_from_base64$MH, "CTLOG_new_from_base64");
        try {
            return (int)mh$.invokeExact(ct_log, pkey_base64, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_free$MH() {
        return RuntimeHelper.requireNonNull(constants$753.CTLOG_free$MH,"CTLOG_free");
    }
    public static void CTLOG_free ( Addressable log) {
        var mh$ = RuntimeHelper.requireNonNull(constants$753.CTLOG_free$MH, "CTLOG_free");
        try {
            mh$.invokeExact(log);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_get0_name$MH() {
        return RuntimeHelper.requireNonNull(constants$753.CTLOG_get0_name$MH,"CTLOG_get0_name");
    }
    public static MemoryAddress CTLOG_get0_name ( Addressable log) {
        var mh$ = RuntimeHelper.requireNonNull(constants$753.CTLOG_get0_name$MH, "CTLOG_get0_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(log);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_get0_log_id$MH() {
        return RuntimeHelper.requireNonNull(constants$753.CTLOG_get0_log_id$MH,"CTLOG_get0_log_id");
    }
    public static void CTLOG_get0_log_id ( Addressable log,  Addressable log_id,  Addressable log_id_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$753.CTLOG_get0_log_id$MH, "CTLOG_get0_log_id");
        try {
            mh$.invokeExact(log, log_id, log_id_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_get0_public_key$MH() {
        return RuntimeHelper.requireNonNull(constants$754.CTLOG_get0_public_key$MH,"CTLOG_get0_public_key");
    }
    public static MemoryAddress CTLOG_get0_public_key ( Addressable log) {
        var mh$ = RuntimeHelper.requireNonNull(constants$754.CTLOG_get0_public_key$MH, "CTLOG_get0_public_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(log);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_STORE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_new$MH,"CTLOG_STORE_new");
    }
    public static MemoryAddress CTLOG_STORE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_new$MH, "CTLOG_STORE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_STORE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_free$MH,"CTLOG_STORE_free");
    }
    public static void CTLOG_STORE_free ( Addressable store) {
        var mh$ = RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_free$MH, "CTLOG_STORE_free");
        try {
            mh$.invokeExact(store);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_STORE_get0_log_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_get0_log_by_id$MH,"CTLOG_STORE_get0_log_by_id");
    }
    public static MemoryAddress CTLOG_STORE_get0_log_by_id ( Addressable store,  Addressable log_id,  long log_id_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_get0_log_by_id$MH, "CTLOG_STORE_get0_log_by_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(store, log_id, log_id_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_STORE_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_load_file$MH,"CTLOG_STORE_load_file");
    }
    public static int CTLOG_STORE_load_file ( Addressable store,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_load_file$MH, "CTLOG_STORE_load_file");
        try {
            return (int)mh$.invokeExact(store, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CTLOG_STORE_load_default_file$MH() {
        return RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_load_default_file$MH,"CTLOG_STORE_load_default_file");
    }
    public static int CTLOG_STORE_load_default_file ( Addressable store) {
        var mh$ = RuntimeHelper.requireNonNull(constants$754.CTLOG_STORE_load_default_file$MH, "CTLOG_STORE_load_default_file");
        try {
            return (int)mh$.invokeExact(store);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_SSL_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$755.ERR_load_SSL_strings$MH,"ERR_load_SSL_strings");
    }
    public static int ERR_load_SSL_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$755.ERR_load_SSL_strings$MH, "ERR_load_SSL_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfAddress ssl_crock_st = ValueLayout.ADDRESS;
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_num$MH,"sk_SRTP_PROTECTION_PROFILE_num");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_num$MH, "sk_SRTP_PROTECTION_PROFILE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_value$MH,"sk_SRTP_PROTECTION_PROFILE_value");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_value$MH, "sk_SRTP_PROTECTION_PROFILE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_new$MH,"sk_SRTP_PROTECTION_PROFILE_new");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_new$MH, "sk_SRTP_PROTECTION_PROFILE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_new_null$MH,"sk_SRTP_PROTECTION_PROFILE_new_null");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_new_null$MH, "sk_SRTP_PROTECTION_PROFILE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_new_reserve$MH,"sk_SRTP_PROTECTION_PROFILE_new_reserve");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$756.sk_SRTP_PROTECTION_PROFILE_new_reserve$MH, "sk_SRTP_PROTECTION_PROFILE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_reserve$MH,"sk_SRTP_PROTECTION_PROFILE_reserve");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_reserve$MH, "sk_SRTP_PROTECTION_PROFILE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_free$MH,"sk_SRTP_PROTECTION_PROFILE_free");
    }
    public static void sk_SRTP_PROTECTION_PROFILE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_free$MH, "sk_SRTP_PROTECTION_PROFILE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_zero$MH,"sk_SRTP_PROTECTION_PROFILE_zero");
    }
    public static void sk_SRTP_PROTECTION_PROFILE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_zero$MH, "sk_SRTP_PROTECTION_PROFILE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_delete$MH,"sk_SRTP_PROTECTION_PROFILE_delete");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_delete$MH, "sk_SRTP_PROTECTION_PROFILE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_delete_ptr$MH,"sk_SRTP_PROTECTION_PROFILE_delete_ptr");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_delete_ptr$MH, "sk_SRTP_PROTECTION_PROFILE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_push$MH,"sk_SRTP_PROTECTION_PROFILE_push");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$757.sk_SRTP_PROTECTION_PROFILE_push$MH, "sk_SRTP_PROTECTION_PROFILE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_unshift$MH,"sk_SRTP_PROTECTION_PROFILE_unshift");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_unshift$MH, "sk_SRTP_PROTECTION_PROFILE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_pop$MH,"sk_SRTP_PROTECTION_PROFILE_pop");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_pop$MH, "sk_SRTP_PROTECTION_PROFILE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_shift$MH,"sk_SRTP_PROTECTION_PROFILE_shift");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_shift$MH, "sk_SRTP_PROTECTION_PROFILE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_pop_free$MH,"sk_SRTP_PROTECTION_PROFILE_pop_free");
    }
    public static void sk_SRTP_PROTECTION_PROFILE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_pop_free$MH, "sk_SRTP_PROTECTION_PROFILE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_insert$MH,"sk_SRTP_PROTECTION_PROFILE_insert");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_insert$MH, "sk_SRTP_PROTECTION_PROFILE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_set$MH,"sk_SRTP_PROTECTION_PROFILE_set");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$758.sk_SRTP_PROTECTION_PROFILE_set$MH, "sk_SRTP_PROTECTION_PROFILE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_find$MH,"sk_SRTP_PROTECTION_PROFILE_find");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_find$MH, "sk_SRTP_PROTECTION_PROFILE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_find_ex$MH,"sk_SRTP_PROTECTION_PROFILE_find_ex");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_find_ex$MH, "sk_SRTP_PROTECTION_PROFILE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_sort$MH,"sk_SRTP_PROTECTION_PROFILE_sort");
    }
    public static void sk_SRTP_PROTECTION_PROFILE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_sort$MH, "sk_SRTP_PROTECTION_PROFILE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_is_sorted$MH,"sk_SRTP_PROTECTION_PROFILE_is_sorted");
    }
    public static int sk_SRTP_PROTECTION_PROFILE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_is_sorted$MH, "sk_SRTP_PROTECTION_PROFILE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_dup$MH,"sk_SRTP_PROTECTION_PROFILE_dup");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_dup$MH, "sk_SRTP_PROTECTION_PROFILE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_deep_copy$MH,"sk_SRTP_PROTECTION_PROFILE_deep_copy");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$759.sk_SRTP_PROTECTION_PROFILE_deep_copy$MH, "sk_SRTP_PROTECTION_PROFILE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SRTP_PROTECTION_PROFILE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$760.sk_SRTP_PROTECTION_PROFILE_set_cmp_func$MH,"sk_SRTP_PROTECTION_PROFILE_set_cmp_func");
    }
    public static MemoryAddress sk_SRTP_PROTECTION_PROFILE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$760.sk_SRTP_PROTECTION_PROFILE_set_cmp_func$MH, "sk_SRTP_PROTECTION_PROFILE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_options$MH() {
        return RuntimeHelper.requireNonNull(constants$763.SSL_CTX_get_options$MH,"SSL_CTX_get_options");
    }
    public static long SSL_CTX_get_options ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$763.SSL_CTX_get_options$MH, "SSL_CTX_get_options");
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_options$MH() {
        return RuntimeHelper.requireNonNull(constants$763.SSL_get_options$MH,"SSL_get_options");
    }
    public static long SSL_get_options ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$763.SSL_get_options$MH, "SSL_get_options");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_clear_options$MH() {
        return RuntimeHelper.requireNonNull(constants$763.SSL_CTX_clear_options$MH,"SSL_CTX_clear_options");
    }
    public static long SSL_CTX_clear_options ( Addressable ctx,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$763.SSL_CTX_clear_options$MH, "SSL_CTX_clear_options");
        try {
            return (long)mh$.invokeExact(ctx, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_clear_options$MH() {
        return RuntimeHelper.requireNonNull(constants$763.SSL_clear_options$MH,"SSL_clear_options");
    }
    public static long SSL_clear_options ( Addressable s,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$763.SSL_clear_options$MH, "SSL_clear_options");
        try {
            return (long)mh$.invokeExact(s, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_options$MH() {
        return RuntimeHelper.requireNonNull(constants$763.SSL_CTX_set_options$MH,"SSL_CTX_set_options");
    }
    public static long SSL_CTX_set_options ( Addressable ctx,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$763.SSL_CTX_set_options$MH, "SSL_CTX_set_options");
        try {
            return (long)mh$.invokeExact(ctx, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_options$MH() {
        return RuntimeHelper.requireNonNull(constants$764.SSL_set_options$MH,"SSL_set_options");
    }
    public static long SSL_set_options ( Addressable s,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$764.SSL_set_options$MH, "SSL_set_options");
        try {
            return (long)mh$.invokeExact(s, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_msg_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$764.SSL_CTX_set_msg_callback$MH,"SSL_CTX_set_msg_callback");
    }
    public static void SSL_CTX_set_msg_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$764.SSL_CTX_set_msg_callback$MH, "SSL_CTX_set_msg_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_msg_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$765.SSL_set_msg_callback$MH,"SSL_set_msg_callback");
    }
    public static void SSL_set_msg_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$765.SSL_set_msg_callback$MH, "SSL_set_msg_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SRP_CTX_init$MH() {
        return RuntimeHelper.requireNonNull(constants$765.SSL_SRP_CTX_init$MH,"SSL_SRP_CTX_init");
    }
    public static int SSL_SRP_CTX_init ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$765.SSL_SRP_CTX_init$MH, "SSL_SRP_CTX_init");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_SRP_CTX_init$MH() {
        return RuntimeHelper.requireNonNull(constants$765.SSL_CTX_SRP_CTX_init$MH,"SSL_CTX_SRP_CTX_init");
    }
    public static int SSL_CTX_SRP_CTX_init ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$765.SSL_CTX_SRP_CTX_init$MH, "SSL_CTX_SRP_CTX_init");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SRP_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$765.SSL_SRP_CTX_free$MH,"SSL_SRP_CTX_free");
    }
    public static int SSL_SRP_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$765.SSL_SRP_CTX_free$MH, "SSL_SRP_CTX_free");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_SRP_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$765.SSL_CTX_SRP_CTX_free$MH,"SSL_CTX_SRP_CTX_free");
    }
    public static int SSL_CTX_SRP_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$765.SSL_CTX_SRP_CTX_free$MH, "SSL_CTX_SRP_CTX_free");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_srp_server_param_with_username$MH() {
        return RuntimeHelper.requireNonNull(constants$765.SSL_srp_server_param_with_username$MH,"SSL_srp_server_param_with_username");
    }
    public static int SSL_srp_server_param_with_username ( Addressable s,  Addressable ad) {
        var mh$ = RuntimeHelper.requireNonNull(constants$765.SSL_srp_server_param_with_username$MH, "SSL_srp_server_param_with_username");
        try {
            return (int)mh$.invokeExact(s, ad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SRP_Calc_A_param$MH() {
        return RuntimeHelper.requireNonNull(constants$766.SRP_Calc_A_param$MH,"SRP_Calc_A_param");
    }
    public static int SRP_Calc_A_param ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$766.SRP_Calc_A_param$MH, "SRP_Calc_A_param");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sessions$MH() {
        return RuntimeHelper.requireNonNull(constants$766.SSL_CTX_sessions$MH,"SSL_CTX_sessions");
    }
    public static MemoryAddress SSL_CTX_sessions ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$766.SSL_CTX_sessions$MH, "SSL_CTX_sessions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sess_set_new_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_set_new_cb$MH,"SSL_CTX_sess_set_new_cb");
    }
    public static void SSL_CTX_sess_set_new_cb ( Addressable ctx,  Addressable new_session_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_set_new_cb$MH, "SSL_CTX_sess_set_new_cb");
        try {
            mh$.invokeExact(ctx, new_session_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sess_get_new_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_get_new_cb$MH,"SSL_CTX_sess_get_new_cb");
    }
    public static MemoryAddress SSL_CTX_sess_get_new_cb ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_get_new_cb$MH, "SSL_CTX_sess_get_new_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sess_set_remove_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_set_remove_cb$MH,"SSL_CTX_sess_set_remove_cb");
    }
    public static void SSL_CTX_sess_set_remove_cb ( Addressable ctx,  Addressable remove_session_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_set_remove_cb$MH, "SSL_CTX_sess_set_remove_cb");
        try {
            mh$.invokeExact(ctx, remove_session_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sess_get_remove_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_get_remove_cb$MH,"SSL_CTX_sess_get_remove_cb");
    }
    public static MemoryAddress SSL_CTX_sess_get_remove_cb ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$767.SSL_CTX_sess_get_remove_cb$MH, "SSL_CTX_sess_get_remove_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sess_set_get_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$768.SSL_CTX_sess_set_get_cb$MH,"SSL_CTX_sess_set_get_cb");
    }
    public static void SSL_CTX_sess_set_get_cb ( Addressable ctx,  Addressable get_session_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$768.SSL_CTX_sess_set_get_cb$MH, "SSL_CTX_sess_set_get_cb");
        try {
            mh$.invokeExact(ctx, get_session_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_sess_get_get_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$768.SSL_CTX_sess_get_get_cb$MH,"SSL_CTX_sess_get_get_cb");
    }
    public static MemoryAddress SSL_CTX_sess_get_get_cb ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$768.SSL_CTX_sess_get_get_cb$MH, "SSL_CTX_sess_get_get_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_info_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$769.SSL_CTX_set_info_callback$MH,"SSL_CTX_set_info_callback");
    }
    public static void SSL_CTX_set_info_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$769.SSL_CTX_set_info_callback$MH, "SSL_CTX_set_info_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_info_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$769.SSL_CTX_get_info_callback$MH,"SSL_CTX_get_info_callback");
    }
    public static MemoryAddress SSL_CTX_get_info_callback ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$769.SSL_CTX_get_info_callback$MH, "SSL_CTX_get_info_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_client_cert_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$769.SSL_CTX_set_client_cert_cb$MH,"SSL_CTX_set_client_cert_cb");
    }
    public static void SSL_CTX_set_client_cert_cb ( Addressable ctx,  Addressable client_cert_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$769.SSL_CTX_set_client_cert_cb$MH, "SSL_CTX_set_client_cert_cb");
        try {
            mh$.invokeExact(ctx, client_cert_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_client_cert_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$769.SSL_CTX_get_client_cert_cb$MH,"SSL_CTX_get_client_cert_cb");
    }
    public static MemoryAddress SSL_CTX_get_client_cert_cb ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$769.SSL_CTX_get_client_cert_cb$MH, "SSL_CTX_get_client_cert_cb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_client_cert_engine$MH() {
        return RuntimeHelper.requireNonNull(constants$770.SSL_CTX_set_client_cert_engine$MH,"SSL_CTX_set_client_cert_engine");
    }
    public static int SSL_CTX_set_client_cert_engine ( Addressable ctx,  Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$770.SSL_CTX_set_client_cert_engine$MH, "SSL_CTX_set_client_cert_engine");
        try {
            return (int)mh$.invokeExact(ctx, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cookie_generate_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$770.SSL_CTX_set_cookie_generate_cb$MH,"SSL_CTX_set_cookie_generate_cb");
    }
    public static void SSL_CTX_set_cookie_generate_cb ( Addressable ctx,  Addressable app_gen_cookie_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$770.SSL_CTX_set_cookie_generate_cb$MH, "SSL_CTX_set_cookie_generate_cb");
        try {
            mh$.invokeExact(ctx, app_gen_cookie_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cookie_verify_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$771.SSL_CTX_set_cookie_verify_cb$MH,"SSL_CTX_set_cookie_verify_cb");
    }
    public static void SSL_CTX_set_cookie_verify_cb ( Addressable ctx,  Addressable app_verify_cookie_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$771.SSL_CTX_set_cookie_verify_cb$MH, "SSL_CTX_set_cookie_verify_cb");
        try {
            mh$.invokeExact(ctx, app_verify_cookie_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_stateless_cookie_generate_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$771.SSL_CTX_set_stateless_cookie_generate_cb$MH,"SSL_CTX_set_stateless_cookie_generate_cb");
    }
    public static void SSL_CTX_set_stateless_cookie_generate_cb ( Addressable ctx,  Addressable gen_stateless_cookie_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$771.SSL_CTX_set_stateless_cookie_generate_cb$MH, "SSL_CTX_set_stateless_cookie_generate_cb");
        try {
            mh$.invokeExact(ctx, gen_stateless_cookie_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_stateless_cookie_verify_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$772.SSL_CTX_set_stateless_cookie_verify_cb$MH,"SSL_CTX_set_stateless_cookie_verify_cb");
    }
    public static void SSL_CTX_set_stateless_cookie_verify_cb ( Addressable ctx,  Addressable verify_stateless_cookie_cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$772.SSL_CTX_set_stateless_cookie_verify_cb$MH, "SSL_CTX_set_stateless_cookie_verify_cb");
        try {
            mh$.invokeExact(ctx, verify_stateless_cookie_cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_next_protos_advertised_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$772.SSL_CTX_set_next_protos_advertised_cb$MH,"SSL_CTX_set_next_protos_advertised_cb");
    }
    public static void SSL_CTX_set_next_protos_advertised_cb ( Addressable s,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$772.SSL_CTX_set_next_protos_advertised_cb$MH, "SSL_CTX_set_next_protos_advertised_cb");
        try {
            mh$.invokeExact(s, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_next_proto_select_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$773.SSL_CTX_set_next_proto_select_cb$MH,"SSL_CTX_set_next_proto_select_cb");
    }
    public static void SSL_CTX_set_next_proto_select_cb ( Addressable s,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$773.SSL_CTX_set_next_proto_select_cb$MH, "SSL_CTX_set_next_proto_select_cb");
        try {
            mh$.invokeExact(s, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_next_proto_negotiated$MH() {
        return RuntimeHelper.requireNonNull(constants$773.SSL_get0_next_proto_negotiated$MH,"SSL_get0_next_proto_negotiated");
    }
    public static void SSL_get0_next_proto_negotiated ( Addressable s,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$773.SSL_get0_next_proto_negotiated$MH, "SSL_get0_next_proto_negotiated");
        try {
            mh$.invokeExact(s, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_select_next_proto$MH() {
        return RuntimeHelper.requireNonNull(constants$773.SSL_select_next_proto$MH,"SSL_select_next_proto");
    }
    public static int SSL_select_next_proto ( Addressable out,  Addressable outlen,  Addressable in,  int inlen,  Addressable client,  int client_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$773.SSL_select_next_proto$MH, "SSL_select_next_proto");
        try {
            return (int)mh$.invokeExact(out, outlen, in, inlen, client, client_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_alpn_protos$MH() {
        return RuntimeHelper.requireNonNull(constants$773.SSL_CTX_set_alpn_protos$MH,"SSL_CTX_set_alpn_protos");
    }
    public static int SSL_CTX_set_alpn_protos ( Addressable ctx,  Addressable protos,  int protos_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$773.SSL_CTX_set_alpn_protos$MH, "SSL_CTX_set_alpn_protos");
        try {
            return (int)mh$.invokeExact(ctx, protos, protos_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_alpn_protos$MH() {
        return RuntimeHelper.requireNonNull(constants$773.SSL_set_alpn_protos$MH,"SSL_set_alpn_protos");
    }
    public static int SSL_set_alpn_protos ( Addressable ssl,  Addressable protos,  int protos_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$773.SSL_set_alpn_protos$MH, "SSL_set_alpn_protos");
        try {
            return (int)mh$.invokeExact(ssl, protos, protos_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_alpn_select_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$774.SSL_CTX_set_alpn_select_cb$MH,"SSL_CTX_set_alpn_select_cb");
    }
    public static void SSL_CTX_set_alpn_select_cb ( Addressable ctx,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$774.SSL_CTX_set_alpn_select_cb$MH, "SSL_CTX_set_alpn_select_cb");
        try {
            mh$.invokeExact(ctx, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_alpn_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$774.SSL_get0_alpn_selected$MH,"SSL_get0_alpn_selected");
    }
    public static void SSL_get0_alpn_selected ( Addressable ssl,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$774.SSL_get0_alpn_selected$MH, "SSL_get0_alpn_selected");
        try {
            mh$.invokeExact(ssl, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_psk_client_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$774.SSL_CTX_set_psk_client_callback$MH,"SSL_CTX_set_psk_client_callback");
    }
    public static void SSL_CTX_set_psk_client_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$774.SSL_CTX_set_psk_client_callback$MH, "SSL_CTX_set_psk_client_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_psk_client_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$775.SSL_set_psk_client_callback$MH,"SSL_set_psk_client_callback");
    }
    public static void SSL_set_psk_client_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$775.SSL_set_psk_client_callback$MH, "SSL_set_psk_client_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_psk_server_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$775.SSL_CTX_set_psk_server_callback$MH,"SSL_CTX_set_psk_server_callback");
    }
    public static void SSL_CTX_set_psk_server_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$775.SSL_CTX_set_psk_server_callback$MH, "SSL_CTX_set_psk_server_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_psk_server_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$775.SSL_set_psk_server_callback$MH,"SSL_set_psk_server_callback");
    }
    public static void SSL_set_psk_server_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$775.SSL_set_psk_server_callback$MH, "SSL_set_psk_server_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_psk_identity_hint$MH() {
        return RuntimeHelper.requireNonNull(constants$775.SSL_CTX_use_psk_identity_hint$MH,"SSL_CTX_use_psk_identity_hint");
    }
    public static int SSL_CTX_use_psk_identity_hint ( Addressable ctx,  Addressable identity_hint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$775.SSL_CTX_use_psk_identity_hint$MH, "SSL_CTX_use_psk_identity_hint");
        try {
            return (int)mh$.invokeExact(ctx, identity_hint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_use_psk_identity_hint$MH() {
        return RuntimeHelper.requireNonNull(constants$776.SSL_use_psk_identity_hint$MH,"SSL_use_psk_identity_hint");
    }
    public static int SSL_use_psk_identity_hint ( Addressable s,  Addressable identity_hint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$776.SSL_use_psk_identity_hint$MH, "SSL_use_psk_identity_hint");
        try {
            return (int)mh$.invokeExact(s, identity_hint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_psk_identity_hint$MH() {
        return RuntimeHelper.requireNonNull(constants$776.SSL_get_psk_identity_hint$MH,"SSL_get_psk_identity_hint");
    }
    public static MemoryAddress SSL_get_psk_identity_hint ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$776.SSL_get_psk_identity_hint$MH, "SSL_get_psk_identity_hint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_psk_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$776.SSL_get_psk_identity$MH,"SSL_get_psk_identity");
    }
    public static MemoryAddress SSL_get_psk_identity ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$776.SSL_get_psk_identity$MH, "SSL_get_psk_identity");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_psk_find_session_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$777.SSL_set_psk_find_session_callback$MH,"SSL_set_psk_find_session_callback");
    }
    public static void SSL_set_psk_find_session_callback ( Addressable s,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$777.SSL_set_psk_find_session_callback$MH, "SSL_set_psk_find_session_callback");
        try {
            mh$.invokeExact(s, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_psk_find_session_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$777.SSL_CTX_set_psk_find_session_callback$MH,"SSL_CTX_set_psk_find_session_callback");
    }
    public static void SSL_CTX_set_psk_find_session_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$777.SSL_CTX_set_psk_find_session_callback$MH, "SSL_CTX_set_psk_find_session_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_psk_use_session_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$777.SSL_set_psk_use_session_callback$MH,"SSL_set_psk_use_session_callback");
    }
    public static void SSL_set_psk_use_session_callback ( Addressable s,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$777.SSL_set_psk_use_session_callback$MH, "SSL_set_psk_use_session_callback");
        try {
            mh$.invokeExact(s, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_psk_use_session_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$777.SSL_CTX_set_psk_use_session_callback$MH,"SSL_CTX_set_psk_use_session_callback");
    }
    public static void SSL_CTX_set_psk_use_session_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$777.SSL_CTX_set_psk_use_session_callback$MH, "SSL_CTX_set_psk_use_session_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_has_client_custom_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$777.SSL_CTX_has_client_custom_ext$MH,"SSL_CTX_has_client_custom_ext");
    }
    public static int SSL_CTX_has_client_custom_ext ( Addressable ctx,  int ext_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$777.SSL_CTX_has_client_custom_ext$MH, "SSL_CTX_has_client_custom_ext");
        try {
            return (int)mh$.invokeExact(ctx, ext_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add_client_custom_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$778.SSL_CTX_add_client_custom_ext$MH,"SSL_CTX_add_client_custom_ext");
    }
    public static int SSL_CTX_add_client_custom_ext ( Addressable ctx,  int ext_type,  Addressable add_cb,  Addressable free_cb,  Addressable add_arg,  Addressable parse_cb,  Addressable parse_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$778.SSL_CTX_add_client_custom_ext$MH, "SSL_CTX_add_client_custom_ext");
        try {
            return (int)mh$.invokeExact(ctx, ext_type, add_cb, free_cb, add_arg, parse_cb, parse_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add_server_custom_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$778.SSL_CTX_add_server_custom_ext$MH,"SSL_CTX_add_server_custom_ext");
    }
    public static int SSL_CTX_add_server_custom_ext ( Addressable ctx,  int ext_type,  Addressable add_cb,  Addressable free_cb,  Addressable add_arg,  Addressable parse_cb,  Addressable parse_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$778.SSL_CTX_add_server_custom_ext$MH, "SSL_CTX_add_server_custom_ext");
        try {
            return (int)mh$.invokeExact(ctx, ext_type, add_cb, free_cb, add_arg, parse_cb, parse_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add_custom_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$778.SSL_CTX_add_custom_ext$MH,"SSL_CTX_add_custom_ext");
    }
    public static int SSL_CTX_add_custom_ext ( Addressable ctx,  int ext_type,  int context,  Addressable add_cb,  Addressable free_cb,  Addressable add_arg,  Addressable parse_cb,  Addressable parse_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$778.SSL_CTX_add_custom_ext$MH, "SSL_CTX_add_custom_ext");
        try {
            return (int)mh$.invokeExact(ctx, ext_type, context, add_cb, free_cb, add_arg, parse_cb, parse_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_extension_supported$MH() {
        return RuntimeHelper.requireNonNull(constants$778.SSL_extension_supported$MH,"SSL_extension_supported");
    }
    public static int SSL_extension_supported ( int ext_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$778.SSL_extension_supported$MH, "SSL_extension_supported");
        try {
            return (int)mh$.invokeExact(ext_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_keylog_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$779.SSL_CTX_set_keylog_callback$MH,"SSL_CTX_set_keylog_callback");
    }
    public static void SSL_CTX_set_keylog_callback ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$779.SSL_CTX_set_keylog_callback$MH, "SSL_CTX_set_keylog_callback");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_keylog_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$779.SSL_CTX_get_keylog_callback$MH,"SSL_CTX_get_keylog_callback");
    }
    public static MemoryAddress SSL_CTX_get_keylog_callback ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$779.SSL_CTX_get_keylog_callback$MH, "SSL_CTX_get_keylog_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$779.SSL_CTX_set_max_early_data$MH,"SSL_CTX_set_max_early_data");
    }
    public static int SSL_CTX_set_max_early_data ( Addressable ctx,  int max_early_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$779.SSL_CTX_set_max_early_data$MH, "SSL_CTX_set_max_early_data");
        try {
            return (int)mh$.invokeExact(ctx, max_early_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$779.SSL_CTX_get_max_early_data$MH,"SSL_CTX_get_max_early_data");
    }
    public static int SSL_CTX_get_max_early_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$779.SSL_CTX_get_max_early_data$MH, "SSL_CTX_get_max_early_data");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$779.SSL_set_max_early_data$MH,"SSL_set_max_early_data");
    }
    public static int SSL_set_max_early_data ( Addressable s,  int max_early_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$779.SSL_set_max_early_data$MH, "SSL_set_max_early_data");
        try {
            return (int)mh$.invokeExact(s, max_early_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$779.SSL_get_max_early_data$MH,"SSL_get_max_early_data");
    }
    public static int SSL_get_max_early_data ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$779.SSL_get_max_early_data$MH, "SSL_get_max_early_data");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_recv_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$780.SSL_CTX_set_recv_max_early_data$MH,"SSL_CTX_set_recv_max_early_data");
    }
    public static int SSL_CTX_set_recv_max_early_data ( Addressable ctx,  int recv_max_early_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$780.SSL_CTX_set_recv_max_early_data$MH, "SSL_CTX_set_recv_max_early_data");
        try {
            return (int)mh$.invokeExact(ctx, recv_max_early_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_recv_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$780.SSL_CTX_get_recv_max_early_data$MH,"SSL_CTX_get_recv_max_early_data");
    }
    public static int SSL_CTX_get_recv_max_early_data ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$780.SSL_CTX_get_recv_max_early_data$MH, "SSL_CTX_get_recv_max_early_data");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_recv_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$780.SSL_set_recv_max_early_data$MH,"SSL_set_recv_max_early_data");
    }
    public static int SSL_set_recv_max_early_data ( Addressable s,  int recv_max_early_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$780.SSL_set_recv_max_early_data$MH, "SSL_set_recv_max_early_data");
        try {
            return (int)mh$.invokeExact(s, recv_max_early_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_recv_max_early_data$MH() {
        return RuntimeHelper.requireNonNull(constants$780.SSL_get_recv_max_early_data$MH,"SSL_get_recv_max_early_data");
    }
    public static int SSL_get_recv_max_early_data ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$780.SSL_get_recv_max_early_data$MH, "SSL_get_recv_max_early_data");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_tlsext_max_fragment_length$MH() {
        return RuntimeHelper.requireNonNull(constants$780.SSL_CTX_set_tlsext_max_fragment_length$MH,"SSL_CTX_set_tlsext_max_fragment_length");
    }
    public static int SSL_CTX_set_tlsext_max_fragment_length ( Addressable ctx,  byte mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$780.SSL_CTX_set_tlsext_max_fragment_length$MH, "SSL_CTX_set_tlsext_max_fragment_length");
        try {
            return (int)mh$.invokeExact(ctx, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_tlsext_max_fragment_length$MH() {
        return RuntimeHelper.requireNonNull(constants$780.SSL_set_tlsext_max_fragment_length$MH,"SSL_set_tlsext_max_fragment_length");
    }
    public static int SSL_set_tlsext_max_fragment_length ( Addressable ssl,  byte mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$780.SSL_set_tlsext_max_fragment_length$MH, "SSL_set_tlsext_max_fragment_length");
        try {
            return (int)mh$.invokeExact(ssl, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_servername$MH() {
        return RuntimeHelper.requireNonNull(constants$781.SSL_get_servername$MH,"SSL_get_servername");
    }
    public static MemoryAddress SSL_get_servername ( Addressable s,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$781.SSL_get_servername$MH, "SSL_get_servername");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_servername_type$MH() {
        return RuntimeHelper.requireNonNull(constants$781.SSL_get_servername_type$MH,"SSL_get_servername_type");
    }
    public static int SSL_get_servername_type ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$781.SSL_get_servername_type$MH, "SSL_get_servername_type");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_export_keying_material$MH() {
        return RuntimeHelper.requireNonNull(constants$781.SSL_export_keying_material$MH,"SSL_export_keying_material");
    }
    public static int SSL_export_keying_material ( Addressable s,  Addressable out,  long olen,  Addressable label,  long llen,  Addressable context,  long contextlen,  int use_context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$781.SSL_export_keying_material$MH, "SSL_export_keying_material");
        try {
            return (int)mh$.invokeExact(s, out, olen, label, llen, context, contextlen, use_context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_export_keying_material_early$MH() {
        return RuntimeHelper.requireNonNull(constants$781.SSL_export_keying_material_early$MH,"SSL_export_keying_material_early");
    }
    public static int SSL_export_keying_material_early ( Addressable s,  Addressable out,  long olen,  Addressable label,  long llen,  Addressable context,  long contextlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$781.SSL_export_keying_material_early$MH, "SSL_export_keying_material_early");
        try {
            return (int)mh$.invokeExact(s, out, olen, label, llen, context, contextlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_peer_signature_type_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$781.SSL_get_peer_signature_type_nid$MH,"SSL_get_peer_signature_type_nid");
    }
    public static int SSL_get_peer_signature_type_nid ( Addressable s,  Addressable pnid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$781.SSL_get_peer_signature_type_nid$MH, "SSL_get_peer_signature_type_nid");
        try {
            return (int)mh$.invokeExact(s, pnid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_signature_type_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$781.SSL_get_signature_type_nid$MH,"SSL_get_signature_type_nid");
    }
    public static int SSL_get_signature_type_nid ( Addressable s,  Addressable pnid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$781.SSL_get_signature_type_nid$MH, "SSL_get_signature_type_nid");
        try {
            return (int)mh$.invokeExact(s, pnid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_sigalgs$MH() {
        return RuntimeHelper.requireNonNull(constants$782.SSL_get_sigalgs$MH,"SSL_get_sigalgs");
    }
    public static int SSL_get_sigalgs ( Addressable s,  int idx,  Addressable psign,  Addressable phash,  Addressable psignandhash,  Addressable rsig,  Addressable rhash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$782.SSL_get_sigalgs$MH, "SSL_get_sigalgs");
        try {
            return (int)mh$.invokeExact(s, idx, psign, phash, psignandhash, rsig, rhash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_shared_sigalgs$MH() {
        return RuntimeHelper.requireNonNull(constants$782.SSL_get_shared_sigalgs$MH,"SSL_get_shared_sigalgs");
    }
    public static int SSL_get_shared_sigalgs ( Addressable s,  int idx,  Addressable psign,  Addressable phash,  Addressable psignandhash,  Addressable rsig,  Addressable rhash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$782.SSL_get_shared_sigalgs$MH, "SSL_get_shared_sigalgs");
        try {
            return (int)mh$.invokeExact(s, idx, psign, phash, psignandhash, rsig, rhash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_check_chain$MH() {
        return RuntimeHelper.requireNonNull(constants$782.SSL_check_chain$MH,"SSL_check_chain");
    }
    public static int SSL_check_chain ( Addressable s,  Addressable x,  Addressable pk,  Addressable chain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$782.SSL_check_chain$MH, "SSL_check_chain");
        try {
            return (int)mh$.invokeExact(s, x, pk, chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_tlsext_use_srtp$MH() {
        return RuntimeHelper.requireNonNull(constants$782.SSL_CTX_set_tlsext_use_srtp$MH,"SSL_CTX_set_tlsext_use_srtp");
    }
    public static int SSL_CTX_set_tlsext_use_srtp ( Addressable ctx,  Addressable profiles) {
        var mh$ = RuntimeHelper.requireNonNull(constants$782.SSL_CTX_set_tlsext_use_srtp$MH, "SSL_CTX_set_tlsext_use_srtp");
        try {
            return (int)mh$.invokeExact(ctx, profiles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_tlsext_use_srtp$MH() {
        return RuntimeHelper.requireNonNull(constants$782.SSL_set_tlsext_use_srtp$MH,"SSL_set_tlsext_use_srtp");
    }
    public static int SSL_set_tlsext_use_srtp ( Addressable ssl,  Addressable profiles) {
        var mh$ = RuntimeHelper.requireNonNull(constants$782.SSL_set_tlsext_use_srtp$MH, "SSL_set_tlsext_use_srtp");
        try {
            return (int)mh$.invokeExact(ssl, profiles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_srtp_profiles$MH() {
        return RuntimeHelper.requireNonNull(constants$782.SSL_get_srtp_profiles$MH,"SSL_get_srtp_profiles");
    }
    public static MemoryAddress SSL_get_srtp_profiles ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$782.SSL_get_srtp_profiles$MH, "SSL_get_srtp_profiles");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_selected_srtp_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$783.SSL_get_selected_srtp_profile$MH,"SSL_get_selected_srtp_profile");
    }
    public static MemoryAddress SSL_get_selected_srtp_profile ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$783.SSL_get_selected_srtp_profile$MH, "SSL_get_selected_srtp_profile");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_num$MH() {
        return RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_num$MH,"sk_SSL_CIPHER_num");
    }
    public static int sk_SSL_CIPHER_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_num$MH, "sk_SSL_CIPHER_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_value$MH() {
        return RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_value$MH,"sk_SSL_CIPHER_value");
    }
    public static MemoryAddress sk_SSL_CIPHER_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_value$MH, "sk_SSL_CIPHER_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_new$MH() {
        return RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_new$MH,"sk_SSL_CIPHER_new");
    }
    public static MemoryAddress sk_SSL_CIPHER_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_new$MH, "sk_SSL_CIPHER_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_new_null$MH,"sk_SSL_CIPHER_new_null");
    }
    public static MemoryAddress sk_SSL_CIPHER_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_new_null$MH, "sk_SSL_CIPHER_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_new_reserve$MH,"sk_SSL_CIPHER_new_reserve");
    }
    public static MemoryAddress sk_SSL_CIPHER_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$784.sk_SSL_CIPHER_new_reserve$MH, "sk_SSL_CIPHER_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_reserve$MH,"sk_SSL_CIPHER_reserve");
    }
    public static int sk_SSL_CIPHER_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_reserve$MH, "sk_SSL_CIPHER_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_free$MH() {
        return RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_free$MH,"sk_SSL_CIPHER_free");
    }
    public static void sk_SSL_CIPHER_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_free$MH, "sk_SSL_CIPHER_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_zero$MH,"sk_SSL_CIPHER_zero");
    }
    public static void sk_SSL_CIPHER_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_zero$MH, "sk_SSL_CIPHER_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_delete$MH,"sk_SSL_CIPHER_delete");
    }
    public static MemoryAddress sk_SSL_CIPHER_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_delete$MH, "sk_SSL_CIPHER_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_delete_ptr$MH,"sk_SSL_CIPHER_delete_ptr");
    }
    public static MemoryAddress sk_SSL_CIPHER_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_delete_ptr$MH, "sk_SSL_CIPHER_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_push$MH() {
        return RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_push$MH,"sk_SSL_CIPHER_push");
    }
    public static int sk_SSL_CIPHER_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$785.sk_SSL_CIPHER_push$MH, "sk_SSL_CIPHER_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_unshift$MH,"sk_SSL_CIPHER_unshift");
    }
    public static int sk_SSL_CIPHER_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_unshift$MH, "sk_SSL_CIPHER_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_pop$MH,"sk_SSL_CIPHER_pop");
    }
    public static MemoryAddress sk_SSL_CIPHER_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_pop$MH, "sk_SSL_CIPHER_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_shift$MH,"sk_SSL_CIPHER_shift");
    }
    public static MemoryAddress sk_SSL_CIPHER_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_shift$MH, "sk_SSL_CIPHER_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_pop_free$MH,"sk_SSL_CIPHER_pop_free");
    }
    public static void sk_SSL_CIPHER_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_pop_free$MH, "sk_SSL_CIPHER_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_insert$MH,"sk_SSL_CIPHER_insert");
    }
    public static int sk_SSL_CIPHER_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_insert$MH, "sk_SSL_CIPHER_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_set$MH() {
        return RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_set$MH,"sk_SSL_CIPHER_set");
    }
    public static MemoryAddress sk_SSL_CIPHER_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$786.sk_SSL_CIPHER_set$MH, "sk_SSL_CIPHER_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_find$MH() {
        return RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_find$MH,"sk_SSL_CIPHER_find");
    }
    public static int sk_SSL_CIPHER_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_find$MH, "sk_SSL_CIPHER_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_find_ex$MH,"sk_SSL_CIPHER_find_ex");
    }
    public static int sk_SSL_CIPHER_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_find_ex$MH, "sk_SSL_CIPHER_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_sort$MH,"sk_SSL_CIPHER_sort");
    }
    public static void sk_SSL_CIPHER_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_sort$MH, "sk_SSL_CIPHER_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_is_sorted$MH,"sk_SSL_CIPHER_is_sorted");
    }
    public static int sk_SSL_CIPHER_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_is_sorted$MH, "sk_SSL_CIPHER_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_dup$MH,"sk_SSL_CIPHER_dup");
    }
    public static MemoryAddress sk_SSL_CIPHER_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_dup$MH, "sk_SSL_CIPHER_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_deep_copy$MH,"sk_SSL_CIPHER_deep_copy");
    }
    public static MemoryAddress sk_SSL_CIPHER_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$787.sk_SSL_CIPHER_deep_copy$MH, "sk_SSL_CIPHER_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_CIPHER_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$788.sk_SSL_CIPHER_set_cmp_func$MH,"sk_SSL_CIPHER_set_cmp_func");
    }
    public static MemoryAddress sk_SSL_CIPHER_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$788.sk_SSL_CIPHER_set_cmp_func$MH, "sk_SSL_CIPHER_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_num$MH() {
        return RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_num$MH,"sk_SSL_COMP_num");
    }
    public static int sk_SSL_COMP_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_num$MH, "sk_SSL_COMP_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_value$MH() {
        return RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_value$MH,"sk_SSL_COMP_value");
    }
    public static MemoryAddress sk_SSL_COMP_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_value$MH, "sk_SSL_COMP_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_new$MH() {
        return RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_new$MH,"sk_SSL_COMP_new");
    }
    public static MemoryAddress sk_SSL_COMP_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_new$MH, "sk_SSL_COMP_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_new_null$MH,"sk_SSL_COMP_new_null");
    }
    public static MemoryAddress sk_SSL_COMP_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_new_null$MH, "sk_SSL_COMP_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_new_reserve$MH,"sk_SSL_COMP_new_reserve");
    }
    public static MemoryAddress sk_SSL_COMP_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$789.sk_SSL_COMP_new_reserve$MH, "sk_SSL_COMP_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_reserve$MH,"sk_SSL_COMP_reserve");
    }
    public static int sk_SSL_COMP_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_reserve$MH, "sk_SSL_COMP_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_free$MH() {
        return RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_free$MH,"sk_SSL_COMP_free");
    }
    public static void sk_SSL_COMP_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_free$MH, "sk_SSL_COMP_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_zero$MH,"sk_SSL_COMP_zero");
    }
    public static void sk_SSL_COMP_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_zero$MH, "sk_SSL_COMP_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_delete$MH,"sk_SSL_COMP_delete");
    }
    public static MemoryAddress sk_SSL_COMP_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_delete$MH, "sk_SSL_COMP_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_delete_ptr$MH,"sk_SSL_COMP_delete_ptr");
    }
    public static MemoryAddress sk_SSL_COMP_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_delete_ptr$MH, "sk_SSL_COMP_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_push$MH() {
        return RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_push$MH,"sk_SSL_COMP_push");
    }
    public static int sk_SSL_COMP_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$790.sk_SSL_COMP_push$MH, "sk_SSL_COMP_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_unshift$MH,"sk_SSL_COMP_unshift");
    }
    public static int sk_SSL_COMP_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_unshift$MH, "sk_SSL_COMP_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_pop$MH,"sk_SSL_COMP_pop");
    }
    public static MemoryAddress sk_SSL_COMP_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_pop$MH, "sk_SSL_COMP_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_shift$MH,"sk_SSL_COMP_shift");
    }
    public static MemoryAddress sk_SSL_COMP_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_shift$MH, "sk_SSL_COMP_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_pop_free$MH,"sk_SSL_COMP_pop_free");
    }
    public static void sk_SSL_COMP_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_pop_free$MH, "sk_SSL_COMP_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_insert$MH,"sk_SSL_COMP_insert");
    }
    public static int sk_SSL_COMP_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_insert$MH, "sk_SSL_COMP_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_set$MH() {
        return RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_set$MH,"sk_SSL_COMP_set");
    }
    public static MemoryAddress sk_SSL_COMP_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$791.sk_SSL_COMP_set$MH, "sk_SSL_COMP_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_find$MH() {
        return RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_find$MH,"sk_SSL_COMP_find");
    }
    public static int sk_SSL_COMP_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_find$MH, "sk_SSL_COMP_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_find_ex$MH,"sk_SSL_COMP_find_ex");
    }
    public static int sk_SSL_COMP_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_find_ex$MH, "sk_SSL_COMP_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_sort$MH,"sk_SSL_COMP_sort");
    }
    public static void sk_SSL_COMP_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_sort$MH, "sk_SSL_COMP_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_is_sorted$MH,"sk_SSL_COMP_is_sorted");
    }
    public static int sk_SSL_COMP_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_is_sorted$MH, "sk_SSL_COMP_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_dup$MH,"sk_SSL_COMP_dup");
    }
    public static MemoryAddress sk_SSL_COMP_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_dup$MH, "sk_SSL_COMP_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_deep_copy$MH,"sk_SSL_COMP_deep_copy");
    }
    public static MemoryAddress sk_SSL_COMP_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$792.sk_SSL_COMP_deep_copy$MH, "sk_SSL_COMP_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_SSL_COMP_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$793.sk_SSL_COMP_set_cmp_func$MH,"sk_SSL_COMP_set_cmp_func");
    }
    public static MemoryAddress sk_SSL_COMP_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$793.sk_SSL_COMP_set_cmp_func$MH, "sk_SSL_COMP_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_debug$MH() {
        return RuntimeHelper.requireNonNull(constants$793.SSL_set_debug$MH,"SSL_set_debug");
    }
    public static void SSL_set_debug ( Addressable s,  int debug) {
        var mh$ = RuntimeHelper.requireNonNull(constants$793.SSL_set_debug$MH, "SSL_set_debug");
        try {
            mh$.invokeExact(s, debug);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int TLS_ST_BEFORE() {
        return (int)0L;
    }
    public static int TLS_ST_OK() {
        return (int)1L;
    }
    public static int DTLS_ST_CR_HELLO_VERIFY_REQUEST() {
        return (int)2L;
    }
    public static int TLS_ST_CR_SRVR_HELLO() {
        return (int)3L;
    }
    public static int TLS_ST_CR_CERT() {
        return (int)4L;
    }
    public static int TLS_ST_CR_CERT_STATUS() {
        return (int)5L;
    }
    public static int TLS_ST_CR_KEY_EXCH() {
        return (int)6L;
    }
    public static int TLS_ST_CR_CERT_REQ() {
        return (int)7L;
    }
    public static int TLS_ST_CR_SRVR_DONE() {
        return (int)8L;
    }
    public static int TLS_ST_CR_SESSION_TICKET() {
        return (int)9L;
    }
    public static int TLS_ST_CR_CHANGE() {
        return (int)10L;
    }
    public static int TLS_ST_CR_FINISHED() {
        return (int)11L;
    }
    public static int TLS_ST_CW_CLNT_HELLO() {
        return (int)12L;
    }
    public static int TLS_ST_CW_CERT() {
        return (int)13L;
    }
    public static int TLS_ST_CW_KEY_EXCH() {
        return (int)14L;
    }
    public static int TLS_ST_CW_CERT_VRFY() {
        return (int)15L;
    }
    public static int TLS_ST_CW_CHANGE() {
        return (int)16L;
    }
    public static int TLS_ST_CW_NEXT_PROTO() {
        return (int)17L;
    }
    public static int TLS_ST_CW_FINISHED() {
        return (int)18L;
    }
    public static int TLS_ST_SW_HELLO_REQ() {
        return (int)19L;
    }
    public static int TLS_ST_SR_CLNT_HELLO() {
        return (int)20L;
    }
    public static int DTLS_ST_SW_HELLO_VERIFY_REQUEST() {
        return (int)21L;
    }
    public static int TLS_ST_SW_SRVR_HELLO() {
        return (int)22L;
    }
    public static int TLS_ST_SW_CERT() {
        return (int)23L;
    }
    public static int TLS_ST_SW_KEY_EXCH() {
        return (int)24L;
    }
    public static int TLS_ST_SW_CERT_REQ() {
        return (int)25L;
    }
    public static int TLS_ST_SW_SRVR_DONE() {
        return (int)26L;
    }
    public static int TLS_ST_SR_CERT() {
        return (int)27L;
    }
    public static int TLS_ST_SR_KEY_EXCH() {
        return (int)28L;
    }
    public static int TLS_ST_SR_CERT_VRFY() {
        return (int)29L;
    }
    public static int TLS_ST_SR_NEXT_PROTO() {
        return (int)30L;
    }
    public static int TLS_ST_SR_CHANGE() {
        return (int)31L;
    }
    public static int TLS_ST_SR_FINISHED() {
        return (int)32L;
    }
    public static int TLS_ST_SW_SESSION_TICKET() {
        return (int)33L;
    }
    public static int TLS_ST_SW_CERT_STATUS() {
        return (int)34L;
    }
    public static int TLS_ST_SW_CHANGE() {
        return (int)35L;
    }
    public static int TLS_ST_SW_FINISHED() {
        return (int)36L;
    }
    public static int TLS_ST_SW_ENCRYPTED_EXTENSIONS() {
        return (int)37L;
    }
    public static int TLS_ST_CR_ENCRYPTED_EXTENSIONS() {
        return (int)38L;
    }
    public static int TLS_ST_CR_CERT_VRFY() {
        return (int)39L;
    }
    public static int TLS_ST_SW_CERT_VRFY() {
        return (int)40L;
    }
    public static int TLS_ST_CR_HELLO_REQ() {
        return (int)41L;
    }
    public static int TLS_ST_SW_KEY_UPDATE() {
        return (int)42L;
    }
    public static int TLS_ST_CW_KEY_UPDATE() {
        return (int)43L;
    }
    public static int TLS_ST_SR_KEY_UPDATE() {
        return (int)44L;
    }
    public static int TLS_ST_CR_KEY_UPDATE() {
        return (int)45L;
    }
    public static int TLS_ST_EARLY_DATA() {
        return (int)46L;
    }
    public static int TLS_ST_PENDING_EARLY_DATA_END() {
        return (int)47L;
    }
    public static int TLS_ST_CW_END_OF_EARLY_DATA() {
        return (int)48L;
    }
    public static int TLS_ST_SR_END_OF_EARLY_DATA() {
        return (int)49L;
    }
    public static MethodHandle SSL_in_init$MH() {
        return RuntimeHelper.requireNonNull(constants$793.SSL_in_init$MH,"SSL_in_init");
    }
    public static int SSL_in_init ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$793.SSL_in_init$MH, "SSL_in_init");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_in_before$MH() {
        return RuntimeHelper.requireNonNull(constants$793.SSL_in_before$MH,"SSL_in_before");
    }
    public static int SSL_in_before ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$793.SSL_in_before$MH, "SSL_in_before");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_is_init_finished$MH() {
        return RuntimeHelper.requireNonNull(constants$793.SSL_is_init_finished$MH,"SSL_is_init_finished");
    }
    public static int SSL_is_init_finished ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$793.SSL_is_init_finished$MH, "SSL_is_init_finished");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_finished$MH() {
        return RuntimeHelper.requireNonNull(constants$793.SSL_get_finished$MH,"SSL_get_finished");
    }
    public static long SSL_get_finished ( Addressable s,  Addressable buf,  long count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$793.SSL_get_finished$MH, "SSL_get_finished");
        try {
            return (long)mh$.invokeExact(s, buf, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_peer_finished$MH() {
        return RuntimeHelper.requireNonNull(constants$794.SSL_get_peer_finished$MH,"SSL_get_peer_finished");
    }
    public static long SSL_get_peer_finished ( Addressable s,  Addressable buf,  long count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$794.SSL_get_peer_finished$MH, "SSL_get_peer_finished");
        try {
            return (long)mh$.invokeExact(s, buf, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_SSL_SESSION$MH() {
        return RuntimeHelper.requireNonNull(constants$794.PEM_read_bio_SSL_SESSION$MH,"PEM_read_bio_SSL_SESSION");
    }
    public static MemoryAddress PEM_read_bio_SSL_SESSION ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$794.PEM_read_bio_SSL_SESSION$MH, "PEM_read_bio_SSL_SESSION");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_SSL_SESSION$MH() {
        return RuntimeHelper.requireNonNull(constants$794.PEM_read_SSL_SESSION$MH,"PEM_read_SSL_SESSION");
    }
    public static MemoryAddress PEM_read_SSL_SESSION ( Addressable fp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$794.PEM_read_SSL_SESSION$MH, "PEM_read_SSL_SESSION");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_bio_SSL_SESSION$MH() {
        return RuntimeHelper.requireNonNull(constants$794.PEM_write_bio_SSL_SESSION$MH,"PEM_write_bio_SSL_SESSION");
    }
    public static int PEM_write_bio_SSL_SESSION ( Addressable bp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$794.PEM_write_bio_SSL_SESSION$MH, "PEM_write_bio_SSL_SESSION");
        try {
            return (int)mh$.invokeExact(bp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_write_SSL_SESSION$MH() {
        return RuntimeHelper.requireNonNull(constants$794.PEM_write_SSL_SESSION$MH,"PEM_write_SSL_SESSION");
    }
    public static int PEM_write_SSL_SESSION ( Addressable fp,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$794.PEM_write_SSL_SESSION$MH, "PEM_write_SSL_SESSION");
        try {
            return (int)mh$.invokeExact(fp, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BIO_f_ssl$MH,"BIO_f_ssl");
    }
    public static MemoryAddress BIO_f_ssl () {
        var mh$ = RuntimeHelper.requireNonNull(constants$794.BIO_f_ssl$MH, "BIO_f_ssl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BIO_new_ssl$MH,"BIO_new_ssl");
    }
    public static MemoryAddress BIO_new_ssl ( Addressable ctx,  int client) {
        var mh$ = RuntimeHelper.requireNonNull(constants$795.BIO_new_ssl$MH, "BIO_new_ssl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, client);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_ssl_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BIO_new_ssl_connect$MH,"BIO_new_ssl_connect");
    }
    public static MemoryAddress BIO_new_ssl_connect ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$795.BIO_new_ssl_connect$MH, "BIO_new_ssl_connect");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_buffer_ssl_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BIO_new_buffer_ssl_connect$MH,"BIO_new_buffer_ssl_connect");
    }
    public static MemoryAddress BIO_new_buffer_ssl_connect ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$795.BIO_new_buffer_ssl_connect$MH, "BIO_new_buffer_ssl_connect");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ssl_copy_session_id$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BIO_ssl_copy_session_id$MH,"BIO_ssl_copy_session_id");
    }
    public static int BIO_ssl_copy_session_id ( Addressable to,  Addressable from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$795.BIO_ssl_copy_session_id$MH, "BIO_ssl_copy_session_id");
        try {
            return (int)mh$.invokeExact(to, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ssl_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BIO_ssl_shutdown$MH,"BIO_ssl_shutdown");
    }
    public static void BIO_ssl_shutdown ( Addressable ssl_bio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$795.BIO_ssl_shutdown$MH, "BIO_ssl_shutdown");
        try {
            mh$.invokeExact(ssl_bio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cipher_list$MH() {
        return RuntimeHelper.requireNonNull(constants$795.SSL_CTX_set_cipher_list$MH,"SSL_CTX_set_cipher_list");
    }
    public static int SSL_CTX_set_cipher_list ( Addressable x0,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$795.SSL_CTX_set_cipher_list$MH, "SSL_CTX_set_cipher_list");
        try {
            return (int)mh$.invokeExact(x0, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$796.SSL_CTX_new$MH,"SSL_CTX_new");
    }
    public static MemoryAddress SSL_CTX_new ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$796.SSL_CTX_new$MH, "SSL_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$796.SSL_CTX_up_ref$MH,"SSL_CTX_up_ref");
    }
    public static int SSL_CTX_up_ref ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$796.SSL_CTX_up_ref$MH, "SSL_CTX_up_ref");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$796.SSL_CTX_free$MH,"SSL_CTX_free");
    }
    public static void SSL_CTX_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$796.SSL_CTX_free$MH, "SSL_CTX_free");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$796.SSL_CTX_set_timeout$MH,"SSL_CTX_set_timeout");
    }
    public static long SSL_CTX_set_timeout ( Addressable ctx,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$796.SSL_CTX_set_timeout$MH, "SSL_CTX_set_timeout");
        try {
            return (long)mh$.invokeExact(ctx, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$796.SSL_CTX_get_timeout$MH,"SSL_CTX_get_timeout");
    }
    public static long SSL_CTX_get_timeout ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$796.SSL_CTX_get_timeout$MH, "SSL_CTX_get_timeout");
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_cert_store$MH() {
        return RuntimeHelper.requireNonNull(constants$796.SSL_CTX_get_cert_store$MH,"SSL_CTX_get_cert_store");
    }
    public static MemoryAddress SSL_CTX_get_cert_store ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$796.SSL_CTX_get_cert_store$MH, "SSL_CTX_get_cert_store");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cert_store$MH() {
        return RuntimeHelper.requireNonNull(constants$797.SSL_CTX_set_cert_store$MH,"SSL_CTX_set_cert_store");
    }
    public static void SSL_CTX_set_cert_store ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$797.SSL_CTX_set_cert_store$MH, "SSL_CTX_set_cert_store");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set1_cert_store$MH() {
        return RuntimeHelper.requireNonNull(constants$797.SSL_CTX_set1_cert_store$MH,"SSL_CTX_set1_cert_store");
    }
    public static void SSL_CTX_set1_cert_store ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$797.SSL_CTX_set1_cert_store$MH, "SSL_CTX_set1_cert_store");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_want$MH() {
        return RuntimeHelper.requireNonNull(constants$797.SSL_want$MH,"SSL_want");
    }
    public static int SSL_want ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$797.SSL_want$MH, "SSL_want");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$797.SSL_clear$MH,"SSL_clear");
    }
    public static int SSL_clear ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$797.SSL_clear$MH, "SSL_clear");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


