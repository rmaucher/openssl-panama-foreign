// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_5 extends openssl_h_4 {

    public static int SSL_CTRL_SET_GROUPS() {
        return (int)91L;
    }
    public static int SSL_CTRL_SET_GROUPS_LIST() {
        return (int)92L;
    }
    public static int SSL_CTRL_GET_SHARED_GROUP() {
        return (int)93L;
    }
    public static int SSL_CTRL_SET_SIGALGS() {
        return (int)97L;
    }
    public static int SSL_CTRL_SET_SIGALGS_LIST() {
        return (int)98L;
    }
    public static int SSL_CTRL_CERT_FLAGS() {
        return (int)99L;
    }
    public static int SSL_CTRL_CLEAR_CERT_FLAGS() {
        return (int)100L;
    }
    public static int SSL_CTRL_SET_CLIENT_SIGALGS() {
        return (int)101L;
    }
    public static int SSL_CTRL_SET_CLIENT_SIGALGS_LIST() {
        return (int)102L;
    }
    public static int SSL_CTRL_GET_CLIENT_CERT_TYPES() {
        return (int)103L;
    }
    public static int SSL_CTRL_SET_CLIENT_CERT_TYPES() {
        return (int)104L;
    }
    public static int SSL_CTRL_BUILD_CERT_CHAIN() {
        return (int)105L;
    }
    public static int SSL_CTRL_SET_VERIFY_CERT_STORE() {
        return (int)106L;
    }
    public static int SSL_CTRL_SET_CHAIN_CERT_STORE() {
        return (int)107L;
    }
    public static int SSL_CTRL_GET_PEER_SIGNATURE_NID() {
        return (int)108L;
    }
    public static int SSL_CTRL_GET_PEER_TMP_KEY() {
        return (int)109L;
    }
    public static int SSL_CTRL_GET_RAW_CIPHERLIST() {
        return (int)110L;
    }
    public static int SSL_CTRL_GET_EC_POINT_FORMATS() {
        return (int)111L;
    }
    public static int SSL_CTRL_GET_CHAIN_CERTS() {
        return (int)115L;
    }
    public static int SSL_CTRL_SELECT_CURRENT_CERT() {
        return (int)116L;
    }
    public static int SSL_CTRL_SET_CURRENT_CERT() {
        return (int)117L;
    }
    public static int SSL_CTRL_SET_DH_AUTO() {
        return (int)118L;
    }
    public static int DTLS_CTRL_SET_LINK_MTU() {
        return (int)120L;
    }
    public static int DTLS_CTRL_GET_LINK_MIN_MTU() {
        return (int)121L;
    }
    public static int SSL_CTRL_GET_EXTMS_SUPPORT() {
        return (int)122L;
    }
    public static int SSL_CTRL_SET_MIN_PROTO_VERSION() {
        return (int)123L;
    }
    public static int SSL_CTRL_SET_MAX_PROTO_VERSION() {
        return (int)124L;
    }
    public static int SSL_CTRL_SET_SPLIT_SEND_FRAGMENT() {
        return (int)125L;
    }
    public static int SSL_CTRL_SET_MAX_PIPELINES() {
        return (int)126L;
    }
    public static int SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE() {
        return (int)127L;
    }
    public static int SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB() {
        return (int)128L;
    }
    public static int SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG() {
        return (int)129L;
    }
    public static int SSL_CTRL_GET_MIN_PROTO_VERSION() {
        return (int)130L;
    }
    public static int SSL_CTRL_GET_MAX_PROTO_VERSION() {
        return (int)131L;
    }
    public static int SSL_CTRL_GET_SIGNATURE_NID() {
        return (int)132L;
    }
    public static int SSL_CTRL_GET_TMP_KEY() {
        return (int)133L;
    }
    public static int SSL_CERT_SET_FIRST() {
        return (int)1L;
    }
    public static int SSL_CERT_SET_NEXT() {
        return (int)2L;
    }
    public static int SSL_CERT_SET_SERVER() {
        return (int)3L;
    }
    public static int SSL_SERVERINFOV1() {
        return (int)1L;
    }
    public static int SSL_SERVERINFOV2() {
        return (int)2L;
    }
    public static int SSL_CLIENT_HELLO_SUCCESS() {
        return (int)1L;
    }
    public static int SSL_CLIENT_HELLO_ERROR() {
        return (int)0L;
    }
    public static int SSL_READ_EARLY_DATA_ERROR() {
        return (int)0L;
    }
    public static int SSL_READ_EARLY_DATA_SUCCESS() {
        return (int)1L;
    }
    public static int SSL_READ_EARLY_DATA_FINISH() {
        return (int)2L;
    }
    public static int SSL_EARLY_DATA_NOT_SENT() {
        return (int)0L;
    }
    public static int SSL_EARLY_DATA_REJECTED() {
        return (int)1L;
    }
    public static int SSL_EARLY_DATA_ACCEPTED() {
        return (int)2L;
    }
    public static int SSL_SECOP_OTHER_NONE() {
        return (int)0L;
    }
    public static int SSL_SECOP_PEER() {
        return (int)4096L;
    }
    public static int SSL_TICKET_FATAL_ERR_MALLOC() {
        return (int)0L;
    }
    public static int SSL_TICKET_FATAL_ERR_OTHER() {
        return (int)1L;
    }
    public static int SSL_TICKET_NONE() {
        return (int)2L;
    }
    public static int SSL_TICKET_EMPTY() {
        return (int)3L;
    }
    public static int SSL_TICKET_NO_DECRYPT() {
        return (int)4L;
    }
    public static int SSL_TICKET_SUCCESS() {
        return (int)5L;
    }
    public static int SSL_TICKET_SUCCESS_RENEW() {
        return (int)6L;
    }
    public static int SSL_TICKET_RETURN_ABORT() {
        return (int)0L;
    }
    public static int SSL_TICKET_RETURN_IGNORE() {
        return (int)1L;
    }
    public static int SSL_TICKET_RETURN_IGNORE_RENEW() {
        return (int)2L;
    }
    public static int SSL_TICKET_RETURN_USE() {
        return (int)3L;
    }
    public static int SSL_TICKET_RETURN_USE_RENEW() {
        return (int)4L;
    }
    public static int _ERRNO_H() {
        return (int)1L;
    }
    public static int _BITS_ERRNO_H() {
        return (int)1L;
    }
    public static int EPERM() {
        return (int)1L;
    }
    public static int ENOENT() {
        return (int)2L;
    }
    public static int ESRCH() {
        return (int)3L;
    }
    public static int EINTR() {
        return (int)4L;
    }
    public static int EIO() {
        return (int)5L;
    }
    public static int ENXIO() {
        return (int)6L;
    }
    public static int E2BIG() {
        return (int)7L;
    }
    public static int ENOEXEC() {
        return (int)8L;
    }
    public static int EBADF() {
        return (int)9L;
    }
    public static int ECHILD() {
        return (int)10L;
    }
    public static int EAGAIN() {
        return (int)11L;
    }
    public static int ENOMEM() {
        return (int)12L;
    }
    public static int EACCES() {
        return (int)13L;
    }
    public static int EFAULT() {
        return (int)14L;
    }
    public static int ENOTBLK() {
        return (int)15L;
    }
    public static int EBUSY() {
        return (int)16L;
    }
    public static int EEXIST() {
        return (int)17L;
    }
    public static int EXDEV() {
        return (int)18L;
    }
    public static int ENODEV() {
        return (int)19L;
    }
    public static int ENOTDIR() {
        return (int)20L;
    }
    public static int EISDIR() {
        return (int)21L;
    }
    public static int EINVAL() {
        return (int)22L;
    }
    public static int ENFILE() {
        return (int)23L;
    }
    public static int EMFILE() {
        return (int)24L;
    }
    public static int ENOTTY() {
        return (int)25L;
    }
    public static int ETXTBSY() {
        return (int)26L;
    }
    public static int EFBIG() {
        return (int)27L;
    }
    public static int ENOSPC() {
        return (int)28L;
    }
    public static int ESPIPE() {
        return (int)29L;
    }
    public static int EROFS() {
        return (int)30L;
    }
    public static int EMLINK() {
        return (int)31L;
    }
    public static int EPIPE() {
        return (int)32L;
    }
    public static int EDOM() {
        return (int)33L;
    }
    public static int ERANGE() {
        return (int)34L;
    }
    public static int EDEADLK() {
        return (int)35L;
    }
    public static int ENAMETOOLONG() {
        return (int)36L;
    }
    public static int ENOLCK() {
        return (int)37L;
    }
    public static int ENOSYS() {
        return (int)38L;
    }
    public static int ENOTEMPTY() {
        return (int)39L;
    }
    public static int ELOOP() {
        return (int)40L;
    }
    public static int ENOMSG() {
        return (int)42L;
    }
    public static int EIDRM() {
        return (int)43L;
    }
    public static int ECHRNG() {
        return (int)44L;
    }
    public static int EL2NSYNC() {
        return (int)45L;
    }
    public static int EL3HLT() {
        return (int)46L;
    }
    public static int EL3RST() {
        return (int)47L;
    }
    public static int ELNRNG() {
        return (int)48L;
    }
    public static int EUNATCH() {
        return (int)49L;
    }
    public static int ENOCSI() {
        return (int)50L;
    }
    public static int EL2HLT() {
        return (int)51L;
    }
    public static int EBADE() {
        return (int)52L;
    }
    public static int EBADR() {
        return (int)53L;
    }
    public static int EXFULL() {
        return (int)54L;
    }
    public static int ENOANO() {
        return (int)55L;
    }
    public static int EBADRQC() {
        return (int)56L;
    }
    public static int EBADSLT() {
        return (int)57L;
    }
    public static int EBFONT() {
        return (int)59L;
    }
    public static int ENOSTR() {
        return (int)60L;
    }
    public static int ENODATA() {
        return (int)61L;
    }
    public static int ETIME() {
        return (int)62L;
    }
    public static int ENOSR() {
        return (int)63L;
    }
    public static int ENONET() {
        return (int)64L;
    }
    public static int ENOPKG() {
        return (int)65L;
    }
    public static int EREMOTE() {
        return (int)66L;
    }
    public static int ENOLINK() {
        return (int)67L;
    }
    public static int EADV() {
        return (int)68L;
    }
    public static int ESRMNT() {
        return (int)69L;
    }
    public static int ECOMM() {
        return (int)70L;
    }
    public static int EPROTO() {
        return (int)71L;
    }
    public static int EMULTIHOP() {
        return (int)72L;
    }
    public static int EDOTDOT() {
        return (int)73L;
    }
    public static int EBADMSG() {
        return (int)74L;
    }
    public static int EOVERFLOW() {
        return (int)75L;
    }
    public static int ENOTUNIQ() {
        return (int)76L;
    }
    public static int EBADFD() {
        return (int)77L;
    }
    public static int EREMCHG() {
        return (int)78L;
    }
    public static int ELIBACC() {
        return (int)79L;
    }
    public static int ELIBBAD() {
        return (int)80L;
    }
    public static int ELIBSCN() {
        return (int)81L;
    }
    public static int ELIBMAX() {
        return (int)82L;
    }
    public static int ELIBEXEC() {
        return (int)83L;
    }
    public static int EILSEQ() {
        return (int)84L;
    }
    public static int ERESTART() {
        return (int)85L;
    }
    public static int ESTRPIPE() {
        return (int)86L;
    }
    public static int EUSERS() {
        return (int)87L;
    }
    public static int ENOTSOCK() {
        return (int)88L;
    }
    public static int EDESTADDRREQ() {
        return (int)89L;
    }
    public static int EMSGSIZE() {
        return (int)90L;
    }
    public static int EPROTOTYPE() {
        return (int)91L;
    }
    public static int ENOPROTOOPT() {
        return (int)92L;
    }
    public static int EPROTONOSUPPORT() {
        return (int)93L;
    }
    public static int ESOCKTNOSUPPORT() {
        return (int)94L;
    }
    public static int EOPNOTSUPP() {
        return (int)95L;
    }
    public static int EPFNOSUPPORT() {
        return (int)96L;
    }
    public static int EAFNOSUPPORT() {
        return (int)97L;
    }
    public static int EADDRINUSE() {
        return (int)98L;
    }
    public static int EADDRNOTAVAIL() {
        return (int)99L;
    }
    public static int ENETDOWN() {
        return (int)100L;
    }
    public static int ENETUNREACH() {
        return (int)101L;
    }
    public static int ENETRESET() {
        return (int)102L;
    }
    public static int ECONNABORTED() {
        return (int)103L;
    }
    public static int ECONNRESET() {
        return (int)104L;
    }
    public static int ENOBUFS() {
        return (int)105L;
    }
    public static int EISCONN() {
        return (int)106L;
    }
    public static int ENOTCONN() {
        return (int)107L;
    }
    public static int ESHUTDOWN() {
        return (int)108L;
    }
    public static int ETOOMANYREFS() {
        return (int)109L;
    }
    public static int ETIMEDOUT() {
        return (int)110L;
    }
    public static int ECONNREFUSED() {
        return (int)111L;
    }
    public static int EHOSTDOWN() {
        return (int)112L;
    }
    public static int EHOSTUNREACH() {
        return (int)113L;
    }
    public static int EALREADY() {
        return (int)114L;
    }
    public static int EINPROGRESS() {
        return (int)115L;
    }
    public static int ESTALE() {
        return (int)116L;
    }
    public static int EUCLEAN() {
        return (int)117L;
    }
    public static int ENOTNAM() {
        return (int)118L;
    }
    public static int ENAVAIL() {
        return (int)119L;
    }
    public static int EISNAM() {
        return (int)120L;
    }
    public static int EREMOTEIO() {
        return (int)121L;
    }
    public static int EDQUOT() {
        return (int)122L;
    }
    public static int ENOMEDIUM() {
        return (int)123L;
    }
    public static int EMEDIUMTYPE() {
        return (int)124L;
    }
    public static int ECANCELED() {
        return (int)125L;
    }
    public static int ENOKEY() {
        return (int)126L;
    }
    public static int EKEYEXPIRED() {
        return (int)127L;
    }
    public static int EKEYREVOKED() {
        return (int)128L;
    }
    public static int EKEYREJECTED() {
        return (int)129L;
    }
    public static int EOWNERDEAD() {
        return (int)130L;
    }
    public static int ENOTRECOVERABLE() {
        return (int)131L;
    }
    public static int ERFKILL() {
        return (int)132L;
    }
    public static int EHWPOISON() {
        return (int)133L;
    }
    public static int ERR_TXT_MALLOCED() {
        return (int)1L;
    }
    public static int ERR_TXT_STRING() {
        return (int)2L;
    }
    public static int ERR_FLAG_MARK() {
        return (int)1L;
    }
    public static int ERR_FLAG_CLEAR() {
        return (int)2L;
    }
    public static int ERR_NUM_ERRORS() {
        return (int)16L;
    }
    public static int ERR_LIB_NONE() {
        return (int)1L;
    }
    public static int ERR_LIB_SYS() {
        return (int)2L;
    }
    public static int ERR_LIB_BN() {
        return (int)3L;
    }
    public static int ERR_LIB_RSA() {
        return (int)4L;
    }
    public static int ERR_LIB_DH() {
        return (int)5L;
    }
    public static int ERR_LIB_EVP() {
        return (int)6L;
    }
    public static int ERR_LIB_BUF() {
        return (int)7L;
    }
    public static int ERR_LIB_OBJ() {
        return (int)8L;
    }
    public static int ERR_LIB_PEM() {
        return (int)9L;
    }
    public static int ERR_LIB_DSA() {
        return (int)10L;
    }
    public static int ERR_LIB_X509() {
        return (int)11L;
    }
    public static int ERR_LIB_ASN1() {
        return (int)13L;
    }
    public static int ERR_LIB_CONF() {
        return (int)14L;
    }
    public static int ERR_LIB_CRYPTO() {
        return (int)15L;
    }
    public static int ERR_LIB_EC() {
        return (int)16L;
    }
    public static int ERR_LIB_SSL() {
        return (int)20L;
    }
    public static int ERR_LIB_BIO() {
        return (int)32L;
    }
    public static int ERR_LIB_PKCS7() {
        return (int)33L;
    }
    public static int ERR_LIB_X509V3() {
        return (int)34L;
    }
    public static int ERR_LIB_PKCS12() {
        return (int)35L;
    }
    public static int ERR_LIB_RAND() {
        return (int)36L;
    }
    public static int ERR_LIB_DSO() {
        return (int)37L;
    }
    public static int ERR_LIB_ENGINE() {
        return (int)38L;
    }
    public static int ERR_LIB_OCSP() {
        return (int)39L;
    }
    public static int ERR_LIB_UI() {
        return (int)40L;
    }
    public static int ERR_LIB_COMP() {
        return (int)41L;
    }
    public static int ERR_LIB_ECDSA() {
        return (int)42L;
    }
    public static int ERR_LIB_ECDH() {
        return (int)43L;
    }
    public static int ERR_LIB_OSSL_STORE() {
        return (int)44L;
    }
    public static int ERR_LIB_FIPS() {
        return (int)45L;
    }
    public static int ERR_LIB_CMS() {
        return (int)46L;
    }
    public static int ERR_LIB_TS() {
        return (int)47L;
    }
    public static int ERR_LIB_HMAC() {
        return (int)48L;
    }
    public static int ERR_LIB_CT() {
        return (int)50L;
    }
    public static int ERR_LIB_ASYNC() {
        return (int)51L;
    }
    public static int ERR_LIB_KDF() {
        return (int)52L;
    }
    public static int ERR_LIB_SM2() {
        return (int)53L;
    }
    public static int ERR_LIB_USER() {
        return (int)128L;
    }
    public static int SYS_F_FOPEN() {
        return (int)1L;
    }
    public static int SYS_F_CONNECT() {
        return (int)2L;
    }
    public static int SYS_F_GETSERVBYNAME() {
        return (int)3L;
    }
    public static int SYS_F_SOCKET() {
        return (int)4L;
    }
    public static int SYS_F_IOCTLSOCKET() {
        return (int)5L;
    }
    public static int SYS_F_BIND() {
        return (int)6L;
    }
    public static int SYS_F_LISTEN() {
        return (int)7L;
    }
    public static int SYS_F_ACCEPT() {
        return (int)8L;
    }
    public static int SYS_F_WSASTARTUP() {
        return (int)9L;
    }
    public static int SYS_F_OPENDIR() {
        return (int)10L;
    }
    public static int SYS_F_FREAD() {
        return (int)11L;
    }
    public static int SYS_F_GETADDRINFO() {
        return (int)12L;
    }
    public static int SYS_F_GETNAMEINFO() {
        return (int)13L;
    }
    public static int SYS_F_SETSOCKOPT() {
        return (int)14L;
    }
    public static int SYS_F_GETSOCKOPT() {
        return (int)15L;
    }
    public static int SYS_F_GETSOCKNAME() {
        return (int)16L;
    }
    public static int SYS_F_GETHOSTBYNAME() {
        return (int)17L;
    }
    public static int SYS_F_FFLUSH() {
        return (int)18L;
    }
    public static int SYS_F_OPEN() {
        return (int)19L;
    }
    public static int SYS_F_CLOSE() {
        return (int)20L;
    }
    public static int SYS_F_IOCTL() {
        return (int)21L;
    }
    public static int SYS_F_STAT() {
        return (int)22L;
    }
    public static int SYS_F_FCNTL() {
        return (int)23L;
    }
    public static int SYS_F_FSTAT() {
        return (int)24L;
    }
    public static int ERR_R_NESTED_ASN1_ERROR() {
        return (int)58L;
    }
    public static int ERR_R_MISSING_ASN1_EOS() {
        return (int)63L;
    }
    public static int ERR_R_FATAL() {
        return (int)64L;
    }
    public static int PKCS12_F_OPENSSL_ASC2UNI() {
        return (int)121L;
    }
    public static int PKCS12_F_OPENSSL_UNI2ASC() {
        return (int)124L;
    }
    public static int PKCS12_F_OPENSSL_UNI2UTF8() {
        return (int)127L;
    }
    public static int PKCS12_F_OPENSSL_UTF82UNI() {
        return (int)129L;
    }
    public static int PKCS12_F_PKCS12_CREATE() {
        return (int)105L;
    }
    public static int PKCS12_F_PKCS12_GEN_MAC() {
        return (int)107L;
    }
    public static int PKCS12_F_PKCS12_INIT() {
        return (int)109L;
    }
    public static int PKCS12_F_PKCS12_ITEM_DECRYPT_D2I() {
        return (int)106L;
    }
    public static int PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT() {
        return (int)108L;
    }
    public static int PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG() {
        return (int)117L;
    }
    public static int PKCS12_F_PKCS12_KEY_GEN_ASC() {
        return (int)110L;
    }
    public static int PKCS12_F_PKCS12_KEY_GEN_UNI() {
        return (int)111L;
    }
    public static int PKCS12_F_PKCS12_KEY_GEN_UTF8() {
        return (int)116L;
    }
    public static int PKCS12_F_PKCS12_NEWPASS() {
        return (int)128L;
    }
    public static int PKCS12_F_PKCS12_PACK_P7DATA() {
        return (int)114L;
    }
    public static int PKCS12_F_PKCS12_PACK_P7ENCDATA() {
        return (int)115L;
    }
    public static int PKCS12_F_PKCS12_PARSE() {
        return (int)118L;
    }
    public static int PKCS12_F_PKCS12_PBE_CRYPT() {
        return (int)119L;
    }
    public static int PKCS12_F_PKCS12_PBE_KEYIVGEN() {
        return (int)120L;
    }
    public static int PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF() {
        return (int)112L;
    }
    public static int PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8() {
        return (int)113L;
    }
    public static int PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT() {
        return (int)133L;
    }
    public static int PKCS12_F_PKCS12_SETUP_MAC() {
        return (int)122L;
    }
    public static int PKCS12_F_PKCS12_SET_MAC() {
        return (int)123L;
    }
    public static int PKCS12_F_PKCS12_UNPACK_AUTHSAFES() {
        return (int)130L;
    }
    public static int PKCS12_F_PKCS12_UNPACK_P7DATA() {
        return (int)131L;
    }
    public static int PKCS12_F_PKCS12_VERIFY_MAC() {
        return (int)126L;
    }
    public static int PKCS12_F_PKCS8_ENCRYPT() {
        return (int)125L;
    }
    public static int PKCS12_F_PKCS8_SET0_PBE() {
        return (int)132L;
    }
    public static int PKCS12_R_CANT_PACK_STRUCTURE() {
        return (int)100L;
    }
    public static int PKCS12_R_CONTENT_TYPE_NOT_DATA() {
        return (int)121L;
    }
    public static int PKCS12_R_DECODE_ERROR() {
        return (int)101L;
    }
    public static int PKCS12_R_ENCODE_ERROR() {
        return (int)102L;
    }
    public static int PKCS12_R_ENCRYPT_ERROR() {
        return (int)103L;
    }
    public static int PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE() {
        return (int)120L;
    }
    public static int PKCS12_R_INVALID_NULL_ARGUMENT() {
        return (int)104L;
    }
    public static int PKCS12_R_INVALID_NULL_PKCS12_POINTER() {
        return (int)105L;
    }
    public static int PKCS12_R_IV_GEN_ERROR() {
        return (int)106L;
    }
    public static int PKCS12_R_KEY_GEN_ERROR() {
        return (int)107L;
    }
    public static int PKCS12_R_MAC_ABSENT() {
        return (int)108L;
    }
    public static int PKCS12_R_MAC_GENERATION_ERROR() {
        return (int)109L;
    }
    public static int PKCS12_R_MAC_SETUP_ERROR() {
        return (int)110L;
    }
    public static int PKCS12_R_MAC_STRING_SET_ERROR() {
        return (int)111L;
    }
    public static int PKCS12_R_MAC_VERIFY_FAILURE() {
        return (int)113L;
    }
    public static int PKCS12_R_PARSE_ERROR() {
        return (int)114L;
    }
    public static int PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR() {
        return (int)115L;
    }
    public static int PKCS12_R_PKCS12_CIPHERFINAL_ERROR() {
        return (int)116L;
    }
    public static int PKCS12_R_PKCS12_PBE_CRYPT_ERROR() {
        return (int)117L;
    }
    public static int PKCS12_R_UNKNOWN_DIGEST_ALGORITHM() {
        return (int)118L;
    }
    public static int PKCS12_R_UNSUPPORTED_PKCS12_MODE() {
        return (int)119L;
    }
    public static int PKCS12_KEY_ID() {
        return (int)1L;
    }
    public static int PKCS12_IV_ID() {
        return (int)2L;
    }
    public static int PKCS12_MAC_ID() {
        return (int)3L;
    }
    public static int PKCS12_MAC_KEY_LENGTH() {
        return (int)20L;
    }
    public static int PKCS12_SALT_LEN() {
        return (int)8L;
    }
    public static int KEY_EX() {
        return (int)16L;
    }
    public static int KEY_SIG() {
        return (int)128L;
    }
    public static int PKCS12_ERROR() {
        return (int)0L;
    }
    public static int PKCS12_OK() {
        return (int)1L;
    }
    public static int RAND_F_DATA_COLLECT_METHOD() {
        return (int)127L;
    }
    public static int RAND_F_DRBG_BYTES() {
        return (int)101L;
    }
    public static int RAND_F_DRBG_GET_ENTROPY() {
        return (int)105L;
    }
    public static int RAND_F_DRBG_SETUP() {
        return (int)117L;
    }
    public static int RAND_F_GET_ENTROPY() {
        return (int)106L;
    }
    public static int RAND_F_RAND_BYTES() {
        return (int)100L;
    }
    public static int RAND_F_RAND_DRBG_ENABLE_LOCKING() {
        return (int)119L;
    }
    public static int RAND_F_RAND_DRBG_GENERATE() {
        return (int)107L;
    }
    public static int RAND_F_RAND_DRBG_GET_ENTROPY() {
        return (int)120L;
    }
    public static int RAND_F_RAND_DRBG_GET_NONCE() {
        return (int)123L;
    }
    public static int RAND_F_RAND_DRBG_INSTANTIATE() {
        return (int)108L;
    }
    public static int RAND_F_RAND_DRBG_NEW() {
        return (int)109L;
    }
    public static int RAND_F_RAND_DRBG_RESEED() {
        return (int)110L;
    }
    public static int RAND_F_RAND_DRBG_RESTART() {
        return (int)102L;
    }
    public static int RAND_F_RAND_DRBG_SET() {
        return (int)104L;
    }
    public static int RAND_F_RAND_DRBG_SET_DEFAULTS() {
        return (int)121L;
    }
    public static int RAND_F_RAND_DRBG_UNINSTANTIATE() {
        return (int)118L;
    }
    public static int RAND_F_RAND_INIT_FIPS() {
        return (int)200L;
    }
    public static int RAND_F_RAND_LOAD_FILE() {
        return (int)111L;
    }
    public static int RAND_F_RAND_POOL_ACQUIRE_ENTROPY() {
        return (int)122L;
    }
    public static int RAND_F_RAND_POOL_ADD() {
        return (int)103L;
    }
    public static int RAND_F_RAND_POOL_ADD_BEGIN() {
        return (int)113L;
    }
    public static int RAND_F_RAND_POOL_ADD_END() {
        return (int)114L;
    }
    public static int RAND_F_RAND_POOL_ATTACH() {
        return (int)124L;
    }
    public static int RAND_F_RAND_POOL_BYTES_NEEDED() {
        return (int)115L;
    }
    public static int RAND_F_RAND_POOL_GROW() {
        return (int)125L;
    }
    public static int RAND_F_RAND_POOL_NEW() {
        return (int)116L;
    }
    public static int RAND_F_RAND_PSEUDO_BYTES() {
        return (int)126L;
    }
    public static int RAND_F_RAND_WRITE_FILE() {
        return (int)112L;
    }
    public static int RAND_R_ADDITIONAL_INPUT_TOO_LONG() {
        return (int)102L;
    }
    public static int RAND_R_ALREADY_INSTANTIATED() {
        return (int)103L;
    }
    public static int RAND_R_ARGUMENT_OUT_OF_RANGE() {
        return (int)105L;
    }
    public static int RAND_R_CANNOT_OPEN_FILE() {
        return (int)121L;
    }
    public static int RAND_R_DRBG_ALREADY_INITIALIZED() {
        return (int)129L;
    }
    public static int RAND_R_DRBG_NOT_INITIALISED() {
        return (int)104L;
    }
    public static int RAND_R_ENTROPY_INPUT_TOO_LONG() {
        return (int)106L;
    }
    public static int RAND_R_ENTROPY_OUT_OF_RANGE() {
        return (int)124L;
    }
    public static int RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED() {
        return (int)127L;
    }
    public static int RAND_R_ERROR_INITIALISING_DRBG() {
        return (int)107L;
    }
    public static int RAND_R_ERROR_INSTANTIATING_DRBG() {
        return (int)108L;
    }
    public static int RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT() {
        return (int)109L;
    }
    public static int RAND_R_ERROR_RETRIEVING_ENTROPY() {
        return (int)110L;
    }
    public static int RAND_R_ERROR_RETRIEVING_NONCE() {
        return (int)111L;
    }
    public static int RAND_R_FAILED_TO_CREATE_LOCK() {
        return (int)126L;
    }
    public static int RAND_R_FUNC_NOT_IMPLEMENTED() {
        return (int)101L;
    }
    public static int RAND_R_FWRITE_ERROR() {
        return (int)123L;
    }
    public static int RAND_R_GENERATE_ERROR() {
        return (int)112L;
    }
    public static int RAND_R_INTERNAL_ERROR() {
        return (int)113L;
    }
    public static int RAND_R_IN_ERROR_STATE() {
        return (int)114L;
    }
    public static int RAND_R_NOT_A_REGULAR_FILE() {
        return (int)122L;
    }
    public static int RAND_R_NOT_INSTANTIATED() {
        return (int)115L;
    }
    public static int RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED() {
        return (int)128L;
    }
    public static int RAND_R_PARENT_LOCKING_NOT_ENABLED() {
        return (int)130L;
    }
    public static int RAND_R_PARENT_STRENGTH_TOO_WEAK() {
        return (int)131L;
    }
    public static int RAND_R_PERSONALISATION_STRING_TOO_LONG() {
        return (int)116L;
    }
    public static int RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED() {
        return (int)133L;
    }
    public static int RAND_R_PRNG_NOT_SEEDED() {
        return (int)100L;
    }
    public static int RAND_R_RANDOM_POOL_OVERFLOW() {
        return (int)125L;
    }
    public static int RAND_R_RANDOM_POOL_UNDERFLOW() {
        return (int)134L;
    }
    public static int RAND_R_REQUEST_TOO_LARGE_FOR_DRBG() {
        return (int)117L;
    }
    public static int RAND_R_RESEED_ERROR() {
        return (int)118L;
    }
    public static int RAND_R_SELFTEST_FAILURE() {
        return (int)119L;
    }
    public static int RAND_R_TOO_LITTLE_NONCE_REQUESTED() {
        return (int)135L;
    }
    public static int RAND_R_TOO_MUCH_NONCE_REQUESTED() {
        return (int)136L;
    }
    public static int RAND_R_UNSUPPORTED_DRBG_FLAGS() {
        return (int)132L;
    }
    public static int RAND_R_UNSUPPORTED_DRBG_TYPE() {
        return (int)120L;
    }
    public static int CONF_F_CONF_DUMP_FP() {
        return (int)104L;
    }
    public static int CONF_F_CONF_LOAD() {
        return (int)100L;
    }
    public static int CONF_F_CONF_LOAD_FP() {
        return (int)103L;
    }
    public static int CONF_F_CONF_PARSE_LIST() {
        return (int)119L;
    }
    public static int CONF_F_DEF_LOAD() {
        return (int)120L;
    }
    public static int CONF_F_DEF_LOAD_BIO() {
        return (int)121L;
    }
    public static int CONF_F_GET_NEXT_FILE() {
        return (int)107L;
    }
    public static int CONF_F_MODULE_ADD() {
        return (int)122L;
    }
    public static int CONF_F_MODULE_INIT() {
        return (int)115L;
    }
    public static int CONF_F_MODULE_LOAD_DSO() {
        return (int)117L;
    }
    public static int CONF_F_MODULE_RUN() {
        return (int)118L;
    }
    public static int CONF_F_NCONF_DUMP_BIO() {
        return (int)105L;
    }
    public static int CONF_F_NCONF_DUMP_FP() {
        return (int)106L;
    }
    public static int CONF_F_NCONF_GET_NUMBER_E() {
        return (int)112L;
    }
    public static int CONF_F_NCONF_GET_SECTION() {
        return (int)108L;
    }
    public static int CONF_F_NCONF_GET_STRING() {
        return (int)109L;
    }
    public static int CONF_F_NCONF_LOAD() {
        return (int)113L;
    }
    public static int CONF_F_NCONF_LOAD_BIO() {
        return (int)110L;
    }
    public static int CONF_F_NCONF_LOAD_FP() {
        return (int)114L;
    }
    public static int CONF_F_NCONF_NEW() {
        return (int)111L;
    }
    public static int CONF_F_PROCESS_INCLUDE() {
        return (int)116L;
    }
    public static int CONF_F_SSL_MODULE_INIT() {
        return (int)123L;
    }
    public static int CONF_F_STR_COPY() {
        return (int)101L;
    }
    public static int CONF_R_ERROR_LOADING_DSO() {
        return (int)110L;
    }
    public static int CONF_R_LIST_CANNOT_BE_NULL() {
        return (int)115L;
    }
    public static int CONF_R_MISSING_CLOSE_SQUARE_BRACKET() {
        return (int)100L;
    }
    public static int CONF_R_MISSING_EQUAL_SIGN() {
        return (int)101L;
    }
    public static int CONF_R_MISSING_INIT_FUNCTION() {
        return (int)112L;
    }
    public static int CONF_R_MODULE_INITIALIZATION_ERROR() {
        return (int)109L;
    }
    public static int CONF_R_NO_CLOSE_BRACE() {
        return (int)102L;
    }
    public static int CONF_R_NO_CONF() {
        return (int)105L;
    }
    public static int CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE() {
        return (int)106L;
    }
    public static int CONF_R_NO_SECTION() {
        return (int)107L;
    }
    public static int CONF_R_NO_SUCH_FILE() {
        return (int)114L;
    }
    public static int CONF_R_NO_VALUE() {
        return (int)108L;
    }
    public static int CONF_R_NUMBER_TOO_LARGE() {
        return (int)121L;
    }
    public static int CONF_R_RECURSIVE_DIRECTORY_INCLUDE() {
        return (int)111L;
    }
    public static int CONF_R_SSL_COMMAND_SECTION_EMPTY() {
        return (int)117L;
    }
    public static int CONF_R_SSL_COMMAND_SECTION_NOT_FOUND() {
        return (int)118L;
    }
    public static int CONF_R_SSL_SECTION_EMPTY() {
        return (int)119L;
    }
    public static int CONF_R_SSL_SECTION_NOT_FOUND() {
        return (int)120L;
    }
    public static int CONF_R_UNABLE_TO_CREATE_NEW_SECTION() {
        return (int)103L;
    }
    public static int CONF_R_UNKNOWN_MODULE_NAME() {
        return (int)113L;
    }
    public static int CONF_R_VARIABLE_EXPANSION_TOO_LONG() {
        return (int)116L;
    }
    public static int CONF_R_VARIABLE_HAS_NO_VALUE() {
        return (int)104L;
    }
    public static int CONF_MFLAGS_IGNORE_ERRORS() {
        return (int)1L;
    }
    public static int CONF_MFLAGS_IGNORE_RETURN_CODES() {
        return (int)2L;
    }
    public static int CONF_MFLAGS_SILENT() {
        return (int)4L;
    }
    public static int CONF_MFLAGS_NO_DSO() {
        return (int)8L;
    }
    public static int CONF_MFLAGS_IGNORE_MISSING_FILE() {
        return (int)16L;
    }
    public static int CONF_MFLAGS_DEFAULT_SECTION() {
        return (int)32L;
    }
    public static int X509V3_F_A2I_GENERAL_NAME() {
        return (int)164L;
    }
    public static int X509V3_F_ADDR_VALIDATE_PATH_INTERNAL() {
        return (int)166L;
    }
    public static int X509V3_F_ASIDENTIFIERCHOICE_CANONIZE() {
        return (int)161L;
    }
    public static int X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL() {
        return (int)162L;
    }
    public static int X509V3_F_BIGNUM_TO_STRING() {
        return (int)167L;
    }
    public static int X509V3_F_COPY_EMAIL() {
        return (int)122L;
    }
    public static int X509V3_F_COPY_ISSUER() {
        return (int)123L;
    }
    public static int X509V3_F_DO_DIRNAME() {
        return (int)144L;
    }
    public static int X509V3_F_DO_EXT_I2D() {
        return (int)135L;
    }
    public static int X509V3_F_DO_EXT_NCONF() {
        return (int)151L;
    }
    public static int X509V3_F_GNAMES_FROM_SECTNAME() {
        return (int)156L;
    }
    public static int X509V3_F_I2S_ASN1_ENUMERATED() {
        return (int)121L;
    }
    public static int X509V3_F_I2S_ASN1_IA5STRING() {
        return (int)149L;
    }
    public static int X509V3_F_I2S_ASN1_INTEGER() {
        return (int)120L;
    }
    public static int X509V3_F_I2V_AUTHORITY_INFO_ACCESS() {
        return (int)138L;
    }
    public static int X509V3_F_I2V_AUTHORITY_KEYID() {
        return (int)173L;
    }
    public static int X509V3_F_LEVEL_ADD_NODE() {
        return (int)168L;
    }
    public static int X509V3_F_NOTICE_SECTION() {
        return (int)132L;
    }
    public static int X509V3_F_NREF_NOS() {
        return (int)133L;
    }
    public static int X509V3_F_POLICY_CACHE_CREATE() {
        return (int)169L;
    }
    public static int X509V3_F_POLICY_CACHE_NEW() {
        return (int)170L;
    }
    public static int X509V3_F_POLICY_DATA_NEW() {
        return (int)171L;
    }
    public static int X509V3_F_POLICY_SECTION() {
        return (int)131L;
    }
    public static int X509V3_F_PROCESS_PCI_VALUE() {
        return (int)150L;
    }
    public static int X509V3_F_R2I_CERTPOL() {
        return (int)130L;
    }
    public static int X509V3_F_R2I_PCI() {
        return (int)155L;
    }
    public static int X509V3_F_S2I_ASN1_IA5STRING() {
        return (int)100L;
    }
    public static int X509V3_F_S2I_ASN1_INTEGER() {
        return (int)108L;
    }
    public static int X509V3_F_S2I_ASN1_OCTET_STRING() {
        return (int)112L;
    }
    public static int X509V3_F_S2I_SKEY_ID() {
        return (int)115L;
    }
    public static int X509V3_F_SET_DIST_POINT_NAME() {
        return (int)158L;
    }
    public static int X509V3_F_SXNET_ADD_ID_ASC() {
        return (int)125L;
    }
    public static int X509V3_F_SXNET_ADD_ID_INTEGER() {
        return (int)126L;
    }
    public static int X509V3_F_SXNET_ADD_ID_ULONG() {
        return (int)127L;
    }
    public static int X509V3_F_SXNET_GET_ID_ASC() {
        return (int)128L;
    }
    public static int X509V3_F_SXNET_GET_ID_ULONG() {
        return (int)129L;
    }
    public static int X509V3_F_TREE_INIT() {
        return (int)172L;
    }
    public static int X509V3_F_V2I_ASIDENTIFIERS() {
        return (int)163L;
    }
    public static int X509V3_F_V2I_ASN1_BIT_STRING() {
        return (int)101L;
    }
    public static int X509V3_F_V2I_AUTHORITY_INFO_ACCESS() {
        return (int)139L;
    }
    public static int X509V3_F_V2I_AUTHORITY_KEYID() {
        return (int)119L;
    }
    public static int X509V3_F_V2I_BASIC_CONSTRAINTS() {
        return (int)102L;
    }
    public static int X509V3_F_V2I_CRLD() {
        return (int)134L;
    }
    public static int X509V3_F_V2I_EXTENDED_KEY_USAGE() {
        return (int)103L;
    }
    public static int X509V3_F_V2I_GENERAL_NAMES() {
        return (int)118L;
    }
    public static int X509V3_F_V2I_GENERAL_NAME_EX() {
        return (int)117L;
    }
    public static int X509V3_F_V2I_IDP() {
        return (int)157L;
    }
    public static int X509V3_F_V2I_IPADDRBLOCKS() {
        return (int)159L;
    }
    public static int X509V3_F_V2I_ISSUER_ALT() {
        return (int)153L;
    }
    public static int X509V3_F_V2I_NAME_CONSTRAINTS() {
        return (int)147L;
    }
    public static int X509V3_F_V2I_POLICY_CONSTRAINTS() {
        return (int)146L;
    }
    public static int X509V3_F_V2I_POLICY_MAPPINGS() {
        return (int)145L;
    }
    public static int X509V3_F_V2I_SUBJECT_ALT() {
        return (int)154L;
    }
    public static int X509V3_F_V2I_TLS_FEATURE() {
        return (int)165L;
    }
    public static int X509V3_F_V3_GENERIC_EXTENSION() {
        return (int)116L;
    }
    public static int X509V3_F_X509V3_ADD1_I2D() {
        return (int)140L;
    }
    public static int X509V3_F_X509V3_ADD_LEN_VALUE() {
        return (int)174L;
    }
    public static int X509V3_F_X509V3_ADD_VALUE() {
        return (int)105L;
    }
    public static int X509V3_F_X509V3_EXT_ADD() {
        return (int)104L;
    }
    public static int X509V3_F_X509V3_EXT_ADD_ALIAS() {
        return (int)106L;
    }
    public static int X509V3_F_X509V3_EXT_I2D() {
        return (int)136L;
    }
    public static int X509V3_F_X509V3_EXT_NCONF() {
        return (int)152L;
    }
    public static int X509V3_F_X509V3_GET_SECTION() {
        return (int)142L;
    }
    public static int X509V3_F_X509V3_GET_STRING() {
        return (int)143L;
    }
    public static int X509V3_F_X509V3_GET_VALUE_BOOL() {
        return (int)110L;
    }
    public static int X509V3_F_X509V3_PARSE_LIST() {
        return (int)109L;
    }
    public static int X509V3_F_X509_PURPOSE_ADD() {
        return (int)137L;
    }
    public static int X509V3_F_X509_PURPOSE_SET() {
        return (int)141L;
    }
    public static int X509V3_R_BAD_IP_ADDRESS() {
        return (int)118L;
    }
    public static int X509V3_R_BAD_OBJECT() {
        return (int)119L;
    }
    public static int X509V3_R_BN_DEC2BN_ERROR() {
        return (int)100L;
    }
    public static int X509V3_R_BN_TO_ASN1_INTEGER_ERROR() {
        return (int)101L;
    }
    public static int X509V3_R_DIRNAME_ERROR() {
        return (int)149L;
    }
    public static int X509V3_R_DISTPOINT_ALREADY_SET() {
        return (int)160L;
    }
    public static int X509V3_R_DUPLICATE_ZONE_ID() {
        return (int)133L;
    }
    public static int X509V3_R_ERROR_CONVERTING_ZONE() {
        return (int)131L;
    }
    public static int X509V3_R_ERROR_CREATING_EXTENSION() {
        return (int)144L;
    }
    public static int X509V3_R_ERROR_IN_EXTENSION() {
        return (int)128L;
    }
    public static int X509V3_R_EXPECTED_A_SECTION_NAME() {
        return (int)137L;
    }
    public static int X509V3_R_EXTENSION_EXISTS() {
        return (int)145L;
    }
    public static int X509V3_R_EXTENSION_NAME_ERROR() {
        return (int)115L;
    }
    public static int X509V3_R_EXTENSION_NOT_FOUND() {
        return (int)102L;
    }
    public static int X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED() {
        return (int)103L;
    }
    public static int X509V3_R_EXTENSION_VALUE_ERROR() {
        return (int)116L;
    }
    public static int X509V3_R_ILLEGAL_EMPTY_EXTENSION() {
        return (int)151L;
    }
    public static int X509V3_R_INCORRECT_POLICY_SYNTAX_TAG() {
        return (int)152L;
    }
    public static int X509V3_R_INVALID_ASNUMBER() {
        return (int)162L;
    }
    public static int X509V3_R_INVALID_ASRANGE() {
        return (int)163L;
    }
    public static int X509V3_R_INVALID_BOOLEAN_STRING() {
        return (int)104L;
    }
    public static int X509V3_R_INVALID_EXTENSION_STRING() {
        return (int)105L;
    }
    public static int X509V3_R_INVALID_INHERITANCE() {
        return (int)165L;
    }
    public static int X509V3_R_INVALID_IPADDRESS() {
        return (int)166L;
    }
    public static int X509V3_R_INVALID_MULTIPLE_RDNS() {
        return (int)161L;
    }
    public static int X509V3_R_INVALID_NAME() {
        return (int)106L;
    }
    public static int X509V3_R_INVALID_NULL_ARGUMENT() {
        return (int)107L;
    }
    public static int X509V3_R_INVALID_NULL_NAME() {
        return (int)108L;
    }
    public static int X509V3_R_INVALID_NULL_VALUE() {
        return (int)109L;
    }
    public static int X509V3_R_INVALID_NUMBER() {
        return (int)140L;
    }
    public static int X509V3_R_INVALID_NUMBERS() {
        return (int)141L;
    }
    public static int X509V3_R_INVALID_OBJECT_IDENTIFIER() {
        return (int)110L;
    }
    public static int X509V3_R_INVALID_OPTION() {
        return (int)138L;
    }
    public static int X509V3_R_INVALID_POLICY_IDENTIFIER() {
        return (int)134L;
    }
    public static int X509V3_R_INVALID_PROXY_POLICY_SETTING() {
        return (int)153L;
    }
    public static int X509V3_R_INVALID_PURPOSE() {
        return (int)146L;
    }
    public static int X509V3_R_INVALID_SAFI() {
        return (int)164L;
    }
    public static int X509V3_R_INVALID_SECTION() {
        return (int)135L;
    }
    public static int X509V3_R_INVALID_SYNTAX() {
        return (int)143L;
    }
    public static int X509V3_R_ISSUER_DECODE_ERROR() {
        return (int)126L;
    }
    public static int X509V3_R_MISSING_VALUE() {
        return (int)124L;
    }
    public static int X509V3_R_NEED_ORGANIZATION_AND_NUMBERS() {
        return (int)142L;
    }
    public static int X509V3_R_NO_CONFIG_DATABASE() {
        return (int)136L;
    }
    public static int X509V3_R_NO_ISSUER_CERTIFICATE() {
        return (int)121L;
    }
    public static int X509V3_R_NO_ISSUER_DETAILS() {
        return (int)127L;
    }
    public static int X509V3_R_NO_POLICY_IDENTIFIER() {
        return (int)139L;
    }
    public static int X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED() {
        return (int)154L;
    }
    public static int X509V3_R_NO_PUBLIC_KEY() {
        return (int)114L;
    }
    public static int X509V3_R_NO_SUBJECT_DETAILS() {
        return (int)125L;
    }
    public static int X509V3_R_OPERATION_NOT_DEFINED() {
        return (int)148L;
    }
    public static int X509V3_R_OTHERNAME_ERROR() {
        return (int)147L;
    }
    public static int X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED() {
        return (int)155L;
    }
    public static int X509V3_R_POLICY_PATH_LENGTH() {
        return (int)156L;
    }
    public static int X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED() {
        return (int)157L;
    }
    public static int X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY() {
        return (int)159L;
    }
    public static int X509V3_R_SECTION_NOT_FOUND() {
        return (int)150L;
    }
    public static int X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS() {
        return (int)122L;
    }
    public static int X509V3_R_UNABLE_TO_GET_ISSUER_KEYID() {
        return (int)123L;
    }
    public static int X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT() {
        return (int)111L;
    }
    public static int X509V3_R_UNKNOWN_EXTENSION() {
        return (int)129L;
    }
    public static int X509V3_R_UNKNOWN_EXTENSION_NAME() {
        return (int)130L;
    }
    public static int X509V3_R_UNKNOWN_OPTION() {
        return (int)120L;
    }
    public static int X509V3_R_UNSUPPORTED_OPTION() {
        return (int)117L;
    }
    public static int X509V3_R_UNSUPPORTED_TYPE() {
        return (int)167L;
    }
    public static int X509V3_R_USER_TOO_LONG() {
        return (int)132L;
    }
    public static int CTX_TEST() {
        return (int)1L;
    }
    public static int X509V3_CTX_REPLACE() {
        return (int)2L;
    }
    public static int X509V3_EXT_DYNAMIC() {
        return (int)1L;
    }
    public static int X509V3_EXT_CTX_DEP() {
        return (int)2L;
    }
    public static int X509V3_EXT_MULTILINE() {
        return (int)4L;
    }
    public static int GEN_OTHERNAME() {
        return (int)0L;
    }
    public static int GEN_EMAIL() {
        return (int)1L;
    }
    public static int GEN_DNS() {
        return (int)2L;
    }
    public static int GEN_X400() {
        return (int)3L;
    }
    public static int GEN_DIRNAME() {
        return (int)4L;
    }
    public static int GEN_EDIPARTY() {
        return (int)5L;
    }
    public static int GEN_URI() {
        return (int)6L;
    }
    public static int GEN_IPADD() {
        return (int)7L;
    }
    public static int GEN_RID() {
        return (int)8L;
    }
    public static int CRLDP_ALL_REASONS() {
        return (int)32895L;
    }
    public static int CRL_REASON_UNSPECIFIED() {
        return (int)0L;
    }
    public static int CRL_REASON_KEY_COMPROMISE() {
        return (int)1L;
    }
    public static int CRL_REASON_CA_COMPROMISE() {
        return (int)2L;
    }
    public static int CRL_REASON_AFFILIATION_CHANGED() {
        return (int)3L;
    }
    public static int CRL_REASON_SUPERSEDED() {
        return (int)4L;
    }
    public static int CRL_REASON_CESSATION_OF_OPERATION() {
        return (int)5L;
    }
    public static int CRL_REASON_CERTIFICATE_HOLD() {
        return (int)6L;
    }
    public static int CRL_REASON_REMOVE_FROM_CRL() {
        return (int)8L;
    }
    public static int CRL_REASON_PRIVILEGE_WITHDRAWN() {
        return (int)9L;
    }
    public static int CRL_REASON_AA_COMPROMISE() {
        return (int)10L;
    }
    public static int IDP_PRESENT() {
        return (int)1L;
    }
    public static int IDP_INVALID() {
        return (int)2L;
    }
    public static int IDP_ONLYUSER() {
        return (int)4L;
    }
    public static int IDP_ONLYCA() {
        return (int)8L;
    }
    public static int IDP_ONLYATTR() {
        return (int)16L;
    }
    public static int IDP_INDIRECT() {
        return (int)32L;
    }
    public static int IDP_REASONS() {
        return (int)64L;
    }
    public static int EXFLAG_BCONS() {
        return (int)1L;
    }
    public static int EXFLAG_KUSAGE() {
        return (int)2L;
    }
    public static int EXFLAG_XKUSAGE() {
        return (int)4L;
    }
    public static int EXFLAG_NSCERT() {
        return (int)8L;
    }
    public static int EXFLAG_CA() {
        return (int)16L;
    }
    public static int EXFLAG_SI() {
        return (int)32L;
    }
    public static int EXFLAG_V1() {
        return (int)64L;
    }
    public static int EXFLAG_INVALID() {
        return (int)128L;
    }
    public static int EXFLAG_SET() {
        return (int)256L;
    }
    public static int EXFLAG_CRITICAL() {
        return (int)512L;
    }
    public static int EXFLAG_PROXY() {
        return (int)1024L;
    }
    public static int EXFLAG_INVALID_POLICY() {
        return (int)2048L;
    }
    public static int EXFLAG_FRESHEST() {
        return (int)4096L;
    }
    public static int EXFLAG_SS() {
        return (int)8192L;
    }
    public static int EXFLAG_NO_FINGERPRINT() {
        return (int)1048576L;
    }
    public static int KU_DIGITAL_SIGNATURE() {
        return (int)128L;
    }
    public static int KU_NON_REPUDIATION() {
        return (int)64L;
    }
    public static int KU_KEY_ENCIPHERMENT() {
        return (int)32L;
    }
    public static int KU_DATA_ENCIPHERMENT() {
        return (int)16L;
    }
    public static int KU_KEY_AGREEMENT() {
        return (int)8L;
    }
    public static int KU_KEY_CERT_SIGN() {
        return (int)4L;
    }
    public static int KU_CRL_SIGN() {
        return (int)2L;
    }
    public static int KU_ENCIPHER_ONLY() {
        return (int)1L;
    }
    public static int KU_DECIPHER_ONLY() {
        return (int)32768L;
    }
    public static int NS_SSL_CLIENT() {
        return (int)128L;
    }
    public static int NS_SSL_SERVER() {
        return (int)64L;
    }
    public static int NS_SMIME() {
        return (int)32L;
    }
    public static int NS_OBJSIGN() {
        return (int)16L;
    }
    public static int NS_SSL_CA() {
        return (int)4L;
    }
    public static int NS_SMIME_CA() {
        return (int)2L;
    }
    public static int NS_OBJSIGN_CA() {
        return (int)1L;
    }
    public static int XKU_SSL_SERVER() {
        return (int)1L;
    }
    public static int XKU_SSL_CLIENT() {
        return (int)2L;
    }
    public static int XKU_SMIME() {
        return (int)4L;
    }
    public static int XKU_CODE_SIGN() {
        return (int)8L;
    }
    public static int XKU_SGC() {
        return (int)16L;
    }
    public static int XKU_OCSP_SIGN() {
        return (int)32L;
    }
    public static int XKU_TIMESTAMP() {
        return (int)64L;
    }
    public static int XKU_DVCS() {
        return (int)128L;
    }
    public static int XKU_ANYEKU() {
        return (int)256L;
    }
    public static int X509_PURPOSE_DYNAMIC() {
        return (int)1L;
    }
    public static int X509_PURPOSE_DYNAMIC_NAME() {
        return (int)2L;
    }
    public static int X509_PURPOSE_SSL_CLIENT() {
        return (int)1L;
    }
    public static int X509_PURPOSE_SSL_SERVER() {
        return (int)2L;
    }
    public static int X509_PURPOSE_NS_SSL_SERVER() {
        return (int)3L;
    }
    public static int X509_PURPOSE_SMIME_SIGN() {
        return (int)4L;
    }
    public static int X509_PURPOSE_SMIME_ENCRYPT() {
        return (int)5L;
    }
    public static int X509_PURPOSE_CRL_SIGN() {
        return (int)6L;
    }
    public static int X509_PURPOSE_ANY() {
        return (int)7L;
    }
    public static int X509_PURPOSE_OCSP_HELPER() {
        return (int)8L;
    }
    public static int X509_PURPOSE_TIMESTAMP_SIGN() {
        return (int)9L;
    }
    public static int X509_PURPOSE_MIN() {
        return (int)1L;
    }
    public static int X509_PURPOSE_MAX() {
        return (int)9L;
    }
    public static int X509V3_EXT_DEFAULT() {
        return (int)0L;
    }
    public static int X509V3_ADD_SILENT() {
        return (int)16L;
    }
    public static int X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT() {
        return (int)1L;
    }
    public static int X509_CHECK_FLAG_NO_WILDCARDS() {
        return (int)2L;
    }
    public static int X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS() {
        return (int)4L;
    }
    public static int X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS() {
        return (int)8L;
    }
    public static int X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS() {
        return (int)16L;
    }
    public static int X509_CHECK_FLAG_NEVER_CHECK_SUBJECT() {
        return (int)32L;
    }
    public static int _X509_CHECK_FLAG_DOT_SUBDOMAINS() {
        return (int)32768L;
    }
    public static int ASIdOrRange_id() {
        return (int)0L;
    }
    public static int ASIdOrRange_range() {
        return (int)1L;
    }
    public static int ASIdentifierChoice_inherit() {
        return (int)0L;
    }
    public static int ASIdentifierChoice_asIdsOrRanges() {
        return (int)1L;
    }
    public static int IPAddressOrRange_addressPrefix() {
        return (int)0L;
    }
    public static int IPAddressOrRange_addressRange() {
        return (int)1L;
    }
    public static int IPAddressChoice_inherit() {
        return (int)0L;
    }
    public static int IPAddressChoice_addressesOrRanges() {
        return (int)1L;
    }
    public static int V3_ASID_ASNUM() {
        return (int)0L;
    }
    public static int V3_ASID_RDI() {
        return (int)1L;
    }
    public static int IANA_AFI_IPV4() {
        return (int)1L;
    }
    public static int IANA_AFI_IPV6() {
        return (int)2L;
    }
    public static int UI_F_CLOSE_CONSOLE() {
        return (int)115L;
    }
    public static int UI_F_ECHO_CONSOLE() {
        return (int)116L;
    }
    public static int UI_F_GENERAL_ALLOCATE_BOOLEAN() {
        return (int)108L;
    }
    public static int UI_F_GENERAL_ALLOCATE_PROMPT() {
        return (int)109L;
    }
    public static int UI_F_NOECHO_CONSOLE() {
        return (int)117L;
    }
    public static int UI_F_OPEN_CONSOLE() {
        return (int)114L;
    }
    public static int UI_F_UI_CONSTRUCT_PROMPT() {
        return (int)121L;
    }
    public static int UI_F_UI_CREATE_METHOD() {
        return (int)112L;
    }
    public static int UI_F_UI_CTRL() {
        return (int)111L;
    }
    public static int UI_F_UI_DUP_ERROR_STRING() {
        return (int)101L;
    }
    public static int UI_F_UI_DUP_INFO_STRING() {
        return (int)102L;
    }
    public static int UI_F_UI_DUP_INPUT_BOOLEAN() {
        return (int)110L;
    }
    public static int UI_F_UI_DUP_INPUT_STRING() {
        return (int)103L;
    }
    public static int UI_F_UI_DUP_USER_DATA() {
        return (int)118L;
    }
    public static int UI_F_UI_DUP_VERIFY_STRING() {
        return (int)106L;
    }
    public static int UI_F_UI_GET0_RESULT() {
        return (int)107L;
    }
    public static int UI_F_UI_GET_RESULT_LENGTH() {
        return (int)119L;
    }
    public static int UI_F_UI_NEW_METHOD() {
        return (int)104L;
    }
    public static int UI_F_UI_PROCESS() {
        return (int)113L;
    }
    public static int UI_F_UI_SET_RESULT() {
        return (int)105L;
    }
    public static int UI_F_UI_SET_RESULT_EX() {
        return (int)120L;
    }
    public static int UI_R_COMMON_OK_AND_CANCEL_CHARACTERS() {
        return (int)104L;
    }
    public static int UI_R_INDEX_TOO_LARGE() {
        return (int)102L;
    }
    public static int UI_R_INDEX_TOO_SMALL() {
        return (int)103L;
    }
    public static int UI_R_NO_RESULT_BUFFER() {
        return (int)105L;
    }
    public static int UI_R_PROCESSING_ERROR() {
        return (int)107L;
    }
    public static int UI_R_RESULT_TOO_LARGE() {
        return (int)100L;
    }
    public static int UI_R_RESULT_TOO_SMALL() {
        return (int)101L;
    }
    public static int UI_R_SYSASSIGN_ERROR() {
        return (int)109L;
    }
    public static int UI_R_SYSDASSGN_ERROR() {
        return (int)110L;
    }
    public static int UI_R_SYSQIOW_ERROR() {
        return (int)111L;
    }
    public static int UI_R_UNKNOWN_CONTROL_COMMAND() {
        return (int)106L;
    }
    public static int UI_R_UNKNOWN_TTYGET_ERRNO_VALUE() {
        return (int)108L;
    }
    public static int UI_R_USER_DATA_DUPLICATION_UNSUPPORTED() {
        return (int)112L;
    }
    public static int UI_INPUT_FLAG_ECHO() {
        return (int)1L;
    }
    public static int UI_INPUT_FLAG_DEFAULT_PWD() {
        return (int)2L;
    }
    public static int UI_INPUT_FLAG_USER_BASE() {
        return (int)16L;
    }
    public static int UI_CTRL_PRINT_ERRORS() {
        return (int)1L;
    }
    public static int UI_CTRL_IS_REDOABLE() {
        return (int)2L;
    }
    public static int ENGINE_F_DIGEST_UPDATE() {
        return (int)198L;
    }
    public static int ENGINE_F_DYNAMIC_CTRL() {
        return (int)180L;
    }
    public static int ENGINE_F_DYNAMIC_GET_DATA_CTX() {
        return (int)181L;
    }
    public static int ENGINE_F_DYNAMIC_LOAD() {
        return (int)182L;
    }
    public static int ENGINE_F_DYNAMIC_SET_DATA_CTX() {
        return (int)183L;
    }
    public static int ENGINE_F_ENGINE_ADD() {
        return (int)105L;
    }
    public static int ENGINE_F_ENGINE_BY_ID() {
        return (int)106L;
    }
    public static int ENGINE_F_ENGINE_CMD_IS_EXECUTABLE() {
        return (int)170L;
    }
    public static int ENGINE_F_ENGINE_CTRL() {
        return (int)142L;
    }
    public static int ENGINE_F_ENGINE_CTRL_CMD() {
        return (int)178L;
    }
    public static int ENGINE_F_ENGINE_CTRL_CMD_STRING() {
        return (int)171L;
    }
    public static int ENGINE_F_ENGINE_FINISH() {
        return (int)107L;
    }
    public static int ENGINE_F_ENGINE_GET_CIPHER() {
        return (int)185L;
    }
    public static int ENGINE_F_ENGINE_GET_DIGEST() {
        return (int)186L;
    }
    public static int ENGINE_F_ENGINE_GET_FIRST() {
        return (int)195L;
    }
    public static int ENGINE_F_ENGINE_GET_LAST() {
        return (int)196L;
    }
    public static int ENGINE_F_ENGINE_GET_NEXT() {
        return (int)115L;
    }
    public static int ENGINE_F_ENGINE_GET_PKEY_ASN1_METH() {
        return (int)193L;
    }
    public static int ENGINE_F_ENGINE_GET_PKEY_METH() {
        return (int)192L;
    }
    public static int ENGINE_F_ENGINE_GET_PREV() {
        return (int)116L;
    }
    public static int ENGINE_F_ENGINE_INIT() {
        return (int)119L;
    }
    public static int ENGINE_F_ENGINE_LIST_ADD() {
        return (int)120L;
    }
    public static int ENGINE_F_ENGINE_LIST_REMOVE() {
        return (int)121L;
    }
    public static int ENGINE_F_ENGINE_LOAD_PRIVATE_KEY() {
        return (int)150L;
    }
    public static int ENGINE_F_ENGINE_LOAD_PUBLIC_KEY() {
        return (int)151L;
    }
    public static int ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT() {
        return (int)194L;
    }
    public static int ENGINE_F_ENGINE_NEW() {
        return (int)122L;
    }
    public static int ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR() {
        return (int)197L;
    }
    public static int ENGINE_F_ENGINE_REMOVE() {
        return (int)123L;
    }
    public static int ENGINE_F_ENGINE_SET_DEFAULT_STRING() {
        return (int)189L;
    }
    public static int ENGINE_F_ENGINE_SET_ID() {
        return (int)129L;
    }
    public static int ENGINE_F_ENGINE_SET_NAME() {
        return (int)130L;
    }
    public static int ENGINE_F_ENGINE_TABLE_REGISTER() {
        return (int)184L;
    }
    public static int ENGINE_F_ENGINE_UNLOCKED_FINISH() {
        return (int)191L;
    }
    public static int ENGINE_F_ENGINE_UP_REF() {
        return (int)190L;
    }
    public static int ENGINE_F_INT_CLEANUP_ITEM() {
        return (int)199L;
    }
    public static int ENGINE_F_INT_CTRL_HELPER() {
        return (int)172L;
    }
    public static int ENGINE_F_INT_ENGINE_CONFIGURE() {
        return (int)188L;
    }
    public static int ENGINE_F_INT_ENGINE_MODULE_INIT() {
        return (int)187L;
    }
    public static int ENGINE_F_OSSL_HMAC_INIT() {
        return (int)200L;
    }
    public static int ENGINE_R_ALREADY_LOADED() {
        return (int)100L;
    }
    public static int ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER() {
        return (int)133L;
    }
    public static int ENGINE_R_CMD_NOT_EXECUTABLE() {
        return (int)134L;
    }
    public static int ENGINE_R_COMMAND_TAKES_INPUT() {
        return (int)135L;
    }
    public static int ENGINE_R_COMMAND_TAKES_NO_INPUT() {
        return (int)136L;
    }
    public static int ENGINE_R_CONFLICTING_ENGINE_ID() {
        return (int)103L;
    }
    public static int ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED() {
        return (int)119L;
    }
    public static int ENGINE_R_DSO_FAILURE() {
        return (int)104L;
    }
    public static int ENGINE_R_DSO_NOT_FOUND() {
        return (int)132L;
    }
    public static int ENGINE_R_ENGINES_SECTION_ERROR() {
        return (int)148L;
    }
    public static int ENGINE_R_ENGINE_CONFIGURATION_ERROR() {
        return (int)102L;
    }
    public static int ENGINE_R_ENGINE_IS_NOT_IN_LIST() {
        return (int)105L;
    }
    public static int ENGINE_R_ENGINE_SECTION_ERROR() {
        return (int)149L;
    }
    public static int ENGINE_R_FAILED_LOADING_PRIVATE_KEY() {
        return (int)128L;
    }
    public static int ENGINE_R_FAILED_LOADING_PUBLIC_KEY() {
        return (int)129L;
    }
    public static int ENGINE_R_FINISH_FAILED() {
        return (int)106L;
    }
    public static int ENGINE_R_ID_OR_NAME_MISSING() {
        return (int)108L;
    }
    public static int ENGINE_R_INIT_FAILED() {
        return (int)109L;
    }
    public static int ENGINE_R_INTERNAL_LIST_ERROR() {
        return (int)110L;
    }
    public static int ENGINE_R_INVALID_ARGUMENT() {
        return (int)143L;
    }
    public static int ENGINE_R_INVALID_CMD_NAME() {
        return (int)137L;
    }
    public static int ENGINE_R_INVALID_CMD_NUMBER() {
        return (int)138L;
    }
    public static int ENGINE_R_INVALID_INIT_VALUE() {
        return (int)151L;
    }
    public static int ENGINE_R_INVALID_STRING() {
        return (int)150L;
    }
    public static int ENGINE_R_NOT_INITIALISED() {
        return (int)117L;
    }
    public static int ENGINE_R_NOT_LOADED() {
        return (int)112L;
    }
    public static int ENGINE_R_NO_CONTROL_FUNCTION() {
        return (int)120L;
    }
    public static int ENGINE_R_NO_INDEX() {
        return (int)144L;
    }
    public static int ENGINE_R_NO_LOAD_FUNCTION() {
        return (int)125L;
    }
    public static int ENGINE_R_NO_REFERENCE() {
        return (int)130L;
    }
    public static int ENGINE_R_NO_SUCH_ENGINE() {
        return (int)116L;
    }
    public static int ENGINE_R_UNIMPLEMENTED_CIPHER() {
        return (int)146L;
    }
    public static int ENGINE_R_UNIMPLEMENTED_DIGEST() {
        return (int)147L;
    }
    public static int ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD() {
        return (int)101L;
    }
    public static int ENGINE_R_VERSION_INCOMPATIBILITY() {
        return (int)145L;
    }
    public static int ENGINE_CTRL_SET_LOGSTREAM() {
        return (int)1L;
    }
    public static int ENGINE_CTRL_SET_PASSWORD_CALLBACK() {
        return (int)2L;
    }
    public static int ENGINE_CTRL_HUP() {
        return (int)3L;
    }
    public static int ENGINE_CTRL_SET_USER_INTERFACE() {
        return (int)4L;
    }
    public static int ENGINE_CTRL_SET_CALLBACK_DATA() {
        return (int)5L;
    }
    public static int ENGINE_CTRL_LOAD_CONFIGURATION() {
        return (int)6L;
    }
    public static int ENGINE_CTRL_LOAD_SECTION() {
        return (int)7L;
    }
    public static int ENGINE_CTRL_HAS_CTRL_FUNCTION() {
        return (int)10L;
    }
    public static int ENGINE_CTRL_GET_FIRST_CMD_TYPE() {
        return (int)11L;
    }
    public static int ENGINE_CTRL_GET_NEXT_CMD_TYPE() {
        return (int)12L;
    }
    public static int ENGINE_CTRL_GET_CMD_FROM_NAME() {
        return (int)13L;
    }
    public static int ENGINE_CTRL_GET_NAME_LEN_FROM_CMD() {
        return (int)14L;
    }
    public static int ENGINE_CTRL_GET_NAME_FROM_CMD() {
        return (int)15L;
    }
    public static int ENGINE_CTRL_GET_DESC_LEN_FROM_CMD() {
        return (int)16L;
    }
    public static int ENGINE_CTRL_GET_DESC_FROM_CMD() {
        return (int)17L;
    }
    public static int ENGINE_CTRL_GET_CMD_FLAGS() {
        return (int)18L;
    }
    public static int ENGINE_CMD_BASE() {
        return (int)200L;
    }
    public static int ENGINE_CTRL_CHIL_SET_FORKCHECK() {
        return (int)100L;
    }
    public static int ENGINE_CTRL_CHIL_NO_LOCKING() {
        return (int)101L;
    }
    public static ValueLayout.OfShort __int16_t = JAVA_SHORT;
    public static ValueLayout.OfInt __int32_t = JAVA_INT;
    public static ValueLayout.OfLong __int64_t = JAVA_LONG;
    public static ValueLayout.OfShort __int_least16_t = JAVA_SHORT;
    public static ValueLayout.OfInt __int_least32_t = JAVA_INT;
    public static ValueLayout.OfLong __int_least64_t = JAVA_LONG;
    public static ValueLayout.OfLong __quad_t = JAVA_LONG;
    public static ValueLayout.OfLong __intmax_t = JAVA_LONG;
    public static ValueLayout.OfLong __off_t = JAVA_LONG;
    public static ValueLayout.OfLong __off64_t = JAVA_LONG;
    public static ValueLayout.OfInt __pid_t = JAVA_INT;
    public static ValueLayout.OfLong __clock_t = JAVA_LONG;
    public static ValueLayout.OfLong __time_t = JAVA_LONG;
    public static ValueLayout.OfLong __suseconds_t = JAVA_LONG;
    public static ValueLayout.OfLong __suseconds64_t = JAVA_LONG;
    public static ValueLayout.OfInt __daddr_t = JAVA_INT;
    public static ValueLayout.OfInt __key_t = JAVA_INT;
    public static ValueLayout.OfInt __clockid_t = JAVA_INT;
    public static ValueLayout.OfAddress __timer_t = ValueLayout.ADDRESS;
    public static ValueLayout.OfLong __blksize_t = JAVA_LONG;
    public static ValueLayout.OfLong __blkcnt_t = JAVA_LONG;
    public static ValueLayout.OfLong __blkcnt64_t = JAVA_LONG;
    public static ValueLayout.OfLong __fsword_t = JAVA_LONG;
    public static ValueLayout.OfLong __ssize_t = JAVA_LONG;
    public static ValueLayout.OfLong __syscall_slong_t = JAVA_LONG;
    public static ValueLayout.OfLong __loff_t = JAVA_LONG;
    public static ValueLayout.OfAddress __caddr_t = ValueLayout.ADDRESS;
    public static ValueLayout.OfLong __intptr_t = JAVA_LONG;
    public static ValueLayout.OfInt __sig_atomic_t = JAVA_INT;
    public static ValueLayout.OfShort int16_t = JAVA_SHORT;
    public static ValueLayout.OfInt int32_t = JAVA_INT;
    public static ValueLayout.OfLong int64_t = JAVA_LONG;
    public static ValueLayout.OfShort int_least16_t = JAVA_SHORT;
    public static ValueLayout.OfInt int_least32_t = JAVA_INT;
    public static ValueLayout.OfLong int_least64_t = JAVA_LONG;
    public static ValueLayout.OfLong int_fast16_t = JAVA_LONG;
    public static ValueLayout.OfLong int_fast32_t = JAVA_LONG;
    public static ValueLayout.OfLong int_fast64_t = JAVA_LONG;
    public static ValueLayout.OfLong intptr_t = JAVA_LONG;
    public static ValueLayout.OfLong intmax_t = JAVA_LONG;
    public static ValueLayout.OfInt __gwchar_t = JAVA_INT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$0.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.imaxabs$MH, "imaxabs");
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$0.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.imaxdiv$MH, "imaxdiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.strtoimax$MH, "strtoimax");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.strtoumax$MH, "strtoumax");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$0.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.wcstoimax$MH, "wcstoimax");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$0.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.wcstoumax$MH, "wcstoumax");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfInt wchar_t = JAVA_INT;
    public static ValueLayout.OfFloat _Float32 = JAVA_FLOAT;
    public static ValueLayout.OfDouble _Float64 = JAVA_DOUBLE;
    public static ValueLayout.OfDouble _Float32x = JAVA_DOUBLE;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.__ctype_get_mb_cur_max$MH, "__ctype_get_mb_cur_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.atof$MH, "atof");
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$1.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.atoi$MH, "atoi");
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$1.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.atol$MH, "atol");
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.atoll$MH, "atoll");
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.strtod$MH, "strtod");
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strtof$MH, "strtof");
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strtol$MH, "strtol");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strtoul$MH, "strtoul");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strtoq$MH, "strtoq");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strtouq$MH, "strtouq");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.strtoll$MH, "strtoll");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$3.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.strtoull$MH, "strtoull");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$3.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.l64a$MH, "l64a");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$3.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.a64l$MH, "a64l");
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfLong quad_t = JAVA_LONG;
    public static ValueLayout.OfLong loff_t = JAVA_LONG;
    public static ValueLayout.OfLong off_t = JAVA_LONG;
    public static ValueLayout.OfInt pid_t = JAVA_INT;
    public static ValueLayout.OfLong ssize_t = JAVA_LONG;
    public static ValueLayout.OfInt daddr_t = JAVA_INT;
    public static ValueLayout.OfAddress caddr_t = ValueLayout.ADDRESS;
    public static ValueLayout.OfInt key_t = JAVA_INT;
    public static ValueLayout.OfLong clock_t = JAVA_LONG;
    public static ValueLayout.OfInt clockid_t = JAVA_INT;
    public static ValueLayout.OfLong time_t = JAVA_LONG;
    public static ValueLayout.OfAddress timer_t = ValueLayout.ADDRESS;
    public static ValueLayout.OfLong register_t = JAVA_LONG;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.__bswap_16$MH, "__bswap_16");
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.__bswap_32$MH, "__bswap_32");
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.__bswap_64$MH, "__bswap_64");
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfLong suseconds_t = JAVA_LONG;
    public static ValueLayout.OfLong __fd_mask = JAVA_LONG;
    public static ValueLayout.OfLong fd_mask = JAVA_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$4.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.select$MH, "select");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$4.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.pselect$MH, "pselect");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfLong blksize_t = JAVA_LONG;
    public static ValueLayout.OfLong blkcnt_t = JAVA_LONG;
    public static ValueLayout.OfInt pthread_once_t = JAVA_INT;
    public static ValueLayout.OfInt pthread_spinlock_t = JAVA_INT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$4.random$MH,"random");
    }
    public static long random () {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.random$MH, "random");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$5.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.srandom$MH, "srandom");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$5.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.initstate$MH, "initstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$5.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.setstate$MH, "setstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$5.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.random_r$MH, "random_r");
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$5.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.srandom_r$MH, "srandom_r");
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$5.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.initstate_r$MH, "initstate_r");
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.setstate_r$MH, "setstate_r");
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$6.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.rand$MH, "rand");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$6.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.srand$MH, "srand");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.rand_r$MH, "rand_r");
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.drand48$MH, "drand48");
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.erand48$MH, "erand48");
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.lrand48$MH, "lrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.nrand48$MH, "nrand48");
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.mrand48$MH, "mrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.jrand48$MH, "jrand48");
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.srand48$MH, "srand48");
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.seed48$MH, "seed48");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lcong48$MH, "lcong48");
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.drand48_r$MH, "drand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.erand48_r$MH, "erand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.lrand48_r$MH, "lrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.nrand48_r$MH, "nrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.mrand48_r$MH, "mrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$9.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.jrand48_r$MH, "jrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$9.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.srand48_r$MH, "srand48_r");
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$9.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.seed48_r$MH, "seed48_r");
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$9.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.lcong48_r$MH, "lcong48_r");
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.malloc$MH, "malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.calloc$MH, "calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.realloc$MH, "realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$10.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.reallocarray$MH, "reallocarray");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$10.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.free$MH, "free");
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$10.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.alloca$MH, "alloca");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.valloc$MH, "valloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$10.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.posix_memalign$MH, "posix_memalign");
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$11.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.aligned_alloc$MH, "aligned_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$11.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.abort$MH, "abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.atexit$MH, "atexit");
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.at_quick_exit$MH, "at_quick_exit");
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.on_exit$MH, "on_exit");
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.exit$MH, "exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$13.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.quick_exit$MH, "quick_exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$13._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13._Exit$MH, "_Exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.getenv$MH, "getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.putenv$MH, "putenv");
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.setenv$MH, "setenv");
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.unsetenv$MH, "unsetenv");
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.clearenv$MH, "clearenv");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mktemp$MH, "mktemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mkstemp$MH, "mkstemp");
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mkstemps$MH, "mkstemps");
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mkdtemp$MH, "mkdtemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$14.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.system$MH, "system");
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$15.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.realpath$MH, "realpath");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$15.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.bsearch$MH, "bsearch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$15.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.qsort$MH, "qsort");
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.abs$MH, "abs");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.labs$MH, "labs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.llabs$MH, "llabs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$16.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.div$MH, "div");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.ldiv$MH, "ldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.lldiv$MH, "lldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.ecvt$MH, "ecvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fcvt$MH, "fcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.gcvt$MH, "gcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.ecvt_r$MH, "ecvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fcvt_r$MH, "fcvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.mblen$MH, "mblen");
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.mbtowc$MH, "mbtowc");
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$18.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.wctomb$MH, "wctomb");
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.mbstowcs$MH, "mbstowcs");
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$18.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.wcstombs$MH, "wcstombs");
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$18.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.rpmatch$MH, "rpmatch");
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.getsubopt$MH, "getsubopt");
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.getloadavg$MH, "getloadavg");
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfAddress __locale_t = ValueLayout.ADDRESS;
    public static ValueLayout.OfAddress locale_t = ValueLayout.ADDRESS;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$19.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.clock$MH, "clock");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$19.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.time$MH, "time");
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$19.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.difftime$MH, "difftime");
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$19.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.mktime$MH, "mktime");
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$19.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.strftime$MH, "strftime");
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$19.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.strftime_l$MH, "strftime_l");
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$20.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.gmtime$MH, "gmtime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$20.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.localtime$MH, "localtime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.gmtime_r$MH, "gmtime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.localtime_r$MH, "localtime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$20.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.asctime$MH, "asctime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$20.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.ctime$MH, "ctime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


