// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$130 {

    static final FunctionDescriptor BIO_ADDR_path_string$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle BIO_ADDR_path_string$MH = RuntimeHelper.downcallHandle(
        "BIO_ADDR_path_string",
        constants$130.BIO_ADDR_path_string$FUNC, false
    );
    static final FunctionDescriptor BIO_ADDRINFO_next$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle BIO_ADDRINFO_next$MH = RuntimeHelper.downcallHandle(
        "BIO_ADDRINFO_next",
        constants$130.BIO_ADDRINFO_next$FUNC, false
    );
    static final FunctionDescriptor BIO_ADDRINFO_family$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle BIO_ADDRINFO_family$MH = RuntimeHelper.downcallHandle(
        "BIO_ADDRINFO_family",
        constants$130.BIO_ADDRINFO_family$FUNC, false
    );
    static final FunctionDescriptor BIO_ADDRINFO_socktype$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle BIO_ADDRINFO_socktype$MH = RuntimeHelper.downcallHandle(
        "BIO_ADDRINFO_socktype",
        constants$130.BIO_ADDRINFO_socktype$FUNC, false
    );
    static final FunctionDescriptor BIO_ADDRINFO_protocol$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle BIO_ADDRINFO_protocol$MH = RuntimeHelper.downcallHandle(
        "BIO_ADDRINFO_protocol",
        constants$130.BIO_ADDRINFO_protocol$FUNC, false
    );
    static final FunctionDescriptor BIO_ADDRINFO_address$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle BIO_ADDRINFO_address$MH = RuntimeHelper.downcallHandle(
        "BIO_ADDRINFO_address",
        constants$130.BIO_ADDRINFO_address$FUNC, false
    );
}


