// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class err_state_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, JAVA_INT).withName("err_flags"),
        MemoryLayout.sequenceLayout(16, JAVA_LONG).withName("err_buffer"),
        MemoryLayout.sequenceLayout(16, ADDRESS).withName("err_data"),
        MemoryLayout.sequenceLayout(16, JAVA_INT).withName("err_data_flags"),
        MemoryLayout.sequenceLayout(16, ADDRESS).withName("err_file"),
        MemoryLayout.sequenceLayout(16, JAVA_INT).withName("err_line"),
        JAVA_INT.withName("top"),
        JAVA_INT.withName("bottom")
    ).withName("err_state_st");
    public static MemoryLayout $LAYOUT() {
        return err_state_st.$struct$LAYOUT;
    }
    public static MemorySegment err_flags$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment err_buffer$slice(MemorySegment seg) {
        return seg.asSlice(64, 128);
    }
    public static MemorySegment err_data$slice(MemorySegment seg) {
        return seg.asSlice(192, 128);
    }
    public static MemorySegment err_data_flags$slice(MemorySegment seg) {
        return seg.asSlice(320, 64);
    }
    public static MemorySegment err_file$slice(MemorySegment seg) {
        return seg.asSlice(384, 128);
    }
    public static MemorySegment err_line$slice(MemorySegment seg) {
        return seg.asSlice(512, 64);
    }
    static final VarHandle top$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("top"));
    public static VarHandle top$VH() {
        return err_state_st.top$VH;
    }
    public static int top$get(MemorySegment seg) {
        return (int)err_state_st.top$VH.get(seg);
    }
    public static void top$set( MemorySegment seg, int x) {
        err_state_st.top$VH.set(seg, x);
    }
    public static int top$get(MemorySegment seg, long index) {
        return (int)err_state_st.top$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void top$set(MemorySegment seg, long index, int x) {
        err_state_st.top$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bottom$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bottom"));
    public static VarHandle bottom$VH() {
        return err_state_st.bottom$VH;
    }
    public static int bottom$get(MemorySegment seg) {
        return (int)err_state_st.bottom$VH.get(seg);
    }
    public static void bottom$set( MemorySegment seg, int x) {
        err_state_st.bottom$VH.set(seg, x);
    }
    public static int bottom$get(MemorySegment seg, long index) {
        return (int)err_state_st.bottom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bottom$set(MemorySegment seg, long index, int x) {
        err_state_st.bottom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


