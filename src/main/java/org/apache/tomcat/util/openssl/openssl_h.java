// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class openssl_h  {

    /* package-private */ openssl_h() {}
    public static ValueLayout.OfByte C_CHAR = JAVA_BYTE;
    public static ValueLayout.OfShort C_SHORT = JAVA_SHORT;
    public static ValueLayout.OfInt C_INT = JAVA_INT;
    public static ValueLayout.OfLong C_LONG = JAVA_LONG;
    public static ValueLayout.OfLong C_LONG_LONG = JAVA_LONG;
    public static ValueLayout.OfFloat C_FLOAT = JAVA_FLOAT;
    public static ValueLayout.OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;
    public static int OPENSSL_MIN_API() {
        return (int)0L;
    }
    public static int BIO_CLOSE() {
        return (int)1L;
    }
    public static int BIO_CTRL_RESET() {
        return (int)1L;
    }
    public static int BIO_FP_READ() {
        return (int)2L;
    }
    public static int BIO_C_SET_FILENAME() {
        return (int)108L;
    }
    public static int NID_info_access() {
        return (int)177L;
    }
    public static int X509_FILETYPE_PEM() {
        return (int)1L;
    }
    public static int X509_L_FILE_LOAD() {
        return (int)1L;
    }
    public static int X509_L_ADD_DIR() {
        return (int)2L;
    }
    public static int X509_V_OK() {
        return (int)0L;
    }
    public static int X509_V_ERR_CRL_HAS_EXPIRED() {
        return (int)12L;
    }
    public static int X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT() {
        return (int)18L;
    }
    public static int X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN() {
        return (int)19L;
    }
    public static int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY() {
        return (int)20L;
    }
    public static int X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE() {
        return (int)21L;
    }
    public static int X509_V_ERR_CERT_UNTRUSTED() {
        return (int)27L;
    }
    public static int X509_V_ERR_APPLICATION_VERIFICATION() {
        return (int)50L;
    }
    public static int X509_V_FLAG_CRL_CHECK() {
        return (int)4L;
    }
    public static int X509_V_FLAG_CRL_CHECK_ALL() {
        return (int)8L;
    }
    public static int PEM_R_NO_START_LINE() {
        return (int)108L;
    }
    public static int SSL_SENT_SHUTDOWN() {
        return (int)1L;
    }
    public static int SSL_RECEIVED_SHUTDOWN() {
        return (int)2L;
    }
    public static int SSL_OP_SINGLE_ECDH_USE() {
        return (int)0L;
    }
    public static int SSL_OP_SINGLE_DH_USE() {
        return (int)0L;
    }
    public static int SSL_OP_NO_SSLv2() {
        return (int)0L;
    }
    public static int SSL_CONF_FLAG_FILE() {
        return (int)2L;
    }
    public static int SSL_CONF_FLAG_SERVER() {
        return (int)8L;
    }
    public static int SSL_CONF_FLAG_SHOW_ERRORS() {
        return (int)16L;
    }
    public static int SSL_CONF_FLAG_CERTIFICATE() {
        return (int)32L;
    }
    public static int SSL_CONF_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int SSL_CONF_TYPE_FILE() {
        return (int)2L;
    }
    public static int SSL_CONF_TYPE_DIR() {
        return (int)3L;
    }
    public static int SSL_SESS_CACHE_OFF() {
        return (int)0L;
    }
    public static int SSL_SESS_CACHE_SERVER() {
        return (int)2L;
    }
    public static int SSL2_VERSION() {
        return (int)2L;
    }
    public static int SSL3_VERSION() {
        return (int)768L;
    }
    public static int TLS1_VERSION() {
        return (int)769L;
    }
    public static int TLS1_1_VERSION() {
        return (int)770L;
    }
    public static int TLS1_2_VERSION() {
        return (int)771L;
    }
    public static int TLS1_3_VERSION() {
        return (int)772L;
    }
    public static int SSL_TLSEXT_ERR_OK() {
        return (int)0L;
    }
    public static int SSL_TLSEXT_ERR_NOACK() {
        return (int)3L;
    }
    public static int SSL_CB_HANDSHAKE_DONE() {
        return (int)32L;
    }
    public static int SSL_VERIFY_NONE() {
        return (int)0L;
    }
    public static int SSL_VERIFY_PEER() {
        return (int)1L;
    }
    public static int SSL_VERIFY_FAIL_IF_NO_PEER_CERT() {
        return (int)2L;
    }
    public static int SSL_ERROR_NONE() {
        return (int)0L;
    }
    public static int SSL_CTRL_SET_TMP_DH() {
        return (int)3L;
    }
    public static int SSL_CTRL_SET_TMP_ECDH() {
        return (int)4L;
    }
    public static int SSL_CTRL_SESS_NUMBER() {
        return (int)20L;
    }
    public static int SSL_CTRL_SESS_CONNECT() {
        return (int)21L;
    }
    public static int SSL_CTRL_SESS_CONNECT_GOOD() {
        return (int)22L;
    }
    public static int SSL_CTRL_SESS_CONNECT_RENEGOTIATE() {
        return (int)23L;
    }
    public static int SSL_CTRL_SESS_ACCEPT() {
        return (int)24L;
    }
    public static int SSL_CTRL_SESS_ACCEPT_GOOD() {
        return (int)25L;
    }
    public static int SSL_CTRL_SESS_ACCEPT_RENEGOTIATE() {
        return (int)26L;
    }
    public static int SSL_CTRL_SESS_HIT() {
        return (int)27L;
    }
    public static int SSL_CTRL_SESS_CB_HIT() {
        return (int)28L;
    }
    public static int SSL_CTRL_SESS_MISSES() {
        return (int)29L;
    }
    public static int SSL_CTRL_SESS_TIMEOUTS() {
        return (int)30L;
    }
    public static int SSL_CTRL_SESS_CACHE_FULL() {
        return (int)31L;
    }
    public static int SSL_CTRL_SET_SESS_CACHE_SIZE() {
        return (int)42L;
    }
    public static int SSL_CTRL_GET_SESS_CACHE_SIZE() {
        return (int)43L;
    }
    public static int SSL_CTRL_SET_SESS_CACHE_MODE() {
        return (int)44L;
    }
    public static int SSL_CTRL_GET_SESS_CACHE_MODE() {
        return (int)45L;
    }
    public static int SSL_CTRL_SET_TLSEXT_TICKET_KEYS() {
        return (int)59L;
    }
    public static int SSL_CTRL_CHAIN_CERT() {
        return (int)89L;
    }
    public static int SSL_CTRL_SET_MIN_PROTO_VERSION() {
        return (int)123L;
    }
    public static int SSL_CTRL_SET_MAX_PROTO_VERSION() {
        return (int)124L;
    }
    public static MethodHandle OPENSSL_sk_num$MH() {
        return RuntimeHelper.requireNonNull(constants$0.OPENSSL_sk_num$MH,"OPENSSL_sk_num");
    }
    public static int OPENSSL_sk_num ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.OPENSSL_sk_num$MH, "OPENSSL_sk_num");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_value$MH() {
        return RuntimeHelper.requireNonNull(constants$0.OPENSSL_sk_value$MH,"OPENSSL_sk_value");
    }
    public static MemoryAddress OPENSSL_sk_value ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.OPENSSL_sk_value$MH, "OPENSSL_sk_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CRYPTO_free$MH,"CRYPTO_free");
    }
    public static void CRYPTO_free ( Addressable ptr,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.CRYPTO_free$MH, "CRYPTO_free");
        try {
            mh$.invokeExact(ptr, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FIPS_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$0.FIPS_mode$MH,"FIPS_mode");
    }
    public static int FIPS_mode () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.FIPS_mode$MH, "FIPS_mode");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FIPS_mode_set$MH() {
        return RuntimeHelper.requireNonNull(constants$0.FIPS_mode_set$MH,"FIPS_mode_set");
    }
    public static int FIPS_mode_set ( int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.FIPS_mode_set$MH, "FIPS_mode_set");
        try {
            return (int)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$0.BIO_ctrl_pending$MH,"BIO_ctrl_pending");
    }
    public static long BIO_ctrl_pending ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.BIO_ctrl_pending$MH, "BIO_ctrl_pending");
        try {
            return (long)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1.BIO_s_file$MH,"BIO_s_file");
    }
    public static MemoryAddress BIO_s_file () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.BIO_s_file$MH, "BIO_s_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1.BIO_new_file$MH,"BIO_new_file");
    }
    public static MemoryAddress BIO_new_file ( Addressable filename,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.BIO_new_file$MH, "BIO_new_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1.BIO_new$MH,"BIO_new");
    }
    public static MemoryAddress BIO_new ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.BIO_new$MH, "BIO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1.BIO_free$MH,"BIO_free");
    }
    public static int BIO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.BIO_free$MH, "BIO_free");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_read$MH() {
        return RuntimeHelper.requireNonNull(constants$1.BIO_read$MH,"BIO_read");
    }
    public static int BIO_read ( Addressable b,  Addressable data,  int dlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.BIO_read$MH, "BIO_read");
        try {
            return (int)mh$.invokeExact(b, data, dlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_write$MH() {
        return RuntimeHelper.requireNonNull(constants$1.BIO_write$MH,"BIO_write");
    }
    public static int BIO_write ( Addressable b,  Addressable data,  int dlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.BIO_write$MH, "BIO_write");
        try {
            return (int)mh$.invokeExact(b, data, dlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$2.BIO_ctrl$MH,"BIO_ctrl");
    }
    public static long BIO_ctrl ( Addressable bp,  int cmd,  long larg,  Addressable parg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.BIO_ctrl$MH, "BIO_ctrl");
        try {
            return (long)mh$.invokeExact(bp, cmd, larg, parg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$2.BIO_s_mem$MH,"BIO_s_mem");
    }
    public static MemoryAddress BIO_s_mem () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.BIO_s_mem$MH, "BIO_s_mem");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$2.BIO_s_bio$MH,"BIO_s_bio");
    }
    public static MemoryAddress BIO_s_bio () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.BIO_s_bio$MH, "BIO_s_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_bio_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$2.BIO_new_bio_pair$MH,"BIO_new_bio_pair");
    }
    public static int BIO_new_bio_pair ( Addressable bio1,  long writebuf1,  Addressable bio2,  long writebuf2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.BIO_new_bio_pair$MH, "BIO_new_bio_pair");
        try {
            return (int)mh$.invokeExact(bio1, writebuf1, bio2, writebuf2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2.BN_new$MH,"BN_new");
    }
    public static MemoryAddress BN_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.BN_new$MH, "BN_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_set_word$MH() {
        return RuntimeHelper.requireNonNull(constants$2.BN_set_word$MH,"BN_set_word");
    }
    public static int BN_set_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.BN_set_word$MH, "BN_set_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc2409_prime_768$MH() {
        return RuntimeHelper.requireNonNull(constants$3.BN_get_rfc2409_prime_768$MH,"BN_get_rfc2409_prime_768");
    }
    public static MemoryAddress BN_get_rfc2409_prime_768 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.BN_get_rfc2409_prime_768$MH, "BN_get_rfc2409_prime_768");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc2409_prime_1024$MH() {
        return RuntimeHelper.requireNonNull(constants$3.BN_get_rfc2409_prime_1024$MH,"BN_get_rfc2409_prime_1024");
    }
    public static MemoryAddress BN_get_rfc2409_prime_1024 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.BN_get_rfc2409_prime_1024$MH, "BN_get_rfc2409_prime_1024");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_1536$MH() {
        return RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_1536$MH,"BN_get_rfc3526_prime_1536");
    }
    public static MemoryAddress BN_get_rfc3526_prime_1536 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_1536$MH, "BN_get_rfc3526_prime_1536");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_2048$MH() {
        return RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_2048$MH,"BN_get_rfc3526_prime_2048");
    }
    public static MemoryAddress BN_get_rfc3526_prime_2048 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_2048$MH, "BN_get_rfc3526_prime_2048");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_3072$MH() {
        return RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_3072$MH,"BN_get_rfc3526_prime_3072");
    }
    public static MemoryAddress BN_get_rfc3526_prime_3072 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_3072$MH, "BN_get_rfc3526_prime_3072");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_4096$MH() {
        return RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_4096$MH,"BN_get_rfc3526_prime_4096");
    }
    public static MemoryAddress BN_get_rfc3526_prime_4096 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.BN_get_rfc3526_prime_4096$MH, "BN_get_rfc3526_prime_4096");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_6144$MH() {
        return RuntimeHelper.requireNonNull(constants$4.BN_get_rfc3526_prime_6144$MH,"BN_get_rfc3526_prime_6144");
    }
    public static MemoryAddress BN_get_rfc3526_prime_6144 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.BN_get_rfc3526_prime_6144$MH, "BN_get_rfc3526_prime_6144");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_8192$MH() {
        return RuntimeHelper.requireNonNull(constants$4.BN_get_rfc3526_prime_8192$MH,"BN_get_rfc3526_prime_8192");
    }
    public static MemoryAddress BN_get_rfc3526_prime_8192 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.BN_get_rfc3526_prime_8192$MH, "BN_get_rfc3526_prime_8192");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_length$MH() {
        return RuntimeHelper.requireNonNull(constants$4.ASN1_STRING_length$MH,"ASN1_STRING_length");
    }
    public static int ASN1_STRING_length ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.ASN1_STRING_length$MH, "ASN1_STRING_length");
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_STRING_get0_data$MH() {
        return RuntimeHelper.requireNonNull(constants$4.ASN1_STRING_get0_data$MH,"ASN1_STRING_get0_data");
    }
    public static MemoryAddress ASN1_STRING_get0_data ( Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.ASN1_STRING_get0_data$MH, "ASN1_STRING_get0_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_base_id$MH() {
        return RuntimeHelper.requireNonNull(constants$4.EVP_PKEY_base_id$MH,"EVP_PKEY_base_id");
    }
    public static int EVP_PKEY_base_id ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.EVP_PKEY_base_id$MH, "EVP_PKEY_base_id");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EVP_PKEY_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$4.EVP_PKEY_bits$MH,"EVP_PKEY_bits");
    }
    public static int EVP_PKEY_bits ( Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.EVP_PKEY_bits$MH, "EVP_PKEY_bits");
        try {
            return (int)mh$.invokeExact(pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_free$MH() {
        return RuntimeHelper.requireNonNull(constants$5.EC_GROUP_free$MH,"EC_GROUP_free");
    }
    public static void EC_GROUP_free ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.EC_GROUP_free$MH, "EC_GROUP_free");
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_GROUP_get_curve_name$MH() {
        return RuntimeHelper.requireNonNull(constants$5.EC_GROUP_get_curve_name$MH,"EC_GROUP_get_curve_name");
    }
    public static int EC_GROUP_get_curve_name ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.EC_GROUP_get_curve_name$MH, "EC_GROUP_get_curve_name");
        try {
            return (int)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_new_by_curve_name$MH() {
        return RuntimeHelper.requireNonNull(constants$5.EC_KEY_new_by_curve_name$MH,"EC_KEY_new_by_curve_name");
    }
    public static MemoryAddress EC_KEY_new_by_curve_name ( int nid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.EC_KEY_new_by_curve_name$MH, "EC_KEY_new_by_curve_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EC_KEY_free$MH() {
        return RuntimeHelper.requireNonNull(constants$5.EC_KEY_free$MH,"EC_KEY_free");
    }
    public static void EC_KEY_free ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.EC_KEY_free$MH, "EC_KEY_free");
        try {
            mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DH_new$MH() {
        return RuntimeHelper.requireNonNull(constants$5.DH_new$MH,"DH_new");
    }
    public static MemoryAddress DH_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.DH_new$MH, "DH_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DH_free$MH() {
        return RuntimeHelper.requireNonNull(constants$5.DH_free$MH,"DH_free");
    }
    public static void DH_free ( Addressable dh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.DH_free$MH, "DH_free");
        try {
            mh$.invokeExact(dh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DH_set0_pqg$MH() {
        return RuntimeHelper.requireNonNull(constants$6.DH_set0_pqg$MH,"DH_set0_pqg");
    }
    public static int DH_set0_pqg ( Addressable dh,  Addressable p,  Addressable q,  Addressable g) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.DH_set0_pqg$MH, "DH_set0_pqg");
        try {
            return (int)mh$.invokeExact(dh, p, q, g);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$6.X509_STORE_set_flags$MH,"X509_STORE_set_flags");
    }
    public static int X509_STORE_set_flags ( Addressable ctx,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.X509_STORE_set_flags$MH, "X509_STORE_set_flags");
        try {
            return (int)mh$.invokeExact(ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_get0_untrusted$MH() {
        return RuntimeHelper.requireNonNull(constants$6.X509_STORE_CTX_get0_untrusted$MH,"X509_STORE_CTX_get0_untrusted");
    }
    public static MemoryAddress X509_STORE_CTX_get0_untrusted ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.X509_STORE_CTX_get0_untrusted$MH, "X509_STORE_CTX_get0_untrusted");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_add_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$6.X509_STORE_add_lookup$MH,"X509_STORE_add_lookup");
    }
    public static MemoryAddress X509_STORE_add_lookup ( Addressable v,  Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.X509_STORE_add_lookup$MH, "X509_STORE_add_lookup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(v, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_LOOKUP_hash_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$6.X509_LOOKUP_hash_dir$MH,"X509_LOOKUP_hash_dir");
    }
    public static MemoryAddress X509_LOOKUP_hash_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.X509_LOOKUP_hash_dir$MH, "X509_LOOKUP_hash_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_LOOKUP_file$MH() {
        return RuntimeHelper.requireNonNull(constants$6.X509_LOOKUP_file$MH,"X509_LOOKUP_file");
    }
    public static MemoryAddress X509_LOOKUP_file () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.X509_LOOKUP_file$MH, "X509_LOOKUP_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_LOOKUP_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$7.X509_LOOKUP_ctrl$MH,"X509_LOOKUP_ctrl");
    }
    public static int X509_LOOKUP_ctrl ( Addressable ctx,  int cmd,  Addressable argc,  long argl,  Addressable ret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.X509_LOOKUP_ctrl$MH, "X509_LOOKUP_ctrl");
        try {
            return (int)mh$.invokeExact(ctx, cmd, argc, argl, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_ex_data$MH,"X509_STORE_CTX_get_ex_data");
    }
    public static MemoryAddress X509_STORE_CTX_get_ex_data ( Addressable ctx,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_ex_data$MH, "X509_STORE_CTX_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_get_error$MH() {
        return RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_error$MH,"X509_STORE_CTX_get_error");
    }
    public static int X509_STORE_CTX_get_error ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_error$MH, "X509_STORE_CTX_get_error");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_set_error$MH() {
        return RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_set_error$MH,"X509_STORE_CTX_set_error");
    }
    public static void X509_STORE_CTX_set_error ( Addressable ctx,  int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_set_error$MH, "X509_STORE_CTX_set_error");
        try {
            mh$.invokeExact(ctx, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_get_error_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_error_depth$MH,"X509_STORE_CTX_get_error_depth");
    }
    public static int X509_STORE_CTX_get_error_depth ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_error_depth$MH, "X509_STORE_CTX_get_error_depth");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_get_current_cert$MH() {
        return RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_current_cert$MH,"X509_STORE_CTX_get_current_cert");
    }
    public static MemoryAddress X509_STORE_CTX_get_current_cert ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.X509_STORE_CTX_get_current_cert$MH, "X509_STORE_CTX_get_current_cert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_STORE_CTX_get0_current_issuer$MH() {
        return RuntimeHelper.requireNonNull(constants$8.X509_STORE_CTX_get0_current_issuer$MH,"X509_STORE_CTX_get0_current_issuer");
    }
    public static MemoryAddress X509_STORE_CTX_get0_current_issuer ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.X509_STORE_CTX_get0_current_issuer$MH, "X509_STORE_CTX_get0_current_issuer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$8.d2i_X509_bio$MH,"d2i_X509_bio");
    }
    public static MemoryAddress d2i_X509_bio ( Addressable bp,  Addressable x509) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.d2i_X509_bio$MH, "d2i_X509_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x509);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_free$MH() {
        return RuntimeHelper.requireNonNull(constants$8.X509_free$MH,"X509_free");
    }
    public static void X509_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.X509_free$MH, "X509_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$8.d2i_X509$MH,"d2i_X509");
    }
    public static MemoryAddress d2i_X509 ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.d2i_X509$MH, "d2i_X509");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_X509$MH() {
        return RuntimeHelper.requireNonNull(constants$8.i2d_X509$MH,"i2d_X509");
    }
    public static int i2d_X509 ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.i2d_X509$MH, "i2d_X509");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext_by_NID$MH() {
        return RuntimeHelper.requireNonNull(constants$8.X509_get_ext_by_NID$MH,"X509_get_ext_by_NID");
    }
    public static int X509_get_ext_by_NID ( Addressable x,  int nid,  int lastpos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.X509_get_ext_by_NID$MH, "X509_get_ext_by_NID");
        try {
            return (int)mh$.invokeExact(x, nid, lastpos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_get_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$9.X509_get_ext$MH,"X509_get_ext");
    }
    public static MemoryAddress X509_get_ext ( Addressable x,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.X509_get_ext$MH, "X509_get_ext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_EXTENSION_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$9.X509_EXTENSION_get_data$MH,"X509_EXTENSION_get_data");
    }
    public static MemoryAddress X509_EXTENSION_get_data ( Addressable ne) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.X509_EXTENSION_get_data$MH, "X509_EXTENSION_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_X509_AUX$MH() {
        return RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_X509_AUX$MH,"PEM_read_bio_X509_AUX");
    }
    public static MemoryAddress PEM_read_bio_X509_AUX ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_X509_AUX$MH, "PEM_read_bio_X509_AUX");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_ECPKParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_ECPKParameters$MH,"PEM_read_bio_ECPKParameters");
    }
    public static MemoryAddress PEM_read_bio_ECPKParameters ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_ECPKParameters$MH, "PEM_read_bio_ECPKParameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_DHparams$MH() {
        return RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_DHparams$MH,"PEM_read_bio_DHparams");
    }
    public static MemoryAddress PEM_read_bio_DHparams ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_DHparams$MH, "PEM_read_bio_DHparams");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PEM_read_bio_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_PrivateKey$MH,"PEM_read_bio_PrivateKey");
    }
    public static MemoryAddress PEM_read_bio_PrivateKey ( Addressable bp,  Addressable x,  Addressable cb,  Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.PEM_read_bio_PrivateKey$MH, "PEM_read_bio_PrivateKey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, x, cb, u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_options$MH() {
        return RuntimeHelper.requireNonNull(constants$10.SSL_CTX_get_options$MH,"SSL_CTX_get_options");
    }
    public static long SSL_CTX_get_options ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.SSL_CTX_get_options$MH, "SSL_CTX_get_options");
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_options$MH() {
        return RuntimeHelper.requireNonNull(constants$10.SSL_get_options$MH,"SSL_get_options");
    }
    public static long SSL_get_options ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.SSL_get_options$MH, "SSL_get_options");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_clear_options$MH() {
        return RuntimeHelper.requireNonNull(constants$10.SSL_CTX_clear_options$MH,"SSL_CTX_clear_options");
    }
    public static long SSL_CTX_clear_options ( Addressable ctx,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.SSL_CTX_clear_options$MH, "SSL_CTX_clear_options");
        try {
            return (long)mh$.invokeExact(ctx, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_options$MH() {
        return RuntimeHelper.requireNonNull(constants$10.SSL_CTX_set_options$MH,"SSL_CTX_set_options");
    }
    public static long SSL_CTX_set_options ( Addressable ctx,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.SSL_CTX_set_options$MH, "SSL_CTX_set_options");
        try {
            return (long)mh$.invokeExact(ctx, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_options$MH() {
        return RuntimeHelper.requireNonNull(constants$10.SSL_set_options$MH,"SSL_set_options");
    }
    public static long SSL_set_options ( Addressable s,  long op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.SSL_set_options$MH, "SSL_set_options");
        try {
            return (long)mh$.invokeExact(s, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_next_proto_negotiated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.SSL_get0_next_proto_negotiated$MH,"SSL_get0_next_proto_negotiated");
    }
    public static void SSL_get0_next_proto_negotiated ( Addressable s,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.SSL_get0_next_proto_negotiated$MH, "SSL_get0_next_proto_negotiated");
        try {
            mh$.invokeExact(s, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_alpn_select_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$11.SSL_CTX_set_alpn_select_cb$MH,"SSL_CTX_set_alpn_select_cb");
    }
    public static void SSL_CTX_set_alpn_select_cb ( Addressable ctx,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.SSL_CTX_set_alpn_select_cb$MH, "SSL_CTX_set_alpn_select_cb");
        try {
            mh$.invokeExact(ctx, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get0_alpn_selected$MH() {
        return RuntimeHelper.requireNonNull(constants$11.SSL_get0_alpn_selected$MH,"SSL_get0_alpn_selected");
    }
    public static void SSL_get0_alpn_selected ( Addressable ssl,  Addressable data,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.SSL_get0_alpn_selected$MH, "SSL_get0_alpn_selected");
        try {
            mh$.invokeExact(ssl, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_in_init$MH() {
        return RuntimeHelper.requireNonNull(constants$11.SSL_in_init$MH,"SSL_in_init");
    }
    public static int SSL_in_init ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.SSL_in_init$MH, "SSL_in_init");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cipher_list$MH() {
        return RuntimeHelper.requireNonNull(constants$11.SSL_CTX_set_cipher_list$MH,"SSL_CTX_set_cipher_list");
    }
    public static int SSL_CTX_set_cipher_list ( Addressable x0,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.SSL_CTX_set_cipher_list$MH, "SSL_CTX_set_cipher_list");
        try {
            return (int)mh$.invokeExact(x0, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$11.SSL_CTX_new$MH,"SSL_CTX_new");
    }
    public static MemoryAddress SSL_CTX_new ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.SSL_CTX_new$MH, "SSL_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$11.SSL_CTX_free$MH,"SSL_CTX_free");
    }
    public static void SSL_CTX_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.SSL_CTX_free$MH, "SSL_CTX_free");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$12.SSL_CTX_set_timeout$MH,"SSL_CTX_set_timeout");
    }
    public static long SSL_CTX_set_timeout ( Addressable ctx,  long t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.SSL_CTX_set_timeout$MH, "SSL_CTX_set_timeout");
        try {
            return (long)mh$.invokeExact(ctx, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$12.SSL_CTX_get_timeout$MH,"SSL_CTX_get_timeout");
    }
    public static long SSL_CTX_get_timeout ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.SSL_CTX_get_timeout$MH, "SSL_CTX_get_timeout");
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_cert_store$MH() {
        return RuntimeHelper.requireNonNull(constants$12.SSL_CTX_get_cert_store$MH,"SSL_CTX_get_cert_store");
    }
    public static MemoryAddress SSL_CTX_get_cert_store ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.SSL_CTX_get_cert_store$MH, "SSL_CTX_get_cert_store");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_current_cipher$MH() {
        return RuntimeHelper.requireNonNull(constants$12.SSL_get_current_cipher$MH,"SSL_get_current_cipher");
    }
    public static MemoryAddress SSL_get_current_cipher ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.SSL_get_current_cipher$MH, "SSL_get_current_cipher");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$12.SSL_CIPHER_get_name$MH,"SSL_CIPHER_get_name");
    }
    public static MemoryAddress SSL_CIPHER_get_name ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.SSL_CIPHER_get_name$MH, "SSL_CIPHER_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_kx_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$12.SSL_CIPHER_get_kx_nid$MH,"SSL_CIPHER_get_kx_nid");
    }
    public static int SSL_CIPHER_get_kx_nid ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.SSL_CIPHER_get_kx_nid$MH, "SSL_CIPHER_get_kx_nid");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CIPHER_get_auth_nid$MH() {
        return RuntimeHelper.requireNonNull(constants$13.SSL_CIPHER_get_auth_nid$MH,"SSL_CIPHER_get_auth_nid");
    }
    public static int SSL_CIPHER_get_auth_nid ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.SSL_CIPHER_get_auth_nid$MH, "SSL_CIPHER_get_auth_nid");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$13.SSL_pending$MH,"SSL_pending");
    }
    public static int SSL_pending ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.SSL_pending$MH, "SSL_pending");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$13.SSL_set_bio$MH,"SSL_set_bio");
    }
    public static void SSL_set_bio ( Addressable s,  Addressable rbio,  Addressable wbio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.SSL_set_bio$MH, "SSL_set_bio");
        try {
            mh$.invokeExact(s, rbio, wbio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_cipher_list$MH() {
        return RuntimeHelper.requireNonNull(constants$13.SSL_set_cipher_list$MH,"SSL_set_cipher_list");
    }
    public static int SSL_set_cipher_list ( Addressable s,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.SSL_set_cipher_list$MH, "SSL_set_cipher_list");
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$13.SSL_set_verify$MH,"SSL_set_verify");
    }
    public static void SSL_set_verify ( Addressable s,  int mode,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.SSL_set_verify$MH, "SSL_set_verify");
        try {
            mh$.invokeExact(s, mode, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_certificate_chain_file$MH() {
        return RuntimeHelper.requireNonNull(constants$13.SSL_CTX_use_certificate_chain_file$MH,"SSL_CTX_use_certificate_chain_file");
    }
    public static int SSL_CTX_use_certificate_chain_file ( Addressable ctx,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.SSL_CTX_use_certificate_chain_file$MH, "SSL_CTX_use_certificate_chain_file");
        try {
            return (int)mh$.invokeExact(ctx, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_load_client_CA_file$MH() {
        return RuntimeHelper.requireNonNull(constants$14.SSL_load_client_CA_file$MH,"SSL_load_client_CA_file");
    }
    public static MemoryAddress SSL_load_client_CA_file ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.SSL_load_client_CA_file$MH, "SSL_load_client_CA_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_add_file_cert_subjects_to_stack$MH() {
        return RuntimeHelper.requireNonNull(constants$14.SSL_add_file_cert_subjects_to_stack$MH,"SSL_add_file_cert_subjects_to_stack");
    }
    public static int SSL_add_file_cert_subjects_to_stack ( Addressable stackCAs,  Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.SSL_add_file_cert_subjects_to_stack$MH, "SSL_add_file_cert_subjects_to_stack");
        try {
            return (int)mh$.invokeExact(stackCAs, file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_time$MH() {
        return RuntimeHelper.requireNonNull(constants$14.SSL_SESSION_get_time$MH,"SSL_SESSION_get_time");
    }
    public static long SSL_SESSION_get_time ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.SSL_SESSION_get_time$MH, "SSL_SESSION_get_time");
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_SESSION_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$14.SSL_SESSION_get_id$MH,"SSL_SESSION_get_id");
    }
    public static MemoryAddress SSL_SESSION_get_id ( Addressable s,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.SSL_SESSION_get_id$MH, "SSL_SESSION_get_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_peer_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$14.SSL_get_peer_certificate$MH,"SSL_get_peer_certificate");
    }
    public static MemoryAddress SSL_get_peer_certificate ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.SSL_get_peer_certificate$MH, "SSL_get_peer_certificate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_peer_cert_chain$MH() {
        return RuntimeHelper.requireNonNull(constants$14.SSL_get_peer_cert_chain$MH,"SSL_get_peer_cert_chain");
    }
    public static MemoryAddress SSL_get_peer_cert_chain ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.SSL_get_peer_cert_chain$MH, "SSL_get_peer_cert_chain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_verify$MH() {
        return RuntimeHelper.requireNonNull(constants$15.SSL_CTX_set_verify$MH,"SSL_CTX_set_verify");
    }
    public static void SSL_CTX_set_verify ( Addressable ctx,  int mode,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.SSL_CTX_set_verify$MH, "SSL_CTX_set_verify");
        try {
            mh$.invokeExact(ctx, mode, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_cert_verify_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$15.SSL_CTX_set_cert_verify_callback$MH,"SSL_CTX_set_cert_verify_callback");
    }
    public static void SSL_CTX_set_cert_verify_callback ( Addressable ctx,  Addressable cb,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.SSL_CTX_set_cert_verify_callback$MH, "SSL_CTX_set_cert_verify_callback");
        try {
            mh$.invokeExact(ctx, cb, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_PrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$15.SSL_CTX_use_PrivateKey$MH,"SSL_CTX_use_PrivateKey");
    }
    public static int SSL_CTX_use_PrivateKey ( Addressable ctx,  Addressable pkey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.SSL_CTX_use_PrivateKey$MH, "SSL_CTX_use_PrivateKey");
        try {
            return (int)mh$.invokeExact(ctx, pkey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_use_certificate$MH() {
        return RuntimeHelper.requireNonNull(constants$15.SSL_CTX_use_certificate$MH,"SSL_CTX_use_certificate");
    }
    public static int SSL_CTX_use_certificate ( Addressable ctx,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.SSL_CTX_use_certificate$MH, "SSL_CTX_use_certificate");
        try {
            return (int)mh$.invokeExact(ctx, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_passwd_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$16.SSL_CTX_set_default_passwd_cb$MH,"SSL_CTX_set_default_passwd_cb");
    }
    public static void SSL_CTX_set_default_passwd_cb ( Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.SSL_CTX_set_default_passwd_cb$MH, "SSL_CTX_set_default_passwd_cb");
        try {
            mh$.invokeExact(ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_check_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$16.SSL_CTX_check_private_key$MH,"SSL_CTX_check_private_key");
    }
    public static int SSL_CTX_check_private_key ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.SSL_CTX_check_private_key$MH, "SSL_CTX_check_private_key");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_session_id_context$MH() {
        return RuntimeHelper.requireNonNull(constants$16.SSL_CTX_set_session_id_context$MH,"SSL_CTX_set_session_id_context");
    }
    public static int SSL_CTX_set_session_id_context ( Addressable ctx,  Addressable sid_ctx,  int sid_ctx_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.SSL_CTX_set_session_id_context$MH, "SSL_CTX_set_session_id_context");
        try {
            return (int)mh$.invokeExact(ctx, sid_ctx, sid_ctx_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_new$MH() {
        return RuntimeHelper.requireNonNull(constants$16.SSL_new$MH,"SSL_new");
    }
    public static MemoryAddress SSL_new ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.SSL_new$MH, "SSL_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$16.SSL_free$MH,"SSL_free");
    }
    public static void SSL_free ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.SSL_free$MH, "SSL_free");
        try {
            mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_read$MH() {
        return RuntimeHelper.requireNonNull(constants$16.SSL_read$MH,"SSL_read");
    }
    public static int SSL_read ( Addressable ssl,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.SSL_read$MH, "SSL_read");
        try {
            return (int)mh$.invokeExact(ssl, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_write$MH() {
        return RuntimeHelper.requireNonNull(constants$17.SSL_write$MH,"SSL_write");
    }
    public static int SSL_write ( Addressable ssl,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.SSL_write$MH, "SSL_write");
        try {
            return (int)mh$.invokeExact(ssl, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$17.SSL_CTX_ctrl$MH,"SSL_CTX_ctrl");
    }
    public static long SSL_CTX_ctrl ( Addressable ctx,  int cmd,  long larg,  Addressable parg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.SSL_CTX_ctrl$MH, "SSL_CTX_ctrl");
        try {
            return (long)mh$.invokeExact(ctx, cmd, larg, parg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$17.SSL_get_version$MH,"SSL_get_version");
    }
    public static MemoryAddress SSL_get_version ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.SSL_get_version$MH, "SSL_get_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TLS_server_method$MH() {
        return RuntimeHelper.requireNonNull(constants$17.TLS_server_method$MH,"TLS_server_method");
    }
    public static MemoryAddress TLS_server_method () {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.TLS_server_method$MH, "TLS_server_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$17.SSL_get_ciphers$MH,"SSL_get_ciphers");
    }
    public static MemoryAddress SSL_get_ciphers ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.SSL_get_ciphers$MH, "SSL_get_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_ciphers$MH() {
        return RuntimeHelper.requireNonNull(constants$17.SSL_CTX_get_ciphers$MH,"SSL_CTX_get_ciphers");
    }
    public static MemoryAddress SSL_CTX_get_ciphers ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.SSL_CTX_get_ciphers$MH, "SSL_CTX_get_ciphers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_do_handshake$MH() {
        return RuntimeHelper.requireNonNull(constants$18.SSL_do_handshake$MH,"SSL_do_handshake");
    }
    public static int SSL_do_handshake ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.SSL_do_handshake$MH, "SSL_do_handshake");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_renegotiate$MH() {
        return RuntimeHelper.requireNonNull(constants$18.SSL_renegotiate$MH,"SSL_renegotiate");
    }
    public static int SSL_renegotiate ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.SSL_renegotiate$MH, "SSL_renegotiate");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_renegotiate_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$18.SSL_renegotiate_pending$MH,"SSL_renegotiate_pending");
    }
    public static int SSL_renegotiate_pending ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.SSL_renegotiate_pending$MH, "SSL_renegotiate_pending");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$18.SSL_shutdown$MH,"SSL_shutdown");
    }
    public static int SSL_shutdown ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.SSL_shutdown$MH, "SSL_shutdown");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_verify_client_post_handshake$MH() {
        return RuntimeHelper.requireNonNull(constants$18.SSL_verify_client_post_handshake$MH,"SSL_verify_client_post_handshake");
    }
    public static int SSL_verify_client_post_handshake ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.SSL_verify_client_post_handshake$MH, "SSL_verify_client_post_handshake");
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_client_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$18.SSL_CTX_set_client_CA_list$MH,"SSL_CTX_set_client_CA_list");
    }
    public static void SSL_CTX_set_client_CA_list ( Addressable ctx,  Addressable name_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.SSL_CTX_set_client_CA_list$MH, "SSL_CTX_set_client_CA_list");
        try {
            mh$.invokeExact(ctx, name_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_get_client_CA_list$MH() {
        return RuntimeHelper.requireNonNull(constants$19.SSL_CTX_get_client_CA_list$MH,"SSL_CTX_get_client_CA_list");
    }
    public static MemoryAddress SSL_CTX_get_client_CA_list ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.SSL_CTX_get_client_CA_list$MH, "SSL_CTX_get_client_CA_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_add_client_CA$MH() {
        return RuntimeHelper.requireNonNull(constants$19.SSL_CTX_add_client_CA$MH,"SSL_CTX_add_client_CA");
    }
    public static int SSL_CTX_add_client_CA ( Addressable ctx,  Addressable x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.SSL_CTX_add_client_CA$MH, "SSL_CTX_add_client_CA");
        try {
            return (int)mh$.invokeExact(ctx, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_connect_state$MH() {
        return RuntimeHelper.requireNonNull(constants$19.SSL_set_connect_state$MH,"SSL_set_connect_state");
    }
    public static void SSL_set_connect_state ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.SSL_set_connect_state$MH, "SSL_set_connect_state");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_accept_state$MH() {
        return RuntimeHelper.requireNonNull(constants$19.SSL_set_accept_state$MH,"SSL_set_accept_state");
    }
    public static void SSL_set_accept_state ( Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.SSL_set_accept_state$MH, "SSL_set_accept_state");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_privatekey$MH() {
        return RuntimeHelper.requireNonNull(constants$19.SSL_get_privatekey$MH,"SSL_get_privatekey");
    }
    public static MemoryAddress SSL_get_privatekey ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.SSL_get_privatekey$MH, "SSL_get_privatekey");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$19.SSL_get_shutdown$MH,"SSL_get_shutdown");
    }
    public static int SSL_get_shutdown ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.SSL_get_shutdown$MH, "SSL_get_shutdown");
        try {
            return (int)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_default_verify_paths$MH() {
        return RuntimeHelper.requireNonNull(constants$20.SSL_CTX_set_default_verify_paths$MH,"SSL_CTX_set_default_verify_paths");
    }
    public static int SSL_CTX_set_default_verify_paths ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.SSL_CTX_set_default_verify_paths$MH, "SSL_CTX_set_default_verify_paths");
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_load_verify_locations$MH() {
        return RuntimeHelper.requireNonNull(constants$20.SSL_CTX_load_verify_locations$MH,"SSL_CTX_load_verify_locations");
    }
    public static int SSL_CTX_load_verify_locations ( Addressable ctx,  Addressable CAfile,  Addressable CApath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.SSL_CTX_load_verify_locations$MH, "SSL_CTX_load_verify_locations");
        try {
            return (int)mh$.invokeExact(ctx, CAfile, CApath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_session$MH() {
        return RuntimeHelper.requireNonNull(constants$20.SSL_get_session$MH,"SSL_get_session");
    }
    public static MemoryAddress SSL_get_session ( Addressable ssl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.SSL_get_session$MH, "SSL_get_session");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ssl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_info_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$20.SSL_set_info_callback$MH,"SSL_set_info_callback");
    }
    public static void SSL_set_info_callback ( Addressable ssl,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.SSL_set_info_callback$MH, "SSL_set_info_callback");
        try {
            mh$.invokeExact(ssl, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_set_verify_result$MH() {
        return RuntimeHelper.requireNonNull(constants$21.SSL_set_verify_result$MH,"SSL_set_verify_result");
    }
    public static void SSL_set_verify_result ( Addressable ssl,  long v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.SSL_set_verify_result$MH, "SSL_set_verify_result");
        try {
            mh$.invokeExact(ssl, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_get_ex_data_X509_STORE_CTX_idx$MH() {
        return RuntimeHelper.requireNonNull(constants$21.SSL_get_ex_data_X509_STORE_CTX_idx$MH,"SSL_get_ex_data_X509_STORE_CTX_idx");
    }
    public static int SSL_get_ex_data_X509_STORE_CTX_idx () {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.SSL_get_ex_data_X509_STORE_CTX_idx$MH, "SSL_get_ex_data_X509_STORE_CTX_idx");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CTX_set_tmp_dh_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$21.SSL_CTX_set_tmp_dh_callback$MH,"SSL_CTX_set_tmp_dh_callback");
    }
    public static void SSL_CTX_set_tmp_dh_callback ( Addressable ctx,  Addressable dh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.SSL_CTX_set_tmp_dh_callback$MH, "SSL_CTX_set_tmp_dh_callback");
        try {
            mh$.invokeExact(ctx, dh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$21.SSL_CONF_CTX_new$MH,"SSL_CONF_CTX_new");
    }
    public static MemoryAddress SSL_CONF_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.SSL_CONF_CTX_new$MH, "SSL_CONF_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_finish$MH() {
        return RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_finish$MH,"SSL_CONF_CTX_finish");
    }
    public static int SSL_CONF_CTX_finish ( Addressable cctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_finish$MH, "SSL_CONF_CTX_finish");
        try {
            return (int)mh$.invokeExact(cctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_free$MH,"SSL_CONF_CTX_free");
    }
    public static void SSL_CONF_CTX_free ( Addressable cctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_free$MH, "SSL_CONF_CTX_free");
        try {
            mh$.invokeExact(cctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_set_flags$MH,"SSL_CONF_CTX_set_flags");
    }
    public static int SSL_CONF_CTX_set_flags ( Addressable cctx,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_set_flags$MH, "SSL_CONF_CTX_set_flags");
        try {
            return (int)mh$.invokeExact(cctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_CTX_set_ssl_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_set_ssl_ctx$MH,"SSL_CONF_CTX_set_ssl_ctx");
    }
    public static void SSL_CONF_CTX_set_ssl_ctx ( Addressable cctx,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.SSL_CONF_CTX_set_ssl_ctx$MH, "SSL_CONF_CTX_set_ssl_ctx");
        try {
            mh$.invokeExact(cctx, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_cmd$MH() {
        return RuntimeHelper.requireNonNull(constants$22.SSL_CONF_cmd$MH,"SSL_CONF_cmd");
    }
    public static int SSL_CONF_cmd ( Addressable cctx,  Addressable cmd,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.SSL_CONF_cmd$MH, "SSL_CONF_cmd");
        try {
            return (int)mh$.invokeExact(cctx, cmd, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SSL_CONF_cmd_value_type$MH() {
        return RuntimeHelper.requireNonNull(constants$22.SSL_CONF_cmd_value_type$MH,"SSL_CONF_cmd_value_type");
    }
    public static int SSL_CONF_cmd_value_type ( Addressable cctx,  Addressable cmd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.SSL_CONF_cmd_value_type$MH, "SSL_CONF_cmd_value_type");
        try {
            return (int)mh$.invokeExact(cctx, cmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_init_ssl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.OPENSSL_init_ssl$MH,"OPENSSL_init_ssl");
    }
    public static int OPENSSL_init_ssl ( long opts,  Addressable settings) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.OPENSSL_init_ssl$MH, "OPENSSL_init_ssl");
        try {
            return (int)mh$.invokeExact(opts, settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_get_error$MH() {
        return RuntimeHelper.requireNonNull(constants$23.ERR_get_error$MH,"ERR_get_error");
    }
    public static long ERR_get_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.ERR_get_error$MH, "ERR_get_error");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_peek_last_error$MH() {
        return RuntimeHelper.requireNonNull(constants$23.ERR_peek_last_error$MH,"ERR_peek_last_error");
    }
    public static long ERR_peek_last_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.ERR_peek_last_error$MH, "ERR_peek_last_error");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_clear_error$MH() {
        return RuntimeHelper.requireNonNull(constants$23.ERR_clear_error$MH,"ERR_clear_error");
    }
    public static void ERR_clear_error () {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.ERR_clear_error$MH, "ERR_clear_error");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.ERR_error_string$MH,"ERR_error_string");
    }
    public static MemoryAddress ERR_error_string ( long e,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.ERR_error_string$MH, "ERR_error_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_verify_mac$MH() {
        return RuntimeHelper.requireNonNull(constants$23.PKCS12_verify_mac$MH,"PKCS12_verify_mac");
    }
    public static int PKCS12_verify_mac ( Addressable p12,  Addressable pass,  int passlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.PKCS12_verify_mac$MH, "PKCS12_verify_mac");
        try {
            return (int)mh$.invokeExact(p12, pass, passlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_free$MH() {
        return RuntimeHelper.requireNonNull(constants$24.PKCS12_free$MH,"PKCS12_free");
    }
    public static void PKCS12_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.PKCS12_free$MH, "PKCS12_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PKCS12_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$24.PKCS12_parse$MH,"PKCS12_parse");
    }
    public static int PKCS12_parse ( Addressable p12,  Addressable pass,  Addressable pkey,  Addressable cert,  Addressable ca) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.PKCS12_parse$MH, "PKCS12_parse");
        try {
            return (int)mh$.invokeExact(p12, pass, pkey, cert, ca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_PKCS12_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$24.d2i_PKCS12_bio$MH,"d2i_PKCS12_bio");
    }
    public static MemoryAddress d2i_PKCS12_bio ( Addressable bp,  Addressable p12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.d2i_PKCS12_bio$MH, "d2i_PKCS12_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, p12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RAND_seed$MH,"RAND_seed");
    }
    public static void RAND_seed ( Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.RAND_seed$MH, "RAND_seed");
        try {
            mh$.invokeExact(buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RAND_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RAND_load_file$MH,"RAND_load_file");
    }
    public static int RAND_load_file ( Addressable file,  long max_bytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.RAND_load_file$MH, "RAND_load_file");
        try {
            return (int)mh$.invokeExact(file, max_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle X509_check_issued$MH() {
        return RuntimeHelper.requireNonNull(constants$24.X509_check_issued$MH,"X509_check_issued");
    }
    public static int X509_check_issued ( Addressable issuer,  Addressable subject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.X509_check_issued$MH, "X509_check_issued");
        try {
            return (int)mh$.invokeExact(issuer, subject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$25.ENGINE_by_id$MH,"ENGINE_by_id");
    }
    public static MemoryAddress ENGINE_by_id ( Addressable id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.ENGINE_by_id$MH, "ENGINE_by_id");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_register_all_complete$MH() {
        return RuntimeHelper.requireNonNull(constants$25.ENGINE_register_all_complete$MH,"ENGINE_register_all_complete");
    }
    public static int ENGINE_register_all_complete () {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.ENGINE_register_all_complete$MH, "ENGINE_register_all_complete");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_ctrl_cmd_string$MH() {
        return RuntimeHelper.requireNonNull(constants$25.ENGINE_ctrl_cmd_string$MH,"ENGINE_ctrl_cmd_string");
    }
    public static int ENGINE_ctrl_cmd_string ( Addressable e,  Addressable cmd_name,  Addressable arg,  int cmd_optional) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.ENGINE_ctrl_cmd_string$MH, "ENGINE_ctrl_cmd_string");
        try {
            return (int)mh$.invokeExact(e, cmd_name, arg, cmd_optional);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$25.ENGINE_free$MH,"ENGINE_free");
    }
    public static int ENGINE_free ( Addressable e) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.ENGINE_free$MH, "ENGINE_free");
        try {
            return (int)mh$.invokeExact(e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_load_private_key$MH() {
        return RuntimeHelper.requireNonNull(constants$25.ENGINE_load_private_key$MH,"ENGINE_load_private_key");
    }
    public static MemoryAddress ENGINE_load_private_key ( Addressable e,  Addressable key_id,  Addressable ui_method,  Addressable callback_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.ENGINE_load_private_key$MH, "ENGINE_load_private_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(e, key_id, ui_method, callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ENGINE_set_default$MH() {
        return RuntimeHelper.requireNonNull(constants$25.ENGINE_set_default$MH,"ENGINE_set_default");
    }
    public static int ENGINE_set_default ( Addressable e,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.ENGINE_set_default$MH, "ENGINE_set_default");
        try {
            return (int)mh$.invokeExact(e, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long OPENSSL_VERSION_NUMBER() {
        return 269488335L;
    }
    public static MemorySegment OPENSSL_VERSION_TEXT() {
        return constants$26.OPENSSL_VERSION_TEXT$SEGMENT;
    }
    public static MemorySegment SHLIB_VERSION_HISTORY() {
        return constants$26.SHLIB_VERSION_HISTORY$SEGMENT;
    }
    public static MemorySegment SHLIB_VERSION_NUMBER() {
        return constants$26.SHLIB_VERSION_NUMBER$SEGMENT;
    }
    public static MemorySegment OPENSSL_FILE() {
        return constants$26.OPENSSL_FILE$SEGMENT;
    }
    public static int OPENSSL_LINE() {
        return (int)32L;
    }
    public static int OPENSSL_API_COMPAT() {
        return (int)0L;
    }
    public static long OPENSSL_INIT_ENGINE_ALL_BUILTIN() {
        return 30208L;
    }
    public static int EVP_PKEY_NONE() {
        return (int)0L;
    }
    public static int EVP_PKEY_RSA() {
        return (int)6L;
    }
    public static int EVP_PKEY_DSA() {
        return (int)116L;
    }
    public static MemorySegment SSL_TXT_DSS() {
        return constants$26.SSL_TXT_DSS$SEGMENT;
    }
    public static MemorySegment SSL_TXT_DH() {
        return constants$26.SSL_TXT_DH$SEGMENT;
    }
    public static MemorySegment SSL_TXT_RSA() {
        return constants$27.SSL_TXT_RSA$SEGMENT;
    }
    public static MemorySegment SSL_TXT_ECDH() {
        return constants$27.SSL_TXT_ECDH$SEGMENT;
    }
    public static MemorySegment SSL_TXT_ECDSA() {
        return constants$27.SSL_TXT_ECDSA$SEGMENT;
    }
    public static int SSL_OP_NO_TICKET() {
        return (int)16384L;
    }
    public static int SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION() {
        return (int)65536L;
    }
    public static int SSL_OP_NO_COMPRESSION() {
        return (int)131072L;
    }
    public static int SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION() {
        return (int)262144L;
    }
    public static int SSL_OP_CIPHER_SERVER_PREFERENCE() {
        return (int)4194304L;
    }
    public static int SSL_OP_NO_SSLv3() {
        return (int)33554432L;
    }
    public static int SSL_OP_NO_TLSv1() {
        return (int)67108864L;
    }
    public static int SSL_OP_NO_TLSv1_2() {
        return (int)134217728L;
    }
    public static int SSL_OP_NO_TLSv1_1() {
        return (int)268435456L;
    }
    public static int SSL_OP_NO_TLSv1_3() {
        return (int)536870912L;
    }
    public static int SSL_OP_ALL() {
        return (int)2147485780L;
    }
    public static int ENGINE_METHOD_ALL() {
        return (int)65535L;
    }
}


