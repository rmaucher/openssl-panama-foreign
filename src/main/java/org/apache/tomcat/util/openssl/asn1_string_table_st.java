// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class asn1_string_table_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("nid"),
        MemoryLayout.paddingLayout(32),
        JAVA_LONG.withName("minsize"),
        JAVA_LONG.withName("maxsize"),
        JAVA_LONG.withName("mask"),
        JAVA_LONG.withName("flags")
    ).withName("asn1_string_table_st");
    public static MemoryLayout $LAYOUT() {
        return asn1_string_table_st.$struct$LAYOUT;
    }
    static final VarHandle nid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nid"));
    public static VarHandle nid$VH() {
        return asn1_string_table_st.nid$VH;
    }
    public static int nid$get(MemorySegment seg) {
        return (int)asn1_string_table_st.nid$VH.get(seg);
    }
    public static void nid$set( MemorySegment seg, int x) {
        asn1_string_table_st.nid$VH.set(seg, x);
    }
    public static int nid$get(MemorySegment seg, long index) {
        return (int)asn1_string_table_st.nid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nid$set(MemorySegment seg, long index, int x) {
        asn1_string_table_st.nid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle minsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("minsize"));
    public static VarHandle minsize$VH() {
        return asn1_string_table_st.minsize$VH;
    }
    public static long minsize$get(MemorySegment seg) {
        return (long)asn1_string_table_st.minsize$VH.get(seg);
    }
    public static void minsize$set( MemorySegment seg, long x) {
        asn1_string_table_st.minsize$VH.set(seg, x);
    }
    public static long minsize$get(MemorySegment seg, long index) {
        return (long)asn1_string_table_st.minsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void minsize$set(MemorySegment seg, long index, long x) {
        asn1_string_table_st.minsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle maxsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("maxsize"));
    public static VarHandle maxsize$VH() {
        return asn1_string_table_st.maxsize$VH;
    }
    public static long maxsize$get(MemorySegment seg) {
        return (long)asn1_string_table_st.maxsize$VH.get(seg);
    }
    public static void maxsize$set( MemorySegment seg, long x) {
        asn1_string_table_st.maxsize$VH.set(seg, x);
    }
    public static long maxsize$get(MemorySegment seg, long index) {
        return (long)asn1_string_table_st.maxsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void maxsize$set(MemorySegment seg, long index, long x) {
        asn1_string_table_st.maxsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mask"));
    public static VarHandle mask$VH() {
        return asn1_string_table_st.mask$VH;
    }
    public static long mask$get(MemorySegment seg) {
        return (long)asn1_string_table_st.mask$VH.get(seg);
    }
    public static void mask$set( MemorySegment seg, long x) {
        asn1_string_table_st.mask$VH.set(seg, x);
    }
    public static long mask$get(MemorySegment seg, long index) {
        return (long)asn1_string_table_st.mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mask$set(MemorySegment seg, long index, long x) {
        asn1_string_table_st.mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return asn1_string_table_st.flags$VH;
    }
    public static long flags$get(MemorySegment seg) {
        return (long)asn1_string_table_st.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, long x) {
        asn1_string_table_st.flags$VH.set(seg, x);
    }
    public static long flags$get(MemorySegment seg, long index) {
        return (long)asn1_string_table_st.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, long x) {
        asn1_string_table_st.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


