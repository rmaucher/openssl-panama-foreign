// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$135 {

    static final FunctionDescriptor BIO_new_fd$FUNC = FunctionDescriptor.of(ADDRESS,
        JAVA_INT,
        JAVA_INT
    );
    static final MethodHandle BIO_new_fd$MH = RuntimeHelper.downcallHandle(
        "BIO_new_fd",
        constants$135.BIO_new_fd$FUNC, false
    );
    static final FunctionDescriptor BIO_new_bio_pair$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_LONG,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle BIO_new_bio_pair$MH = RuntimeHelper.downcallHandle(
        "BIO_new_bio_pair",
        constants$135.BIO_new_bio_pair$FUNC, false
    );
    static final FunctionDescriptor BIO_copy_next_retry$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle BIO_copy_next_retry$MH = RuntimeHelper.downcallHandle(
        "BIO_copy_next_retry",
        constants$135.BIO_copy_next_retry$FUNC, false
    );
    static final FunctionDescriptor BIO_printf$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle BIO_printf$MH = RuntimeHelper.downcallHandle(
        "BIO_printf",
        constants$135.BIO_printf$FUNC, true
    );
    static final FunctionDescriptor BIO_vprintf$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle BIO_vprintf$MH = RuntimeHelper.downcallHandle(
        "BIO_vprintf",
        constants$135.BIO_vprintf$FUNC, false
    );
    static final FunctionDescriptor BIO_snprintf$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        JAVA_LONG,
        ADDRESS
    );
    static final MethodHandle BIO_snprintf$MH = RuntimeHelper.downcallHandle(
        "BIO_snprintf",
        constants$135.BIO_snprintf$FUNC, true
    );
}


