// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class EC_builtin_curve {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("nid"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("comment")
    );
    public static MemoryLayout $LAYOUT() {
        return EC_builtin_curve.$struct$LAYOUT;
    }
    static final VarHandle nid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nid"));
    public static VarHandle nid$VH() {
        return EC_builtin_curve.nid$VH;
    }
    public static int nid$get(MemorySegment seg) {
        return (int)EC_builtin_curve.nid$VH.get(seg);
    }
    public static void nid$set( MemorySegment seg, int x) {
        EC_builtin_curve.nid$VH.set(seg, x);
    }
    public static int nid$get(MemorySegment seg, long index) {
        return (int)EC_builtin_curve.nid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nid$set(MemorySegment seg, long index, int x) {
        EC_builtin_curve.nid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle comment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("comment"));
    public static VarHandle comment$VH() {
        return EC_builtin_curve.comment$VH;
    }
    public static MemoryAddress comment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)EC_builtin_curve.comment$VH.get(seg);
    }
    public static void comment$set( MemorySegment seg, MemoryAddress x) {
        EC_builtin_curve.comment$VH.set(seg, x);
    }
    public static MemoryAddress comment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)EC_builtin_curve.comment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void comment$set(MemorySegment seg, long index, MemoryAddress x) {
        EC_builtin_curve.comment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


