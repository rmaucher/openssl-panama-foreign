// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class pkcs7_enc_content_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("content_type"),
        ADDRESS.withName("algorithm"),
        ADDRESS.withName("enc_data"),
        ADDRESS.withName("cipher")
    ).withName("pkcs7_enc_content_st");
    public static MemoryLayout $LAYOUT() {
        return pkcs7_enc_content_st.$struct$LAYOUT;
    }
    static final VarHandle content_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("content_type"));
    public static VarHandle content_type$VH() {
        return pkcs7_enc_content_st.content_type$VH;
    }
    public static MemoryAddress content_type$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.content_type$VH.get(seg);
    }
    public static void content_type$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_enc_content_st.content_type$VH.set(seg, x);
    }
    public static MemoryAddress content_type$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.content_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void content_type$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_enc_content_st.content_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle algorithm$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("algorithm"));
    public static VarHandle algorithm$VH() {
        return pkcs7_enc_content_st.algorithm$VH;
    }
    public static MemoryAddress algorithm$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.algorithm$VH.get(seg);
    }
    public static void algorithm$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_enc_content_st.algorithm$VH.set(seg, x);
    }
    public static MemoryAddress algorithm$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.algorithm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void algorithm$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_enc_content_st.algorithm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enc_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_data"));
    public static VarHandle enc_data$VH() {
        return pkcs7_enc_content_st.enc_data$VH;
    }
    public static MemoryAddress enc_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.enc_data$VH.get(seg);
    }
    public static void enc_data$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_enc_content_st.enc_data$VH.set(seg, x);
    }
    public static MemoryAddress enc_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.enc_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_data$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_enc_content_st.enc_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cipher$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cipher"));
    public static VarHandle cipher$VH() {
        return pkcs7_enc_content_st.cipher$VH;
    }
    public static MemoryAddress cipher$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.cipher$VH.get(seg);
    }
    public static void cipher$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_enc_content_st.cipher$VH.set(seg, x);
    }
    public static MemoryAddress cipher$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_enc_content_st.cipher$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cipher$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_enc_content_st.cipher$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


