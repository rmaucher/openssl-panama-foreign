// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$1002 {

    static final FunctionDescriptor CRL_DIST_POINTS_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle CRL_DIST_POINTS_free$MH = RuntimeHelper.downcallHandle(
        "CRL_DIST_POINTS_free",
        constants$1002.CRL_DIST_POINTS_free$FUNC, false
    );
    static final FunctionDescriptor d2i_CRL_DIST_POINTS$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle d2i_CRL_DIST_POINTS$MH = RuntimeHelper.downcallHandle(
        "d2i_CRL_DIST_POINTS",
        constants$1002.d2i_CRL_DIST_POINTS$FUNC, false
    );
    static final FunctionDescriptor i2d_CRL_DIST_POINTS$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle i2d_CRL_DIST_POINTS$MH = RuntimeHelper.downcallHandle(
        "i2d_CRL_DIST_POINTS",
        constants$1002.i2d_CRL_DIST_POINTS$FUNC, false
    );
    static final FunctionDescriptor DIST_POINT_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle DIST_POINT_new$MH = RuntimeHelper.downcallHandle(
        "DIST_POINT_new",
        constants$1002.DIST_POINT_new$FUNC, false
    );
    static final FunctionDescriptor DIST_POINT_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle DIST_POINT_free$MH = RuntimeHelper.downcallHandle(
        "DIST_POINT_free",
        constants$1002.DIST_POINT_free$FUNC, false
    );
    static final FunctionDescriptor d2i_DIST_POINT$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        JAVA_LONG
    );
    static final MethodHandle d2i_DIST_POINT$MH = RuntimeHelper.downcallHandle(
        "d2i_DIST_POINT",
        constants$1002.d2i_DIST_POINT$FUNC, false
    );
}


