// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class conf_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("meth"),
        ADDRESS.withName("meth_data"),
        ADDRESS.withName("data")
    ).withName("conf_st");
    public static MemoryLayout $LAYOUT() {
        return conf_st.$struct$LAYOUT;
    }
    static final VarHandle meth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("meth"));
    public static VarHandle meth$VH() {
        return conf_st.meth$VH;
    }
    public static MemoryAddress meth$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)conf_st.meth$VH.get(seg);
    }
    public static void meth$set( MemorySegment seg, MemoryAddress x) {
        conf_st.meth$VH.set(seg, x);
    }
    public static MemoryAddress meth$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)conf_st.meth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meth$set(MemorySegment seg, long index, MemoryAddress x) {
        conf_st.meth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle meth_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("meth_data"));
    public static VarHandle meth_data$VH() {
        return conf_st.meth_data$VH;
    }
    public static MemoryAddress meth_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)conf_st.meth_data$VH.get(seg);
    }
    public static void meth_data$set( MemorySegment seg, MemoryAddress x) {
        conf_st.meth_data$VH.set(seg, x);
    }
    public static MemoryAddress meth_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)conf_st.meth_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void meth_data$set(MemorySegment seg, long index, MemoryAddress x) {
        conf_st.meth_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return conf_st.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)conf_st.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        conf_st.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)conf_st.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        conf_st.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


