// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$274 {

    static final FunctionDescriptor EVP_CIPHER_nid$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle EVP_CIPHER_nid$MH = RuntimeHelper.downcallHandle(
        "EVP_CIPHER_nid",
        constants$274.EVP_CIPHER_nid$FUNC, false
    );
    static final FunctionDescriptor EVP_CIPHER_block_size$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle EVP_CIPHER_block_size$MH = RuntimeHelper.downcallHandle(
        "EVP_CIPHER_block_size",
        constants$274.EVP_CIPHER_block_size$FUNC, false
    );
    static final FunctionDescriptor EVP_CIPHER_impl_ctx_size$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle EVP_CIPHER_impl_ctx_size$MH = RuntimeHelper.downcallHandle(
        "EVP_CIPHER_impl_ctx_size",
        constants$274.EVP_CIPHER_impl_ctx_size$FUNC, false
    );
    static final FunctionDescriptor EVP_CIPHER_key_length$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle EVP_CIPHER_key_length$MH = RuntimeHelper.downcallHandle(
        "EVP_CIPHER_key_length",
        constants$274.EVP_CIPHER_key_length$FUNC, false
    );
    static final FunctionDescriptor EVP_CIPHER_iv_length$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle EVP_CIPHER_iv_length$MH = RuntimeHelper.downcallHandle(
        "EVP_CIPHER_iv_length",
        constants$274.EVP_CIPHER_iv_length$FUNC, false
    );
    static final FunctionDescriptor EVP_CIPHER_flags$FUNC = FunctionDescriptor.of(JAVA_LONG,
        ADDRESS
    );
    static final MethodHandle EVP_CIPHER_flags$MH = RuntimeHelper.downcallHandle(
        "EVP_CIPHER_flags",
        constants$274.EVP_CIPHER_flags$FUNC, false
    );
}


