// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _pthread_cleanup_buffer {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("__routine"),
        ADDRESS.withName("__arg"),
        JAVA_INT.withName("__canceltype"),
        MemoryLayout.paddingLayout(32),
        ADDRESS.withName("__prev")
    ).withName("_pthread_cleanup_buffer");
    public static MemoryLayout $LAYOUT() {
        return _pthread_cleanup_buffer.$struct$LAYOUT;
    }
    static final FunctionDescriptor __routine$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle __routine$MH = RuntimeHelper.downcallHandle(
        _pthread_cleanup_buffer.__routine$FUNC, false
    );
    public interface __routine {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(__routine fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(__routine.class, fi, _pthread_cleanup_buffer.__routine$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static __routine ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("__routine::" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _pthread_cleanup_buffer.__routine$MH.invokeExact(symbol, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle __routine$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__routine"));
    public static VarHandle __routine$VH() {
        return _pthread_cleanup_buffer.__routine$VH;
    }
    public static MemoryAddress __routine$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_pthread_cleanup_buffer.__routine$VH.get(seg);
    }
    public static void __routine$set( MemorySegment seg, MemoryAddress x) {
        _pthread_cleanup_buffer.__routine$VH.set(seg, x);
    }
    public static MemoryAddress __routine$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_pthread_cleanup_buffer.__routine$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __routine$set(MemorySegment seg, long index, MemoryAddress x) {
        _pthread_cleanup_buffer.__routine$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static __routine __routine (MemorySegment segment, ResourceScope scope) {
        return __routine.ofAddress(__routine$get(segment), scope);
    }
    static final VarHandle __arg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__arg"));
    public static VarHandle __arg$VH() {
        return _pthread_cleanup_buffer.__arg$VH;
    }
    public static MemoryAddress __arg$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_pthread_cleanup_buffer.__arg$VH.get(seg);
    }
    public static void __arg$set( MemorySegment seg, MemoryAddress x) {
        _pthread_cleanup_buffer.__arg$VH.set(seg, x);
    }
    public static MemoryAddress __arg$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_pthread_cleanup_buffer.__arg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __arg$set(MemorySegment seg, long index, MemoryAddress x) {
        _pthread_cleanup_buffer.__arg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __canceltype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__canceltype"));
    public static VarHandle __canceltype$VH() {
        return _pthread_cleanup_buffer.__canceltype$VH;
    }
    public static int __canceltype$get(MemorySegment seg) {
        return (int)_pthread_cleanup_buffer.__canceltype$VH.get(seg);
    }
    public static void __canceltype$set( MemorySegment seg, int x) {
        _pthread_cleanup_buffer.__canceltype$VH.set(seg, x);
    }
    public static int __canceltype$get(MemorySegment seg, long index) {
        return (int)_pthread_cleanup_buffer.__canceltype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __canceltype$set(MemorySegment seg, long index, int x) {
        _pthread_cleanup_buffer.__canceltype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __prev$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__prev"));
    public static VarHandle __prev$VH() {
        return _pthread_cleanup_buffer.__prev$VH;
    }
    public static MemoryAddress __prev$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_pthread_cleanup_buffer.__prev$VH.get(seg);
    }
    public static void __prev$set( MemorySegment seg, MemoryAddress x) {
        _pthread_cleanup_buffer.__prev$VH.set(seg, x);
    }
    public static MemoryAddress __prev$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_pthread_cleanup_buffer.__prev$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __prev$set(MemorySegment seg, long index, MemoryAddress x) {
        _pthread_cleanup_buffer.__prev$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


