// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class asn1_type_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        JAVA_INT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            ADDRESS.withName("ptr"),
            JAVA_INT.withName("boolean"),
            ADDRESS.withName("asn1_string"),
            ADDRESS.withName("object"),
            ADDRESS.withName("integer"),
            ADDRESS.withName("enumerated"),
            ADDRESS.withName("bit_string"),
            ADDRESS.withName("octet_string"),
            ADDRESS.withName("printablestring"),
            ADDRESS.withName("t61string"),
            ADDRESS.withName("ia5string"),
            ADDRESS.withName("generalstring"),
            ADDRESS.withName("bmpstring"),
            ADDRESS.withName("universalstring"),
            ADDRESS.withName("utctime"),
            ADDRESS.withName("generalizedtime"),
            ADDRESS.withName("visiblestring"),
            ADDRESS.withName("utf8string"),
            ADDRESS.withName("set"),
            ADDRESS.withName("sequence"),
            ADDRESS.withName("asn1_value")
        ).withName("value")
    ).withName("asn1_type_st");
    public static MemoryLayout $LAYOUT() {
        return asn1_type_st.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return asn1_type_st.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)asn1_type_st.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        asn1_type_st.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)asn1_type_st.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        asn1_type_st.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class value {

        static final MemoryLayout value$union$LAYOUT = MemoryLayout.unionLayout(
            ADDRESS.withName("ptr"),
            JAVA_INT.withName("boolean"),
            ADDRESS.withName("asn1_string"),
            ADDRESS.withName("object"),
            ADDRESS.withName("integer"),
            ADDRESS.withName("enumerated"),
            ADDRESS.withName("bit_string"),
            ADDRESS.withName("octet_string"),
            ADDRESS.withName("printablestring"),
            ADDRESS.withName("t61string"),
            ADDRESS.withName("ia5string"),
            ADDRESS.withName("generalstring"),
            ADDRESS.withName("bmpstring"),
            ADDRESS.withName("universalstring"),
            ADDRESS.withName("utctime"),
            ADDRESS.withName("generalizedtime"),
            ADDRESS.withName("visiblestring"),
            ADDRESS.withName("utf8string"),
            ADDRESS.withName("set"),
            ADDRESS.withName("sequence"),
            ADDRESS.withName("asn1_value")
        );
        public static MemoryLayout $LAYOUT() {
            return value.value$union$LAYOUT;
        }
        static final VarHandle ptr$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ptr"));
        public static VarHandle ptr$VH() {
            return value.ptr$VH;
        }
        public static MemoryAddress ptr$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.ptr$VH.get(seg);
        }
        public static void ptr$set( MemorySegment seg, MemoryAddress x) {
            value.ptr$VH.set(seg, x);
        }
        public static MemoryAddress ptr$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.ptr$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ptr$set(MemorySegment seg, long index, MemoryAddress x) {
            value.ptr$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle boolean_$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("boolean"));
        public static VarHandle boolean_$VH() {
            return value.boolean_$VH;
        }
        public static int boolean_$get(MemorySegment seg) {
            return (int)value.boolean_$VH.get(seg);
        }
        public static void boolean_$set( MemorySegment seg, int x) {
            value.boolean_$VH.set(seg, x);
        }
        public static int boolean_$get(MemorySegment seg, long index) {
            return (int)value.boolean_$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void boolean_$set(MemorySegment seg, long index, int x) {
            value.boolean_$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle asn1_string$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("asn1_string"));
        public static VarHandle asn1_string$VH() {
            return value.asn1_string$VH;
        }
        public static MemoryAddress asn1_string$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.asn1_string$VH.get(seg);
        }
        public static void asn1_string$set( MemorySegment seg, MemoryAddress x) {
            value.asn1_string$VH.set(seg, x);
        }
        public static MemoryAddress asn1_string$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.asn1_string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void asn1_string$set(MemorySegment seg, long index, MemoryAddress x) {
            value.asn1_string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle object$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("object"));
        public static VarHandle object$VH() {
            return value.object$VH;
        }
        public static MemoryAddress object$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.object$VH.get(seg);
        }
        public static void object$set( MemorySegment seg, MemoryAddress x) {
            value.object$VH.set(seg, x);
        }
        public static MemoryAddress object$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.object$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void object$set(MemorySegment seg, long index, MemoryAddress x) {
            value.object$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle integer$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("integer"));
        public static VarHandle integer$VH() {
            return value.integer$VH;
        }
        public static MemoryAddress integer$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.integer$VH.get(seg);
        }
        public static void integer$set( MemorySegment seg, MemoryAddress x) {
            value.integer$VH.set(seg, x);
        }
        public static MemoryAddress integer$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.integer$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void integer$set(MemorySegment seg, long index, MemoryAddress x) {
            value.integer$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle enumerated$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enumerated"));
        public static VarHandle enumerated$VH() {
            return value.enumerated$VH;
        }
        public static MemoryAddress enumerated$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.enumerated$VH.get(seg);
        }
        public static void enumerated$set( MemorySegment seg, MemoryAddress x) {
            value.enumerated$VH.set(seg, x);
        }
        public static MemoryAddress enumerated$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.enumerated$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void enumerated$set(MemorySegment seg, long index, MemoryAddress x) {
            value.enumerated$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle bit_string$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bit_string"));
        public static VarHandle bit_string$VH() {
            return value.bit_string$VH;
        }
        public static MemoryAddress bit_string$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.bit_string$VH.get(seg);
        }
        public static void bit_string$set( MemorySegment seg, MemoryAddress x) {
            value.bit_string$VH.set(seg, x);
        }
        public static MemoryAddress bit_string$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.bit_string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void bit_string$set(MemorySegment seg, long index, MemoryAddress x) {
            value.bit_string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle octet_string$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("octet_string"));
        public static VarHandle octet_string$VH() {
            return value.octet_string$VH;
        }
        public static MemoryAddress octet_string$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.octet_string$VH.get(seg);
        }
        public static void octet_string$set( MemorySegment seg, MemoryAddress x) {
            value.octet_string$VH.set(seg, x);
        }
        public static MemoryAddress octet_string$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.octet_string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void octet_string$set(MemorySegment seg, long index, MemoryAddress x) {
            value.octet_string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle printablestring$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("printablestring"));
        public static VarHandle printablestring$VH() {
            return value.printablestring$VH;
        }
        public static MemoryAddress printablestring$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.printablestring$VH.get(seg);
        }
        public static void printablestring$set( MemorySegment seg, MemoryAddress x) {
            value.printablestring$VH.set(seg, x);
        }
        public static MemoryAddress printablestring$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.printablestring$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void printablestring$set(MemorySegment seg, long index, MemoryAddress x) {
            value.printablestring$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle t61string$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t61string"));
        public static VarHandle t61string$VH() {
            return value.t61string$VH;
        }
        public static MemoryAddress t61string$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.t61string$VH.get(seg);
        }
        public static void t61string$set( MemorySegment seg, MemoryAddress x) {
            value.t61string$VH.set(seg, x);
        }
        public static MemoryAddress t61string$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.t61string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void t61string$set(MemorySegment seg, long index, MemoryAddress x) {
            value.t61string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle ia5string$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ia5string"));
        public static VarHandle ia5string$VH() {
            return value.ia5string$VH;
        }
        public static MemoryAddress ia5string$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.ia5string$VH.get(seg);
        }
        public static void ia5string$set( MemorySegment seg, MemoryAddress x) {
            value.ia5string$VH.set(seg, x);
        }
        public static MemoryAddress ia5string$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.ia5string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void ia5string$set(MemorySegment seg, long index, MemoryAddress x) {
            value.ia5string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle generalstring$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("generalstring"));
        public static VarHandle generalstring$VH() {
            return value.generalstring$VH;
        }
        public static MemoryAddress generalstring$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.generalstring$VH.get(seg);
        }
        public static void generalstring$set( MemorySegment seg, MemoryAddress x) {
            value.generalstring$VH.set(seg, x);
        }
        public static MemoryAddress generalstring$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.generalstring$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void generalstring$set(MemorySegment seg, long index, MemoryAddress x) {
            value.generalstring$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle bmpstring$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bmpstring"));
        public static VarHandle bmpstring$VH() {
            return value.bmpstring$VH;
        }
        public static MemoryAddress bmpstring$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.bmpstring$VH.get(seg);
        }
        public static void bmpstring$set( MemorySegment seg, MemoryAddress x) {
            value.bmpstring$VH.set(seg, x);
        }
        public static MemoryAddress bmpstring$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.bmpstring$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void bmpstring$set(MemorySegment seg, long index, MemoryAddress x) {
            value.bmpstring$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle universalstring$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("universalstring"));
        public static VarHandle universalstring$VH() {
            return value.universalstring$VH;
        }
        public static MemoryAddress universalstring$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.universalstring$VH.get(seg);
        }
        public static void universalstring$set( MemorySegment seg, MemoryAddress x) {
            value.universalstring$VH.set(seg, x);
        }
        public static MemoryAddress universalstring$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.universalstring$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void universalstring$set(MemorySegment seg, long index, MemoryAddress x) {
            value.universalstring$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle utctime$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("utctime"));
        public static VarHandle utctime$VH() {
            return value.utctime$VH;
        }
        public static MemoryAddress utctime$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.utctime$VH.get(seg);
        }
        public static void utctime$set( MemorySegment seg, MemoryAddress x) {
            value.utctime$VH.set(seg, x);
        }
        public static MemoryAddress utctime$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.utctime$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void utctime$set(MemorySegment seg, long index, MemoryAddress x) {
            value.utctime$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle generalizedtime$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("generalizedtime"));
        public static VarHandle generalizedtime$VH() {
            return value.generalizedtime$VH;
        }
        public static MemoryAddress generalizedtime$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.generalizedtime$VH.get(seg);
        }
        public static void generalizedtime$set( MemorySegment seg, MemoryAddress x) {
            value.generalizedtime$VH.set(seg, x);
        }
        public static MemoryAddress generalizedtime$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.generalizedtime$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void generalizedtime$set(MemorySegment seg, long index, MemoryAddress x) {
            value.generalizedtime$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle visiblestring$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visiblestring"));
        public static VarHandle visiblestring$VH() {
            return value.visiblestring$VH;
        }
        public static MemoryAddress visiblestring$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.visiblestring$VH.get(seg);
        }
        public static void visiblestring$set( MemorySegment seg, MemoryAddress x) {
            value.visiblestring$VH.set(seg, x);
        }
        public static MemoryAddress visiblestring$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.visiblestring$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void visiblestring$set(MemorySegment seg, long index, MemoryAddress x) {
            value.visiblestring$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle utf8string$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("utf8string"));
        public static VarHandle utf8string$VH() {
            return value.utf8string$VH;
        }
        public static MemoryAddress utf8string$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.utf8string$VH.get(seg);
        }
        public static void utf8string$set( MemorySegment seg, MemoryAddress x) {
            value.utf8string$VH.set(seg, x);
        }
        public static MemoryAddress utf8string$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.utf8string$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void utf8string$set(MemorySegment seg, long index, MemoryAddress x) {
            value.utf8string$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle set$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set"));
        public static VarHandle set$VH() {
            return value.set$VH;
        }
        public static MemoryAddress set$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.set$VH.get(seg);
        }
        public static void set$set( MemorySegment seg, MemoryAddress x) {
            value.set$VH.set(seg, x);
        }
        public static MemoryAddress set$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.set$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void set$set(MemorySegment seg, long index, MemoryAddress x) {
            value.set$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle sequence$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sequence"));
        public static VarHandle sequence$VH() {
            return value.sequence$VH;
        }
        public static MemoryAddress sequence$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.sequence$VH.get(seg);
        }
        public static void sequence$set( MemorySegment seg, MemoryAddress x) {
            value.sequence$VH.set(seg, x);
        }
        public static MemoryAddress sequence$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.sequence$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void sequence$set(MemorySegment seg, long index, MemoryAddress x) {
            value.sequence$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle asn1_value$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("asn1_value"));
        public static VarHandle asn1_value$VH() {
            return value.asn1_value$VH;
        }
        public static MemoryAddress asn1_value$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)value.asn1_value$VH.get(seg);
        }
        public static void asn1_value$set( MemorySegment seg, MemoryAddress x) {
            value.asn1_value$VH.set(seg, x);
        }
        public static MemoryAddress asn1_value$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)value.asn1_value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void asn1_value$set(MemorySegment seg, long index, MemoryAddress x) {
            value.asn1_value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment value$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


