// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class openssl_h_6 extends openssl_h_5 {

    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.asctime_r$MH, "asctime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$21.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.ctime_r$MH, "ctime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$21.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$21.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$21.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$21.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$21.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$21.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$21.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$21.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$21.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$21.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$21.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$21.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$21.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$22.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.tzset$MH, "tzset");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$22.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$22.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$22.daylight$VH.get(RuntimeHelper.requireNonNull(constants$22.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$22.daylight$VH.set(RuntimeHelper.requireNonNull(constants$22.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$22.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$22.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$22.timezone$VH.get(RuntimeHelper.requireNonNull(constants$22.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$22.timezone$VH.set(RuntimeHelper.requireNonNull(constants$22.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$22.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.timegm$MH, "timegm");
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$22.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.timelocal$MH, "timelocal");
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$22.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.dysize$MH, "dysize");
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$23.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.nanosleep$MH, "nanosleep");
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$23.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.clock_getres$MH, "clock_getres");
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$23.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.clock_gettime$MH, "clock_gettime");
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$23.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.clock_settime$MH, "clock_settime");
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$23.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.clock_nanosleep$MH, "clock_nanosleep");
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$23.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.clock_getcpuclockid$MH, "clock_getcpuclockid");
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$24.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.timer_create$MH, "timer_create");
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$24.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.timer_delete$MH, "timer_delete");
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$24.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.timer_settime$MH, "timer_settime");
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$24.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.timer_gettime$MH, "timer_gettime");
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$24.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.timer_getoverrun$MH, "timer_getoverrun");
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$24.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.timespec_get$MH, "timespec_get");
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout stdin$LAYOUT() {
        return constants$25.stdin$LAYOUT;
    }
    public static VarHandle stdin$VH() {
        return constants$25.stdin$VH;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.stdin$SEGMENT,"stdin");
    }
    public static MemoryAddress stdin$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$25.stdin$VH.get(RuntimeHelper.requireNonNull(constants$25.stdin$SEGMENT, "stdin"));
    }
    public static void stdin$set( MemoryAddress x) {
        constants$25.stdin$VH.set(RuntimeHelper.requireNonNull(constants$25.stdin$SEGMENT, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return constants$25.stdout$LAYOUT;
    }
    public static VarHandle stdout$VH() {
        return constants$25.stdout$VH;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.stdout$SEGMENT,"stdout");
    }
    public static MemoryAddress stdout$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$25.stdout$VH.get(RuntimeHelper.requireNonNull(constants$25.stdout$SEGMENT, "stdout"));
    }
    public static void stdout$set( MemoryAddress x) {
        constants$25.stdout$VH.set(RuntimeHelper.requireNonNull(constants$25.stdout$SEGMENT, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return constants$25.stderr$LAYOUT;
    }
    public static VarHandle stderr$VH() {
        return constants$25.stderr$VH;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.stderr$SEGMENT,"stderr");
    }
    public static MemoryAddress stderr$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$25.stderr$VH.get(RuntimeHelper.requireNonNull(constants$25.stderr$SEGMENT, "stderr"));
    }
    public static void stderr$set( MemoryAddress x) {
        constants$25.stderr$VH.set(RuntimeHelper.requireNonNull(constants$25.stderr$SEGMENT, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$25.remove$MH,"remove");
    }
    public static int remove ( Addressable __filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.remove$MH, "remove");
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$25.rename$MH,"rename");
    }
    public static int rename ( Addressable __old,  Addressable __new) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.rename$MH, "rename");
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$25.renameat$MH,"renameat");
    }
    public static int renameat ( int __oldfd,  Addressable __old,  int __newfd,  Addressable __new) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.renameat$MH, "renameat");
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.tmpfile$MH, "tmpfile");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$26.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.tmpnam$MH, "tmpnam");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$26.tmpnam_r$MH,"tmpnam_r");
    }
    public static MemoryAddress tmpnam_r ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.tmpnam_r$MH, "tmpnam_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$26.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable __dir,  Addressable __pfx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.tempnam$MH, "tempnam");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.fclose$MH, "fclose");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.fflush$MH, "fflush");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fflush_unlocked$MH,"fflush_unlocked");
    }
    public static int fflush_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.fflush_unlocked$MH, "fflush_unlocked");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable __filename,  Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.fopen$MH, "fopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable __filename,  Addressable __modes,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.freopen$MH, "freopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int __fd,  Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.fdopen$MH, "fdopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fmemopen$MH,"fmemopen");
    }
    public static MemoryAddress fmemopen ( Addressable __s,  long __len,  Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.fmemopen$MH, "fmemopen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$27.open_memstream$MH,"open_memstream");
    }
    public static MemoryAddress open_memstream ( Addressable __bufloc,  Addressable __sizeloc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.open_memstream$MH, "open_memstream");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable __stream,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.setbuf$MH, "setbuf");
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable __stream,  Addressable __buf,  int __modes,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.setvbuf$MH, "setvbuf");
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setbuffer$MH,"setbuffer");
    }
    public static void setbuffer ( Addressable __stream,  Addressable __buf,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.setbuffer$MH, "setbuffer");
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setlinebuf$MH,"setlinebuf");
    }
    public static void setlinebuf ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.setlinebuf$MH, "setlinebuf");
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable __stream,  Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.fprintf$MH, "fprintf");
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.printf$MH,"printf");
    }
    public static int printf ( Addressable __format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.printf$MH, "printf");
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable __s,  Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.sprintf$MH, "sprintf");
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.vfprintf$MH, "vfprintf");
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.vprintf$MH, "vprintf");
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.vsprintf$MH, "vsprintf");
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable __s,  long __maxlen,  Addressable __format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.snprintf$MH, "snprintf");
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable __s,  long __maxlen,  Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.vsnprintf$MH, "vsnprintf");
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.vdprintf$MH,"vdprintf");
    }
    public static int vdprintf ( int __fd,  Addressable __fmt,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.vdprintf$MH, "vdprintf");
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.dprintf$MH,"dprintf");
    }
    public static int dprintf ( int __fd,  Addressable __fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.dprintf$MH, "dprintf");
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable __stream,  Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.fscanf$MH, "fscanf");
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable __format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.scanf$MH, "scanf");
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable __s,  Addressable __format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.sscanf$MH, "sscanf");
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.vfscanf$MH, "vfscanf");
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.vscanf$MH, "vscanf");
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable __s,  Addressable __format,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.vsscanf$MH, "vsscanf");
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.fgetc$MH, "fgetc");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getc$MH,"getc");
    }
    public static int getc ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.getc$MH, "getc");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.getchar$MH, "getchar");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getc_unlocked$MH,"getc_unlocked");
    }
    public static int getc_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.getc_unlocked$MH, "getc_unlocked");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$32.getchar_unlocked$MH,"getchar_unlocked");
    }
    public static int getchar_unlocked () {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.getchar_unlocked$MH, "getchar_unlocked");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fgetc_unlocked$MH,"fgetc_unlocked");
    }
    public static int fgetc_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.fgetc_unlocked$MH, "fgetc_unlocked");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fputc$MH,"fputc");
    }
    public static int fputc ( int __c,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.fputc$MH, "fputc");
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$32.putc$MH,"putc");
    }
    public static int putc ( int __c,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.putc$MH, "putc");
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$32.putchar$MH,"putchar");
    }
    public static int putchar ( int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.putchar$MH, "putchar");
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$32.fputc_unlocked$MH,"fputc_unlocked");
    }
    public static int fputc_unlocked ( int __c,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.fputc_unlocked$MH, "fputc_unlocked");
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$33.putc_unlocked$MH,"putc_unlocked");
    }
    public static int putc_unlocked ( int __c,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.putc_unlocked$MH, "putc_unlocked");
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$33.putchar_unlocked$MH,"putchar_unlocked");
    }
    public static int putchar_unlocked ( int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.putchar_unlocked$MH, "putchar_unlocked");
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$33.getw$MH,"getw");
    }
    public static int getw ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.getw$MH, "getw");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$33.putw$MH,"putw");
    }
    public static int putw ( int __w,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.putw$MH, "putw");
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$33.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable __s,  int __n,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.fgets$MH, "fgets");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__getdelim$MH,"__getdelim");
    }
    public static long __getdelim ( Addressable __lineptr,  Addressable __n,  int __delimiter,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.__getdelim$MH, "__getdelim");
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getdelim$MH,"getdelim");
    }
    public static long getdelim ( Addressable __lineptr,  Addressable __n,  int __delimiter,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.getdelim$MH, "getdelim");
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getline$MH,"getline");
    }
    public static long getline ( Addressable __lineptr,  Addressable __n,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.getline$MH, "getline");
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable __s,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.fputs$MH, "fputs");
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$34.puts$MH,"puts");
    }
    public static int puts ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.puts$MH, "puts");
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$34.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int __c,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.ungetc$MH, "ungetc");
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fread$MH,"fread");
    }
    public static long fread ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.fread$MH, "fread");
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable __ptr,  long __size,  long __n,  Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.fwrite$MH, "fwrite");
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fread_unlocked$MH,"fread_unlocked");
    }
    public static long fread_unlocked ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.fread_unlocked$MH, "fread_unlocked");
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fwrite_unlocked$MH,"fwrite_unlocked");
    }
    public static long fwrite_unlocked ( Addressable __ptr,  long __size,  long __n,  Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.fwrite_unlocked$MH, "fwrite_unlocked");
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$35.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable __stream,  long __off,  int __whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.fseek$MH, "fseek");
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$35.ftell$MH,"ftell");
    }
    public static long ftell ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.ftell$MH, "ftell");
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$35.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.rewind$MH, "rewind");
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fseeko$MH,"fseeko");
    }
    public static int fseeko ( Addressable __stream,  long __off,  int __whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.fseeko$MH, "fseeko");
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$36.ftello$MH,"ftello");
    }
    public static long ftello ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.ftello$MH, "ftello");
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable __stream,  Addressable __pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.fgetpos$MH, "fgetpos");
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$36.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable __stream,  Addressable __pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.fsetpos$MH, "fsetpos");
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$36.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.clearerr$MH, "clearerr");
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$36.feof$MH,"feof");
    }
    public static int feof ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.feof$MH, "feof");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$37.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.ferror$MH, "ferror");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.clearerr_unlocked$MH,"clearerr_unlocked");
    }
    public static void clearerr_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.clearerr_unlocked$MH, "clearerr_unlocked");
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.feof_unlocked$MH,"feof_unlocked");
    }
    public static int feof_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.feof_unlocked$MH, "feof_unlocked");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.ferror_unlocked$MH,"ferror_unlocked");
    }
    public static int ferror_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.ferror_unlocked$MH, "ferror_unlocked");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$37.perror$MH,"perror");
    }
    public static void perror ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.perror$MH, "perror");
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$37.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.fileno$MH, "fileno");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fileno_unlocked$MH,"fileno_unlocked");
    }
    public static int fileno_unlocked ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.fileno_unlocked$MH, "fileno_unlocked");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$38.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable __command,  Addressable __modes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.popen$MH, "popen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$38.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.pclose$MH, "pclose");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ctermid$MH,"ctermid");
    }
    public static MemoryAddress ctermid ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.ctermid$MH, "ctermid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$38.flockfile$MH,"flockfile");
    }
    public static void flockfile ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.flockfile$MH, "flockfile");
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ftrylockfile$MH,"ftrylockfile");
    }
    public static int ftrylockfile ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.ftrylockfile$MH, "ftrylockfile");
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$39.funlockfile$MH,"funlockfile");
    }
    public static void funlockfile ( Addressable __stream) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.funlockfile$MH, "funlockfile");
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__uflow$MH,"__uflow");
    }
    public static int __uflow ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.__uflow$MH, "__uflow");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__overflow$MH,"__overflow");
    }
    public static int __overflow ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.__overflow$MH, "__overflow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_num$MH() {
        return RuntimeHelper.requireNonNull(constants$40.OPENSSL_sk_num$MH,"OPENSSL_sk_num");
    }
    public static int OPENSSL_sk_num ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.OPENSSL_sk_num$MH, "OPENSSL_sk_num");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_value$MH() {
        return RuntimeHelper.requireNonNull(constants$40.OPENSSL_sk_value$MH,"OPENSSL_sk_value");
    }
    public static MemoryAddress OPENSSL_sk_value ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.OPENSSL_sk_value$MH, "OPENSSL_sk_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_set$MH() {
        return RuntimeHelper.requireNonNull(constants$40.OPENSSL_sk_set$MH,"OPENSSL_sk_set");
    }
    public static MemoryAddress OPENSSL_sk_set ( Addressable st,  int i,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.OPENSSL_sk_set$MH, "OPENSSL_sk_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(st, i, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_new$MH() {
        return RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_new$MH,"OPENSSL_sk_new");
    }
    public static MemoryAddress OPENSSL_sk_new ( Addressable cmp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_new$MH, "OPENSSL_sk_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_new_null$MH,"OPENSSL_sk_new_null");
    }
    public static MemoryAddress OPENSSL_sk_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_new_null$MH, "OPENSSL_sk_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_new_reserve$MH,"OPENSSL_sk_new_reserve");
    }
    public static MemoryAddress OPENSSL_sk_new_reserve ( Addressable c,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_new_reserve$MH, "OPENSSL_sk_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(c, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_reserve$MH,"OPENSSL_sk_reserve");
    }
    public static int OPENSSL_sk_reserve ( Addressable st,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_reserve$MH, "OPENSSL_sk_reserve");
        try {
            return (int)mh$.invokeExact(st, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_free$MH() {
        return RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_free$MH,"OPENSSL_sk_free");
    }
    public static void OPENSSL_sk_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.OPENSSL_sk_free$MH, "OPENSSL_sk_free");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_pop_free$MH,"OPENSSL_sk_pop_free");
    }
    public static void OPENSSL_sk_pop_free ( Addressable st,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_pop_free$MH, "OPENSSL_sk_pop_free");
        try {
            mh$.invokeExact(st, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_deep_copy$MH,"OPENSSL_sk_deep_copy");
    }
    public static MemoryAddress OPENSSL_sk_deep_copy ( Addressable x0,  Addressable c,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_deep_copy$MH, "OPENSSL_sk_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, c, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_insert$MH,"OPENSSL_sk_insert");
    }
    public static int OPENSSL_sk_insert ( Addressable sk,  Addressable data,  int where) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_insert$MH, "OPENSSL_sk_insert");
        try {
            return (int)mh$.invokeExact(sk, data, where);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_delete$MH,"OPENSSL_sk_delete");
    }
    public static MemoryAddress OPENSSL_sk_delete ( Addressable st,  int loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_delete$MH, "OPENSSL_sk_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(st, loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_delete_ptr$MH,"OPENSSL_sk_delete_ptr");
    }
    public static MemoryAddress OPENSSL_sk_delete_ptr ( Addressable st,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.OPENSSL_sk_delete_ptr$MH, "OPENSSL_sk_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(st, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_find$MH() {
        return RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_find$MH,"OPENSSL_sk_find");
    }
    public static int OPENSSL_sk_find ( Addressable st,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_find$MH, "OPENSSL_sk_find");
        try {
            return (int)mh$.invokeExact(st, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_find_ex$MH,"OPENSSL_sk_find_ex");
    }
    public static int OPENSSL_sk_find_ex ( Addressable st,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_find_ex$MH, "OPENSSL_sk_find_ex");
        try {
            return (int)mh$.invokeExact(st, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_push$MH() {
        return RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_push$MH,"OPENSSL_sk_push");
    }
    public static int OPENSSL_sk_push ( Addressable st,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_push$MH, "OPENSSL_sk_push");
        try {
            return (int)mh$.invokeExact(st, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_unshift$MH,"OPENSSL_sk_unshift");
    }
    public static int OPENSSL_sk_unshift ( Addressable st,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_unshift$MH, "OPENSSL_sk_unshift");
        try {
            return (int)mh$.invokeExact(st, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_shift$MH,"OPENSSL_sk_shift");
    }
    public static MemoryAddress OPENSSL_sk_shift ( Addressable st) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_shift$MH, "OPENSSL_sk_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_pop$MH,"OPENSSL_sk_pop");
    }
    public static MemoryAddress OPENSSL_sk_pop ( Addressable st) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.OPENSSL_sk_pop$MH, "OPENSSL_sk_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_zero$MH,"OPENSSL_sk_zero");
    }
    public static void OPENSSL_sk_zero ( Addressable st) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_zero$MH, "OPENSSL_sk_zero");
        try {
            mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_set_cmp_func$MH,"OPENSSL_sk_set_cmp_func");
    }
    public static MemoryAddress OPENSSL_sk_set_cmp_func ( Addressable sk,  Addressable cmp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_set_cmp_func$MH, "OPENSSL_sk_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_dup$MH,"OPENSSL_sk_dup");
    }
    public static MemoryAddress OPENSSL_sk_dup ( Addressable st) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_dup$MH, "OPENSSL_sk_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_sort$MH,"OPENSSL_sk_sort");
    }
    public static void OPENSSL_sk_sort ( Addressable st) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_sort$MH, "OPENSSL_sk_sort");
        try {
            mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_sk_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_is_sorted$MH,"OPENSSL_sk_is_sorted");
    }
    public static int OPENSSL_sk_is_sorted ( Addressable st) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.OPENSSL_sk_is_sorted$MH, "OPENSSL_sk_is_sorted");
        try {
            return (int)mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfAddress OPENSSL_STRING = ValueLayout.ADDRESS;
    public static ValueLayout.OfAddress OPENSSL_CSTRING = ValueLayout.ADDRESS;
    public static MethodHandle sk_OPENSSL_STRING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$45.sk_OPENSSL_STRING_num$MH,"sk_OPENSSL_STRING_num");
    }
    public static int sk_OPENSSL_STRING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.sk_OPENSSL_STRING_num$MH, "sk_OPENSSL_STRING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_value$MH,"sk_OPENSSL_STRING_value");
    }
    public static MemoryAddress sk_OPENSSL_STRING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_value$MH, "sk_OPENSSL_STRING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_new$MH,"sk_OPENSSL_STRING_new");
    }
    public static MemoryAddress sk_OPENSSL_STRING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_new$MH, "sk_OPENSSL_STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_new_null$MH,"sk_OPENSSL_STRING_new_null");
    }
    public static MemoryAddress sk_OPENSSL_STRING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_new_null$MH, "sk_OPENSSL_STRING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_new_reserve$MH,"sk_OPENSSL_STRING_new_reserve");
    }
    public static MemoryAddress sk_OPENSSL_STRING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_new_reserve$MH, "sk_OPENSSL_STRING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_reserve$MH,"sk_OPENSSL_STRING_reserve");
    }
    public static int sk_OPENSSL_STRING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_reserve$MH, "sk_OPENSSL_STRING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_free$MH,"sk_OPENSSL_STRING_free");
    }
    public static void sk_OPENSSL_STRING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.sk_OPENSSL_STRING_free$MH, "sk_OPENSSL_STRING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_zero$MH,"sk_OPENSSL_STRING_zero");
    }
    public static void sk_OPENSSL_STRING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_zero$MH, "sk_OPENSSL_STRING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_delete$MH,"sk_OPENSSL_STRING_delete");
    }
    public static MemoryAddress sk_OPENSSL_STRING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_delete$MH, "sk_OPENSSL_STRING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_delete_ptr$MH,"sk_OPENSSL_STRING_delete_ptr");
    }
    public static MemoryAddress sk_OPENSSL_STRING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_delete_ptr$MH, "sk_OPENSSL_STRING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_push$MH,"sk_OPENSSL_STRING_push");
    }
    public static int sk_OPENSSL_STRING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_push$MH, "sk_OPENSSL_STRING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_unshift$MH,"sk_OPENSSL_STRING_unshift");
    }
    public static int sk_OPENSSL_STRING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_unshift$MH, "sk_OPENSSL_STRING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_pop$MH,"sk_OPENSSL_STRING_pop");
    }
    public static MemoryAddress sk_OPENSSL_STRING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.sk_OPENSSL_STRING_pop$MH, "sk_OPENSSL_STRING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_shift$MH,"sk_OPENSSL_STRING_shift");
    }
    public static MemoryAddress sk_OPENSSL_STRING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_shift$MH, "sk_OPENSSL_STRING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_pop_free$MH,"sk_OPENSSL_STRING_pop_free");
    }
    public static void sk_OPENSSL_STRING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_pop_free$MH, "sk_OPENSSL_STRING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_insert$MH,"sk_OPENSSL_STRING_insert");
    }
    public static int sk_OPENSSL_STRING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_insert$MH, "sk_OPENSSL_STRING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_set$MH,"sk_OPENSSL_STRING_set");
    }
    public static MemoryAddress sk_OPENSSL_STRING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_set$MH, "sk_OPENSSL_STRING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_find$MH,"sk_OPENSSL_STRING_find");
    }
    public static int sk_OPENSSL_STRING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_find$MH, "sk_OPENSSL_STRING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_find_ex$MH,"sk_OPENSSL_STRING_find_ex");
    }
    public static int sk_OPENSSL_STRING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.sk_OPENSSL_STRING_find_ex$MH, "sk_OPENSSL_STRING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_sort$MH,"sk_OPENSSL_STRING_sort");
    }
    public static void sk_OPENSSL_STRING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_sort$MH, "sk_OPENSSL_STRING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_is_sorted$MH,"sk_OPENSSL_STRING_is_sorted");
    }
    public static int sk_OPENSSL_STRING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_is_sorted$MH, "sk_OPENSSL_STRING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_dup$MH,"sk_OPENSSL_STRING_dup");
    }
    public static MemoryAddress sk_OPENSSL_STRING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_dup$MH, "sk_OPENSSL_STRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_deep_copy$MH,"sk_OPENSSL_STRING_deep_copy");
    }
    public static MemoryAddress sk_OPENSSL_STRING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_deep_copy$MH, "sk_OPENSSL_STRING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_STRING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_set_cmp_func$MH,"sk_OPENSSL_STRING_set_cmp_func");
    }
    public static MemoryAddress sk_OPENSSL_STRING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.sk_OPENSSL_STRING_set_cmp_func$MH, "sk_OPENSSL_STRING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$50.sk_OPENSSL_CSTRING_num$MH,"sk_OPENSSL_CSTRING_num");
    }
    public static int sk_OPENSSL_CSTRING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.sk_OPENSSL_CSTRING_num$MH, "sk_OPENSSL_CSTRING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_value$MH,"sk_OPENSSL_CSTRING_value");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_value$MH, "sk_OPENSSL_CSTRING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_new$MH,"sk_OPENSSL_CSTRING_new");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_new$MH, "sk_OPENSSL_CSTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_new_null$MH,"sk_OPENSSL_CSTRING_new_null");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_new_null$MH, "sk_OPENSSL_CSTRING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_new_reserve$MH,"sk_OPENSSL_CSTRING_new_reserve");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_new_reserve$MH, "sk_OPENSSL_CSTRING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_reserve$MH,"sk_OPENSSL_CSTRING_reserve");
    }
    public static int sk_OPENSSL_CSTRING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_reserve$MH, "sk_OPENSSL_CSTRING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_free$MH,"sk_OPENSSL_CSTRING_free");
    }
    public static void sk_OPENSSL_CSTRING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.sk_OPENSSL_CSTRING_free$MH, "sk_OPENSSL_CSTRING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_zero$MH,"sk_OPENSSL_CSTRING_zero");
    }
    public static void sk_OPENSSL_CSTRING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_zero$MH, "sk_OPENSSL_CSTRING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_delete$MH,"sk_OPENSSL_CSTRING_delete");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_delete$MH, "sk_OPENSSL_CSTRING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_delete_ptr$MH,"sk_OPENSSL_CSTRING_delete_ptr");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_delete_ptr$MH, "sk_OPENSSL_CSTRING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_push$MH,"sk_OPENSSL_CSTRING_push");
    }
    public static int sk_OPENSSL_CSTRING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_push$MH, "sk_OPENSSL_CSTRING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_unshift$MH,"sk_OPENSSL_CSTRING_unshift");
    }
    public static int sk_OPENSSL_CSTRING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_unshift$MH, "sk_OPENSSL_CSTRING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_pop$MH,"sk_OPENSSL_CSTRING_pop");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.sk_OPENSSL_CSTRING_pop$MH, "sk_OPENSSL_CSTRING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_shift$MH,"sk_OPENSSL_CSTRING_shift");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_shift$MH, "sk_OPENSSL_CSTRING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_pop_free$MH,"sk_OPENSSL_CSTRING_pop_free");
    }
    public static void sk_OPENSSL_CSTRING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_pop_free$MH, "sk_OPENSSL_CSTRING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_insert$MH,"sk_OPENSSL_CSTRING_insert");
    }
    public static int sk_OPENSSL_CSTRING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_insert$MH, "sk_OPENSSL_CSTRING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_set$MH,"sk_OPENSSL_CSTRING_set");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_set$MH, "sk_OPENSSL_CSTRING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_find$MH,"sk_OPENSSL_CSTRING_find");
    }
    public static int sk_OPENSSL_CSTRING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_find$MH, "sk_OPENSSL_CSTRING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_find_ex$MH,"sk_OPENSSL_CSTRING_find_ex");
    }
    public static int sk_OPENSSL_CSTRING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.sk_OPENSSL_CSTRING_find_ex$MH, "sk_OPENSSL_CSTRING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_sort$MH,"sk_OPENSSL_CSTRING_sort");
    }
    public static void sk_OPENSSL_CSTRING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_sort$MH, "sk_OPENSSL_CSTRING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_is_sorted$MH,"sk_OPENSSL_CSTRING_is_sorted");
    }
    public static int sk_OPENSSL_CSTRING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_is_sorted$MH, "sk_OPENSSL_CSTRING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_dup$MH,"sk_OPENSSL_CSTRING_dup");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_dup$MH, "sk_OPENSSL_CSTRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_deep_copy$MH,"sk_OPENSSL_CSTRING_deep_copy");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_deep_copy$MH, "sk_OPENSSL_CSTRING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_CSTRING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_set_cmp_func$MH,"sk_OPENSSL_CSTRING_set_cmp_func");
    }
    public static MemoryAddress sk_OPENSSL_CSTRING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.sk_OPENSSL_CSTRING_set_cmp_func$MH, "sk_OPENSSL_CSTRING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfAddress OPENSSL_BLOCK = ValueLayout.ADDRESS;
    public static MethodHandle sk_OPENSSL_BLOCK_num$MH() {
        return RuntimeHelper.requireNonNull(constants$55.sk_OPENSSL_BLOCK_num$MH,"sk_OPENSSL_BLOCK_num");
    }
    public static int sk_OPENSSL_BLOCK_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.sk_OPENSSL_BLOCK_num$MH, "sk_OPENSSL_BLOCK_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_value$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_value$MH,"sk_OPENSSL_BLOCK_value");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_value$MH, "sk_OPENSSL_BLOCK_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_new$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_new$MH,"sk_OPENSSL_BLOCK_new");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_new$MH, "sk_OPENSSL_BLOCK_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_new_null$MH,"sk_OPENSSL_BLOCK_new_null");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_new_null$MH, "sk_OPENSSL_BLOCK_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_new_reserve$MH,"sk_OPENSSL_BLOCK_new_reserve");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_new_reserve$MH, "sk_OPENSSL_BLOCK_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_reserve$MH,"sk_OPENSSL_BLOCK_reserve");
    }
    public static int sk_OPENSSL_BLOCK_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_reserve$MH, "sk_OPENSSL_BLOCK_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_free$MH() {
        return RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_free$MH,"sk_OPENSSL_BLOCK_free");
    }
    public static void sk_OPENSSL_BLOCK_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.sk_OPENSSL_BLOCK_free$MH, "sk_OPENSSL_BLOCK_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_zero$MH,"sk_OPENSSL_BLOCK_zero");
    }
    public static void sk_OPENSSL_BLOCK_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_zero$MH, "sk_OPENSSL_BLOCK_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_delete$MH,"sk_OPENSSL_BLOCK_delete");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_delete$MH, "sk_OPENSSL_BLOCK_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_delete_ptr$MH,"sk_OPENSSL_BLOCK_delete_ptr");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_delete_ptr$MH, "sk_OPENSSL_BLOCK_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_push$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_push$MH,"sk_OPENSSL_BLOCK_push");
    }
    public static int sk_OPENSSL_BLOCK_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_push$MH, "sk_OPENSSL_BLOCK_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_unshift$MH,"sk_OPENSSL_BLOCK_unshift");
    }
    public static int sk_OPENSSL_BLOCK_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_unshift$MH, "sk_OPENSSL_BLOCK_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_pop$MH,"sk_OPENSSL_BLOCK_pop");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.sk_OPENSSL_BLOCK_pop$MH, "sk_OPENSSL_BLOCK_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_shift$MH,"sk_OPENSSL_BLOCK_shift");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_shift$MH, "sk_OPENSSL_BLOCK_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_pop_free$MH,"sk_OPENSSL_BLOCK_pop_free");
    }
    public static void sk_OPENSSL_BLOCK_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_pop_free$MH, "sk_OPENSSL_BLOCK_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_insert$MH,"sk_OPENSSL_BLOCK_insert");
    }
    public static int sk_OPENSSL_BLOCK_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_insert$MH, "sk_OPENSSL_BLOCK_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_set$MH() {
        return RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_set$MH,"sk_OPENSSL_BLOCK_set");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_set$MH, "sk_OPENSSL_BLOCK_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_find$MH() {
        return RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_find$MH,"sk_OPENSSL_BLOCK_find");
    }
    public static int sk_OPENSSL_BLOCK_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_find$MH, "sk_OPENSSL_BLOCK_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_find_ex$MH,"sk_OPENSSL_BLOCK_find_ex");
    }
    public static int sk_OPENSSL_BLOCK_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.sk_OPENSSL_BLOCK_find_ex$MH, "sk_OPENSSL_BLOCK_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_sort$MH,"sk_OPENSSL_BLOCK_sort");
    }
    public static void sk_OPENSSL_BLOCK_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_sort$MH, "sk_OPENSSL_BLOCK_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_is_sorted$MH,"sk_OPENSSL_BLOCK_is_sorted");
    }
    public static int sk_OPENSSL_BLOCK_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_is_sorted$MH, "sk_OPENSSL_BLOCK_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_dup$MH,"sk_OPENSSL_BLOCK_dup");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_dup$MH, "sk_OPENSSL_BLOCK_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_deep_copy$MH,"sk_OPENSSL_BLOCK_deep_copy");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_deep_copy$MH, "sk_OPENSSL_BLOCK_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_OPENSSL_BLOCK_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_set_cmp_func$MH,"sk_OPENSSL_BLOCK_set_cmp_func");
    }
    public static MemoryAddress sk_OPENSSL_BLOCK_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.sk_OPENSSL_BLOCK_set_cmp_func$MH, "sk_OPENSSL_BLOCK_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfInt ASN1_BOOLEAN = JAVA_INT;
    public static ValueLayout.OfInt ASN1_NULL = JAVA_INT;
    public static ValueLayout.OfLong ossl_intmax_t = JAVA_LONG;
    public static MethodHandle ERR_load_CRYPTO_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$59.ERR_load_CRYPTO_strings$MH,"ERR_load_CRYPTO_strings");
    }
    public static int ERR_load_CRYPTO_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.ERR_load_CRYPTO_strings$MH, "ERR_load_CRYPTO_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_lock_new$MH() {
        return RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_lock_new$MH,"CRYPTO_THREAD_lock_new");
    }
    public static MemoryAddress CRYPTO_THREAD_lock_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_lock_new$MH, "CRYPTO_THREAD_lock_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_read_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_read_lock$MH,"CRYPTO_THREAD_read_lock");
    }
    public static int CRYPTO_THREAD_read_lock ( Addressable lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_read_lock$MH, "CRYPTO_THREAD_read_lock");
        try {
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_write_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_write_lock$MH,"CRYPTO_THREAD_write_lock");
    }
    public static int CRYPTO_THREAD_write_lock ( Addressable lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_write_lock$MH, "CRYPTO_THREAD_write_lock");
        try {
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_unlock$MH,"CRYPTO_THREAD_unlock");
    }
    public static int CRYPTO_THREAD_unlock ( Addressable lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_unlock$MH, "CRYPTO_THREAD_unlock");
        try {
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_lock_free$MH() {
        return RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_lock_free$MH,"CRYPTO_THREAD_lock_free");
    }
    public static void CRYPTO_THREAD_lock_free ( Addressable lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.CRYPTO_THREAD_lock_free$MH, "CRYPTO_THREAD_lock_free");
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_atomic_add$MH() {
        return RuntimeHelper.requireNonNull(constants$60.CRYPTO_atomic_add$MH,"CRYPTO_atomic_add");
    }
    public static int CRYPTO_atomic_add ( Addressable val,  int amount,  Addressable ret,  Addressable lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.CRYPTO_atomic_add$MH, "CRYPTO_atomic_add");
        try {
            return (int)mh$.invokeExact(val, amount, ret, lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_num$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sk_void_num$MH,"sk_void_num");
    }
    public static int sk_void_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.sk_void_num$MH, "sk_void_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_value$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sk_void_value$MH,"sk_void_value");
    }
    public static MemoryAddress sk_void_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.sk_void_value$MH, "sk_void_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_new$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sk_void_new$MH,"sk_void_new");
    }
    public static MemoryAddress sk_void_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.sk_void_new$MH, "sk_void_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sk_void_new_null$MH,"sk_void_new_null");
    }
    public static MemoryAddress sk_void_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.sk_void_new_null$MH, "sk_void_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sk_void_new_reserve$MH,"sk_void_new_reserve");
    }
    public static MemoryAddress sk_void_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.sk_void_new_reserve$MH, "sk_void_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$62.sk_void_reserve$MH,"sk_void_reserve");
    }
    public static int sk_void_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.sk_void_reserve$MH, "sk_void_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_free$MH() {
        return RuntimeHelper.requireNonNull(constants$63.sk_void_free$MH,"sk_void_free");
    }
    public static void sk_void_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.sk_void_free$MH, "sk_void_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$63.sk_void_zero$MH,"sk_void_zero");
    }
    public static void sk_void_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.sk_void_zero$MH, "sk_void_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$63.sk_void_delete$MH,"sk_void_delete");
    }
    public static MemoryAddress sk_void_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.sk_void_delete$MH, "sk_void_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$63.sk_void_delete_ptr$MH,"sk_void_delete_ptr");
    }
    public static MemoryAddress sk_void_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.sk_void_delete_ptr$MH, "sk_void_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_push$MH() {
        return RuntimeHelper.requireNonNull(constants$63.sk_void_push$MH,"sk_void_push");
    }
    public static int sk_void_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.sk_void_push$MH, "sk_void_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$63.sk_void_unshift$MH,"sk_void_unshift");
    }
    public static int sk_void_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.sk_void_unshift$MH, "sk_void_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$64.sk_void_pop$MH,"sk_void_pop");
    }
    public static MemoryAddress sk_void_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.sk_void_pop$MH, "sk_void_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$64.sk_void_shift$MH,"sk_void_shift");
    }
    public static MemoryAddress sk_void_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.sk_void_shift$MH, "sk_void_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$64.sk_void_pop_free$MH,"sk_void_pop_free");
    }
    public static void sk_void_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.sk_void_pop_free$MH, "sk_void_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$64.sk_void_insert$MH,"sk_void_insert");
    }
    public static int sk_void_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.sk_void_insert$MH, "sk_void_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_set$MH() {
        return RuntimeHelper.requireNonNull(constants$64.sk_void_set$MH,"sk_void_set");
    }
    public static MemoryAddress sk_void_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.sk_void_set$MH, "sk_void_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_find$MH() {
        return RuntimeHelper.requireNonNull(constants$64.sk_void_find$MH,"sk_void_find");
    }
    public static int sk_void_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.sk_void_find$MH, "sk_void_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$65.sk_void_find_ex$MH,"sk_void_find_ex");
    }
    public static int sk_void_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.sk_void_find_ex$MH, "sk_void_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$65.sk_void_sort$MH,"sk_void_sort");
    }
    public static void sk_void_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.sk_void_sort$MH, "sk_void_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$65.sk_void_is_sorted$MH,"sk_void_is_sorted");
    }
    public static int sk_void_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.sk_void_is_sorted$MH, "sk_void_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$65.sk_void_dup$MH,"sk_void_dup");
    }
    public static MemoryAddress sk_void_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.sk_void_dup$MH, "sk_void_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$65.sk_void_deep_copy$MH,"sk_void_deep_copy");
    }
    public static MemoryAddress sk_void_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.sk_void_deep_copy$MH, "sk_void_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_void_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$65.sk_void_set_cmp_func$MH,"sk_void_set_cmp_func");
    }
    public static MemoryAddress sk_void_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.sk_void_set_cmp_func$MH, "sk_void_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_mem_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$66.CRYPTO_mem_ctrl$MH,"CRYPTO_mem_ctrl");
    }
    public static int CRYPTO_mem_ctrl ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.CRYPTO_mem_ctrl$MH, "CRYPTO_mem_ctrl");
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$66.OPENSSL_strlcpy$MH,"OPENSSL_strlcpy");
    }
    public static long OPENSSL_strlcpy ( Addressable dst,  Addressable src,  long siz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.OPENSSL_strlcpy$MH, "OPENSSL_strlcpy");
        try {
            return (long)mh$.invokeExact(dst, src, siz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$66.OPENSSL_strlcat$MH,"OPENSSL_strlcat");
    }
    public static long OPENSSL_strlcat ( Addressable dst,  Addressable src,  long siz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.OPENSSL_strlcat$MH, "OPENSSL_strlcat");
        try {
            return (long)mh$.invokeExact(dst, src, siz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$66.OPENSSL_strnlen$MH,"OPENSSL_strnlen");
    }
    public static long OPENSSL_strnlen ( Addressable str,  long maxlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.OPENSSL_strnlen$MH, "OPENSSL_strnlen");
        try {
            return (long)mh$.invokeExact(str, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_buf2hexstr$MH() {
        return RuntimeHelper.requireNonNull(constants$66.OPENSSL_buf2hexstr$MH,"OPENSSL_buf2hexstr");
    }
    public static MemoryAddress OPENSSL_buf2hexstr ( Addressable buffer,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.OPENSSL_buf2hexstr$MH, "OPENSSL_buf2hexstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(buffer, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_hexstr2buf$MH() {
        return RuntimeHelper.requireNonNull(constants$66.OPENSSL_hexstr2buf$MH,"OPENSSL_hexstr2buf");
    }
    public static MemoryAddress OPENSSL_hexstr2buf ( Addressable str,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.OPENSSL_hexstr2buf$MH, "OPENSSL_hexstr2buf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_hexchar2int$MH() {
        return RuntimeHelper.requireNonNull(constants$67.OPENSSL_hexchar2int$MH,"OPENSSL_hexchar2int");
    }
    public static int OPENSSL_hexchar2int ( byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.OPENSSL_hexchar2int$MH, "OPENSSL_hexchar2int");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSSL_version_num$MH() {
        return RuntimeHelper.requireNonNull(constants$67.OpenSSL_version_num$MH,"OpenSSL_version_num");
    }
    public static long OpenSSL_version_num () {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.OpenSSL_version_num$MH, "OpenSSL_version_num");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSSL_version$MH() {
        return RuntimeHelper.requireNonNull(constants$67.OpenSSL_version$MH,"OpenSSL_version");
    }
    public static MemoryAddress OpenSSL_version ( int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.OpenSSL_version$MH, "OpenSSL_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_issetugid$MH() {
        return RuntimeHelper.requireNonNull(constants$67.OPENSSL_issetugid$MH,"OPENSSL_issetugid");
    }
    public static int OPENSSL_issetugid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.OPENSSL_issetugid$MH, "OPENSSL_issetugid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_get_ex_new_index$MH() {
        return RuntimeHelper.requireNonNull(constants$68.CRYPTO_get_ex_new_index$MH,"CRYPTO_get_ex_new_index");
    }
    public static int CRYPTO_get_ex_new_index ( int class_index,  long argl,  Addressable argp,  Addressable new_func,  Addressable dup_func,  Addressable free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.CRYPTO_get_ex_new_index$MH, "CRYPTO_get_ex_new_index");
        try {
            return (int)mh$.invokeExact(class_index, argl, argp, new_func, dup_func, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_free_ex_index$MH() {
        return RuntimeHelper.requireNonNull(constants$68.CRYPTO_free_ex_index$MH,"CRYPTO_free_ex_index");
    }
    public static int CRYPTO_free_ex_index ( int class_index,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.CRYPTO_free_ex_index$MH, "CRYPTO_free_ex_index");
        try {
            return (int)mh$.invokeExact(class_index, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_new_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.CRYPTO_new_ex_data$MH,"CRYPTO_new_ex_data");
    }
    public static int CRYPTO_new_ex_data ( int class_index,  Addressable obj,  Addressable ad) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.CRYPTO_new_ex_data$MH, "CRYPTO_new_ex_data");
        try {
            return (int)mh$.invokeExact(class_index, obj, ad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_dup_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.CRYPTO_dup_ex_data$MH,"CRYPTO_dup_ex_data");
    }
    public static int CRYPTO_dup_ex_data ( int class_index,  Addressable to,  Addressable from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.CRYPTO_dup_ex_data$MH, "CRYPTO_dup_ex_data");
        try {
            return (int)mh$.invokeExact(class_index, to, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_free_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.CRYPTO_free_ex_data$MH,"CRYPTO_free_ex_data");
    }
    public static void CRYPTO_free_ex_data ( int class_index,  Addressable obj,  Addressable ad) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.CRYPTO_free_ex_data$MH, "CRYPTO_free_ex_data");
        try {
            mh$.invokeExact(class_index, obj, ad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.CRYPTO_set_ex_data$MH,"CRYPTO_set_ex_data");
    }
    public static int CRYPTO_set_ex_data ( Addressable ad,  int idx,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.CRYPTO_set_ex_data$MH, "CRYPTO_set_ex_data");
        try {
            return (int)mh$.invokeExact(ad, idx, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.CRYPTO_get_ex_data$MH,"CRYPTO_get_ex_data");
    }
    public static MemoryAddress CRYPTO_get_ex_data ( Addressable ad,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.CRYPTO_get_ex_data$MH, "CRYPTO_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ad, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_set_mem_functions$MH() {
        return RuntimeHelper.requireNonNull(constants$70.CRYPTO_set_mem_functions$MH,"CRYPTO_set_mem_functions");
    }
    public static int CRYPTO_set_mem_functions ( Addressable m,  Addressable r,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.CRYPTO_set_mem_functions$MH, "CRYPTO_set_mem_functions");
        try {
            return (int)mh$.invokeExact(m, r, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_set_mem_debug$MH() {
        return RuntimeHelper.requireNonNull(constants$71.CRYPTO_set_mem_debug$MH,"CRYPTO_set_mem_debug");
    }
    public static int CRYPTO_set_mem_debug ( int flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.CRYPTO_set_mem_debug$MH, "CRYPTO_set_mem_debug");
        try {
            return (int)mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_get_mem_functions$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CRYPTO_get_mem_functions$MH,"CRYPTO_get_mem_functions");
    }
    public static void CRYPTO_get_mem_functions ( Addressable m,  Addressable r,  Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.CRYPTO_get_mem_functions$MH, "CRYPTO_get_mem_functions");
        try {
            mh$.invokeExact(m, r, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CRYPTO_malloc$MH,"CRYPTO_malloc");
    }
    public static MemoryAddress CRYPTO_malloc ( long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.CRYPTO_malloc$MH, "CRYPTO_malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_zalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CRYPTO_zalloc$MH,"CRYPTO_zalloc");
    }
    public static MemoryAddress CRYPTO_zalloc ( long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.CRYPTO_zalloc$MH, "CRYPTO_zalloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_memdup$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CRYPTO_memdup$MH,"CRYPTO_memdup");
    }
    public static MemoryAddress CRYPTO_memdup ( Addressable str,  long siz,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.CRYPTO_memdup$MH, "CRYPTO_memdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, siz, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$72.CRYPTO_strdup$MH,"CRYPTO_strdup");
    }
    public static MemoryAddress CRYPTO_strdup ( Addressable str,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.CRYPTO_strdup$MH, "CRYPTO_strdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CRYPTO_strndup$MH,"CRYPTO_strndup");
    }
    public static MemoryAddress CRYPTO_strndup ( Addressable str,  long s,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.CRYPTO_strndup$MH, "CRYPTO_strndup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, s, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CRYPTO_free$MH,"CRYPTO_free");
    }
    public static void CRYPTO_free ( Addressable ptr,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.CRYPTO_free$MH, "CRYPTO_free");
        try {
            mh$.invokeExact(ptr, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_clear_free$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CRYPTO_clear_free$MH,"CRYPTO_clear_free");
    }
    public static void CRYPTO_clear_free ( Addressable ptr,  long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.CRYPTO_clear_free$MH, "CRYPTO_clear_free");
        try {
            mh$.invokeExact(ptr, num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CRYPTO_realloc$MH,"CRYPTO_realloc");
    }
    public static MemoryAddress CRYPTO_realloc ( Addressable addr,  long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.CRYPTO_realloc$MH, "CRYPTO_realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(addr, num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_clear_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CRYPTO_clear_realloc$MH,"CRYPTO_clear_realloc");
    }
    public static MemoryAddress CRYPTO_clear_realloc ( Addressable addr,  long old_num,  long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.CRYPTO_clear_realloc$MH, "CRYPTO_clear_realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(addr, old_num, num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_malloc_init$MH() {
        return RuntimeHelper.requireNonNull(constants$73.CRYPTO_secure_malloc_init$MH,"CRYPTO_secure_malloc_init");
    }
    public static int CRYPTO_secure_malloc_init ( long sz,  int minsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.CRYPTO_secure_malloc_init$MH, "CRYPTO_secure_malloc_init");
        try {
            return (int)mh$.invokeExact(sz, minsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_malloc_done$MH() {
        return RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_malloc_done$MH,"CRYPTO_secure_malloc_done");
    }
    public static int CRYPTO_secure_malloc_done () {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_malloc_done$MH, "CRYPTO_secure_malloc_done");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_malloc$MH,"CRYPTO_secure_malloc");
    }
    public static MemoryAddress CRYPTO_secure_malloc ( long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_malloc$MH, "CRYPTO_secure_malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_zalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_zalloc$MH,"CRYPTO_secure_zalloc");
    }
    public static MemoryAddress CRYPTO_secure_zalloc ( long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_zalloc$MH, "CRYPTO_secure_zalloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_free$MH() {
        return RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_free$MH,"CRYPTO_secure_free");
    }
    public static void CRYPTO_secure_free ( Addressable ptr,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_free$MH, "CRYPTO_secure_free");
        try {
            mh$.invokeExact(ptr, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_clear_free$MH() {
        return RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_clear_free$MH,"CRYPTO_secure_clear_free");
    }
    public static void CRYPTO_secure_clear_free ( Addressable ptr,  long num,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_clear_free$MH, "CRYPTO_secure_clear_free");
        try {
            mh$.invokeExact(ptr, num, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_allocated$MH() {
        return RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_allocated$MH,"CRYPTO_secure_allocated");
    }
    public static int CRYPTO_secure_allocated ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.CRYPTO_secure_allocated$MH, "CRYPTO_secure_allocated");
        try {
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_malloc_initialized$MH() {
        return RuntimeHelper.requireNonNull(constants$75.CRYPTO_secure_malloc_initialized$MH,"CRYPTO_secure_malloc_initialized");
    }
    public static int CRYPTO_secure_malloc_initialized () {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.CRYPTO_secure_malloc_initialized$MH, "CRYPTO_secure_malloc_initialized");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_actual_size$MH() {
        return RuntimeHelper.requireNonNull(constants$75.CRYPTO_secure_actual_size$MH,"CRYPTO_secure_actual_size");
    }
    public static long CRYPTO_secure_actual_size ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.CRYPTO_secure_actual_size$MH, "CRYPTO_secure_actual_size");
        try {
            return (long)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_secure_used$MH() {
        return RuntimeHelper.requireNonNull(constants$75.CRYPTO_secure_used$MH,"CRYPTO_secure_used");
    }
    public static long CRYPTO_secure_used () {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.CRYPTO_secure_used$MH, "CRYPTO_secure_used");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_cleanse$MH() {
        return RuntimeHelper.requireNonNull(constants$75.OPENSSL_cleanse$MH,"OPENSSL_cleanse");
    }
    public static void OPENSSL_cleanse ( Addressable ptr,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.OPENSSL_cleanse$MH, "OPENSSL_cleanse");
        try {
            mh$.invokeExact(ptr, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_die$MH() {
        return RuntimeHelper.requireNonNull(constants$75.OPENSSL_die$MH,"OPENSSL_die");
    }
    public static void OPENSSL_die ( Addressable assertion,  Addressable file,  int line) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.OPENSSL_die$MH, "OPENSSL_die");
        try {
            mh$.invokeExact(assertion, file, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_isservice$MH() {
        return RuntimeHelper.requireNonNull(constants$75.OPENSSL_isservice$MH,"OPENSSL_isservice");
    }
    public static int OPENSSL_isservice () {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.OPENSSL_isservice$MH, "OPENSSL_isservice");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FIPS_mode$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FIPS_mode$MH,"FIPS_mode");
    }
    public static int FIPS_mode () {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.FIPS_mode$MH, "FIPS_mode");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FIPS_mode_set$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FIPS_mode_set$MH,"FIPS_mode_set");
    }
    public static int FIPS_mode_set ( int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.FIPS_mode_set$MH, "FIPS_mode_set");
        try {
            return (int)mh$.invokeExact(r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FIPS_selftest_check$MH() {
        return RuntimeHelper.requireNonNull(constants$76.FIPS_selftest_check$MH,"FIPS_selftest_check");
    }
    public static void FIPS_selftest_check () {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.FIPS_selftest_check$MH, "FIPS_selftest_check");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_init$MH() {
        return RuntimeHelper.requireNonNull(constants$76.OPENSSL_init$MH,"OPENSSL_init");
    }
    public static void OPENSSL_init () {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.OPENSSL_init$MH, "OPENSSL_init");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_fork_prepare$MH() {
        return RuntimeHelper.requireNonNull(constants$76.OPENSSL_fork_prepare$MH,"OPENSSL_fork_prepare");
    }
    public static void OPENSSL_fork_prepare () {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.OPENSSL_fork_prepare$MH, "OPENSSL_fork_prepare");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_fork_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$76.OPENSSL_fork_parent$MH,"OPENSSL_fork_parent");
    }
    public static void OPENSSL_fork_parent () {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.OPENSSL_fork_parent$MH, "OPENSSL_fork_parent");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_fork_child$MH() {
        return RuntimeHelper.requireNonNull(constants$77.OPENSSL_fork_child$MH,"OPENSSL_fork_child");
    }
    public static void OPENSSL_fork_child () {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.OPENSSL_fork_child$MH, "OPENSSL_fork_child");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$77.OPENSSL_gmtime$MH,"OPENSSL_gmtime");
    }
    public static MemoryAddress OPENSSL_gmtime ( Addressable timer,  Addressable result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.OPENSSL_gmtime$MH, "OPENSSL_gmtime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(timer, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_gmtime_adj$MH() {
        return RuntimeHelper.requireNonNull(constants$77.OPENSSL_gmtime_adj$MH,"OPENSSL_gmtime_adj");
    }
    public static int OPENSSL_gmtime_adj ( Addressable tm,  int offset_day,  long offset_sec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.OPENSSL_gmtime_adj$MH, "OPENSSL_gmtime_adj");
        try {
            return (int)mh$.invokeExact(tm, offset_day, offset_sec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_gmtime_diff$MH() {
        return RuntimeHelper.requireNonNull(constants$77.OPENSSL_gmtime_diff$MH,"OPENSSL_gmtime_diff");
    }
    public static int OPENSSL_gmtime_diff ( Addressable pday,  Addressable psec,  Addressable from,  Addressable to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.OPENSSL_gmtime_diff$MH, "OPENSSL_gmtime_diff");
        try {
            return (int)mh$.invokeExact(pday, psec, from, to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$77.CRYPTO_memcmp$MH,"CRYPTO_memcmp");
    }
    public static int CRYPTO_memcmp ( Addressable in_a,  Addressable in_b,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.CRYPTO_memcmp$MH, "CRYPTO_memcmp");
        try {
            return (int)mh$.invokeExact(in_a, in_b, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$77.OPENSSL_cleanup$MH,"OPENSSL_cleanup");
    }
    public static void OPENSSL_cleanup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.OPENSSL_cleanup$MH, "OPENSSL_cleanup");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_init_crypto$MH() {
        return RuntimeHelper.requireNonNull(constants$78.OPENSSL_init_crypto$MH,"OPENSSL_init_crypto");
    }
    public static int OPENSSL_init_crypto ( long opts,  Addressable settings) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.OPENSSL_init_crypto$MH, "OPENSSL_init_crypto");
        try {
            return (int)mh$.invokeExact(opts, settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$78.OPENSSL_atexit$MH,"OPENSSL_atexit");
    }
    public static int OPENSSL_atexit ( Addressable handler) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.OPENSSL_atexit$MH, "OPENSSL_atexit");
        try {
            return (int)mh$.invokeExact(handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_thread_stop$MH() {
        return RuntimeHelper.requireNonNull(constants$78.OPENSSL_thread_stop$MH,"OPENSSL_thread_stop");
    }
    public static void OPENSSL_thread_stop () {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.OPENSSL_thread_stop$MH, "OPENSSL_thread_stop");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_INIT_new$MH() {
        return RuntimeHelper.requireNonNull(constants$78.OPENSSL_INIT_new$MH,"OPENSSL_INIT_new");
    }
    public static MemoryAddress OPENSSL_INIT_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.OPENSSL_INIT_new$MH, "OPENSSL_INIT_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_INIT_set_config_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_set_config_filename$MH,"OPENSSL_INIT_set_config_filename");
    }
    public static int OPENSSL_INIT_set_config_filename ( Addressable settings,  Addressable config_filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_set_config_filename$MH, "OPENSSL_INIT_set_config_filename");
        try {
            return (int)mh$.invokeExact(settings, config_filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_INIT_set_config_file_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_set_config_file_flags$MH,"OPENSSL_INIT_set_config_file_flags");
    }
    public static void OPENSSL_INIT_set_config_file_flags ( Addressable settings,  long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_set_config_file_flags$MH, "OPENSSL_INIT_set_config_file_flags");
        try {
            mh$.invokeExact(settings, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_INIT_set_config_appname$MH() {
        return RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_set_config_appname$MH,"OPENSSL_INIT_set_config_appname");
    }
    public static int OPENSSL_INIT_set_config_appname ( Addressable settings,  Addressable config_appname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_set_config_appname$MH, "OPENSSL_INIT_set_config_appname");
        try {
            return (int)mh$.invokeExact(settings, config_appname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OPENSSL_INIT_free$MH() {
        return RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_free$MH,"OPENSSL_INIT_free");
    }
    public static void OPENSSL_INIT_free ( Addressable settings) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.OPENSSL_INIT_free$MH, "OPENSSL_INIT_free");
        try {
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$79.__sched_cpucount$MH,"__sched_cpucount");
    }
    public static int __sched_cpucount ( long __setsize,  Addressable __setp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.__sched_cpucount$MH, "__sched_cpucount");
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$79.__sched_cpualloc$MH,"__sched_cpualloc");
    }
    public static MemoryAddress __sched_cpualloc ( long __count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.__sched_cpualloc$MH, "__sched_cpualloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$80.__sched_cpufree$MH,"__sched_cpufree");
    }
    public static void __sched_cpufree ( Addressable __set) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.__sched_cpufree$MH, "__sched_cpufree");
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$80.sched_setparam$MH,"sched_setparam");
    }
    public static int sched_setparam ( int __pid,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.sched_setparam$MH, "sched_setparam");
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$80.sched_getparam$MH,"sched_getparam");
    }
    public static int sched_getparam ( int __pid,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.sched_getparam$MH, "sched_getparam");
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$80.sched_setscheduler$MH,"sched_setscheduler");
    }
    public static int sched_setscheduler ( int __pid,  int __policy,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.sched_setscheduler$MH, "sched_setscheduler");
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$80.sched_getscheduler$MH,"sched_getscheduler");
    }
    public static int sched_getscheduler ( int __pid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.sched_getscheduler$MH, "sched_getscheduler");
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$80.sched_yield$MH,"sched_yield");
    }
    public static int sched_yield () {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.sched_yield$MH, "sched_yield");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$81.sched_get_priority_max$MH,"sched_get_priority_max");
    }
    public static int sched_get_priority_max ( int __algorithm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.sched_get_priority_max$MH, "sched_get_priority_max");
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$81.sched_get_priority_min$MH,"sched_get_priority_min");
    }
    public static int sched_get_priority_min ( int __algorithm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.sched_get_priority_min$MH, "sched_get_priority_min");
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$81.sched_rr_get_interval$MH,"sched_rr_get_interval");
    }
    public static int sched_rr_get_interval ( int __pid,  Addressable __t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.sched_rr_get_interval$MH, "sched_rr_get_interval");
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int PTHREAD_CREATE_JOINABLE() {
        return (int)0L;
    }
    public static int PTHREAD_CREATE_DETACHED() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_TIMED_NP() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_RECURSIVE_NP() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ERRORCHECK_NP() {
        return (int)2L;
    }
    public static int PTHREAD_MUTEX_ADAPTIVE_NP() {
        return (int)3L;
    }
    public static int PTHREAD_MUTEX_NORMAL() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_RECURSIVE() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ERRORCHECK() {
        return (int)2L;
    }
    public static int PTHREAD_MUTEX_DEFAULT() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_STALLED() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_STALLED_NP() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_ROBUST() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ROBUST_NP() {
        return (int)1L;
    }
    public static int PTHREAD_PRIO_NONE() {
        return (int)0L;
    }
    public static int PTHREAD_PRIO_INHERIT() {
        return (int)1L;
    }
    public static int PTHREAD_PRIO_PROTECT() {
        return (int)2L;
    }
    public static int PTHREAD_RWLOCK_PREFER_READER_NP() {
        return (int)0L;
    }
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NP() {
        return (int)1L;
    }
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP() {
        return (int)2L;
    }
    public static int PTHREAD_RWLOCK_DEFAULT_NP() {
        return (int)0L;
    }
    public static int PTHREAD_INHERIT_SCHED() {
        return (int)0L;
    }
    public static int PTHREAD_EXPLICIT_SCHED() {
        return (int)1L;
    }
    public static int PTHREAD_SCOPE_SYSTEM() {
        return (int)0L;
    }
    public static int PTHREAD_SCOPE_PROCESS() {
        return (int)1L;
    }
    public static int PTHREAD_PROCESS_PRIVATE() {
        return (int)0L;
    }
    public static int PTHREAD_PROCESS_SHARED() {
        return (int)1L;
    }
    public static int PTHREAD_CANCEL_ENABLE() {
        return (int)0L;
    }
    public static int PTHREAD_CANCEL_DISABLE() {
        return (int)1L;
    }
    public static int PTHREAD_CANCEL_DEFERRED() {
        return (int)0L;
    }
    public static int PTHREAD_CANCEL_ASYNCHRONOUS() {
        return (int)1L;
    }
    public static MethodHandle pthread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_create$MH,"pthread_create");
    }
    public static int pthread_create ( Addressable __newthread,  Addressable __attr,  Addressable __start_routine,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.pthread_create$MH, "pthread_create");
        try {
            return (int)mh$.invokeExact(__newthread, __attr, __start_routine, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_exit$MH,"pthread_exit");
    }
    public static void pthread_exit ( Addressable __retval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.pthread_exit$MH, "pthread_exit");
        try {
            mh$.invokeExact(__retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_join$MH,"pthread_join");
    }
    public static int pthread_join ( long __th,  Addressable __thread_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.pthread_join$MH, "pthread_join");
        try {
            return (int)mh$.invokeExact(__th, __thread_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_detach$MH,"pthread_detach");
    }
    public static int pthread_detach ( long __th) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.pthread_detach$MH, "pthread_detach");
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_self$MH,"pthread_self");
    }
    public static long pthread_self () {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.pthread_self$MH, "pthread_self");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_equal$MH,"pthread_equal");
    }
    public static int pthread_equal ( long __thread1,  long __thread2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.pthread_equal$MH, "pthread_equal");
        try {
            return (int)mh$.invokeExact(__thread1, __thread2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_attr_init$MH,"pthread_attr_init");
    }
    public static int pthread_attr_init ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.pthread_attr_init$MH, "pthread_attr_init");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_attr_destroy$MH,"pthread_attr_destroy");
    }
    public static int pthread_attr_destroy ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.pthread_attr_destroy$MH, "pthread_attr_destroy");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_attr_getdetachstate$MH,"pthread_attr_getdetachstate");
    }
    public static int pthread_attr_getdetachstate ( Addressable __attr,  Addressable __detachstate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.pthread_attr_getdetachstate$MH, "pthread_attr_getdetachstate");
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_attr_setdetachstate$MH,"pthread_attr_setdetachstate");
    }
    public static int pthread_attr_setdetachstate ( Addressable __attr,  int __detachstate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.pthread_attr_setdetachstate$MH, "pthread_attr_setdetachstate");
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_attr_getguardsize$MH,"pthread_attr_getguardsize");
    }
    public static int pthread_attr_getguardsize ( Addressable __attr,  Addressable __guardsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.pthread_attr_getguardsize$MH, "pthread_attr_getguardsize");
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_attr_setguardsize$MH,"pthread_attr_setguardsize");
    }
    public static int pthread_attr_setguardsize ( Addressable __attr,  long __guardsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.pthread_attr_setguardsize$MH, "pthread_attr_setguardsize");
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_attr_getschedparam$MH,"pthread_attr_getschedparam");
    }
    public static int pthread_attr_getschedparam ( Addressable __attr,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.pthread_attr_getschedparam$MH, "pthread_attr_getschedparam");
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_attr_setschedparam$MH,"pthread_attr_setschedparam");
    }
    public static int pthread_attr_setschedparam ( Addressable __attr,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.pthread_attr_setschedparam$MH, "pthread_attr_setschedparam");
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_attr_getschedpolicy$MH,"pthread_attr_getschedpolicy");
    }
    public static int pthread_attr_getschedpolicy ( Addressable __attr,  Addressable __policy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.pthread_attr_getschedpolicy$MH, "pthread_attr_getschedpolicy");
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_attr_setschedpolicy$MH,"pthread_attr_setschedpolicy");
    }
    public static int pthread_attr_setschedpolicy ( Addressable __attr,  int __policy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.pthread_attr_setschedpolicy$MH, "pthread_attr_setschedpolicy");
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_attr_getinheritsched$MH,"pthread_attr_getinheritsched");
    }
    public static int pthread_attr_getinheritsched ( Addressable __attr,  Addressable __inherit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.pthread_attr_getinheritsched$MH, "pthread_attr_getinheritsched");
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_attr_setinheritsched$MH,"pthread_attr_setinheritsched");
    }
    public static int pthread_attr_setinheritsched ( Addressable __attr,  int __inherit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.pthread_attr_setinheritsched$MH, "pthread_attr_setinheritsched");
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getscope$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_attr_getscope$MH,"pthread_attr_getscope");
    }
    public static int pthread_attr_getscope ( Addressable __attr,  Addressable __scope) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.pthread_attr_getscope$MH, "pthread_attr_getscope");
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setscope$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_attr_setscope$MH,"pthread_attr_setscope");
    }
    public static int pthread_attr_setscope ( Addressable __attr,  int __scope) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.pthread_attr_setscope$MH, "pthread_attr_setscope");
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_attr_getstackaddr$MH,"pthread_attr_getstackaddr");
    }
    public static int pthread_attr_getstackaddr ( Addressable __attr,  Addressable __stackaddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.pthread_attr_getstackaddr$MH, "pthread_attr_getstackaddr");
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_attr_setstackaddr$MH,"pthread_attr_setstackaddr");
    }
    public static int pthread_attr_setstackaddr ( Addressable __attr,  Addressable __stackaddr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.pthread_attr_setstackaddr$MH, "pthread_attr_setstackaddr");
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_attr_getstacksize$MH,"pthread_attr_getstacksize");
    }
    public static int pthread_attr_getstacksize ( Addressable __attr,  Addressable __stacksize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.pthread_attr_getstacksize$MH, "pthread_attr_getstacksize");
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_attr_setstacksize$MH,"pthread_attr_setstacksize");
    }
    public static int pthread_attr_setstacksize ( Addressable __attr,  long __stacksize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.pthread_attr_setstacksize$MH, "pthread_attr_setstacksize");
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstack$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_attr_getstack$MH,"pthread_attr_getstack");
    }
    public static int pthread_attr_getstack ( Addressable __attr,  Addressable __stackaddr,  Addressable __stacksize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.pthread_attr_getstack$MH, "pthread_attr_getstack");
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstack$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_attr_setstack$MH,"pthread_attr_setstack");
    }
    public static int pthread_attr_setstack ( Addressable __attr,  Addressable __stackaddr,  long __stacksize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.pthread_attr_setstack$MH, "pthread_attr_setstack");
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_setschedparam$MH,"pthread_setschedparam");
    }
    public static int pthread_setschedparam ( long __target_thread,  int __policy,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.pthread_setschedparam$MH, "pthread_setschedparam");
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_getschedparam$MH,"pthread_getschedparam");
    }
    public static int pthread_getschedparam ( long __target_thread,  Addressable __policy,  Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.pthread_getschedparam$MH, "pthread_getschedparam");
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedprio$MH() {
        return RuntimeHelper.requireNonNull(constants$86.pthread_setschedprio$MH,"pthread_setschedprio");
    }
    public static int pthread_setschedprio ( long __target_thread,  int __prio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.pthread_setschedprio$MH, "pthread_setschedprio");
        try {
            return (int)mh$.invokeExact(__target_thread, __prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_once$MH() {
        return RuntimeHelper.requireNonNull(constants$87.pthread_once$MH,"pthread_once");
    }
    public static int pthread_once ( Addressable __once_control,  Addressable __init_routine) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.pthread_once$MH, "pthread_once");
        try {
            return (int)mh$.invokeExact(__once_control, __init_routine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcancelstate$MH() {
        return RuntimeHelper.requireNonNull(constants$87.pthread_setcancelstate$MH,"pthread_setcancelstate");
    }
    public static int pthread_setcancelstate ( int __state,  Addressable __oldstate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.pthread_setcancelstate$MH, "pthread_setcancelstate");
        try {
            return (int)mh$.invokeExact(__state, __oldstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcanceltype$MH() {
        return RuntimeHelper.requireNonNull(constants$87.pthread_setcanceltype$MH,"pthread_setcanceltype");
    }
    public static int pthread_setcanceltype ( int __type,  Addressable __oldtype) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.pthread_setcanceltype$MH, "pthread_setcanceltype");
        try {
            return (int)mh$.invokeExact(__type, __oldtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$87.pthread_cancel$MH,"pthread_cancel");
    }
    public static int pthread_cancel ( long __th) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.pthread_cancel$MH, "pthread_cancel");
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_testcancel$MH() {
        return RuntimeHelper.requireNonNull(constants$87.pthread_testcancel$MH,"pthread_testcancel");
    }
    public static void pthread_testcancel () {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.pthread_testcancel$MH, "pthread_testcancel");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_register_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$87.__pthread_register_cancel$MH,"__pthread_register_cancel");
    }
    public static void __pthread_register_cancel ( Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.__pthread_register_cancel$MH, "__pthread_register_cancel");
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unregister_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$88.__pthread_unregister_cancel$MH,"__pthread_unregister_cancel");
    }
    public static void __pthread_unregister_cancel ( Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.__pthread_unregister_cancel$MH, "__pthread_unregister_cancel");
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unwind_next$MH() {
        return RuntimeHelper.requireNonNull(constants$88.__pthread_unwind_next$MH,"__pthread_unwind_next");
    }
    public static void __pthread_unwind_next ( Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.__pthread_unwind_next$MH, "__pthread_unwind_next");
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sigsetjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$88.__sigsetjmp$MH,"__sigsetjmp");
    }
    public static int __sigsetjmp ( Addressable __env,  int __savemask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.__sigsetjmp$MH, "__sigsetjmp");
        try {
            return (int)mh$.invokeExact(__env, __savemask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$88.pthread_mutex_init$MH,"pthread_mutex_init");
    }
    public static int pthread_mutex_init ( Addressable __mutex,  Addressable __mutexattr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.pthread_mutex_init$MH, "pthread_mutex_init");
        try {
            return (int)mh$.invokeExact(__mutex, __mutexattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$88.pthread_mutex_destroy$MH,"pthread_mutex_destroy");
    }
    public static int pthread_mutex_destroy ( Addressable __mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.pthread_mutex_destroy$MH, "pthread_mutex_destroy");
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$88.pthread_mutex_trylock$MH,"pthread_mutex_trylock");
    }
    public static int pthread_mutex_trylock ( Addressable __mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.pthread_mutex_trylock$MH, "pthread_mutex_trylock");
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$89.pthread_mutex_lock$MH,"pthread_mutex_lock");
    }
    public static int pthread_mutex_lock ( Addressable __mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.pthread_mutex_lock$MH, "pthread_mutex_lock");
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_timedlock$MH() {
        return RuntimeHelper.requireNonNull(constants$89.pthread_mutex_timedlock$MH,"pthread_mutex_timedlock");
    }
    public static int pthread_mutex_timedlock ( Addressable __mutex,  Addressable __abstime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.pthread_mutex_timedlock$MH, "pthread_mutex_timedlock");
        try {
            return (int)mh$.invokeExact(__mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$89.pthread_mutex_unlock$MH,"pthread_mutex_unlock");
    }
    public static int pthread_mutex_unlock ( Addressable __mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.pthread_mutex_unlock$MH, "pthread_mutex_unlock");
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$89.pthread_mutex_getprioceiling$MH,"pthread_mutex_getprioceiling");
    }
    public static int pthread_mutex_getprioceiling ( Addressable __mutex,  Addressable __prioceiling) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.pthread_mutex_getprioceiling$MH, "pthread_mutex_getprioceiling");
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$89.pthread_mutex_setprioceiling$MH,"pthread_mutex_setprioceiling");
    }
    public static int pthread_mutex_setprioceiling ( Addressable __mutex,  int __prioceiling,  Addressable __old_ceiling) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.pthread_mutex_setprioceiling$MH, "pthread_mutex_setprioceiling");
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling, __old_ceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_consistent$MH() {
        return RuntimeHelper.requireNonNull(constants$89.pthread_mutex_consistent$MH,"pthread_mutex_consistent");
    }
    public static int pthread_mutex_consistent ( Addressable __mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.pthread_mutex_consistent$MH, "pthread_mutex_consistent");
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_init$MH,"pthread_mutexattr_init");
    }
    public static int pthread_mutexattr_init ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_init$MH, "pthread_mutexattr_init");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_destroy$MH,"pthread_mutexattr_destroy");
    }
    public static int pthread_mutexattr_destroy ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_destroy$MH, "pthread_mutexattr_destroy");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_getpshared$MH,"pthread_mutexattr_getpshared");
    }
    public static int pthread_mutexattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_getpshared$MH, "pthread_mutexattr_getpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_setpshared$MH,"pthread_mutexattr_setpshared");
    }
    public static int pthread_mutexattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_setpshared$MH, "pthread_mutexattr_setpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_gettype$MH() {
        return RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_gettype$MH,"pthread_mutexattr_gettype");
    }
    public static int pthread_mutexattr_gettype ( Addressable __attr,  Addressable __kind) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_gettype$MH, "pthread_mutexattr_gettype");
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_settype$MH() {
        return RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_settype$MH,"pthread_mutexattr_settype");
    }
    public static int pthread_mutexattr_settype ( Addressable __attr,  int __kind) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.pthread_mutexattr_settype$MH, "pthread_mutexattr_settype");
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_getprotocol$MH,"pthread_mutexattr_getprotocol");
    }
    public static int pthread_mutexattr_getprotocol ( Addressable __attr,  Addressable __protocol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_getprotocol$MH, "pthread_mutexattr_getprotocol");
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_setprotocol$MH,"pthread_mutexattr_setprotocol");
    }
    public static int pthread_mutexattr_setprotocol ( Addressable __attr,  int __protocol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_setprotocol$MH, "pthread_mutexattr_setprotocol");
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_getprioceiling$MH,"pthread_mutexattr_getprioceiling");
    }
    public static int pthread_mutexattr_getprioceiling ( Addressable __attr,  Addressable __prioceiling) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_getprioceiling$MH, "pthread_mutexattr_getprioceiling");
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_setprioceiling$MH,"pthread_mutexattr_setprioceiling");
    }
    public static int pthread_mutexattr_setprioceiling ( Addressable __attr,  int __prioceiling) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_setprioceiling$MH, "pthread_mutexattr_setprioceiling");
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_getrobust$MH,"pthread_mutexattr_getrobust");
    }
    public static int pthread_mutexattr_getrobust ( Addressable __attr,  Addressable __robustness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_getrobust$MH, "pthread_mutexattr_getrobust");
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_setrobust$MH,"pthread_mutexattr_setrobust");
    }
    public static int pthread_mutexattr_setrobust ( Addressable __attr,  int __robustness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.pthread_mutexattr_setrobust$MH, "pthread_mutexattr_setrobust");
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_init$MH,"pthread_rwlock_init");
    }
    public static int pthread_rwlock_init ( Addressable __rwlock,  Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_init$MH, "pthread_rwlock_init");
        try {
            return (int)mh$.invokeExact(__rwlock, __attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_destroy$MH,"pthread_rwlock_destroy");
    }
    public static int pthread_rwlock_destroy ( Addressable __rwlock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_destroy$MH, "pthread_rwlock_destroy");
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_rdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_rdlock$MH,"pthread_rwlock_rdlock");
    }
    public static int pthread_rwlock_rdlock ( Addressable __rwlock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_rdlock$MH, "pthread_rwlock_rdlock");
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_tryrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_tryrdlock$MH,"pthread_rwlock_tryrdlock");
    }
    public static int pthread_rwlock_tryrdlock ( Addressable __rwlock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_tryrdlock$MH, "pthread_rwlock_tryrdlock");
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_timedrdlock$MH,"pthread_rwlock_timedrdlock");
    }
    public static int pthread_rwlock_timedrdlock ( Addressable __rwlock,  Addressable __abstime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_timedrdlock$MH, "pthread_rwlock_timedrdlock");
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_wrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_wrlock$MH,"pthread_rwlock_wrlock");
    }
    public static int pthread_rwlock_wrlock ( Addressable __rwlock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.pthread_rwlock_wrlock$MH, "pthread_rwlock_wrlock");
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_trywrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$93.pthread_rwlock_trywrlock$MH,"pthread_rwlock_trywrlock");
    }
    public static int pthread_rwlock_trywrlock ( Addressable __rwlock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.pthread_rwlock_trywrlock$MH, "pthread_rwlock_trywrlock");
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedwrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$93.pthread_rwlock_timedwrlock$MH,"pthread_rwlock_timedwrlock");
    }
    public static int pthread_rwlock_timedwrlock ( Addressable __rwlock,  Addressable __abstime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.pthread_rwlock_timedwrlock$MH, "pthread_rwlock_timedwrlock");
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$93.pthread_rwlock_unlock$MH,"pthread_rwlock_unlock");
    }
    public static int pthread_rwlock_unlock ( Addressable __rwlock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.pthread_rwlock_unlock$MH, "pthread_rwlock_unlock");
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$93.pthread_rwlockattr_init$MH,"pthread_rwlockattr_init");
    }
    public static int pthread_rwlockattr_init ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.pthread_rwlockattr_init$MH, "pthread_rwlockattr_init");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$93.pthread_rwlockattr_destroy$MH,"pthread_rwlockattr_destroy");
    }
    public static int pthread_rwlockattr_destroy ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.pthread_rwlockattr_destroy$MH, "pthread_rwlockattr_destroy");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$93.pthread_rwlockattr_getpshared$MH,"pthread_rwlockattr_getpshared");
    }
    public static int pthread_rwlockattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.pthread_rwlockattr_getpshared$MH, "pthread_rwlockattr_getpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$94.pthread_rwlockattr_setpshared$MH,"pthread_rwlockattr_setpshared");
    }
    public static int pthread_rwlockattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.pthread_rwlockattr_setpshared$MH, "pthread_rwlockattr_setpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$94.pthread_rwlockattr_getkind_np$MH,"pthread_rwlockattr_getkind_np");
    }
    public static int pthread_rwlockattr_getkind_np ( Addressable __attr,  Addressable __pref) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.pthread_rwlockattr_getkind_np$MH, "pthread_rwlockattr_getkind_np");
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$94.pthread_rwlockattr_setkind_np$MH,"pthread_rwlockattr_setkind_np");
    }
    public static int pthread_rwlockattr_setkind_np ( Addressable __attr,  int __pref) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.pthread_rwlockattr_setkind_np$MH, "pthread_rwlockattr_setkind_np");
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$94.pthread_cond_init$MH,"pthread_cond_init");
    }
    public static int pthread_cond_init ( Addressable __cond,  Addressable __cond_attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.pthread_cond_init$MH, "pthread_cond_init");
        try {
            return (int)mh$.invokeExact(__cond, __cond_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$94.pthread_cond_destroy$MH,"pthread_cond_destroy");
    }
    public static int pthread_cond_destroy ( Addressable __cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.pthread_cond_destroy$MH, "pthread_cond_destroy");
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$94.pthread_cond_signal$MH,"pthread_cond_signal");
    }
    public static int pthread_cond_signal ( Addressable __cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.pthread_cond_signal$MH, "pthread_cond_signal");
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$95.pthread_cond_broadcast$MH,"pthread_cond_broadcast");
    }
    public static int pthread_cond_broadcast ( Addressable __cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.pthread_cond_broadcast$MH, "pthread_cond_broadcast");
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$95.pthread_cond_wait$MH,"pthread_cond_wait");
    }
    public static int pthread_cond_wait ( Addressable __cond,  Addressable __mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.pthread_cond_wait$MH, "pthread_cond_wait");
        try {
            return (int)mh$.invokeExact(__cond, __mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_timedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$95.pthread_cond_timedwait$MH,"pthread_cond_timedwait");
    }
    public static int pthread_cond_timedwait ( Addressable __cond,  Addressable __mutex,  Addressable __abstime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.pthread_cond_timedwait$MH, "pthread_cond_timedwait");
        try {
            return (int)mh$.invokeExact(__cond, __mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$95.pthread_condattr_init$MH,"pthread_condattr_init");
    }
    public static int pthread_condattr_init ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.pthread_condattr_init$MH, "pthread_condattr_init");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$95.pthread_condattr_destroy$MH,"pthread_condattr_destroy");
    }
    public static int pthread_condattr_destroy ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.pthread_condattr_destroy$MH, "pthread_condattr_destroy");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$95.pthread_condattr_getpshared$MH,"pthread_condattr_getpshared");
    }
    public static int pthread_condattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.pthread_condattr_getpshared$MH, "pthread_condattr_getpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$96.pthread_condattr_setpshared$MH,"pthread_condattr_setpshared");
    }
    public static int pthread_condattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.pthread_condattr_setpshared$MH, "pthread_condattr_setpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getclock$MH() {
        return RuntimeHelper.requireNonNull(constants$96.pthread_condattr_getclock$MH,"pthread_condattr_getclock");
    }
    public static int pthread_condattr_getclock ( Addressable __attr,  Addressable __clock_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.pthread_condattr_getclock$MH, "pthread_condattr_getclock");
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setclock$MH() {
        return RuntimeHelper.requireNonNull(constants$96.pthread_condattr_setclock$MH,"pthread_condattr_setclock");
    }
    public static int pthread_condattr_setclock ( Addressable __attr,  int __clock_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.pthread_condattr_setclock$MH, "pthread_condattr_setclock");
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_init$MH() {
        return RuntimeHelper.requireNonNull(constants$96.pthread_spin_init$MH,"pthread_spin_init");
    }
    public static int pthread_spin_init ( Addressable __lock,  int __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.pthread_spin_init$MH, "pthread_spin_init");
        try {
            return (int)mh$.invokeExact(__lock, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$96.pthread_spin_destroy$MH,"pthread_spin_destroy");
    }
    public static int pthread_spin_destroy ( Addressable __lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.pthread_spin_destroy$MH, "pthread_spin_destroy");
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$96.pthread_spin_lock$MH,"pthread_spin_lock");
    }
    public static int pthread_spin_lock ( Addressable __lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.pthread_spin_lock$MH, "pthread_spin_lock");
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$97.pthread_spin_trylock$MH,"pthread_spin_trylock");
    }
    public static int pthread_spin_trylock ( Addressable __lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.pthread_spin_trylock$MH, "pthread_spin_trylock");
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$97.pthread_spin_unlock$MH,"pthread_spin_unlock");
    }
    public static int pthread_spin_unlock ( Addressable __lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.pthread_spin_unlock$MH, "pthread_spin_unlock");
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_init$MH() {
        return RuntimeHelper.requireNonNull(constants$97.pthread_barrier_init$MH,"pthread_barrier_init");
    }
    public static int pthread_barrier_init ( Addressable __barrier,  Addressable __attr,  int __count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.pthread_barrier_init$MH, "pthread_barrier_init");
        try {
            return (int)mh$.invokeExact(__barrier, __attr, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$97.pthread_barrier_destroy$MH,"pthread_barrier_destroy");
    }
    public static int pthread_barrier_destroy ( Addressable __barrier) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.pthread_barrier_destroy$MH, "pthread_barrier_destroy");
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$97.pthread_barrier_wait$MH,"pthread_barrier_wait");
    }
    public static int pthread_barrier_wait ( Addressable __barrier) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.pthread_barrier_wait$MH, "pthread_barrier_wait");
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$97.pthread_barrierattr_init$MH,"pthread_barrierattr_init");
    }
    public static int pthread_barrierattr_init ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.pthread_barrierattr_init$MH, "pthread_barrierattr_init");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$98.pthread_barrierattr_destroy$MH,"pthread_barrierattr_destroy");
    }
    public static int pthread_barrierattr_destroy ( Addressable __attr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.pthread_barrierattr_destroy$MH, "pthread_barrierattr_destroy");
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$98.pthread_barrierattr_getpshared$MH,"pthread_barrierattr_getpshared");
    }
    public static int pthread_barrierattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.pthread_barrierattr_getpshared$MH, "pthread_barrierattr_getpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$98.pthread_barrierattr_setpshared$MH,"pthread_barrierattr_setpshared");
    }
    public static int pthread_barrierattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.pthread_barrierattr_setpshared$MH, "pthread_barrierattr_setpshared");
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_create$MH() {
        return RuntimeHelper.requireNonNull(constants$98.pthread_key_create$MH,"pthread_key_create");
    }
    public static int pthread_key_create ( Addressable __key,  Addressable __destr_function) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.pthread_key_create$MH, "pthread_key_create");
        try {
            return (int)mh$.invokeExact(__key, __destr_function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$99.pthread_key_delete$MH,"pthread_key_delete");
    }
    public static int pthread_key_delete ( int __key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.pthread_key_delete$MH, "pthread_key_delete");
        try {
            return (int)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$99.pthread_getspecific$MH,"pthread_getspecific");
    }
    public static MemoryAddress pthread_getspecific ( int __key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.pthread_getspecific$MH, "pthread_getspecific");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$99.pthread_setspecific$MH,"pthread_setspecific");
    }
    public static int pthread_setspecific ( int __key,  Addressable __pointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.pthread_setspecific$MH, "pthread_setspecific");
        try {
            return (int)mh$.invokeExact(__key, __pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$99.pthread_getcpuclockid$MH,"pthread_getcpuclockid");
    }
    public static int pthread_getcpuclockid ( long __thread_id,  Addressable __clock_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.pthread_getcpuclockid$MH, "pthread_getcpuclockid");
        try {
            return (int)mh$.invokeExact(__thread_id, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_atfork$MH() {
        return RuntimeHelper.requireNonNull(constants$100.pthread_atfork$MH,"pthread_atfork");
    }
    public static int pthread_atfork ( Addressable __prepare,  Addressable __parent,  Addressable __child) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.pthread_atfork$MH, "pthread_atfork");
        try {
            return (int)mh$.invokeExact(__prepare, __parent, __child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfInt CRYPTO_ONCE = JAVA_INT;
    public static MethodHandle CRYPTO_THREAD_run_once$MH() {
        return RuntimeHelper.requireNonNull(constants$101.CRYPTO_THREAD_run_once$MH,"CRYPTO_THREAD_run_once");
    }
    public static int CRYPTO_THREAD_run_once ( Addressable once,  Addressable init) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.CRYPTO_THREAD_run_once$MH, "CRYPTO_THREAD_run_once");
        try {
            return (int)mh$.invokeExact(once, init);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_init_local$MH() {
        return RuntimeHelper.requireNonNull(constants$101.CRYPTO_THREAD_init_local$MH,"CRYPTO_THREAD_init_local");
    }
    public static int CRYPTO_THREAD_init_local ( Addressable key,  Addressable cleanup) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.CRYPTO_THREAD_init_local$MH, "CRYPTO_THREAD_init_local");
        try {
            return (int)mh$.invokeExact(key, cleanup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_get_local$MH() {
        return RuntimeHelper.requireNonNull(constants$101.CRYPTO_THREAD_get_local$MH,"CRYPTO_THREAD_get_local");
    }
    public static MemoryAddress CRYPTO_THREAD_get_local ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.CRYPTO_THREAD_get_local$MH, "CRYPTO_THREAD_get_local");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_set_local$MH() {
        return RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_set_local$MH,"CRYPTO_THREAD_set_local");
    }
    public static int CRYPTO_THREAD_set_local ( Addressable key,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_set_local$MH, "CRYPTO_THREAD_set_local");
        try {
            return (int)mh$.invokeExact(key, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_cleanup_local$MH() {
        return RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_cleanup_local$MH,"CRYPTO_THREAD_cleanup_local");
    }
    public static int CRYPTO_THREAD_cleanup_local ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_cleanup_local$MH, "CRYPTO_THREAD_cleanup_local");
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_get_current_id$MH() {
        return RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_get_current_id$MH,"CRYPTO_THREAD_get_current_id");
    }
    public static long CRYPTO_THREAD_get_current_id () {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_get_current_id$MH, "CRYPTO_THREAD_get_current_id");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CRYPTO_THREAD_compare_id$MH() {
        return RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_compare_id$MH,"CRYPTO_THREAD_compare_id");
    }
    public static int CRYPTO_THREAD_compare_id ( long a,  long b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.CRYPTO_THREAD_compare_id$MH, "CRYPTO_THREAD_compare_id");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_COMP_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$102.ERR_load_COMP_strings$MH,"ERR_load_COMP_strings");
    }
    public static int ERR_load_COMP_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.ERR_load_COMP_strings$MH, "ERR_load_COMP_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$102.COMP_CTX_new$MH,"COMP_CTX_new");
    }
    public static MemoryAddress COMP_CTX_new ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.COMP_CTX_new$MH, "COMP_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_CTX_get_method$MH() {
        return RuntimeHelper.requireNonNull(constants$103.COMP_CTX_get_method$MH,"COMP_CTX_get_method");
    }
    public static MemoryAddress COMP_CTX_get_method ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.COMP_CTX_get_method$MH, "COMP_CTX_get_method");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_CTX_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$103.COMP_CTX_get_type$MH,"COMP_CTX_get_type");
    }
    public static int COMP_CTX_get_type ( Addressable comp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.COMP_CTX_get_type$MH, "COMP_CTX_get_type");
        try {
            return (int)mh$.invokeExact(comp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$103.COMP_get_type$MH,"COMP_get_type");
    }
    public static int COMP_get_type ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.COMP_get_type$MH, "COMP_get_type");
        try {
            return (int)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$103.COMP_get_name$MH,"COMP_get_name");
    }
    public static MemoryAddress COMP_get_name ( Addressable meth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.COMP_get_name$MH, "COMP_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(meth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$103.COMP_CTX_free$MH,"COMP_CTX_free");
    }
    public static void COMP_CTX_free ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.COMP_CTX_free$MH, "COMP_CTX_free");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_compress_block$MH() {
        return RuntimeHelper.requireNonNull(constants$103.COMP_compress_block$MH,"COMP_compress_block");
    }
    public static int COMP_compress_block ( Addressable ctx,  Addressable out,  int olen,  Addressable in,  int ilen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.COMP_compress_block$MH, "COMP_compress_block");
        try {
            return (int)mh$.invokeExact(ctx, out, olen, in, ilen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_expand_block$MH() {
        return RuntimeHelper.requireNonNull(constants$104.COMP_expand_block$MH,"COMP_expand_block");
    }
    public static int COMP_expand_block ( Addressable ctx,  Addressable out,  int olen,  Addressable in,  int ilen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.COMP_expand_block$MH, "COMP_expand_block");
        try {
            return (int)mh$.invokeExact(ctx, out, olen, in, ilen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle COMP_zlib$MH() {
        return RuntimeHelper.requireNonNull(constants$104.COMP_zlib$MH,"COMP_zlib");
    }
    public static MemoryAddress COMP_zlib () {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.COMP_zlib$MH, "COMP_zlib");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_BIO_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$104.ERR_load_BIO_strings$MH,"ERR_load_BIO_strings");
    }
    public static int ERR_load_BIO_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.ERR_load_BIO_strings$MH, "ERR_load_BIO_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_new_index$MH() {
        return RuntimeHelper.requireNonNull(constants$104.BIO_get_new_index$MH,"BIO_get_new_index");
    }
    public static int BIO_get_new_index () {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.BIO_get_new_index$MH, "BIO_get_new_index");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$104.BIO_set_flags$MH,"BIO_set_flags");
    }
    public static void BIO_set_flags ( Addressable b,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.BIO_set_flags$MH, "BIO_set_flags");
        try {
            mh$.invokeExact(b, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_test_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$104.BIO_test_flags$MH,"BIO_test_flags");
    }
    public static int BIO_test_flags ( Addressable b,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$104.BIO_test_flags$MH, "BIO_test_flags");
        try {
            return (int)mh$.invokeExact(b, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_clear_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$105.BIO_clear_flags$MH,"BIO_clear_flags");
    }
    public static void BIO_clear_flags ( Addressable b,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.BIO_clear_flags$MH, "BIO_clear_flags");
        try {
            mh$.invokeExact(b, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$105.BIO_get_callback$MH,"BIO_get_callback");
    }
    public static MemoryAddress BIO_get_callback ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$105.BIO_get_callback$MH, "BIO_get_callback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$106.BIO_set_callback$MH,"BIO_set_callback");
    }
    public static void BIO_set_callback ( Addressable b,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.BIO_set_callback$MH, "BIO_set_callback");
        try {
            mh$.invokeExact(b, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_callback_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$106.BIO_get_callback_ex$MH,"BIO_get_callback_ex");
    }
    public static MemoryAddress BIO_get_callback_ex ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.BIO_get_callback_ex$MH, "BIO_get_callback_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_callback_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$106.BIO_set_callback_ex$MH,"BIO_set_callback_ex");
    }
    public static void BIO_set_callback_ex ( Addressable b,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.BIO_set_callback_ex$MH, "BIO_set_callback_ex");
        try {
            mh$.invokeExact(b, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_callback_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$106.BIO_get_callback_arg$MH,"BIO_get_callback_arg");
    }
    public static MemoryAddress BIO_get_callback_arg ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.BIO_get_callback_arg$MH, "BIO_get_callback_arg");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_callback_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$106.BIO_set_callback_arg$MH,"BIO_set_callback_arg");
    }
    public static void BIO_set_callback_arg ( Addressable b,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.BIO_set_callback_arg$MH, "BIO_set_callback_arg");
        try {
            mh$.invokeExact(b, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_method_name$MH() {
        return RuntimeHelper.requireNonNull(constants$106.BIO_method_name$MH,"BIO_method_name");
    }
    public static MemoryAddress BIO_method_name ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$106.BIO_method_name$MH, "BIO_method_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_method_type$MH() {
        return RuntimeHelper.requireNonNull(constants$107.BIO_method_type$MH,"BIO_method_type");
    }
    public static int BIO_method_type ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$107.BIO_method_type$MH, "BIO_method_type");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_num$MH() {
        return RuntimeHelper.requireNonNull(constants$108.sk_BIO_num$MH,"sk_BIO_num");
    }
    public static int sk_BIO_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$108.sk_BIO_num$MH, "sk_BIO_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_value$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sk_BIO_value$MH,"sk_BIO_value");
    }
    public static MemoryAddress sk_BIO_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.sk_BIO_value$MH, "sk_BIO_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sk_BIO_new$MH,"sk_BIO_new");
    }
    public static MemoryAddress sk_BIO_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.sk_BIO_new$MH, "sk_BIO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sk_BIO_new_null$MH,"sk_BIO_new_null");
    }
    public static MemoryAddress sk_BIO_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.sk_BIO_new_null$MH, "sk_BIO_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sk_BIO_new_reserve$MH,"sk_BIO_new_reserve");
    }
    public static MemoryAddress sk_BIO_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.sk_BIO_new_reserve$MH, "sk_BIO_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sk_BIO_reserve$MH,"sk_BIO_reserve");
    }
    public static int sk_BIO_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.sk_BIO_reserve$MH, "sk_BIO_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sk_BIO_free$MH,"sk_BIO_free");
    }
    public static void sk_BIO_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$109.sk_BIO_free$MH, "sk_BIO_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$110.sk_BIO_zero$MH,"sk_BIO_zero");
    }
    public static void sk_BIO_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.sk_BIO_zero$MH, "sk_BIO_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$110.sk_BIO_delete$MH,"sk_BIO_delete");
    }
    public static MemoryAddress sk_BIO_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.sk_BIO_delete$MH, "sk_BIO_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$110.sk_BIO_delete_ptr$MH,"sk_BIO_delete_ptr");
    }
    public static MemoryAddress sk_BIO_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.sk_BIO_delete_ptr$MH, "sk_BIO_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_push$MH() {
        return RuntimeHelper.requireNonNull(constants$110.sk_BIO_push$MH,"sk_BIO_push");
    }
    public static int sk_BIO_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.sk_BIO_push$MH, "sk_BIO_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$110.sk_BIO_unshift$MH,"sk_BIO_unshift");
    }
    public static int sk_BIO_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.sk_BIO_unshift$MH, "sk_BIO_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$110.sk_BIO_pop$MH,"sk_BIO_pop");
    }
    public static MemoryAddress sk_BIO_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.sk_BIO_pop$MH, "sk_BIO_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$111.sk_BIO_shift$MH,"sk_BIO_shift");
    }
    public static MemoryAddress sk_BIO_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.sk_BIO_shift$MH, "sk_BIO_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$111.sk_BIO_pop_free$MH,"sk_BIO_pop_free");
    }
    public static void sk_BIO_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.sk_BIO_pop_free$MH, "sk_BIO_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$111.sk_BIO_insert$MH,"sk_BIO_insert");
    }
    public static int sk_BIO_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.sk_BIO_insert$MH, "sk_BIO_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_set$MH() {
        return RuntimeHelper.requireNonNull(constants$111.sk_BIO_set$MH,"sk_BIO_set");
    }
    public static MemoryAddress sk_BIO_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.sk_BIO_set$MH, "sk_BIO_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_find$MH() {
        return RuntimeHelper.requireNonNull(constants$111.sk_BIO_find$MH,"sk_BIO_find");
    }
    public static int sk_BIO_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.sk_BIO_find$MH, "sk_BIO_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$111.sk_BIO_find_ex$MH,"sk_BIO_find_ex");
    }
    public static int sk_BIO_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.sk_BIO_find_ex$MH, "sk_BIO_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$112.sk_BIO_sort$MH,"sk_BIO_sort");
    }
    public static void sk_BIO_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.sk_BIO_sort$MH, "sk_BIO_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$112.sk_BIO_is_sorted$MH,"sk_BIO_is_sorted");
    }
    public static int sk_BIO_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.sk_BIO_is_sorted$MH, "sk_BIO_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$112.sk_BIO_dup$MH,"sk_BIO_dup");
    }
    public static MemoryAddress sk_BIO_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.sk_BIO_dup$MH, "sk_BIO_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$112.sk_BIO_deep_copy$MH,"sk_BIO_deep_copy");
    }
    public static MemoryAddress sk_BIO_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.sk_BIO_deep_copy$MH, "sk_BIO_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_BIO_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$112.sk_BIO_set_cmp_func$MH,"sk_BIO_set_cmp_func");
    }
    public static MemoryAddress sk_BIO_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.sk_BIO_set_cmp_func$MH, "sk_BIO_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl_pending$MH() {
        return RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_pending$MH,"BIO_ctrl_pending");
    }
    public static long BIO_ctrl_pending ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_pending$MH, "BIO_ctrl_pending");
        try {
            return (long)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl_wpending$MH() {
        return RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_wpending$MH,"BIO_ctrl_wpending");
    }
    public static long BIO_ctrl_wpending ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_wpending$MH, "BIO_ctrl_wpending");
        try {
            return (long)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl_get_write_guarantee$MH() {
        return RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_get_write_guarantee$MH,"BIO_ctrl_get_write_guarantee");
    }
    public static long BIO_ctrl_get_write_guarantee ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_get_write_guarantee$MH, "BIO_ctrl_get_write_guarantee");
        try {
            return (long)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl_get_read_request$MH() {
        return RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_get_read_request$MH,"BIO_ctrl_get_read_request");
    }
    public static long BIO_ctrl_get_read_request ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_get_read_request$MH, "BIO_ctrl_get_read_request");
        try {
            return (long)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl_reset_read_request$MH() {
        return RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_reset_read_request$MH,"BIO_ctrl_reset_read_request");
    }
    public static int BIO_ctrl_reset_read_request ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.BIO_ctrl_reset_read_request$MH, "BIO_ctrl_reset_read_request");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$114.BIO_set_ex_data$MH,"BIO_set_ex_data");
    }
    public static int BIO_set_ex_data ( Addressable bio,  int idx,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.BIO_set_ex_data$MH, "BIO_set_ex_data");
        try {
            return (int)mh$.invokeExact(bio, idx, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_ex_data$MH() {
        return RuntimeHelper.requireNonNull(constants$114.BIO_get_ex_data$MH,"BIO_get_ex_data");
    }
    public static MemoryAddress BIO_get_ex_data ( Addressable bio,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.BIO_get_ex_data$MH, "BIO_get_ex_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bio, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_number_read$MH() {
        return RuntimeHelper.requireNonNull(constants$114.BIO_number_read$MH,"BIO_number_read");
    }
    public static long BIO_number_read ( Addressable bio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.BIO_number_read$MH, "BIO_number_read");
        try {
            return (long)mh$.invokeExact(bio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_number_written$MH() {
        return RuntimeHelper.requireNonNull(constants$114.BIO_number_written$MH,"BIO_number_written");
    }
    public static long BIO_number_written ( Addressable bio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.BIO_number_written$MH, "BIO_number_written");
        try {
            return (long)mh$.invokeExact(bio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_asn1_set_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$114.BIO_asn1_set_prefix$MH,"BIO_asn1_set_prefix");
    }
    public static int BIO_asn1_set_prefix ( Addressable b,  Addressable prefix,  Addressable prefix_free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.BIO_asn1_set_prefix$MH, "BIO_asn1_set_prefix");
        try {
            return (int)mh$.invokeExact(b, prefix, prefix_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_asn1_get_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$114.BIO_asn1_get_prefix$MH,"BIO_asn1_get_prefix");
    }
    public static int BIO_asn1_get_prefix ( Addressable b,  Addressable pprefix,  Addressable pprefix_free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.BIO_asn1_get_prefix$MH, "BIO_asn1_get_prefix");
        try {
            return (int)mh$.invokeExact(b, pprefix, pprefix_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_asn1_set_suffix$MH() {
        return RuntimeHelper.requireNonNull(constants$115.BIO_asn1_set_suffix$MH,"BIO_asn1_set_suffix");
    }
    public static int BIO_asn1_set_suffix ( Addressable b,  Addressable suffix,  Addressable suffix_free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.BIO_asn1_set_suffix$MH, "BIO_asn1_set_suffix");
        try {
            return (int)mh$.invokeExact(b, suffix, suffix_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_asn1_get_suffix$MH() {
        return RuntimeHelper.requireNonNull(constants$115.BIO_asn1_get_suffix$MH,"BIO_asn1_get_suffix");
    }
    public static int BIO_asn1_get_suffix ( Addressable b,  Addressable psuffix,  Addressable psuffix_free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.BIO_asn1_get_suffix$MH, "BIO_asn1_get_suffix");
        try {
            return (int)mh$.invokeExact(b, psuffix, psuffix_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_file$MH() {
        return RuntimeHelper.requireNonNull(constants$115.BIO_s_file$MH,"BIO_s_file");
    }
    public static MemoryAddress BIO_s_file () {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.BIO_s_file$MH, "BIO_s_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_file$MH() {
        return RuntimeHelper.requireNonNull(constants$115.BIO_new_file$MH,"BIO_new_file");
    }
    public static MemoryAddress BIO_new_file ( Addressable filename,  Addressable mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.BIO_new_file$MH, "BIO_new_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$115.BIO_new_fp$MH,"BIO_new_fp");
    }
    public static MemoryAddress BIO_new_fp ( Addressable stream,  int close_flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.BIO_new_fp$MH, "BIO_new_fp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(stream, close_flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new$MH() {
        return RuntimeHelper.requireNonNull(constants$115.BIO_new$MH,"BIO_new");
    }
    public static MemoryAddress BIO_new ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.BIO_new$MH, "BIO_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$116.BIO_free$MH,"BIO_free");
    }
    public static int BIO_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.BIO_free$MH, "BIO_free");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$116.BIO_set_data$MH,"BIO_set_data");
    }
    public static void BIO_set_data ( Addressable a,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.BIO_set_data$MH, "BIO_set_data");
        try {
            mh$.invokeExact(a, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$116.BIO_get_data$MH,"BIO_get_data");
    }
    public static MemoryAddress BIO_get_data ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.BIO_get_data$MH, "BIO_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_init$MH() {
        return RuntimeHelper.requireNonNull(constants$116.BIO_set_init$MH,"BIO_set_init");
    }
    public static void BIO_set_init ( Addressable a,  int init) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.BIO_set_init$MH, "BIO_set_init");
        try {
            mh$.invokeExact(a, init);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_init$MH() {
        return RuntimeHelper.requireNonNull(constants$116.BIO_get_init$MH,"BIO_get_init");
    }
    public static int BIO_get_init ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.BIO_get_init$MH, "BIO_get_init");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$116.BIO_set_shutdown$MH,"BIO_set_shutdown");
    }
    public static void BIO_set_shutdown ( Addressable a,  int shut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.BIO_set_shutdown$MH, "BIO_set_shutdown");
        try {
            mh$.invokeExact(a, shut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$117.BIO_get_shutdown$MH,"BIO_get_shutdown");
    }
    public static int BIO_get_shutdown ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.BIO_get_shutdown$MH, "BIO_get_shutdown");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_vfree$MH() {
        return RuntimeHelper.requireNonNull(constants$117.BIO_vfree$MH,"BIO_vfree");
    }
    public static void BIO_vfree ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.BIO_vfree$MH, "BIO_vfree");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_up_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$117.BIO_up_ref$MH,"BIO_up_ref");
    }
    public static int BIO_up_ref ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.BIO_up_ref$MH, "BIO_up_ref");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_read$MH() {
        return RuntimeHelper.requireNonNull(constants$117.BIO_read$MH,"BIO_read");
    }
    public static int BIO_read ( Addressable b,  Addressable data,  int dlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.BIO_read$MH, "BIO_read");
        try {
            return (int)mh$.invokeExact(b, data, dlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_read_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$117.BIO_read_ex$MH,"BIO_read_ex");
    }
    public static int BIO_read_ex ( Addressable b,  Addressable data,  long dlen,  Addressable readbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.BIO_read_ex$MH, "BIO_read_ex");
        try {
            return (int)mh$.invokeExact(b, data, dlen, readbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_gets$MH() {
        return RuntimeHelper.requireNonNull(constants$117.BIO_gets$MH,"BIO_gets");
    }
    public static int BIO_gets ( Addressable bp,  Addressable buf,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.BIO_gets$MH, "BIO_gets");
        try {
            return (int)mh$.invokeExact(bp, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_write$MH() {
        return RuntimeHelper.requireNonNull(constants$118.BIO_write$MH,"BIO_write");
    }
    public static int BIO_write ( Addressable b,  Addressable data,  int dlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.BIO_write$MH, "BIO_write");
        try {
            return (int)mh$.invokeExact(b, data, dlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_write_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$118.BIO_write_ex$MH,"BIO_write_ex");
    }
    public static int BIO_write_ex ( Addressable b,  Addressable data,  long dlen,  Addressable written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.BIO_write_ex$MH, "BIO_write_ex");
        try {
            return (int)mh$.invokeExact(b, data, dlen, written);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_puts$MH() {
        return RuntimeHelper.requireNonNull(constants$118.BIO_puts$MH,"BIO_puts");
    }
    public static int BIO_puts ( Addressable bp,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.BIO_puts$MH, "BIO_puts");
        try {
            return (int)mh$.invokeExact(bp, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_indent$MH() {
        return RuntimeHelper.requireNonNull(constants$118.BIO_indent$MH,"BIO_indent");
    }
    public static int BIO_indent ( Addressable b,  int indent,  int max) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.BIO_indent$MH, "BIO_indent");
        try {
            return (int)mh$.invokeExact(b, indent, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$118.BIO_ctrl$MH,"BIO_ctrl");
    }
    public static long BIO_ctrl ( Addressable bp,  int cmd,  long larg,  Addressable parg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.BIO_ctrl$MH, "BIO_ctrl");
        try {
            return (long)mh$.invokeExact(bp, cmd, larg, parg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_callback_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$118.BIO_callback_ctrl$MH,"BIO_callback_ctrl");
    }
    public static long BIO_callback_ctrl ( Addressable b,  int cmd,  Addressable fp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.BIO_callback_ctrl$MH, "BIO_callback_ctrl");
        try {
            return (long)mh$.invokeExact(b, cmd, fp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ptr_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$119.BIO_ptr_ctrl$MH,"BIO_ptr_ctrl");
    }
    public static MemoryAddress BIO_ptr_ctrl ( Addressable bp,  int cmd,  long larg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.BIO_ptr_ctrl$MH, "BIO_ptr_ctrl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bp, cmd, larg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_int_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$119.BIO_int_ctrl$MH,"BIO_int_ctrl");
    }
    public static long BIO_int_ctrl ( Addressable bp,  int cmd,  long larg,  int iarg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.BIO_int_ctrl$MH, "BIO_int_ctrl");
        try {
            return (long)mh$.invokeExact(bp, cmd, larg, iarg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_push$MH() {
        return RuntimeHelper.requireNonNull(constants$119.BIO_push$MH,"BIO_push");
    }
    public static MemoryAddress BIO_push ( Addressable b,  Addressable append) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.BIO_push$MH, "BIO_push");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b, append);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$119.BIO_pop$MH,"BIO_pop");
    }
    public static MemoryAddress BIO_pop ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.BIO_pop$MH, "BIO_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_free_all$MH() {
        return RuntimeHelper.requireNonNull(constants$119.BIO_free_all$MH,"BIO_free_all");
    }
    public static void BIO_free_all ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.BIO_free_all$MH, "BIO_free_all");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_find_type$MH() {
        return RuntimeHelper.requireNonNull(constants$119.BIO_find_type$MH,"BIO_find_type");
    }
    public static MemoryAddress BIO_find_type ( Addressable b,  int bio_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.BIO_find_type$MH, "BIO_find_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b, bio_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_next$MH() {
        return RuntimeHelper.requireNonNull(constants$120.BIO_next$MH,"BIO_next");
    }
    public static MemoryAddress BIO_next ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.BIO_next$MH, "BIO_next");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_next$MH() {
        return RuntimeHelper.requireNonNull(constants$120.BIO_set_next$MH,"BIO_set_next");
    }
    public static void BIO_set_next ( Addressable b,  Addressable next) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.BIO_set_next$MH, "BIO_set_next");
        try {
            mh$.invokeExact(b, next);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_retry_BIO$MH() {
        return RuntimeHelper.requireNonNull(constants$120.BIO_get_retry_BIO$MH,"BIO_get_retry_BIO");
    }
    public static MemoryAddress BIO_get_retry_BIO ( Addressable bio,  Addressable reason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.BIO_get_retry_BIO$MH, "BIO_get_retry_BIO");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bio, reason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_retry_reason$MH() {
        return RuntimeHelper.requireNonNull(constants$120.BIO_get_retry_reason$MH,"BIO_get_retry_reason");
    }
    public static int BIO_get_retry_reason ( Addressable bio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.BIO_get_retry_reason$MH, "BIO_get_retry_reason");
        try {
            return (int)mh$.invokeExact(bio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_retry_reason$MH() {
        return RuntimeHelper.requireNonNull(constants$120.BIO_set_retry_reason$MH,"BIO_set_retry_reason");
    }
    public static void BIO_set_retry_reason ( Addressable bio,  int reason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.BIO_set_retry_reason$MH, "BIO_set_retry_reason");
        try {
            mh$.invokeExact(bio, reason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dup_chain$MH() {
        return RuntimeHelper.requireNonNull(constants$120.BIO_dup_chain$MH,"BIO_dup_chain");
    }
    public static MemoryAddress BIO_dup_chain ( Addressable in) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.BIO_dup_chain$MH, "BIO_dup_chain");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_nread0$MH() {
        return RuntimeHelper.requireNonNull(constants$121.BIO_nread0$MH,"BIO_nread0");
    }
    public static int BIO_nread0 ( Addressable bio,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.BIO_nread0$MH, "BIO_nread0");
        try {
            return (int)mh$.invokeExact(bio, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_nread$MH() {
        return RuntimeHelper.requireNonNull(constants$121.BIO_nread$MH,"BIO_nread");
    }
    public static int BIO_nread ( Addressable bio,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.BIO_nread$MH, "BIO_nread");
        try {
            return (int)mh$.invokeExact(bio, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_nwrite0$MH() {
        return RuntimeHelper.requireNonNull(constants$121.BIO_nwrite0$MH,"BIO_nwrite0");
    }
    public static int BIO_nwrite0 ( Addressable bio,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.BIO_nwrite0$MH, "BIO_nwrite0");
        try {
            return (int)mh$.invokeExact(bio, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_nwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$121.BIO_nwrite$MH,"BIO_nwrite");
    }
    public static int BIO_nwrite ( Addressable bio,  Addressable buf,  int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.BIO_nwrite$MH, "BIO_nwrite");
        try {
            return (int)mh$.invokeExact(bio, buf, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_debug_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$121.BIO_debug_callback$MH,"BIO_debug_callback");
    }
    public static long BIO_debug_callback ( Addressable bio,  int cmd,  Addressable argp,  int argi,  long argl,  long ret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.BIO_debug_callback$MH, "BIO_debug_callback");
        try {
            return (long)mh$.invokeExact(bio, cmd, argp, argi, argl, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$121.BIO_s_mem$MH,"BIO_s_mem");
    }
    public static MemoryAddress BIO_s_mem () {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.BIO_s_mem$MH, "BIO_s_mem");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_secmem$MH() {
        return RuntimeHelper.requireNonNull(constants$122.BIO_s_secmem$MH,"BIO_s_secmem");
    }
    public static MemoryAddress BIO_s_secmem () {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.BIO_s_secmem$MH, "BIO_s_secmem");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_mem_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$122.BIO_new_mem_buf$MH,"BIO_new_mem_buf");
    }
    public static MemoryAddress BIO_new_mem_buf ( Addressable buf,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.BIO_new_mem_buf$MH, "BIO_new_mem_buf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_socket$MH() {
        return RuntimeHelper.requireNonNull(constants$122.BIO_s_socket$MH,"BIO_s_socket");
    }
    public static MemoryAddress BIO_s_socket () {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.BIO_s_socket$MH, "BIO_s_socket");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$122.BIO_s_connect$MH,"BIO_s_connect");
    }
    public static MemoryAddress BIO_s_connect () {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.BIO_s_connect$MH, "BIO_s_connect");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$122.BIO_s_accept$MH,"BIO_s_accept");
    }
    public static MemoryAddress BIO_s_accept () {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.BIO_s_accept$MH, "BIO_s_accept");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$122.BIO_s_fd$MH,"BIO_s_fd");
    }
    public static MemoryAddress BIO_s_fd () {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.BIO_s_fd$MH, "BIO_s_fd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_log$MH() {
        return RuntimeHelper.requireNonNull(constants$123.BIO_s_log$MH,"BIO_s_log");
    }
    public static MemoryAddress BIO_s_log () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.BIO_s_log$MH, "BIO_s_log");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_bio$MH() {
        return RuntimeHelper.requireNonNull(constants$123.BIO_s_bio$MH,"BIO_s_bio");
    }
    public static MemoryAddress BIO_s_bio () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.BIO_s_bio$MH, "BIO_s_bio");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_null$MH() {
        return RuntimeHelper.requireNonNull(constants$123.BIO_s_null$MH,"BIO_s_null");
    }
    public static MemoryAddress BIO_s_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.BIO_s_null$MH, "BIO_s_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_null$MH() {
        return RuntimeHelper.requireNonNull(constants$123.BIO_f_null$MH,"BIO_f_null");
    }
    public static MemoryAddress BIO_f_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.BIO_f_null$MH, "BIO_f_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$123.BIO_f_buffer$MH,"BIO_f_buffer");
    }
    public static MemoryAddress BIO_f_buffer () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.BIO_f_buffer$MH, "BIO_f_buffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_linebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$123.BIO_f_linebuffer$MH,"BIO_f_linebuffer");
    }
    public static MemoryAddress BIO_f_linebuffer () {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.BIO_f_linebuffer$MH, "BIO_f_linebuffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_f_nbio_test$MH() {
        return RuntimeHelper.requireNonNull(constants$124.BIO_f_nbio_test$MH,"BIO_f_nbio_test");
    }
    public static MemoryAddress BIO_f_nbio_test () {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.BIO_f_nbio_test$MH, "BIO_f_nbio_test");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_datagram$MH() {
        return RuntimeHelper.requireNonNull(constants$124.BIO_s_datagram$MH,"BIO_s_datagram");
    }
    public static MemoryAddress BIO_s_datagram () {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.BIO_s_datagram$MH, "BIO_s_datagram");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dgram_non_fatal_error$MH() {
        return RuntimeHelper.requireNonNull(constants$124.BIO_dgram_non_fatal_error$MH,"BIO_dgram_non_fatal_error");
    }
    public static int BIO_dgram_non_fatal_error ( int error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.BIO_dgram_non_fatal_error$MH, "BIO_dgram_non_fatal_error");
        try {
            return (int)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_dgram$MH() {
        return RuntimeHelper.requireNonNull(constants$124.BIO_new_dgram$MH,"BIO_new_dgram");
    }
    public static MemoryAddress BIO_new_dgram ( int fd,  int close_flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.BIO_new_dgram$MH, "BIO_new_dgram");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd, close_flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_s_datagram_sctp$MH() {
        return RuntimeHelper.requireNonNull(constants$124.BIO_s_datagram_sctp$MH,"BIO_s_datagram_sctp");
    }
    public static MemoryAddress BIO_s_datagram_sctp () {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.BIO_s_datagram_sctp$MH, "BIO_s_datagram_sctp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_dgram_sctp$MH() {
        return RuntimeHelper.requireNonNull(constants$124.BIO_new_dgram_sctp$MH,"BIO_new_dgram_sctp");
    }
    public static MemoryAddress BIO_new_dgram_sctp ( int fd,  int close_flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.BIO_new_dgram_sctp$MH, "BIO_new_dgram_sctp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd, close_flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dgram_is_sctp$MH() {
        return RuntimeHelper.requireNonNull(constants$125.BIO_dgram_is_sctp$MH,"BIO_dgram_is_sctp");
    }
    public static int BIO_dgram_is_sctp ( Addressable bio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.BIO_dgram_is_sctp$MH, "BIO_dgram_is_sctp");
        try {
            return (int)mh$.invokeExact(bio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dgram_sctp_notification_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$125.BIO_dgram_sctp_notification_cb$MH,"BIO_dgram_sctp_notification_cb");
    }
    public static int BIO_dgram_sctp_notification_cb ( Addressable b,  Addressable handle_notifications,  Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.BIO_dgram_sctp_notification_cb$MH, "BIO_dgram_sctp_notification_cb");
        try {
            return (int)mh$.invokeExact(b, handle_notifications, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dgram_sctp_wait_for_dry$MH() {
        return RuntimeHelper.requireNonNull(constants$125.BIO_dgram_sctp_wait_for_dry$MH,"BIO_dgram_sctp_wait_for_dry");
    }
    public static int BIO_dgram_sctp_wait_for_dry ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.BIO_dgram_sctp_wait_for_dry$MH, "BIO_dgram_sctp_wait_for_dry");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dgram_sctp_msg_waiting$MH() {
        return RuntimeHelper.requireNonNull(constants$125.BIO_dgram_sctp_msg_waiting$MH,"BIO_dgram_sctp_msg_waiting");
    }
    public static int BIO_dgram_sctp_msg_waiting ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.BIO_dgram_sctp_msg_waiting$MH, "BIO_dgram_sctp_msg_waiting");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_sock_should_retry$MH() {
        return RuntimeHelper.requireNonNull(constants$126.BIO_sock_should_retry$MH,"BIO_sock_should_retry");
    }
    public static int BIO_sock_should_retry ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.BIO_sock_should_retry$MH, "BIO_sock_should_retry");
        try {
            return (int)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_sock_non_fatal_error$MH() {
        return RuntimeHelper.requireNonNull(constants$126.BIO_sock_non_fatal_error$MH,"BIO_sock_non_fatal_error");
    }
    public static int BIO_sock_non_fatal_error ( int error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.BIO_sock_non_fatal_error$MH, "BIO_sock_non_fatal_error");
        try {
            return (int)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_fd_should_retry$MH() {
        return RuntimeHelper.requireNonNull(constants$126.BIO_fd_should_retry$MH,"BIO_fd_should_retry");
    }
    public static int BIO_fd_should_retry ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.BIO_fd_should_retry$MH, "BIO_fd_should_retry");
        try {
            return (int)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_fd_non_fatal_error$MH() {
        return RuntimeHelper.requireNonNull(constants$126.BIO_fd_non_fatal_error$MH,"BIO_fd_non_fatal_error");
    }
    public static int BIO_fd_non_fatal_error ( int error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.BIO_fd_non_fatal_error$MH, "BIO_fd_non_fatal_error");
        try {
            return (int)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dump_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$127.BIO_dump_cb$MH,"BIO_dump_cb");
    }
    public static int BIO_dump_cb ( Addressable cb,  Addressable u,  Addressable s,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.BIO_dump_cb$MH, "BIO_dump_cb");
        try {
            return (int)mh$.invokeExact(cb, u, s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dump_indent_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$127.BIO_dump_indent_cb$MH,"BIO_dump_indent_cb");
    }
    public static int BIO_dump_indent_cb ( Addressable cb,  Addressable u,  Addressable s,  int len,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.BIO_dump_indent_cb$MH, "BIO_dump_indent_cb");
        try {
            return (int)mh$.invokeExact(cb, u, s, len, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$127.BIO_dump$MH,"BIO_dump");
    }
    public static int BIO_dump ( Addressable b,  Addressable bytes,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.BIO_dump$MH, "BIO_dump");
        try {
            return (int)mh$.invokeExact(b, bytes, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dump_indent$MH() {
        return RuntimeHelper.requireNonNull(constants$127.BIO_dump_indent$MH,"BIO_dump_indent");
    }
    public static int BIO_dump_indent ( Addressable b,  Addressable bytes,  int len,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.BIO_dump_indent$MH, "BIO_dump_indent");
        try {
            return (int)mh$.invokeExact(b, bytes, len, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dump_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$128.BIO_dump_fp$MH,"BIO_dump_fp");
    }
    public static int BIO_dump_fp ( Addressable fp,  Addressable s,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.BIO_dump_fp$MH, "BIO_dump_fp");
        try {
            return (int)mh$.invokeExact(fp, s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_dump_indent_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$128.BIO_dump_indent_fp$MH,"BIO_dump_indent_fp");
    }
    public static int BIO_dump_indent_fp ( Addressable fp,  Addressable s,  int len,  int indent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.BIO_dump_indent_fp$MH, "BIO_dump_indent_fp");
        try {
            return (int)mh$.invokeExact(fp, s, len, indent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_hex_string$MH() {
        return RuntimeHelper.requireNonNull(constants$128.BIO_hex_string$MH,"BIO_hex_string");
    }
    public static int BIO_hex_string ( Addressable out,  int indent,  int width,  Addressable data,  int datalen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.BIO_hex_string$MH, "BIO_hex_string");
        try {
            return (int)mh$.invokeExact(out, indent, width, data, datalen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_new$MH() {
        return RuntimeHelper.requireNonNull(constants$128.BIO_ADDR_new$MH,"BIO_ADDR_new");
    }
    public static MemoryAddress BIO_ADDR_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.BIO_ADDR_new$MH, "BIO_ADDR_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_rawmake$MH() {
        return RuntimeHelper.requireNonNull(constants$128.BIO_ADDR_rawmake$MH,"BIO_ADDR_rawmake");
    }
    public static int BIO_ADDR_rawmake ( Addressable ap,  int family,  Addressable where,  long wherelen,  short port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.BIO_ADDR_rawmake$MH, "BIO_ADDR_rawmake");
        try {
            return (int)mh$.invokeExact(ap, family, where, wherelen, port);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_free$MH() {
        return RuntimeHelper.requireNonNull(constants$128.BIO_ADDR_free$MH,"BIO_ADDR_free");
    }
    public static void BIO_ADDR_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.BIO_ADDR_free$MH, "BIO_ADDR_free");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_clear$MH,"BIO_ADDR_clear");
    }
    public static void BIO_ADDR_clear ( Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_clear$MH, "BIO_ADDR_clear");
        try {
            mh$.invokeExact(ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_family$MH() {
        return RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_family$MH,"BIO_ADDR_family");
    }
    public static int BIO_ADDR_family ( Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_family$MH, "BIO_ADDR_family");
        try {
            return (int)mh$.invokeExact(ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_rawaddress$MH() {
        return RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_rawaddress$MH,"BIO_ADDR_rawaddress");
    }
    public static int BIO_ADDR_rawaddress ( Addressable ap,  Addressable p,  Addressable l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_rawaddress$MH, "BIO_ADDR_rawaddress");
        try {
            return (int)mh$.invokeExact(ap, p, l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_rawport$MH() {
        return RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_rawport$MH,"BIO_ADDR_rawport");
    }
    public static short BIO_ADDR_rawport ( Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_rawport$MH, "BIO_ADDR_rawport");
        try {
            return (short)mh$.invokeExact(ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_hostname_string$MH() {
        return RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_hostname_string$MH,"BIO_ADDR_hostname_string");
    }
    public static MemoryAddress BIO_ADDR_hostname_string ( Addressable ap,  int numeric) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_hostname_string$MH, "BIO_ADDR_hostname_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ap, numeric);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_service_string$MH() {
        return RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_service_string$MH,"BIO_ADDR_service_string");
    }
    public static MemoryAddress BIO_ADDR_service_string ( Addressable ap,  int numeric) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.BIO_ADDR_service_string$MH, "BIO_ADDR_service_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ap, numeric);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDR_path_string$MH() {
        return RuntimeHelper.requireNonNull(constants$130.BIO_ADDR_path_string$MH,"BIO_ADDR_path_string");
    }
    public static MemoryAddress BIO_ADDR_path_string ( Addressable ap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.BIO_ADDR_path_string$MH, "BIO_ADDR_path_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDRINFO_next$MH() {
        return RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_next$MH,"BIO_ADDRINFO_next");
    }
    public static MemoryAddress BIO_ADDRINFO_next ( Addressable bai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_next$MH, "BIO_ADDRINFO_next");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDRINFO_family$MH() {
        return RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_family$MH,"BIO_ADDRINFO_family");
    }
    public static int BIO_ADDRINFO_family ( Addressable bai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_family$MH, "BIO_ADDRINFO_family");
        try {
            return (int)mh$.invokeExact(bai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDRINFO_socktype$MH() {
        return RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_socktype$MH,"BIO_ADDRINFO_socktype");
    }
    public static int BIO_ADDRINFO_socktype ( Addressable bai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_socktype$MH, "BIO_ADDRINFO_socktype");
        try {
            return (int)mh$.invokeExact(bai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDRINFO_protocol$MH() {
        return RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_protocol$MH,"BIO_ADDRINFO_protocol");
    }
    public static int BIO_ADDRINFO_protocol ( Addressable bai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_protocol$MH, "BIO_ADDRINFO_protocol");
        try {
            return (int)mh$.invokeExact(bai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDRINFO_address$MH() {
        return RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_address$MH,"BIO_ADDRINFO_address");
    }
    public static MemoryAddress BIO_ADDRINFO_address ( Addressable bai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.BIO_ADDRINFO_address$MH, "BIO_ADDRINFO_address");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_ADDRINFO_free$MH() {
        return RuntimeHelper.requireNonNull(constants$131.BIO_ADDRINFO_free$MH,"BIO_ADDRINFO_free");
    }
    public static void BIO_ADDRINFO_free ( Addressable bai) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.BIO_ADDRINFO_free$MH, "BIO_ADDRINFO_free");
        try {
            mh$.invokeExact(bai);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int BIO_PARSE_PRIO_HOST() {
        return (int)0L;
    }
    public static int BIO_PARSE_PRIO_SERV() {
        return (int)1L;
    }
    public static MethodHandle BIO_parse_hostserv$MH() {
        return RuntimeHelper.requireNonNull(constants$131.BIO_parse_hostserv$MH,"BIO_parse_hostserv");
    }
    public static int BIO_parse_hostserv ( Addressable hostserv,  Addressable host,  Addressable service,  int hostserv_prio) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.BIO_parse_hostserv$MH, "BIO_parse_hostserv");
        try {
            return (int)mh$.invokeExact(hostserv, host, service, hostserv_prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int BIO_LOOKUP_CLIENT() {
        return (int)0L;
    }
    public static int BIO_LOOKUP_SERVER() {
        return (int)1L;
    }
    public static MethodHandle BIO_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$131.BIO_lookup$MH,"BIO_lookup");
    }
    public static int BIO_lookup ( Addressable host,  Addressable service,  int lookup_type,  int family,  int socktype,  Addressable res) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.BIO_lookup$MH, "BIO_lookup");
        try {
            return (int)mh$.invokeExact(host, service, lookup_type, family, socktype, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_lookup_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$131.BIO_lookup_ex$MH,"BIO_lookup_ex");
    }
    public static int BIO_lookup_ex ( Addressable host,  Addressable service,  int lookup_type,  int family,  int socktype,  int protocol,  Addressable res) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.BIO_lookup_ex$MH, "BIO_lookup_ex");
        try {
            return (int)mh$.invokeExact(host, service, lookup_type, family, socktype, protocol, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_sock_error$MH() {
        return RuntimeHelper.requireNonNull(constants$131.BIO_sock_error$MH,"BIO_sock_error");
    }
    public static int BIO_sock_error ( int sock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.BIO_sock_error$MH, "BIO_sock_error");
        try {
            return (int)mh$.invokeExact(sock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_socket_ioctl$MH() {
        return RuntimeHelper.requireNonNull(constants$131.BIO_socket_ioctl$MH,"BIO_socket_ioctl");
    }
    public static int BIO_socket_ioctl ( int fd,  long type,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.BIO_socket_ioctl$MH, "BIO_socket_ioctl");
        try {
            return (int)mh$.invokeExact(fd, type, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_socket_nbio$MH() {
        return RuntimeHelper.requireNonNull(constants$132.BIO_socket_nbio$MH,"BIO_socket_nbio");
    }
    public static int BIO_socket_nbio ( int fd,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.BIO_socket_nbio$MH, "BIO_socket_nbio");
        try {
            return (int)mh$.invokeExact(fd, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_sock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$132.BIO_sock_init$MH,"BIO_sock_init");
    }
    public static int BIO_sock_init () {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.BIO_sock_init$MH, "BIO_sock_init");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_set_tcp_ndelay$MH() {
        return RuntimeHelper.requireNonNull(constants$132.BIO_set_tcp_ndelay$MH,"BIO_set_tcp_ndelay");
    }
    public static int BIO_set_tcp_ndelay ( int sock,  int turn_on) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.BIO_set_tcp_ndelay$MH, "BIO_set_tcp_ndelay");
        try {
            return (int)mh$.invokeExact(sock, turn_on);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_gethostbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$132.BIO_gethostbyname$MH,"BIO_gethostbyname");
    }
    public static MemoryAddress BIO_gethostbyname ( Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.BIO_gethostbyname$MH, "BIO_gethostbyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_port$MH() {
        return RuntimeHelper.requireNonNull(constants$132.BIO_get_port$MH,"BIO_get_port");
    }
    public static int BIO_get_port ( Addressable str,  Addressable port_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.BIO_get_port$MH, "BIO_get_port");
        try {
            return (int)mh$.invokeExact(str, port_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_host_ip$MH() {
        return RuntimeHelper.requireNonNull(constants$132.BIO_get_host_ip$MH,"BIO_get_host_ip");
    }
    public static int BIO_get_host_ip ( Addressable str,  Addressable ip) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.BIO_get_host_ip$MH, "BIO_get_host_ip");
        try {
            return (int)mh$.invokeExact(str, ip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_get_accept_socket$MH() {
        return RuntimeHelper.requireNonNull(constants$133.BIO_get_accept_socket$MH,"BIO_get_accept_socket");
    }
    public static int BIO_get_accept_socket ( Addressable host_port,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.BIO_get_accept_socket$MH, "BIO_get_accept_socket");
        try {
            return (int)mh$.invokeExact(host_port, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$133.BIO_accept$MH,"BIO_accept");
    }
    public static int BIO_accept ( int sock,  Addressable ip_port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.BIO_accept$MH, "BIO_accept");
        try {
            return (int)mh$.invokeExact(sock, ip_port);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int BIO_SOCK_INFO_ADDRESS() {
        return (int)0L;
    }
    public static MethodHandle BIO_sock_info$MH() {
        return RuntimeHelper.requireNonNull(constants$133.BIO_sock_info$MH,"BIO_sock_info");
    }
    public static int BIO_sock_info ( int sock,  int type,  Addressable info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.BIO_sock_info$MH, "BIO_sock_info");
        try {
            return (int)mh$.invokeExact(sock, type, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_socket$MH() {
        return RuntimeHelper.requireNonNull(constants$133.BIO_socket$MH,"BIO_socket");
    }
    public static int BIO_socket ( int domain,  int socktype,  int protocol,  int options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.BIO_socket$MH, "BIO_socket");
        try {
            return (int)mh$.invokeExact(domain, socktype, protocol, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$133.BIO_connect$MH,"BIO_connect");
    }
    public static int BIO_connect ( int sock,  Addressable addr,  int options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.BIO_connect$MH, "BIO_connect");
        try {
            return (int)mh$.invokeExact(sock, addr, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_bind$MH() {
        return RuntimeHelper.requireNonNull(constants$133.BIO_bind$MH,"BIO_bind");
    }
    public static int BIO_bind ( int sock,  Addressable addr,  int options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.BIO_bind$MH, "BIO_bind");
        try {
            return (int)mh$.invokeExact(sock, addr, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_listen$MH() {
        return RuntimeHelper.requireNonNull(constants$134.BIO_listen$MH,"BIO_listen");
    }
    public static int BIO_listen ( int sock,  Addressable addr,  int options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.BIO_listen$MH, "BIO_listen");
        try {
            return (int)mh$.invokeExact(sock, addr, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_accept_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$134.BIO_accept_ex$MH,"BIO_accept_ex");
    }
    public static int BIO_accept_ex ( int accept_sock,  Addressable addr,  int options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.BIO_accept_ex$MH, "BIO_accept_ex");
        try {
            return (int)mh$.invokeExact(accept_sock, addr, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_closesocket$MH() {
        return RuntimeHelper.requireNonNull(constants$134.BIO_closesocket$MH,"BIO_closesocket");
    }
    public static int BIO_closesocket ( int sock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.BIO_closesocket$MH, "BIO_closesocket");
        try {
            return (int)mh$.invokeExact(sock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_socket$MH() {
        return RuntimeHelper.requireNonNull(constants$134.BIO_new_socket$MH,"BIO_new_socket");
    }
    public static MemoryAddress BIO_new_socket ( int sock,  int close_flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.BIO_new_socket$MH, "BIO_new_socket");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sock, close_flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$134.BIO_new_connect$MH,"BIO_new_connect");
    }
    public static MemoryAddress BIO_new_connect ( Addressable host_port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.BIO_new_connect$MH, "BIO_new_connect");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(host_port);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$134.BIO_new_accept$MH,"BIO_new_accept");
    }
    public static MemoryAddress BIO_new_accept ( Addressable host_port) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.BIO_new_accept$MH, "BIO_new_accept");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(host_port);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$135.BIO_new_fd$MH,"BIO_new_fd");
    }
    public static MemoryAddress BIO_new_fd ( int fd,  int close_flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.BIO_new_fd$MH, "BIO_new_fd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd, close_flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_new_bio_pair$MH() {
        return RuntimeHelper.requireNonNull(constants$135.BIO_new_bio_pair$MH,"BIO_new_bio_pair");
    }
    public static int BIO_new_bio_pair ( Addressable bio1,  long writebuf1,  Addressable bio2,  long writebuf2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.BIO_new_bio_pair$MH, "BIO_new_bio_pair");
        try {
            return (int)mh$.invokeExact(bio1, writebuf1, bio2, writebuf2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_copy_next_retry$MH() {
        return RuntimeHelper.requireNonNull(constants$135.BIO_copy_next_retry$MH,"BIO_copy_next_retry");
    }
    public static void BIO_copy_next_retry ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.BIO_copy_next_retry$MH, "BIO_copy_next_retry");
        try {
            mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.BIO_printf$MH,"BIO_printf");
    }
    public static int BIO_printf ( Addressable bio,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.BIO_printf$MH, "BIO_printf");
        try {
            return (int)mh$.invokeExact(bio, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.BIO_vprintf$MH,"BIO_vprintf");
    }
    public static int BIO_vprintf ( Addressable bio,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.BIO_vprintf$MH, "BIO_vprintf");
        try {
            return (int)mh$.invokeExact(bio, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.BIO_snprintf$MH,"BIO_snprintf");
    }
    public static int BIO_snprintf ( Addressable buf,  long n,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.BIO_snprintf$MH, "BIO_snprintf");
        try {
            return (int)mh$.invokeExact(buf, n, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.BIO_vsnprintf$MH,"BIO_vsnprintf");
    }
    public static int BIO_vsnprintf ( Addressable buf,  long n,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.BIO_vsnprintf$MH, "BIO_vsnprintf");
        try {
            return (int)mh$.invokeExact(buf, n, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_new$MH() {
        return RuntimeHelper.requireNonNull(constants$136.BIO_meth_new$MH,"BIO_meth_new");
    }
    public static MemoryAddress BIO_meth_new ( int type,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.BIO_meth_new$MH, "BIO_meth_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_free$MH() {
        return RuntimeHelper.requireNonNull(constants$136.BIO_meth_free$MH,"BIO_meth_free");
    }
    public static void BIO_meth_free ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.BIO_meth_free$MH, "BIO_meth_free");
        try {
            mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_write$MH() {
        return RuntimeHelper.requireNonNull(constants$136.BIO_meth_get_write$MH,"BIO_meth_get_write");
    }
    public static MemoryAddress BIO_meth_get_write ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.BIO_meth_get_write$MH, "BIO_meth_get_write");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_write_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$136.BIO_meth_get_write_ex$MH,"BIO_meth_get_write_ex");
    }
    public static MemoryAddress BIO_meth_get_write_ex ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.BIO_meth_get_write_ex$MH, "BIO_meth_get_write_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_write$MH() {
        return RuntimeHelper.requireNonNull(constants$137.BIO_meth_set_write$MH,"BIO_meth_set_write");
    }
    public static int BIO_meth_set_write ( Addressable biom,  Addressable write) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.BIO_meth_set_write$MH, "BIO_meth_set_write");
        try {
            return (int)mh$.invokeExact(biom, write);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_write_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$137.BIO_meth_set_write_ex$MH,"BIO_meth_set_write_ex");
    }
    public static int BIO_meth_set_write_ex ( Addressable biom,  Addressable bwrite) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.BIO_meth_set_write_ex$MH, "BIO_meth_set_write_ex");
        try {
            return (int)mh$.invokeExact(biom, bwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_read$MH() {
        return RuntimeHelper.requireNonNull(constants$137.BIO_meth_get_read$MH,"BIO_meth_get_read");
    }
    public static MemoryAddress BIO_meth_get_read ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.BIO_meth_get_read$MH, "BIO_meth_get_read");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_read_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$138.BIO_meth_get_read_ex$MH,"BIO_meth_get_read_ex");
    }
    public static MemoryAddress BIO_meth_get_read_ex ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.BIO_meth_get_read_ex$MH, "BIO_meth_get_read_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_read$MH() {
        return RuntimeHelper.requireNonNull(constants$138.BIO_meth_set_read$MH,"BIO_meth_set_read");
    }
    public static int BIO_meth_set_read ( Addressable biom,  Addressable read) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.BIO_meth_set_read$MH, "BIO_meth_set_read");
        try {
            return (int)mh$.invokeExact(biom, read);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_read_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$139.BIO_meth_set_read_ex$MH,"BIO_meth_set_read_ex");
    }
    public static int BIO_meth_set_read_ex ( Addressable biom,  Addressable bread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.BIO_meth_set_read_ex$MH, "BIO_meth_set_read_ex");
        try {
            return (int)mh$.invokeExact(biom, bread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_puts$MH() {
        return RuntimeHelper.requireNonNull(constants$139.BIO_meth_get_puts$MH,"BIO_meth_get_puts");
    }
    public static MemoryAddress BIO_meth_get_puts ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.BIO_meth_get_puts$MH, "BIO_meth_get_puts");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_puts$MH() {
        return RuntimeHelper.requireNonNull(constants$139.BIO_meth_set_puts$MH,"BIO_meth_set_puts");
    }
    public static int BIO_meth_set_puts ( Addressable biom,  Addressable puts) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.BIO_meth_set_puts$MH, "BIO_meth_set_puts");
        try {
            return (int)mh$.invokeExact(biom, puts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_gets$MH() {
        return RuntimeHelper.requireNonNull(constants$139.BIO_meth_get_gets$MH,"BIO_meth_get_gets");
    }
    public static MemoryAddress BIO_meth_get_gets ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.BIO_meth_get_gets$MH, "BIO_meth_get_gets");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_gets$MH() {
        return RuntimeHelper.requireNonNull(constants$140.BIO_meth_set_gets$MH,"BIO_meth_set_gets");
    }
    public static int BIO_meth_set_gets ( Addressable biom,  Addressable gets) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.BIO_meth_set_gets$MH, "BIO_meth_set_gets");
        try {
            return (int)mh$.invokeExact(biom, gets);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$140.BIO_meth_get_ctrl$MH,"BIO_meth_get_ctrl");
    }
    public static MemoryAddress BIO_meth_get_ctrl ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.BIO_meth_get_ctrl$MH, "BIO_meth_get_ctrl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$141.BIO_meth_set_ctrl$MH,"BIO_meth_set_ctrl");
    }
    public static int BIO_meth_set_ctrl ( Addressable biom,  Addressable ctrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.BIO_meth_set_ctrl$MH, "BIO_meth_set_ctrl");
        try {
            return (int)mh$.invokeExact(biom, ctrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_create$MH() {
        return RuntimeHelper.requireNonNull(constants$141.BIO_meth_get_create$MH,"BIO_meth_get_create");
    }
    public static MemoryAddress BIO_meth_get_create ( Addressable bion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.BIO_meth_get_create$MH, "BIO_meth_get_create");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_create$MH() {
        return RuntimeHelper.requireNonNull(constants$141.BIO_meth_set_create$MH,"BIO_meth_set_create");
    }
    public static int BIO_meth_set_create ( Addressable biom,  Addressable create) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.BIO_meth_set_create$MH, "BIO_meth_set_create");
        try {
            return (int)mh$.invokeExact(biom, create);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$141.BIO_meth_get_destroy$MH,"BIO_meth_get_destroy");
    }
    public static MemoryAddress BIO_meth_get_destroy ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.BIO_meth_get_destroy$MH, "BIO_meth_get_destroy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$142.BIO_meth_set_destroy$MH,"BIO_meth_set_destroy");
    }
    public static int BIO_meth_set_destroy ( Addressable biom,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.BIO_meth_set_destroy$MH, "BIO_meth_set_destroy");
        try {
            return (int)mh$.invokeExact(biom, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_get_callback_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$142.BIO_meth_get_callback_ctrl$MH,"BIO_meth_get_callback_ctrl");
    }
    public static MemoryAddress BIO_meth_get_callback_ctrl ( Addressable biom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$142.BIO_meth_get_callback_ctrl$MH, "BIO_meth_get_callback_ctrl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(biom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BIO_meth_set_callback_ctrl$MH() {
        return RuntimeHelper.requireNonNull(constants$143.BIO_meth_set_callback_ctrl$MH,"BIO_meth_set_callback_ctrl");
    }
    public static int BIO_meth_set_callback_ctrl ( Addressable biom,  Addressable callback_ctrl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.BIO_meth_set_callback_ctrl$MH, "BIO_meth_set_callback_ctrl");
        try {
            return (int)mh$.invokeExact(biom, callback_ctrl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_BUF_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$143.ERR_load_BUF_strings$MH,"ERR_load_BUF_strings");
    }
    public static int ERR_load_BUF_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.ERR_load_BUF_strings$MH, "ERR_load_BUF_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout.OfLong ptrdiff_t = JAVA_LONG;
    public static MethodHandle BUF_MEM_new$MH() {
        return RuntimeHelper.requireNonNull(constants$143.BUF_MEM_new$MH,"BUF_MEM_new");
    }
    public static MemoryAddress BUF_MEM_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.BUF_MEM_new$MH, "BUF_MEM_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BUF_MEM_new_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$143.BUF_MEM_new_ex$MH,"BUF_MEM_new_ex");
    }
    public static MemoryAddress BUF_MEM_new_ex ( long flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.BUF_MEM_new_ex$MH, "BUF_MEM_new_ex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BUF_MEM_free$MH() {
        return RuntimeHelper.requireNonNull(constants$143.BUF_MEM_free$MH,"BUF_MEM_free");
    }
    public static void BUF_MEM_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.BUF_MEM_free$MH, "BUF_MEM_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BUF_MEM_grow$MH() {
        return RuntimeHelper.requireNonNull(constants$143.BUF_MEM_grow$MH,"BUF_MEM_grow");
    }
    public static long BUF_MEM_grow ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.BUF_MEM_grow$MH, "BUF_MEM_grow");
        try {
            return (long)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BUF_MEM_grow_clean$MH() {
        return RuntimeHelper.requireNonNull(constants$144.BUF_MEM_grow_clean$MH,"BUF_MEM_grow_clean");
    }
    public static long BUF_MEM_grow_clean ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.BUF_MEM_grow_clean$MH, "BUF_MEM_grow_clean");
        try {
            return (long)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BUF_reverse$MH() {
        return RuntimeHelper.requireNonNull(constants$144.BUF_reverse$MH,"BUF_reverse");
    }
    public static void BUF_reverse ( Addressable out,  Addressable in,  long siz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.BUF_reverse$MH, "BUF_reverse");
        try {
            mh$.invokeExact(out, in, siz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_EVP_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ERR_load_EVP_strings$MH,"ERR_load_EVP_strings");
    }
    public static int ERR_load_EVP_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.ERR_load_EVP_strings$MH, "ERR_load_EVP_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_ASN1_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ERR_load_ASN1_strings$MH,"ERR_load_ASN1_strings");
    }
    public static int ERR_load_ASN1_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.ERR_load_ASN1_strings$MH, "ERR_load_ASN1_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ERR_load_BN_strings$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ERR_load_BN_strings$MH,"ERR_load_BN_strings");
    }
    public static int ERR_load_BN_strings () {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.ERR_load_BN_strings$MH, "ERR_load_BN_strings");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$144.BN_set_flags$MH,"BN_set_flags");
    }
    public static void BN_set_flags ( Addressable b,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.BN_set_flags$MH, "BN_set_flags");
        try {
            mh$.invokeExact(b, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$145.BN_get_flags$MH,"BN_get_flags");
    }
    public static int BN_get_flags ( Addressable b,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.BN_get_flags$MH, "BN_get_flags");
        try {
            return (int)mh$.invokeExact(b, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_with_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$145.BN_with_flags$MH,"BN_with_flags");
    }
    public static void BN_with_flags ( Addressable dest,  Addressable b,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.BN_with_flags$MH, "BN_with_flags");
        try {
            mh$.invokeExact(dest, b, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_GENCB_call$MH() {
        return RuntimeHelper.requireNonNull(constants$145.BN_GENCB_call$MH,"BN_GENCB_call");
    }
    public static int BN_GENCB_call ( Addressable cb,  int a,  int b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.BN_GENCB_call$MH, "BN_GENCB_call");
        try {
            return (int)mh$.invokeExact(cb, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_GENCB_new$MH() {
        return RuntimeHelper.requireNonNull(constants$145.BN_GENCB_new$MH,"BN_GENCB_new");
    }
    public static MemoryAddress BN_GENCB_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.BN_GENCB_new$MH, "BN_GENCB_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_GENCB_free$MH() {
        return RuntimeHelper.requireNonNull(constants$145.BN_GENCB_free$MH,"BN_GENCB_free");
    }
    public static void BN_GENCB_free ( Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.BN_GENCB_free$MH, "BN_GENCB_free");
        try {
            mh$.invokeExact(cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_GENCB_set_old$MH() {
        return RuntimeHelper.requireNonNull(constants$146.BN_GENCB_set_old$MH,"BN_GENCB_set_old");
    }
    public static void BN_GENCB_set_old ( Addressable gencb,  Addressable callback,  Addressable cb_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.BN_GENCB_set_old$MH, "BN_GENCB_set_old");
        try {
            mh$.invokeExact(gencb, callback, cb_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_GENCB_set$MH() {
        return RuntimeHelper.requireNonNull(constants$146.BN_GENCB_set$MH,"BN_GENCB_set");
    }
    public static void BN_GENCB_set ( Addressable gencb,  Addressable callback,  Addressable cb_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.BN_GENCB_set$MH, "BN_GENCB_set");
        try {
            mh$.invokeExact(gencb, callback, cb_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_GENCB_get_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$146.BN_GENCB_get_arg$MH,"BN_GENCB_get_arg");
    }
    public static MemoryAddress BN_GENCB_get_arg ( Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.BN_GENCB_get_arg$MH, "BN_GENCB_get_arg");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_abs_is_word$MH() {
        return RuntimeHelper.requireNonNull(constants$147.BN_abs_is_word$MH,"BN_abs_is_word");
    }
    public static int BN_abs_is_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.BN_abs_is_word$MH, "BN_abs_is_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$147.BN_is_zero$MH,"BN_is_zero");
    }
    public static int BN_is_zero ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.BN_is_zero$MH, "BN_is_zero");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_one$MH() {
        return RuntimeHelper.requireNonNull(constants$147.BN_is_one$MH,"BN_is_one");
    }
    public static int BN_is_one ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.BN_is_one$MH, "BN_is_one");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_word$MH() {
        return RuntimeHelper.requireNonNull(constants$147.BN_is_word$MH,"BN_is_word");
    }
    public static int BN_is_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.BN_is_word$MH, "BN_is_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_odd$MH() {
        return RuntimeHelper.requireNonNull(constants$147.BN_is_odd$MH,"BN_is_odd");
    }
    public static int BN_is_odd ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.BN_is_odd$MH, "BN_is_odd");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_zero_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$147.BN_zero_ex$MH,"BN_zero_ex");
    }
    public static void BN_zero_ex ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.BN_zero_ex$MH, "BN_zero_ex");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_value_one$MH() {
        return RuntimeHelper.requireNonNull(constants$148.BN_value_one$MH,"BN_value_one");
    }
    public static MemoryAddress BN_value_one () {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.BN_value_one$MH, "BN_value_one");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_options$MH() {
        return RuntimeHelper.requireNonNull(constants$148.BN_options$MH,"BN_options");
    }
    public static MemoryAddress BN_options () {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.BN_options$MH, "BN_options");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$148.BN_CTX_new$MH,"BN_CTX_new");
    }
    public static MemoryAddress BN_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.BN_CTX_new$MH, "BN_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_CTX_secure_new$MH() {
        return RuntimeHelper.requireNonNull(constants$148.BN_CTX_secure_new$MH,"BN_CTX_secure_new");
    }
    public static MemoryAddress BN_CTX_secure_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.BN_CTX_secure_new$MH, "BN_CTX_secure_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$148.BN_CTX_free$MH,"BN_CTX_free");
    }
    public static void BN_CTX_free ( Addressable c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.BN_CTX_free$MH, "BN_CTX_free");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_CTX_start$MH() {
        return RuntimeHelper.requireNonNull(constants$148.BN_CTX_start$MH,"BN_CTX_start");
    }
    public static void BN_CTX_start ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.BN_CTX_start$MH, "BN_CTX_start");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_CTX_get$MH() {
        return RuntimeHelper.requireNonNull(constants$149.BN_CTX_get$MH,"BN_CTX_get");
    }
    public static MemoryAddress BN_CTX_get ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.BN_CTX_get$MH, "BN_CTX_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_CTX_end$MH() {
        return RuntimeHelper.requireNonNull(constants$149.BN_CTX_end$MH,"BN_CTX_end");
    }
    public static void BN_CTX_end ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.BN_CTX_end$MH, "BN_CTX_end");
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_rand$MH() {
        return RuntimeHelper.requireNonNull(constants$149.BN_rand$MH,"BN_rand");
    }
    public static int BN_rand ( Addressable rnd,  int bits,  int top,  int bottom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.BN_rand$MH, "BN_rand");
        try {
            return (int)mh$.invokeExact(rnd, bits, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_priv_rand$MH() {
        return RuntimeHelper.requireNonNull(constants$149.BN_priv_rand$MH,"BN_priv_rand");
    }
    public static int BN_priv_rand ( Addressable rnd,  int bits,  int top,  int bottom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.BN_priv_rand$MH, "BN_priv_rand");
        try {
            return (int)mh$.invokeExact(rnd, bits, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_rand_range$MH() {
        return RuntimeHelper.requireNonNull(constants$149.BN_rand_range$MH,"BN_rand_range");
    }
    public static int BN_rand_range ( Addressable rnd,  Addressable range) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.BN_rand_range$MH, "BN_rand_range");
        try {
            return (int)mh$.invokeExact(rnd, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_priv_rand_range$MH() {
        return RuntimeHelper.requireNonNull(constants$149.BN_priv_rand_range$MH,"BN_priv_rand_range");
    }
    public static int BN_priv_rand_range ( Addressable rnd,  Addressable range) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.BN_priv_rand_range$MH, "BN_priv_rand_range");
        try {
            return (int)mh$.invokeExact(rnd, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_pseudo_rand$MH() {
        return RuntimeHelper.requireNonNull(constants$150.BN_pseudo_rand$MH,"BN_pseudo_rand");
    }
    public static int BN_pseudo_rand ( Addressable rnd,  int bits,  int top,  int bottom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.BN_pseudo_rand$MH, "BN_pseudo_rand");
        try {
            return (int)mh$.invokeExact(rnd, bits, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_pseudo_rand_range$MH() {
        return RuntimeHelper.requireNonNull(constants$150.BN_pseudo_rand_range$MH,"BN_pseudo_rand_range");
    }
    public static int BN_pseudo_rand_range ( Addressable rnd,  Addressable range) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.BN_pseudo_rand_range$MH, "BN_pseudo_rand_range");
        try {
            return (int)mh$.invokeExact(rnd, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_num_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$150.BN_num_bits$MH,"BN_num_bits");
    }
    public static int BN_num_bits ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.BN_num_bits$MH, "BN_num_bits");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_num_bits_word$MH() {
        return RuntimeHelper.requireNonNull(constants$150.BN_num_bits_word$MH,"BN_num_bits_word");
    }
    public static int BN_num_bits_word ( long l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.BN_num_bits_word$MH, "BN_num_bits_word");
        try {
            return (int)mh$.invokeExact(l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_security_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$150.BN_security_bits$MH,"BN_security_bits");
    }
    public static int BN_security_bits ( int L,  int N) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.BN_security_bits$MH, "BN_security_bits");
        try {
            return (int)mh$.invokeExact(L, N);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_new$MH() {
        return RuntimeHelper.requireNonNull(constants$150.BN_new$MH,"BN_new");
    }
    public static MemoryAddress BN_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.BN_new$MH, "BN_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_secure_new$MH() {
        return RuntimeHelper.requireNonNull(constants$151.BN_secure_new$MH,"BN_secure_new");
    }
    public static MemoryAddress BN_secure_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.BN_secure_new$MH, "BN_secure_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_clear_free$MH() {
        return RuntimeHelper.requireNonNull(constants$151.BN_clear_free$MH,"BN_clear_free");
    }
    public static void BN_clear_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.BN_clear_free$MH, "BN_clear_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$151.BN_copy$MH,"BN_copy");
    }
    public static MemoryAddress BN_copy ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.BN_copy$MH, "BN_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_swap$MH() {
        return RuntimeHelper.requireNonNull(constants$151.BN_swap$MH,"BN_swap");
    }
    public static void BN_swap ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.BN_swap$MH, "BN_swap");
        try {
            mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bin2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$151.BN_bin2bn$MH,"BN_bin2bn");
    }
    public static MemoryAddress BN_bin2bn ( Addressable s,  int len,  Addressable ret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.BN_bin2bn$MH, "BN_bin2bn");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, len, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bn2bin$MH() {
        return RuntimeHelper.requireNonNull(constants$151.BN_bn2bin$MH,"BN_bn2bin");
    }
    public static int BN_bn2bin ( Addressable a,  Addressable to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.BN_bn2bin$MH, "BN_bn2bin");
        try {
            return (int)mh$.invokeExact(a, to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bn2binpad$MH() {
        return RuntimeHelper.requireNonNull(constants$152.BN_bn2binpad$MH,"BN_bn2binpad");
    }
    public static int BN_bn2binpad ( Addressable a,  Addressable to,  int tolen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.BN_bn2binpad$MH, "BN_bn2binpad");
        try {
            return (int)mh$.invokeExact(a, to, tolen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_lebin2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$152.BN_lebin2bn$MH,"BN_lebin2bn");
    }
    public static MemoryAddress BN_lebin2bn ( Addressable s,  int len,  Addressable ret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.BN_lebin2bn$MH, "BN_lebin2bn");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, len, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bn2lebinpad$MH() {
        return RuntimeHelper.requireNonNull(constants$152.BN_bn2lebinpad$MH,"BN_bn2lebinpad");
    }
    public static int BN_bn2lebinpad ( Addressable a,  Addressable to,  int tolen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.BN_bn2lebinpad$MH, "BN_bn2lebinpad");
        try {
            return (int)mh$.invokeExact(a, to, tolen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mpi2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$152.BN_mpi2bn$MH,"BN_mpi2bn");
    }
    public static MemoryAddress BN_mpi2bn ( Addressable s,  int len,  Addressable ret) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.BN_mpi2bn$MH, "BN_mpi2bn");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(s, len, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bn2mpi$MH() {
        return RuntimeHelper.requireNonNull(constants$152.BN_bn2mpi$MH,"BN_bn2mpi");
    }
    public static int BN_bn2mpi ( Addressable a,  Addressable to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.BN_bn2mpi$MH, "BN_bn2mpi");
        try {
            return (int)mh$.invokeExact(a, to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_sub$MH() {
        return RuntimeHelper.requireNonNull(constants$152.BN_sub$MH,"BN_sub");
    }
    public static int BN_sub ( Addressable r,  Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.BN_sub$MH, "BN_sub");
        try {
            return (int)mh$.invokeExact(r, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_usub$MH() {
        return RuntimeHelper.requireNonNull(constants$153.BN_usub$MH,"BN_usub");
    }
    public static int BN_usub ( Addressable r,  Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.BN_usub$MH, "BN_usub");
        try {
            return (int)mh$.invokeExact(r, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_uadd$MH() {
        return RuntimeHelper.requireNonNull(constants$153.BN_uadd$MH,"BN_uadd");
    }
    public static int BN_uadd ( Addressable r,  Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.BN_uadd$MH, "BN_uadd");
        try {
            return (int)mh$.invokeExact(r, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_add$MH() {
        return RuntimeHelper.requireNonNull(constants$153.BN_add$MH,"BN_add");
    }
    public static int BN_add ( Addressable r,  Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.BN_add$MH, "BN_add");
        try {
            return (int)mh$.invokeExact(r, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$153.BN_mul$MH,"BN_mul");
    }
    public static int BN_mul ( Addressable r,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.BN_mul$MH, "BN_mul");
        try {
            return (int)mh$.invokeExact(r, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_sqr$MH() {
        return RuntimeHelper.requireNonNull(constants$153.BN_sqr$MH,"BN_sqr");
    }
    public static int BN_sqr ( Addressable r,  Addressable a,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.BN_sqr$MH, "BN_sqr");
        try {
            return (int)mh$.invokeExact(r, a, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_set_negative$MH() {
        return RuntimeHelper.requireNonNull(constants$153.BN_set_negative$MH,"BN_set_negative");
    }
    public static void BN_set_negative ( Addressable b,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.BN_set_negative$MH, "BN_set_negative");
        try {
            mh$.invokeExact(b, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_negative$MH() {
        return RuntimeHelper.requireNonNull(constants$154.BN_is_negative$MH,"BN_is_negative");
    }
    public static int BN_is_negative ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.BN_is_negative$MH, "BN_is_negative");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_div$MH() {
        return RuntimeHelper.requireNonNull(constants$154.BN_div$MH,"BN_div");
    }
    public static int BN_div ( Addressable dv,  Addressable rem,  Addressable m,  Addressable d,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.BN_div$MH, "BN_div");
        try {
            return (int)mh$.invokeExact(dv, rem, m, d, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nnmod$MH() {
        return RuntimeHelper.requireNonNull(constants$154.BN_nnmod$MH,"BN_nnmod");
    }
    public static int BN_nnmod ( Addressable r,  Addressable m,  Addressable d,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.BN_nnmod$MH, "BN_nnmod");
        try {
            return (int)mh$.invokeExact(r, m, d, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_add$MH() {
        return RuntimeHelper.requireNonNull(constants$154.BN_mod_add$MH,"BN_mod_add");
    }
    public static int BN_mod_add ( Addressable r,  Addressable a,  Addressable b,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.BN_mod_add$MH, "BN_mod_add");
        try {
            return (int)mh$.invokeExact(r, a, b, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_add_quick$MH() {
        return RuntimeHelper.requireNonNull(constants$154.BN_mod_add_quick$MH,"BN_mod_add_quick");
    }
    public static int BN_mod_add_quick ( Addressable r,  Addressable a,  Addressable b,  Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.BN_mod_add_quick$MH, "BN_mod_add_quick");
        try {
            return (int)mh$.invokeExact(r, a, b, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_sub$MH() {
        return RuntimeHelper.requireNonNull(constants$154.BN_mod_sub$MH,"BN_mod_sub");
    }
    public static int BN_mod_sub ( Addressable r,  Addressable a,  Addressable b,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.BN_mod_sub$MH, "BN_mod_sub");
        try {
            return (int)mh$.invokeExact(r, a, b, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_sub_quick$MH() {
        return RuntimeHelper.requireNonNull(constants$155.BN_mod_sub_quick$MH,"BN_mod_sub_quick");
    }
    public static int BN_mod_sub_quick ( Addressable r,  Addressable a,  Addressable b,  Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.BN_mod_sub_quick$MH, "BN_mod_sub_quick");
        try {
            return (int)mh$.invokeExact(r, a, b, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$155.BN_mod_mul$MH,"BN_mod_mul");
    }
    public static int BN_mod_mul ( Addressable r,  Addressable a,  Addressable b,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.BN_mod_mul$MH, "BN_mod_mul");
        try {
            return (int)mh$.invokeExact(r, a, b, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_sqr$MH() {
        return RuntimeHelper.requireNonNull(constants$155.BN_mod_sqr$MH,"BN_mod_sqr");
    }
    public static int BN_mod_sqr ( Addressable r,  Addressable a,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.BN_mod_sqr$MH, "BN_mod_sqr");
        try {
            return (int)mh$.invokeExact(r, a, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_lshift1$MH() {
        return RuntimeHelper.requireNonNull(constants$155.BN_mod_lshift1$MH,"BN_mod_lshift1");
    }
    public static int BN_mod_lshift1 ( Addressable r,  Addressable a,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.BN_mod_lshift1$MH, "BN_mod_lshift1");
        try {
            return (int)mh$.invokeExact(r, a, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_lshift1_quick$MH() {
        return RuntimeHelper.requireNonNull(constants$155.BN_mod_lshift1_quick$MH,"BN_mod_lshift1_quick");
    }
    public static int BN_mod_lshift1_quick ( Addressable r,  Addressable a,  Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.BN_mod_lshift1_quick$MH, "BN_mod_lshift1_quick");
        try {
            return (int)mh$.invokeExact(r, a, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_lshift$MH() {
        return RuntimeHelper.requireNonNull(constants$155.BN_mod_lshift$MH,"BN_mod_lshift");
    }
    public static int BN_mod_lshift ( Addressable r,  Addressable a,  int n,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.BN_mod_lshift$MH, "BN_mod_lshift");
        try {
            return (int)mh$.invokeExact(r, a, n, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_lshift_quick$MH() {
        return RuntimeHelper.requireNonNull(constants$156.BN_mod_lshift_quick$MH,"BN_mod_lshift_quick");
    }
    public static int BN_mod_lshift_quick ( Addressable r,  Addressable a,  int n,  Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.BN_mod_lshift_quick$MH, "BN_mod_lshift_quick");
        try {
            return (int)mh$.invokeExact(r, a, n, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_word$MH() {
        return RuntimeHelper.requireNonNull(constants$156.BN_mod_word$MH,"BN_mod_word");
    }
    public static long BN_mod_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.BN_mod_word$MH, "BN_mod_word");
        try {
            return (long)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_div_word$MH() {
        return RuntimeHelper.requireNonNull(constants$156.BN_div_word$MH,"BN_div_word");
    }
    public static long BN_div_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.BN_div_word$MH, "BN_div_word");
        try {
            return (long)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mul_word$MH() {
        return RuntimeHelper.requireNonNull(constants$156.BN_mul_word$MH,"BN_mul_word");
    }
    public static int BN_mul_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.BN_mul_word$MH, "BN_mul_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_add_word$MH() {
        return RuntimeHelper.requireNonNull(constants$156.BN_add_word$MH,"BN_add_word");
    }
    public static int BN_add_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.BN_add_word$MH, "BN_add_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_sub_word$MH() {
        return RuntimeHelper.requireNonNull(constants$156.BN_sub_word$MH,"BN_sub_word");
    }
    public static int BN_sub_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.BN_sub_word$MH, "BN_sub_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_set_word$MH() {
        return RuntimeHelper.requireNonNull(constants$157.BN_set_word$MH,"BN_set_word");
    }
    public static int BN_set_word ( Addressable a,  long w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.BN_set_word$MH, "BN_set_word");
        try {
            return (int)mh$.invokeExact(a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_word$MH() {
        return RuntimeHelper.requireNonNull(constants$157.BN_get_word$MH,"BN_get_word");
    }
    public static long BN_get_word ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.BN_get_word$MH, "BN_get_word");
        try {
            return (long)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$157.BN_cmp$MH,"BN_cmp");
    }
    public static int BN_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.BN_cmp$MH, "BN_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_free$MH() {
        return RuntimeHelper.requireNonNull(constants$157.BN_free$MH,"BN_free");
    }
    public static void BN_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.BN_free$MH, "BN_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_bit_set$MH() {
        return RuntimeHelper.requireNonNull(constants$157.BN_is_bit_set$MH,"BN_is_bit_set");
    }
    public static int BN_is_bit_set ( Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.BN_is_bit_set$MH, "BN_is_bit_set");
        try {
            return (int)mh$.invokeExact(a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_lshift$MH() {
        return RuntimeHelper.requireNonNull(constants$157.BN_lshift$MH,"BN_lshift");
    }
    public static int BN_lshift ( Addressable r,  Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$157.BN_lshift$MH, "BN_lshift");
        try {
            return (int)mh$.invokeExact(r, a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_lshift1$MH() {
        return RuntimeHelper.requireNonNull(constants$158.BN_lshift1$MH,"BN_lshift1");
    }
    public static int BN_lshift1 ( Addressable r,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.BN_lshift1$MH, "BN_lshift1");
        try {
            return (int)mh$.invokeExact(r, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_exp$MH() {
        return RuntimeHelper.requireNonNull(constants$158.BN_exp$MH,"BN_exp");
    }
    public static int BN_exp ( Addressable r,  Addressable a,  Addressable p,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.BN_exp$MH, "BN_exp");
        try {
            return (int)mh$.invokeExact(r, a, p, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp$MH() {
        return RuntimeHelper.requireNonNull(constants$158.BN_mod_exp$MH,"BN_mod_exp");
    }
    public static int BN_mod_exp ( Addressable r,  Addressable a,  Addressable p,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.BN_mod_exp$MH, "BN_mod_exp");
        try {
            return (int)mh$.invokeExact(r, a, p, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp_mont$MH() {
        return RuntimeHelper.requireNonNull(constants$158.BN_mod_exp_mont$MH,"BN_mod_exp_mont");
    }
    public static int BN_mod_exp_mont ( Addressable r,  Addressable a,  Addressable p,  Addressable m,  Addressable ctx,  Addressable m_ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.BN_mod_exp_mont$MH, "BN_mod_exp_mont");
        try {
            return (int)mh$.invokeExact(r, a, p, m, ctx, m_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp_mont_consttime$MH() {
        return RuntimeHelper.requireNonNull(constants$158.BN_mod_exp_mont_consttime$MH,"BN_mod_exp_mont_consttime");
    }
    public static int BN_mod_exp_mont_consttime ( Addressable rr,  Addressable a,  Addressable p,  Addressable m,  Addressable ctx,  Addressable in_mont) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.BN_mod_exp_mont_consttime$MH, "BN_mod_exp_mont_consttime");
        try {
            return (int)mh$.invokeExact(rr, a, p, m, ctx, in_mont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp_mont_word$MH() {
        return RuntimeHelper.requireNonNull(constants$158.BN_mod_exp_mont_word$MH,"BN_mod_exp_mont_word");
    }
    public static int BN_mod_exp_mont_word ( Addressable r,  long a,  Addressable p,  Addressable m,  Addressable ctx,  Addressable m_ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$158.BN_mod_exp_mont_word$MH, "BN_mod_exp_mont_word");
        try {
            return (int)mh$.invokeExact(r, a, p, m, ctx, m_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp2_mont$MH() {
        return RuntimeHelper.requireNonNull(constants$159.BN_mod_exp2_mont$MH,"BN_mod_exp2_mont");
    }
    public static int BN_mod_exp2_mont ( Addressable r,  Addressable a1,  Addressable p1,  Addressable a2,  Addressable p2,  Addressable m,  Addressable ctx,  Addressable m_ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.BN_mod_exp2_mont$MH, "BN_mod_exp2_mont");
        try {
            return (int)mh$.invokeExact(r, a1, p1, a2, p2, m, ctx, m_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$159.BN_mod_exp_simple$MH,"BN_mod_exp_simple");
    }
    public static int BN_mod_exp_simple ( Addressable r,  Addressable a,  Addressable p,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.BN_mod_exp_simple$MH, "BN_mod_exp_simple");
        try {
            return (int)mh$.invokeExact(r, a, p, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mask_bits$MH() {
        return RuntimeHelper.requireNonNull(constants$159.BN_mask_bits$MH,"BN_mask_bits");
    }
    public static int BN_mask_bits ( Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.BN_mask_bits$MH, "BN_mask_bits");
        try {
            return (int)mh$.invokeExact(a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_print_fp$MH() {
        return RuntimeHelper.requireNonNull(constants$159.BN_print_fp$MH,"BN_print_fp");
    }
    public static int BN_print_fp ( Addressable fp,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.BN_print_fp$MH, "BN_print_fp");
        try {
            return (int)mh$.invokeExact(fp, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_print$MH() {
        return RuntimeHelper.requireNonNull(constants$159.BN_print$MH,"BN_print");
    }
    public static int BN_print ( Addressable bio,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.BN_print$MH, "BN_print");
        try {
            return (int)mh$.invokeExact(bio, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_reciprocal$MH() {
        return RuntimeHelper.requireNonNull(constants$159.BN_reciprocal$MH,"BN_reciprocal");
    }
    public static int BN_reciprocal ( Addressable r,  Addressable m,  int len,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.BN_reciprocal$MH, "BN_reciprocal");
        try {
            return (int)mh$.invokeExact(r, m, len, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_rshift$MH() {
        return RuntimeHelper.requireNonNull(constants$160.BN_rshift$MH,"BN_rshift");
    }
    public static int BN_rshift ( Addressable r,  Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.BN_rshift$MH, "BN_rshift");
        try {
            return (int)mh$.invokeExact(r, a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_rshift1$MH() {
        return RuntimeHelper.requireNonNull(constants$160.BN_rshift1$MH,"BN_rshift1");
    }
    public static int BN_rshift1 ( Addressable r,  Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.BN_rshift1$MH, "BN_rshift1");
        try {
            return (int)mh$.invokeExact(r, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$160.BN_clear$MH,"BN_clear");
    }
    public static void BN_clear ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.BN_clear$MH, "BN_clear");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$160.BN_dup$MH,"BN_dup");
    }
    public static MemoryAddress BN_dup ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.BN_dup$MH, "BN_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_ucmp$MH() {
        return RuntimeHelper.requireNonNull(constants$160.BN_ucmp$MH,"BN_ucmp");
    }
    public static int BN_ucmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.BN_ucmp$MH, "BN_ucmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_set_bit$MH() {
        return RuntimeHelper.requireNonNull(constants$160.BN_set_bit$MH,"BN_set_bit");
    }
    public static int BN_set_bit ( Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.BN_set_bit$MH, "BN_set_bit");
        try {
            return (int)mh$.invokeExact(a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_clear_bit$MH() {
        return RuntimeHelper.requireNonNull(constants$161.BN_clear_bit$MH,"BN_clear_bit");
    }
    public static int BN_clear_bit ( Addressable a,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.BN_clear_bit$MH, "BN_clear_bit");
        try {
            return (int)mh$.invokeExact(a, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bn2hex$MH() {
        return RuntimeHelper.requireNonNull(constants$161.BN_bn2hex$MH,"BN_bn2hex");
    }
    public static MemoryAddress BN_bn2hex ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.BN_bn2hex$MH, "BN_bn2hex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bn2dec$MH() {
        return RuntimeHelper.requireNonNull(constants$161.BN_bn2dec$MH,"BN_bn2dec");
    }
    public static MemoryAddress BN_bn2dec ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.BN_bn2dec$MH, "BN_bn2dec");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_hex2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$161.BN_hex2bn$MH,"BN_hex2bn");
    }
    public static int BN_hex2bn ( Addressable a,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.BN_hex2bn$MH, "BN_hex2bn");
        try {
            return (int)mh$.invokeExact(a, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_dec2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$161.BN_dec2bn$MH,"BN_dec2bn");
    }
    public static int BN_dec2bn ( Addressable a,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.BN_dec2bn$MH, "BN_dec2bn");
        try {
            return (int)mh$.invokeExact(a, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_asc2bn$MH() {
        return RuntimeHelper.requireNonNull(constants$161.BN_asc2bn$MH,"BN_asc2bn");
    }
    public static int BN_asc2bn ( Addressable a,  Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.BN_asc2bn$MH, "BN_asc2bn");
        try {
            return (int)mh$.invokeExact(a, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_gcd$MH() {
        return RuntimeHelper.requireNonNull(constants$162.BN_gcd$MH,"BN_gcd");
    }
    public static int BN_gcd ( Addressable r,  Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.BN_gcd$MH, "BN_gcd");
        try {
            return (int)mh$.invokeExact(r, a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_kronecker$MH() {
        return RuntimeHelper.requireNonNull(constants$162.BN_kronecker$MH,"BN_kronecker");
    }
    public static int BN_kronecker ( Addressable a,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.BN_kronecker$MH, "BN_kronecker");
        try {
            return (int)mh$.invokeExact(a, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_inverse$MH() {
        return RuntimeHelper.requireNonNull(constants$162.BN_mod_inverse$MH,"BN_mod_inverse");
    }
    public static MemoryAddress BN_mod_inverse ( Addressable ret,  Addressable a,  Addressable n,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.BN_mod_inverse$MH, "BN_mod_inverse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ret, a, n, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$162.BN_mod_sqrt$MH,"BN_mod_sqrt");
    }
    public static MemoryAddress BN_mod_sqrt ( Addressable ret,  Addressable a,  Addressable n,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.BN_mod_sqrt$MH, "BN_mod_sqrt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ret, a, n, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_consttime_swap$MH() {
        return RuntimeHelper.requireNonNull(constants$162.BN_consttime_swap$MH,"BN_consttime_swap");
    }
    public static void BN_consttime_swap ( long swap,  Addressable a,  Addressable b,  int nwords) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.BN_consttime_swap$MH, "BN_consttime_swap");
        try {
            mh$.invokeExact(swap, a, b, nwords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_generate_prime$MH() {
        return RuntimeHelper.requireNonNull(constants$163.BN_generate_prime$MH,"BN_generate_prime");
    }
    public static MemoryAddress BN_generate_prime ( Addressable ret,  int bits,  int safe,  Addressable add,  Addressable rem,  Addressable callback,  Addressable cb_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.BN_generate_prime$MH, "BN_generate_prime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ret, bits, safe, add, rem, callback, cb_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_prime$MH() {
        return RuntimeHelper.requireNonNull(constants$163.BN_is_prime$MH,"BN_is_prime");
    }
    public static int BN_is_prime ( Addressable p,  int nchecks,  Addressable callback,  Addressable ctx,  Addressable cb_arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.BN_is_prime$MH, "BN_is_prime");
        try {
            return (int)mh$.invokeExact(p, nchecks, callback, ctx, cb_arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_prime_fasttest$MH() {
        return RuntimeHelper.requireNonNull(constants$164.BN_is_prime_fasttest$MH,"BN_is_prime_fasttest");
    }
    public static int BN_is_prime_fasttest ( Addressable p,  int nchecks,  Addressable callback,  Addressable ctx,  Addressable cb_arg,  int do_trial_division) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.BN_is_prime_fasttest$MH, "BN_is_prime_fasttest");
        try {
            return (int)mh$.invokeExact(p, nchecks, callback, ctx, cb_arg, do_trial_division);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_generate_prime_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$164.BN_generate_prime_ex$MH,"BN_generate_prime_ex");
    }
    public static int BN_generate_prime_ex ( Addressable ret,  int bits,  int safe,  Addressable add,  Addressable rem,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.BN_generate_prime_ex$MH, "BN_generate_prime_ex");
        try {
            return (int)mh$.invokeExact(ret, bits, safe, add, rem, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_prime_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$164.BN_is_prime_ex$MH,"BN_is_prime_ex");
    }
    public static int BN_is_prime_ex ( Addressable p,  int nchecks,  Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.BN_is_prime_ex$MH, "BN_is_prime_ex");
        try {
            return (int)mh$.invokeExact(p, nchecks, ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_is_prime_fasttest_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$164.BN_is_prime_fasttest_ex$MH,"BN_is_prime_fasttest_ex");
    }
    public static int BN_is_prime_fasttest_ex ( Addressable p,  int nchecks,  Addressable ctx,  int do_trial_division,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.BN_is_prime_fasttest_ex$MH, "BN_is_prime_fasttest_ex");
        try {
            return (int)mh$.invokeExact(p, nchecks, ctx, do_trial_division, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_X931_generate_Xpq$MH() {
        return RuntimeHelper.requireNonNull(constants$164.BN_X931_generate_Xpq$MH,"BN_X931_generate_Xpq");
    }
    public static int BN_X931_generate_Xpq ( Addressable Xp,  Addressable Xq,  int nbits,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.BN_X931_generate_Xpq$MH, "BN_X931_generate_Xpq");
        try {
            return (int)mh$.invokeExact(Xp, Xq, nbits, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_X931_derive_prime_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$165.BN_X931_derive_prime_ex$MH,"BN_X931_derive_prime_ex");
    }
    public static int BN_X931_derive_prime_ex ( Addressable p,  Addressable p1,  Addressable p2,  Addressable Xp,  Addressable Xp1,  Addressable Xp2,  Addressable e,  Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.BN_X931_derive_prime_ex$MH, "BN_X931_derive_prime_ex");
        try {
            return (int)mh$.invokeExact(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_X931_generate_prime_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$165.BN_X931_generate_prime_ex$MH,"BN_X931_generate_prime_ex");
    }
    public static int BN_X931_generate_prime_ex ( Addressable p,  Addressable p1,  Addressable p2,  Addressable Xp1,  Addressable Xp2,  Addressable Xp,  Addressable e,  Addressable ctx,  Addressable cb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.BN_X931_generate_prime_ex$MH, "BN_X931_generate_prime_ex");
        try {
            return (int)mh$.invokeExact(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_MONT_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$165.BN_MONT_CTX_new$MH,"BN_MONT_CTX_new");
    }
    public static MemoryAddress BN_MONT_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.BN_MONT_CTX_new$MH, "BN_MONT_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_mul_montgomery$MH() {
        return RuntimeHelper.requireNonNull(constants$165.BN_mod_mul_montgomery$MH,"BN_mod_mul_montgomery");
    }
    public static int BN_mod_mul_montgomery ( Addressable r,  Addressable a,  Addressable b,  Addressable mont,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.BN_mod_mul_montgomery$MH, "BN_mod_mul_montgomery");
        try {
            return (int)mh$.invokeExact(r, a, b, mont, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_to_montgomery$MH() {
        return RuntimeHelper.requireNonNull(constants$165.BN_to_montgomery$MH,"BN_to_montgomery");
    }
    public static int BN_to_montgomery ( Addressable r,  Addressable a,  Addressable mont,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.BN_to_montgomery$MH, "BN_to_montgomery");
        try {
            return (int)mh$.invokeExact(r, a, mont, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_from_montgomery$MH() {
        return RuntimeHelper.requireNonNull(constants$165.BN_from_montgomery$MH,"BN_from_montgomery");
    }
    public static int BN_from_montgomery ( Addressable r,  Addressable a,  Addressable mont,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.BN_from_montgomery$MH, "BN_from_montgomery");
        try {
            return (int)mh$.invokeExact(r, a, mont, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_MONT_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_free$MH,"BN_MONT_CTX_free");
    }
    public static void BN_MONT_CTX_free ( Addressable mont) {
        var mh$ = RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_free$MH, "BN_MONT_CTX_free");
        try {
            mh$.invokeExact(mont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_MONT_CTX_set$MH() {
        return RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_set$MH,"BN_MONT_CTX_set");
    }
    public static int BN_MONT_CTX_set ( Addressable mont,  Addressable mod,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_set$MH, "BN_MONT_CTX_set");
        try {
            return (int)mh$.invokeExact(mont, mod, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_MONT_CTX_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_copy$MH,"BN_MONT_CTX_copy");
    }
    public static MemoryAddress BN_MONT_CTX_copy ( Addressable to,  Addressable from) {
        var mh$ = RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_copy$MH, "BN_MONT_CTX_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(to, from);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_MONT_CTX_set_locked$MH() {
        return RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_set_locked$MH,"BN_MONT_CTX_set_locked");
    }
    public static MemoryAddress BN_MONT_CTX_set_locked ( Addressable pmont,  Addressable lock,  Addressable mod,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$166.BN_MONT_CTX_set_locked$MH, "BN_MONT_CTX_set_locked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pmont, lock, mod, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$166.BN_BLINDING_new$MH,"BN_BLINDING_new");
    }
    public static MemoryAddress BN_BLINDING_new ( Addressable A,  Addressable Ai,  Addressable mod) {
        var mh$ = RuntimeHelper.requireNonNull(constants$166.BN_BLINDING_new$MH, "BN_BLINDING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(A, Ai, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$166.BN_BLINDING_free$MH,"BN_BLINDING_free");
    }
    public static void BN_BLINDING_free ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$166.BN_BLINDING_free$MH, "BN_BLINDING_free");
        try {
            mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_update$MH() {
        return RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_update$MH,"BN_BLINDING_update");
    }
    public static int BN_BLINDING_update ( Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_update$MH, "BN_BLINDING_update");
        try {
            return (int)mh$.invokeExact(b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_convert$MH() {
        return RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_convert$MH,"BN_BLINDING_convert");
    }
    public static int BN_BLINDING_convert ( Addressable n,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_convert$MH, "BN_BLINDING_convert");
        try {
            return (int)mh$.invokeExact(n, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_invert$MH() {
        return RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_invert$MH,"BN_BLINDING_invert");
    }
    public static int BN_BLINDING_invert ( Addressable n,  Addressable b,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_invert$MH, "BN_BLINDING_invert");
        try {
            return (int)mh$.invokeExact(n, b, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_convert_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_convert_ex$MH,"BN_BLINDING_convert_ex");
    }
    public static int BN_BLINDING_convert_ex ( Addressable n,  Addressable r,  Addressable b,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_convert_ex$MH, "BN_BLINDING_convert_ex");
        try {
            return (int)mh$.invokeExact(n, r, b, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_invert_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_invert_ex$MH,"BN_BLINDING_invert_ex");
    }
    public static int BN_BLINDING_invert_ex ( Addressable n,  Addressable r,  Addressable b,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_invert_ex$MH, "BN_BLINDING_invert_ex");
        try {
            return (int)mh$.invokeExact(n, r, b, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_is_current_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_is_current_thread$MH,"BN_BLINDING_is_current_thread");
    }
    public static int BN_BLINDING_is_current_thread ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$167.BN_BLINDING_is_current_thread$MH, "BN_BLINDING_is_current_thread");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_set_current_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_set_current_thread$MH,"BN_BLINDING_set_current_thread");
    }
    public static void BN_BLINDING_set_current_thread ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_set_current_thread$MH, "BN_BLINDING_set_current_thread");
        try {
            mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_lock$MH,"BN_BLINDING_lock");
    }
    public static int BN_BLINDING_lock ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_lock$MH, "BN_BLINDING_lock");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_unlock$MH,"BN_BLINDING_unlock");
    }
    public static int BN_BLINDING_unlock ( Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_unlock$MH, "BN_BLINDING_unlock");
        try {
            return (int)mh$.invokeExact(b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_get_flags$MH,"BN_BLINDING_get_flags");
    }
    public static long BN_BLINDING_get_flags ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_get_flags$MH, "BN_BLINDING_get_flags");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_set_flags$MH,"BN_BLINDING_set_flags");
    }
    public static void BN_BLINDING_set_flags ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$168.BN_BLINDING_set_flags$MH, "BN_BLINDING_set_flags");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_BLINDING_create_param$MH() {
        return RuntimeHelper.requireNonNull(constants$169.BN_BLINDING_create_param$MH,"BN_BLINDING_create_param");
    }
    public static MemoryAddress BN_BLINDING_create_param ( Addressable b,  Addressable e,  Addressable m,  Addressable ctx,  Addressable bn_mod_exp,  Addressable m_ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$169.BN_BLINDING_create_param$MH, "BN_BLINDING_create_param");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(b, e, m, ctx, bn_mod_exp, m_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_set_params$MH() {
        return RuntimeHelper.requireNonNull(constants$169.BN_set_params$MH,"BN_set_params");
    }
    public static void BN_set_params ( int mul,  int high,  int low,  int mont) {
        var mh$ = RuntimeHelper.requireNonNull(constants$169.BN_set_params$MH, "BN_set_params");
        try {
            mh$.invokeExact(mul, high, low, mont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_params$MH() {
        return RuntimeHelper.requireNonNull(constants$169.BN_get_params$MH,"BN_get_params");
    }
    public static int BN_get_params ( int which) {
        var mh$ = RuntimeHelper.requireNonNull(constants$169.BN_get_params$MH, "BN_get_params");
        try {
            return (int)mh$.invokeExact(which);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_RECP_CTX_new$MH() {
        return RuntimeHelper.requireNonNull(constants$169.BN_RECP_CTX_new$MH,"BN_RECP_CTX_new");
    }
    public static MemoryAddress BN_RECP_CTX_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$169.BN_RECP_CTX_new$MH, "BN_RECP_CTX_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_RECP_CTX_free$MH() {
        return RuntimeHelper.requireNonNull(constants$169.BN_RECP_CTX_free$MH,"BN_RECP_CTX_free");
    }
    public static void BN_RECP_CTX_free ( Addressable recp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$169.BN_RECP_CTX_free$MH, "BN_RECP_CTX_free");
        try {
            mh$.invokeExact(recp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_RECP_CTX_set$MH() {
        return RuntimeHelper.requireNonNull(constants$170.BN_RECP_CTX_set$MH,"BN_RECP_CTX_set");
    }
    public static int BN_RECP_CTX_set ( Addressable recp,  Addressable rdiv,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$170.BN_RECP_CTX_set$MH, "BN_RECP_CTX_set");
        try {
            return (int)mh$.invokeExact(recp, rdiv, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_mul_reciprocal$MH() {
        return RuntimeHelper.requireNonNull(constants$170.BN_mod_mul_reciprocal$MH,"BN_mod_mul_reciprocal");
    }
    public static int BN_mod_mul_reciprocal ( Addressable r,  Addressable x,  Addressable y,  Addressable recp,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$170.BN_mod_mul_reciprocal$MH, "BN_mod_mul_reciprocal");
        try {
            return (int)mh$.invokeExact(r, x, y, recp, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_mod_exp_recp$MH() {
        return RuntimeHelper.requireNonNull(constants$170.BN_mod_exp_recp$MH,"BN_mod_exp_recp");
    }
    public static int BN_mod_exp_recp ( Addressable r,  Addressable a,  Addressable p,  Addressable m,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$170.BN_mod_exp_recp$MH, "BN_mod_exp_recp");
        try {
            return (int)mh$.invokeExact(r, a, p, m, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_div_recp$MH() {
        return RuntimeHelper.requireNonNull(constants$170.BN_div_recp$MH,"BN_div_recp");
    }
    public static int BN_div_recp ( Addressable dv,  Addressable rem,  Addressable m,  Addressable recp,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$170.BN_div_recp$MH, "BN_div_recp");
        try {
            return (int)mh$.invokeExact(dv, rem, m, recp, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nist_mod_192$MH() {
        return RuntimeHelper.requireNonNull(constants$170.BN_nist_mod_192$MH,"BN_nist_mod_192");
    }
    public static int BN_nist_mod_192 ( Addressable r,  Addressable a,  Addressable p,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$170.BN_nist_mod_192$MH, "BN_nist_mod_192");
        try {
            return (int)mh$.invokeExact(r, a, p, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nist_mod_224$MH() {
        return RuntimeHelper.requireNonNull(constants$170.BN_nist_mod_224$MH,"BN_nist_mod_224");
    }
    public static int BN_nist_mod_224 ( Addressable r,  Addressable a,  Addressable p,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$170.BN_nist_mod_224$MH, "BN_nist_mod_224");
        try {
            return (int)mh$.invokeExact(r, a, p, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nist_mod_256$MH() {
        return RuntimeHelper.requireNonNull(constants$171.BN_nist_mod_256$MH,"BN_nist_mod_256");
    }
    public static int BN_nist_mod_256 ( Addressable r,  Addressable a,  Addressable p,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$171.BN_nist_mod_256$MH, "BN_nist_mod_256");
        try {
            return (int)mh$.invokeExact(r, a, p, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nist_mod_384$MH() {
        return RuntimeHelper.requireNonNull(constants$171.BN_nist_mod_384$MH,"BN_nist_mod_384");
    }
    public static int BN_nist_mod_384 ( Addressable r,  Addressable a,  Addressable p,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$171.BN_nist_mod_384$MH, "BN_nist_mod_384");
        try {
            return (int)mh$.invokeExact(r, a, p, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nist_mod_521$MH() {
        return RuntimeHelper.requireNonNull(constants$171.BN_nist_mod_521$MH,"BN_nist_mod_521");
    }
    public static int BN_nist_mod_521 ( Addressable r,  Addressable a,  Addressable p,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$171.BN_nist_mod_521$MH, "BN_nist_mod_521");
        try {
            return (int)mh$.invokeExact(r, a, p, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get0_nist_prime_192$MH() {
        return RuntimeHelper.requireNonNull(constants$171.BN_get0_nist_prime_192$MH,"BN_get0_nist_prime_192");
    }
    public static MemoryAddress BN_get0_nist_prime_192 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$171.BN_get0_nist_prime_192$MH, "BN_get0_nist_prime_192");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get0_nist_prime_224$MH() {
        return RuntimeHelper.requireNonNull(constants$171.BN_get0_nist_prime_224$MH,"BN_get0_nist_prime_224");
    }
    public static MemoryAddress BN_get0_nist_prime_224 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$171.BN_get0_nist_prime_224$MH, "BN_get0_nist_prime_224");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get0_nist_prime_256$MH() {
        return RuntimeHelper.requireNonNull(constants$171.BN_get0_nist_prime_256$MH,"BN_get0_nist_prime_256");
    }
    public static MemoryAddress BN_get0_nist_prime_256 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$171.BN_get0_nist_prime_256$MH, "BN_get0_nist_prime_256");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get0_nist_prime_384$MH() {
        return RuntimeHelper.requireNonNull(constants$172.BN_get0_nist_prime_384$MH,"BN_get0_nist_prime_384");
    }
    public static MemoryAddress BN_get0_nist_prime_384 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$172.BN_get0_nist_prime_384$MH, "BN_get0_nist_prime_384");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get0_nist_prime_521$MH() {
        return RuntimeHelper.requireNonNull(constants$172.BN_get0_nist_prime_521$MH,"BN_get0_nist_prime_521");
    }
    public static MemoryAddress BN_get0_nist_prime_521 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$172.BN_get0_nist_prime_521$MH, "BN_get0_nist_prime_521");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_nist_mod_func$MH() {
        return RuntimeHelper.requireNonNull(constants$172.BN_nist_mod_func$MH,"BN_nist_mod_func");
    }
    public static MemoryAddress BN_nist_mod_func ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$172.BN_nist_mod_func$MH, "BN_nist_mod_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_generate_dsa_nonce$MH() {
        return RuntimeHelper.requireNonNull(constants$172.BN_generate_dsa_nonce$MH,"BN_generate_dsa_nonce");
    }
    public static int BN_generate_dsa_nonce ( Addressable out,  Addressable range,  Addressable priv,  Addressable message,  long message_len,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$172.BN_generate_dsa_nonce$MH, "BN_generate_dsa_nonce");
        try {
            return (int)mh$.invokeExact(out, range, priv, message, message_len, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc2409_prime_768$MH() {
        return RuntimeHelper.requireNonNull(constants$172.BN_get_rfc2409_prime_768$MH,"BN_get_rfc2409_prime_768");
    }
    public static MemoryAddress BN_get_rfc2409_prime_768 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$172.BN_get_rfc2409_prime_768$MH, "BN_get_rfc2409_prime_768");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc2409_prime_1024$MH() {
        return RuntimeHelper.requireNonNull(constants$172.BN_get_rfc2409_prime_1024$MH,"BN_get_rfc2409_prime_1024");
    }
    public static MemoryAddress BN_get_rfc2409_prime_1024 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$172.BN_get_rfc2409_prime_1024$MH, "BN_get_rfc2409_prime_1024");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_1536$MH() {
        return RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_1536$MH,"BN_get_rfc3526_prime_1536");
    }
    public static MemoryAddress BN_get_rfc3526_prime_1536 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_1536$MH, "BN_get_rfc3526_prime_1536");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_2048$MH() {
        return RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_2048$MH,"BN_get_rfc3526_prime_2048");
    }
    public static MemoryAddress BN_get_rfc3526_prime_2048 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_2048$MH, "BN_get_rfc3526_prime_2048");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_3072$MH() {
        return RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_3072$MH,"BN_get_rfc3526_prime_3072");
    }
    public static MemoryAddress BN_get_rfc3526_prime_3072 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_3072$MH, "BN_get_rfc3526_prime_3072");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_4096$MH() {
        return RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_4096$MH,"BN_get_rfc3526_prime_4096");
    }
    public static MemoryAddress BN_get_rfc3526_prime_4096 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_4096$MH, "BN_get_rfc3526_prime_4096");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_6144$MH() {
        return RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_6144$MH,"BN_get_rfc3526_prime_6144");
    }
    public static MemoryAddress BN_get_rfc3526_prime_6144 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_6144$MH, "BN_get_rfc3526_prime_6144");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_get_rfc3526_prime_8192$MH() {
        return RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_8192$MH,"BN_get_rfc3526_prime_8192");
    }
    public static MemoryAddress BN_get_rfc3526_prime_8192 ( Addressable bn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$173.BN_get_rfc3526_prime_8192$MH, "BN_get_rfc3526_prime_8192");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(bn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BN_bntest_rand$MH() {
        return RuntimeHelper.requireNonNull(constants$174.BN_bntest_rand$MH,"BN_bntest_rand");
    }
    public static int BN_bntest_rand ( Addressable rnd,  int bits,  int top,  int bottom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$174.BN_bntest_rand$MH, "BN_bntest_rand");
        try {
            return (int)mh$.invokeExact(rnd, bits, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_num$MH() {
        return RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_num$MH,"sk_X509_ALGOR_num");
    }
    public static int sk_X509_ALGOR_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_num$MH, "sk_X509_ALGOR_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_value$MH() {
        return RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_value$MH,"sk_X509_ALGOR_value");
    }
    public static MemoryAddress sk_X509_ALGOR_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_value$MH, "sk_X509_ALGOR_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_new$MH() {
        return RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_new$MH,"sk_X509_ALGOR_new");
    }
    public static MemoryAddress sk_X509_ALGOR_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_new$MH, "sk_X509_ALGOR_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_new_null$MH,"sk_X509_ALGOR_new_null");
    }
    public static MemoryAddress sk_X509_ALGOR_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_new_null$MH, "sk_X509_ALGOR_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_new_reserve$MH,"sk_X509_ALGOR_new_reserve");
    }
    public static MemoryAddress sk_X509_ALGOR_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$175.sk_X509_ALGOR_new_reserve$MH, "sk_X509_ALGOR_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_reserve$MH,"sk_X509_ALGOR_reserve");
    }
    public static int sk_X509_ALGOR_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_reserve$MH, "sk_X509_ALGOR_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_free$MH() {
        return RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_free$MH,"sk_X509_ALGOR_free");
    }
    public static void sk_X509_ALGOR_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_free$MH, "sk_X509_ALGOR_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_zero$MH,"sk_X509_ALGOR_zero");
    }
    public static void sk_X509_ALGOR_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_zero$MH, "sk_X509_ALGOR_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_delete$MH,"sk_X509_ALGOR_delete");
    }
    public static MemoryAddress sk_X509_ALGOR_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_delete$MH, "sk_X509_ALGOR_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_delete_ptr$MH,"sk_X509_ALGOR_delete_ptr");
    }
    public static MemoryAddress sk_X509_ALGOR_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_delete_ptr$MH, "sk_X509_ALGOR_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_push$MH() {
        return RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_push$MH,"sk_X509_ALGOR_push");
    }
    public static int sk_X509_ALGOR_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$176.sk_X509_ALGOR_push$MH, "sk_X509_ALGOR_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_unshift$MH,"sk_X509_ALGOR_unshift");
    }
    public static int sk_X509_ALGOR_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_unshift$MH, "sk_X509_ALGOR_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_pop$MH,"sk_X509_ALGOR_pop");
    }
    public static MemoryAddress sk_X509_ALGOR_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_pop$MH, "sk_X509_ALGOR_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_shift$MH,"sk_X509_ALGOR_shift");
    }
    public static MemoryAddress sk_X509_ALGOR_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_shift$MH, "sk_X509_ALGOR_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_pop_free$MH,"sk_X509_ALGOR_pop_free");
    }
    public static void sk_X509_ALGOR_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_pop_free$MH, "sk_X509_ALGOR_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_insert$MH,"sk_X509_ALGOR_insert");
    }
    public static int sk_X509_ALGOR_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_insert$MH, "sk_X509_ALGOR_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_set$MH() {
        return RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_set$MH,"sk_X509_ALGOR_set");
    }
    public static MemoryAddress sk_X509_ALGOR_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$177.sk_X509_ALGOR_set$MH, "sk_X509_ALGOR_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_find$MH() {
        return RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_find$MH,"sk_X509_ALGOR_find");
    }
    public static int sk_X509_ALGOR_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_find$MH, "sk_X509_ALGOR_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_find_ex$MH,"sk_X509_ALGOR_find_ex");
    }
    public static int sk_X509_ALGOR_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_find_ex$MH, "sk_X509_ALGOR_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_sort$MH,"sk_X509_ALGOR_sort");
    }
    public static void sk_X509_ALGOR_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_sort$MH, "sk_X509_ALGOR_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_is_sorted$MH,"sk_X509_ALGOR_is_sorted");
    }
    public static int sk_X509_ALGOR_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_is_sorted$MH, "sk_X509_ALGOR_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_dup$MH,"sk_X509_ALGOR_dup");
    }
    public static MemoryAddress sk_X509_ALGOR_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_dup$MH, "sk_X509_ALGOR_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_deep_copy$MH,"sk_X509_ALGOR_deep_copy");
    }
    public static MemoryAddress sk_X509_ALGOR_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.sk_X509_ALGOR_deep_copy$MH, "sk_X509_ALGOR_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_X509_ALGOR_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$179.sk_X509_ALGOR_set_cmp_func$MH,"sk_X509_ALGOR_set_cmp_func");
    }
    public static MemoryAddress sk_X509_ALGOR_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.sk_X509_ALGOR_set_cmp_func$MH, "sk_X509_ALGOR_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_num$MH,"sk_ASN1_STRING_TABLE_num");
    }
    public static int sk_ASN1_STRING_TABLE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_num$MH, "sk_ASN1_STRING_TABLE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_value$MH,"sk_ASN1_STRING_TABLE_value");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_value$MH, "sk_ASN1_STRING_TABLE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_new$MH,"sk_ASN1_STRING_TABLE_new");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_new$MH, "sk_ASN1_STRING_TABLE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_new_null$MH,"sk_ASN1_STRING_TABLE_new_null");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_new_null$MH, "sk_ASN1_STRING_TABLE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_new_reserve$MH,"sk_ASN1_STRING_TABLE_new_reserve");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.sk_ASN1_STRING_TABLE_new_reserve$MH, "sk_ASN1_STRING_TABLE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_reserve$MH,"sk_ASN1_STRING_TABLE_reserve");
    }
    public static int sk_ASN1_STRING_TABLE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_reserve$MH, "sk_ASN1_STRING_TABLE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_free$MH,"sk_ASN1_STRING_TABLE_free");
    }
    public static void sk_ASN1_STRING_TABLE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_free$MH, "sk_ASN1_STRING_TABLE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_zero$MH,"sk_ASN1_STRING_TABLE_zero");
    }
    public static void sk_ASN1_STRING_TABLE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_zero$MH, "sk_ASN1_STRING_TABLE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_delete$MH,"sk_ASN1_STRING_TABLE_delete");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_delete$MH, "sk_ASN1_STRING_TABLE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_delete_ptr$MH,"sk_ASN1_STRING_TABLE_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_delete_ptr$MH, "sk_ASN1_STRING_TABLE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_push$MH,"sk_ASN1_STRING_TABLE_push");
    }
    public static int sk_ASN1_STRING_TABLE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.sk_ASN1_STRING_TABLE_push$MH, "sk_ASN1_STRING_TABLE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_unshift$MH,"sk_ASN1_STRING_TABLE_unshift");
    }
    public static int sk_ASN1_STRING_TABLE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_unshift$MH, "sk_ASN1_STRING_TABLE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_pop$MH,"sk_ASN1_STRING_TABLE_pop");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_pop$MH, "sk_ASN1_STRING_TABLE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_shift$MH,"sk_ASN1_STRING_TABLE_shift");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_shift$MH, "sk_ASN1_STRING_TABLE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_pop_free$MH,"sk_ASN1_STRING_TABLE_pop_free");
    }
    public static void sk_ASN1_STRING_TABLE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_pop_free$MH, "sk_ASN1_STRING_TABLE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_insert$MH,"sk_ASN1_STRING_TABLE_insert");
    }
    public static int sk_ASN1_STRING_TABLE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_insert$MH, "sk_ASN1_STRING_TABLE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_set$MH,"sk_ASN1_STRING_TABLE_set");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.sk_ASN1_STRING_TABLE_set$MH, "sk_ASN1_STRING_TABLE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_find$MH,"sk_ASN1_STRING_TABLE_find");
    }
    public static int sk_ASN1_STRING_TABLE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_find$MH, "sk_ASN1_STRING_TABLE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_find_ex$MH,"sk_ASN1_STRING_TABLE_find_ex");
    }
    public static int sk_ASN1_STRING_TABLE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_find_ex$MH, "sk_ASN1_STRING_TABLE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_sort$MH,"sk_ASN1_STRING_TABLE_sort");
    }
    public static void sk_ASN1_STRING_TABLE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_sort$MH, "sk_ASN1_STRING_TABLE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_is_sorted$MH,"sk_ASN1_STRING_TABLE_is_sorted");
    }
    public static int sk_ASN1_STRING_TABLE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_is_sorted$MH, "sk_ASN1_STRING_TABLE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_dup$MH,"sk_ASN1_STRING_TABLE_dup");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_dup$MH, "sk_ASN1_STRING_TABLE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_deep_copy$MH,"sk_ASN1_STRING_TABLE_deep_copy");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.sk_ASN1_STRING_TABLE_deep_copy$MH, "sk_ASN1_STRING_TABLE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_STRING_TABLE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$184.sk_ASN1_STRING_TABLE_set_cmp_func$MH,"sk_ASN1_STRING_TABLE_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_STRING_TABLE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.sk_ASN1_STRING_TABLE_set_cmp_func$MH, "sk_ASN1_STRING_TABLE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_num$MH() {
        return RuntimeHelper.requireNonNull(constants$185.sk_ASN1_INTEGER_num$MH,"sk_ASN1_INTEGER_num");
    }
    public static int sk_ASN1_INTEGER_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.sk_ASN1_INTEGER_num$MH, "sk_ASN1_INTEGER_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_value$MH() {
        return RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_value$MH,"sk_ASN1_INTEGER_value");
    }
    public static MemoryAddress sk_ASN1_INTEGER_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_value$MH, "sk_ASN1_INTEGER_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_new$MH() {
        return RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_new$MH,"sk_ASN1_INTEGER_new");
    }
    public static MemoryAddress sk_ASN1_INTEGER_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_new$MH, "sk_ASN1_INTEGER_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_new_null$MH,"sk_ASN1_INTEGER_new_null");
    }
    public static MemoryAddress sk_ASN1_INTEGER_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_new_null$MH, "sk_ASN1_INTEGER_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_new_reserve$MH,"sk_ASN1_INTEGER_new_reserve");
    }
    public static MemoryAddress sk_ASN1_INTEGER_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_new_reserve$MH, "sk_ASN1_INTEGER_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_reserve$MH,"sk_ASN1_INTEGER_reserve");
    }
    public static int sk_ASN1_INTEGER_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_reserve$MH, "sk_ASN1_INTEGER_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_free$MH() {
        return RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_free$MH,"sk_ASN1_INTEGER_free");
    }
    public static void sk_ASN1_INTEGER_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.sk_ASN1_INTEGER_free$MH, "sk_ASN1_INTEGER_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_zero$MH,"sk_ASN1_INTEGER_zero");
    }
    public static void sk_ASN1_INTEGER_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_zero$MH, "sk_ASN1_INTEGER_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_delete$MH,"sk_ASN1_INTEGER_delete");
    }
    public static MemoryAddress sk_ASN1_INTEGER_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_delete$MH, "sk_ASN1_INTEGER_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_delete_ptr$MH,"sk_ASN1_INTEGER_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_INTEGER_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_delete_ptr$MH, "sk_ASN1_INTEGER_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_push$MH() {
        return RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_push$MH,"sk_ASN1_INTEGER_push");
    }
    public static int sk_ASN1_INTEGER_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_push$MH, "sk_ASN1_INTEGER_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_unshift$MH,"sk_ASN1_INTEGER_unshift");
    }
    public static int sk_ASN1_INTEGER_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_unshift$MH, "sk_ASN1_INTEGER_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_pop$MH,"sk_ASN1_INTEGER_pop");
    }
    public static MemoryAddress sk_ASN1_INTEGER_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.sk_ASN1_INTEGER_pop$MH, "sk_ASN1_INTEGER_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_shift$MH,"sk_ASN1_INTEGER_shift");
    }
    public static MemoryAddress sk_ASN1_INTEGER_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_shift$MH, "sk_ASN1_INTEGER_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_pop_free$MH,"sk_ASN1_INTEGER_pop_free");
    }
    public static void sk_ASN1_INTEGER_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_pop_free$MH, "sk_ASN1_INTEGER_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_insert$MH,"sk_ASN1_INTEGER_insert");
    }
    public static int sk_ASN1_INTEGER_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_insert$MH, "sk_ASN1_INTEGER_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_set$MH() {
        return RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_set$MH,"sk_ASN1_INTEGER_set");
    }
    public static MemoryAddress sk_ASN1_INTEGER_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_set$MH, "sk_ASN1_INTEGER_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_find$MH() {
        return RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_find$MH,"sk_ASN1_INTEGER_find");
    }
    public static int sk_ASN1_INTEGER_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_find$MH, "sk_ASN1_INTEGER_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_find_ex$MH,"sk_ASN1_INTEGER_find_ex");
    }
    public static int sk_ASN1_INTEGER_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.sk_ASN1_INTEGER_find_ex$MH, "sk_ASN1_INTEGER_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_sort$MH,"sk_ASN1_INTEGER_sort");
    }
    public static void sk_ASN1_INTEGER_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_sort$MH, "sk_ASN1_INTEGER_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_is_sorted$MH,"sk_ASN1_INTEGER_is_sorted");
    }
    public static int sk_ASN1_INTEGER_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_is_sorted$MH, "sk_ASN1_INTEGER_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_dup$MH,"sk_ASN1_INTEGER_dup");
    }
    public static MemoryAddress sk_ASN1_INTEGER_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_dup$MH, "sk_ASN1_INTEGER_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_deep_copy$MH,"sk_ASN1_INTEGER_deep_copy");
    }
    public static MemoryAddress sk_ASN1_INTEGER_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_deep_copy$MH, "sk_ASN1_INTEGER_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_INTEGER_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_set_cmp_func$MH,"sk_ASN1_INTEGER_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_INTEGER_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.sk_ASN1_INTEGER_set_cmp_func$MH, "sk_ASN1_INTEGER_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$190.sk_ASN1_GENERALSTRING_num$MH,"sk_ASN1_GENERALSTRING_num");
    }
    public static int sk_ASN1_GENERALSTRING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.sk_ASN1_GENERALSTRING_num$MH, "sk_ASN1_GENERALSTRING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_value$MH,"sk_ASN1_GENERALSTRING_value");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_value$MH, "sk_ASN1_GENERALSTRING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_new$MH,"sk_ASN1_GENERALSTRING_new");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_new$MH, "sk_ASN1_GENERALSTRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_new_null$MH,"sk_ASN1_GENERALSTRING_new_null");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_new_null$MH, "sk_ASN1_GENERALSTRING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_new_reserve$MH,"sk_ASN1_GENERALSTRING_new_reserve");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_new_reserve$MH, "sk_ASN1_GENERALSTRING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_reserve$MH,"sk_ASN1_GENERALSTRING_reserve");
    }
    public static int sk_ASN1_GENERALSTRING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_reserve$MH, "sk_ASN1_GENERALSTRING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_free$MH,"sk_ASN1_GENERALSTRING_free");
    }
    public static void sk_ASN1_GENERALSTRING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.sk_ASN1_GENERALSTRING_free$MH, "sk_ASN1_GENERALSTRING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_zero$MH,"sk_ASN1_GENERALSTRING_zero");
    }
    public static void sk_ASN1_GENERALSTRING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_zero$MH, "sk_ASN1_GENERALSTRING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_delete$MH,"sk_ASN1_GENERALSTRING_delete");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_delete$MH, "sk_ASN1_GENERALSTRING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_delete_ptr$MH,"sk_ASN1_GENERALSTRING_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_delete_ptr$MH, "sk_ASN1_GENERALSTRING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_push$MH,"sk_ASN1_GENERALSTRING_push");
    }
    public static int sk_ASN1_GENERALSTRING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_push$MH, "sk_ASN1_GENERALSTRING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_unshift$MH,"sk_ASN1_GENERALSTRING_unshift");
    }
    public static int sk_ASN1_GENERALSTRING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_unshift$MH, "sk_ASN1_GENERALSTRING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_pop$MH,"sk_ASN1_GENERALSTRING_pop");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.sk_ASN1_GENERALSTRING_pop$MH, "sk_ASN1_GENERALSTRING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_shift$MH,"sk_ASN1_GENERALSTRING_shift");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_shift$MH, "sk_ASN1_GENERALSTRING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_pop_free$MH,"sk_ASN1_GENERALSTRING_pop_free");
    }
    public static void sk_ASN1_GENERALSTRING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_pop_free$MH, "sk_ASN1_GENERALSTRING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_insert$MH,"sk_ASN1_GENERALSTRING_insert");
    }
    public static int sk_ASN1_GENERALSTRING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_insert$MH, "sk_ASN1_GENERALSTRING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_set$MH,"sk_ASN1_GENERALSTRING_set");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_set$MH, "sk_ASN1_GENERALSTRING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_find$MH,"sk_ASN1_GENERALSTRING_find");
    }
    public static int sk_ASN1_GENERALSTRING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_find$MH, "sk_ASN1_GENERALSTRING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_find_ex$MH,"sk_ASN1_GENERALSTRING_find_ex");
    }
    public static int sk_ASN1_GENERALSTRING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.sk_ASN1_GENERALSTRING_find_ex$MH, "sk_ASN1_GENERALSTRING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_sort$MH,"sk_ASN1_GENERALSTRING_sort");
    }
    public static void sk_ASN1_GENERALSTRING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_sort$MH, "sk_ASN1_GENERALSTRING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_is_sorted$MH,"sk_ASN1_GENERALSTRING_is_sorted");
    }
    public static int sk_ASN1_GENERALSTRING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_is_sorted$MH, "sk_ASN1_GENERALSTRING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_dup$MH,"sk_ASN1_GENERALSTRING_dup");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_dup$MH, "sk_ASN1_GENERALSTRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_deep_copy$MH,"sk_ASN1_GENERALSTRING_deep_copy");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_deep_copy$MH, "sk_ASN1_GENERALSTRING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_GENERALSTRING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_set_cmp_func$MH,"sk_ASN1_GENERALSTRING_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_GENERALSTRING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.sk_ASN1_GENERALSTRING_set_cmp_func$MH, "sk_ASN1_GENERALSTRING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_num$MH() {
        return RuntimeHelper.requireNonNull(constants$195.sk_ASN1_UTF8STRING_num$MH,"sk_ASN1_UTF8STRING_num");
    }
    public static int sk_ASN1_UTF8STRING_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.sk_ASN1_UTF8STRING_num$MH, "sk_ASN1_UTF8STRING_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_value$MH() {
        return RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_value$MH,"sk_ASN1_UTF8STRING_value");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_value$MH, "sk_ASN1_UTF8STRING_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_new$MH() {
        return RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_new$MH,"sk_ASN1_UTF8STRING_new");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_new$MH, "sk_ASN1_UTF8STRING_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_new_null$MH,"sk_ASN1_UTF8STRING_new_null");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_new_null$MH, "sk_ASN1_UTF8STRING_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_new_reserve$MH,"sk_ASN1_UTF8STRING_new_reserve");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_new_reserve$MH, "sk_ASN1_UTF8STRING_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_reserve$MH,"sk_ASN1_UTF8STRING_reserve");
    }
    public static int sk_ASN1_UTF8STRING_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_reserve$MH, "sk_ASN1_UTF8STRING_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_free$MH() {
        return RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_free$MH,"sk_ASN1_UTF8STRING_free");
    }
    public static void sk_ASN1_UTF8STRING_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.sk_ASN1_UTF8STRING_free$MH, "sk_ASN1_UTF8STRING_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_zero$MH,"sk_ASN1_UTF8STRING_zero");
    }
    public static void sk_ASN1_UTF8STRING_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_zero$MH, "sk_ASN1_UTF8STRING_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_delete$MH,"sk_ASN1_UTF8STRING_delete");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_delete$MH, "sk_ASN1_UTF8STRING_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_delete_ptr$MH,"sk_ASN1_UTF8STRING_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_delete_ptr$MH, "sk_ASN1_UTF8STRING_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_push$MH() {
        return RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_push$MH,"sk_ASN1_UTF8STRING_push");
    }
    public static int sk_ASN1_UTF8STRING_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_push$MH, "sk_ASN1_UTF8STRING_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_unshift$MH,"sk_ASN1_UTF8STRING_unshift");
    }
    public static int sk_ASN1_UTF8STRING_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_unshift$MH, "sk_ASN1_UTF8STRING_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_pop$MH,"sk_ASN1_UTF8STRING_pop");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.sk_ASN1_UTF8STRING_pop$MH, "sk_ASN1_UTF8STRING_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_shift$MH,"sk_ASN1_UTF8STRING_shift");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_shift$MH, "sk_ASN1_UTF8STRING_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_pop_free$MH,"sk_ASN1_UTF8STRING_pop_free");
    }
    public static void sk_ASN1_UTF8STRING_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_pop_free$MH, "sk_ASN1_UTF8STRING_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_insert$MH,"sk_ASN1_UTF8STRING_insert");
    }
    public static int sk_ASN1_UTF8STRING_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_insert$MH, "sk_ASN1_UTF8STRING_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_set$MH() {
        return RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_set$MH,"sk_ASN1_UTF8STRING_set");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_set$MH, "sk_ASN1_UTF8STRING_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_find$MH() {
        return RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_find$MH,"sk_ASN1_UTF8STRING_find");
    }
    public static int sk_ASN1_UTF8STRING_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_find$MH, "sk_ASN1_UTF8STRING_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_find_ex$MH,"sk_ASN1_UTF8STRING_find_ex");
    }
    public static int sk_ASN1_UTF8STRING_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.sk_ASN1_UTF8STRING_find_ex$MH, "sk_ASN1_UTF8STRING_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_sort$MH,"sk_ASN1_UTF8STRING_sort");
    }
    public static void sk_ASN1_UTF8STRING_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_sort$MH, "sk_ASN1_UTF8STRING_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_is_sorted$MH,"sk_ASN1_UTF8STRING_is_sorted");
    }
    public static int sk_ASN1_UTF8STRING_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_is_sorted$MH, "sk_ASN1_UTF8STRING_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_dup$MH,"sk_ASN1_UTF8STRING_dup");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_dup$MH, "sk_ASN1_UTF8STRING_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_deep_copy$MH,"sk_ASN1_UTF8STRING_deep_copy");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_deep_copy$MH, "sk_ASN1_UTF8STRING_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_UTF8STRING_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_set_cmp_func$MH,"sk_ASN1_UTF8STRING_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_UTF8STRING_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.sk_ASN1_UTF8STRING_set_cmp_func$MH, "sk_ASN1_UTF8STRING_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_num$MH() {
        return RuntimeHelper.requireNonNull(constants$200.sk_ASN1_TYPE_num$MH,"sk_ASN1_TYPE_num");
    }
    public static int sk_ASN1_TYPE_num ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.sk_ASN1_TYPE_num$MH, "sk_ASN1_TYPE_num");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_value$MH() {
        return RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_value$MH,"sk_ASN1_TYPE_value");
    }
    public static MemoryAddress sk_ASN1_TYPE_value ( Addressable sk,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_value$MH, "sk_ASN1_TYPE_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_new$MH,"sk_ASN1_TYPE_new");
    }
    public static MemoryAddress sk_ASN1_TYPE_new ( Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_new$MH, "sk_ASN1_TYPE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_new_null$MH() {
        return RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_new_null$MH,"sk_ASN1_TYPE_new_null");
    }
    public static MemoryAddress sk_ASN1_TYPE_new_null () {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_new_null$MH, "sk_ASN1_TYPE_new_null");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_new_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_new_reserve$MH,"sk_ASN1_TYPE_new_reserve");
    }
    public static MemoryAddress sk_ASN1_TYPE_new_reserve ( Addressable compare,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_new_reserve$MH, "sk_ASN1_TYPE_new_reserve");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compare, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_reserve$MH,"sk_ASN1_TYPE_reserve");
    }
    public static int sk_ASN1_TYPE_reserve ( Addressable sk,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_reserve$MH, "sk_ASN1_TYPE_reserve");
        try {
            return (int)mh$.invokeExact(sk, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_free$MH,"sk_ASN1_TYPE_free");
    }
    public static void sk_ASN1_TYPE_free ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.sk_ASN1_TYPE_free$MH, "sk_ASN1_TYPE_free");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_zero$MH,"sk_ASN1_TYPE_zero");
    }
    public static void sk_ASN1_TYPE_zero ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_zero$MH, "sk_ASN1_TYPE_zero");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_delete$MH,"sk_ASN1_TYPE_delete");
    }
    public static MemoryAddress sk_ASN1_TYPE_delete ( Addressable sk,  int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_delete$MH, "sk_ASN1_TYPE_delete");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_delete_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_delete_ptr$MH,"sk_ASN1_TYPE_delete_ptr");
    }
    public static MemoryAddress sk_ASN1_TYPE_delete_ptr ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_delete_ptr$MH, "sk_ASN1_TYPE_delete_ptr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_push$MH() {
        return RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_push$MH,"sk_ASN1_TYPE_push");
    }
    public static int sk_ASN1_TYPE_push ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_push$MH, "sk_ASN1_TYPE_push");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_unshift$MH() {
        return RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_unshift$MH,"sk_ASN1_TYPE_unshift");
    }
    public static int sk_ASN1_TYPE_unshift ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_unshift$MH, "sk_ASN1_TYPE_unshift");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_pop$MH,"sk_ASN1_TYPE_pop");
    }
    public static MemoryAddress sk_ASN1_TYPE_pop ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.sk_ASN1_TYPE_pop$MH, "sk_ASN1_TYPE_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_shift$MH,"sk_ASN1_TYPE_shift");
    }
    public static MemoryAddress sk_ASN1_TYPE_shift ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_shift$MH, "sk_ASN1_TYPE_shift");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_pop_free$MH() {
        return RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_pop_free$MH,"sk_ASN1_TYPE_pop_free");
    }
    public static void sk_ASN1_TYPE_pop_free ( Addressable sk,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_pop_free$MH, "sk_ASN1_TYPE_pop_free");
        try {
            mh$.invokeExact(sk, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_insert$MH,"sk_ASN1_TYPE_insert");
    }
    public static int sk_ASN1_TYPE_insert ( Addressable sk,  Addressable ptr,  int idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_insert$MH, "sk_ASN1_TYPE_insert");
        try {
            return (int)mh$.invokeExact(sk, ptr, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_set$MH,"sk_ASN1_TYPE_set");
    }
    public static MemoryAddress sk_ASN1_TYPE_set ( Addressable sk,  int idx,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_set$MH, "sk_ASN1_TYPE_set");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, idx, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_find$MH() {
        return RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_find$MH,"sk_ASN1_TYPE_find");
    }
    public static int sk_ASN1_TYPE_find ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_find$MH, "sk_ASN1_TYPE_find");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_find_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_find_ex$MH,"sk_ASN1_TYPE_find_ex");
    }
    public static int sk_ASN1_TYPE_find_ex ( Addressable sk,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.sk_ASN1_TYPE_find_ex$MH, "sk_ASN1_TYPE_find_ex");
        try {
            return (int)mh$.invokeExact(sk, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_sort$MH,"sk_ASN1_TYPE_sort");
    }
    public static void sk_ASN1_TYPE_sort ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_sort$MH, "sk_ASN1_TYPE_sort");
        try {
            mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_is_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_is_sorted$MH,"sk_ASN1_TYPE_is_sorted");
    }
    public static int sk_ASN1_TYPE_is_sorted ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_is_sorted$MH, "sk_ASN1_TYPE_is_sorted");
        try {
            return (int)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_dup$MH,"sk_ASN1_TYPE_dup");
    }
    public static MemoryAddress sk_ASN1_TYPE_dup ( Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_dup$MH, "sk_ASN1_TYPE_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_deep_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_deep_copy$MH,"sk_ASN1_TYPE_deep_copy");
    }
    public static MemoryAddress sk_ASN1_TYPE_deep_copy ( Addressable sk,  Addressable copyfunc,  Addressable freefunc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_deep_copy$MH, "sk_ASN1_TYPE_deep_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, copyfunc, freefunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sk_ASN1_TYPE_set_cmp_func$MH() {
        return RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_set_cmp_func$MH,"sk_ASN1_TYPE_set_cmp_func");
    }
    public static MemoryAddress sk_ASN1_TYPE_set_cmp_func ( Addressable sk,  Addressable compare) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.sk_ASN1_TYPE_set_cmp_func$MH, "sk_ASN1_TYPE_set_cmp_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sk, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_SEQUENCE_ANY$MH() {
        return RuntimeHelper.requireNonNull(constants$204.d2i_ASN1_SEQUENCE_ANY$MH,"d2i_ASN1_SEQUENCE_ANY");
    }
    public static MemoryAddress d2i_ASN1_SEQUENCE_ANY ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.d2i_ASN1_SEQUENCE_ANY$MH, "d2i_ASN1_SEQUENCE_ANY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_SEQUENCE_ANY$MH() {
        return RuntimeHelper.requireNonNull(constants$205.i2d_ASN1_SEQUENCE_ANY$MH,"i2d_ASN1_SEQUENCE_ANY");
    }
    public static int i2d_ASN1_SEQUENCE_ANY ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.i2d_ASN1_SEQUENCE_ANY$MH, "i2d_ASN1_SEQUENCE_ANY");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_SET_ANY$MH() {
        return RuntimeHelper.requireNonNull(constants$205.d2i_ASN1_SET_ANY$MH,"d2i_ASN1_SET_ANY");
    }
    public static MemoryAddress d2i_ASN1_SET_ANY ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.d2i_ASN1_SET_ANY$MH, "d2i_ASN1_SET_ANY");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_SET_ANY$MH() {
        return RuntimeHelper.requireNonNull(constants$205.i2d_ASN1_SET_ANY$MH,"i2d_ASN1_SET_ANY");
    }
    public static int i2d_ASN1_SET_ANY ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.i2d_ASN1_SET_ANY$MH, "i2d_ASN1_SET_ANY");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_new$MH() {
        return RuntimeHelper.requireNonNull(constants$205.ASN1_TYPE_new$MH,"ASN1_TYPE_new");
    }
    public static MemoryAddress ASN1_TYPE_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.ASN1_TYPE_new$MH, "ASN1_TYPE_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_free$MH() {
        return RuntimeHelper.requireNonNull(constants$205.ASN1_TYPE_free$MH,"ASN1_TYPE_free");
    }
    public static void ASN1_TYPE_free ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.ASN1_TYPE_free$MH, "ASN1_TYPE_free");
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle d2i_ASN1_TYPE$MH() {
        return RuntimeHelper.requireNonNull(constants$205.d2i_ASN1_TYPE$MH,"d2i_ASN1_TYPE");
    }
    public static MemoryAddress d2i_ASN1_TYPE ( Addressable a,  Addressable in,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.d2i_ASN1_TYPE$MH, "d2i_ASN1_TYPE");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(a, in, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle i2d_ASN1_TYPE$MH() {
        return RuntimeHelper.requireNonNull(constants$206.i2d_ASN1_TYPE$MH,"i2d_ASN1_TYPE");
    }
    public static int i2d_ASN1_TYPE ( Addressable a,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.i2d_ASN1_TYPE$MH, "i2d_ASN1_TYPE");
        try {
            return (int)mh$.invokeExact(a, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_get$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_get$MH,"ASN1_TYPE_get");
    }
    public static int ASN1_TYPE_get ( Addressable a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_get$MH, "ASN1_TYPE_get");
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_set$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_set$MH,"ASN1_TYPE_set");
    }
    public static void ASN1_TYPE_set ( Addressable a,  int type,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_set$MH, "ASN1_TYPE_set");
        try {
            mh$.invokeExact(a, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_set1$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_set1$MH,"ASN1_TYPE_set1");
    }
    public static int ASN1_TYPE_set1 ( Addressable a,  int type,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_set1$MH, "ASN1_TYPE_set1");
        try {
            return (int)mh$.invokeExact(a, type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_cmp$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_cmp$MH,"ASN1_TYPE_cmp");
    }
    public static int ASN1_TYPE_cmp ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_cmp$MH, "ASN1_TYPE_cmp");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ASN1_TYPE_pack_sequence$MH() {
        return RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_pack_sequence$MH,"ASN1_TYPE_pack_sequence");
    }
    public static MemoryAddress ASN1_TYPE_pack_sequence ( Addressable it,  Addressable s,  Addressable t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.ASN1_TYPE_pack_sequence$MH, "ASN1_TYPE_pack_sequence");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(it, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


