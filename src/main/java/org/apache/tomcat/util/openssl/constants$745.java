// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$745 {

    static final FunctionDescriptor sk_CTLOG_is_sorted$FUNC = FunctionDescriptor.of(JAVA_INT,
        ADDRESS
    );
    static final MethodHandle sk_CTLOG_is_sorted$MH = RuntimeHelper.downcallHandle(
        "sk_CTLOG_is_sorted",
        constants$745.sk_CTLOG_is_sorted$FUNC, false
    );
    static final FunctionDescriptor sk_CTLOG_dup$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS
    );
    static final MethodHandle sk_CTLOG_dup$MH = RuntimeHelper.downcallHandle(
        "sk_CTLOG_dup",
        constants$745.sk_CTLOG_dup$FUNC, false
    );
    static final FunctionDescriptor sk_CTLOG_deep_copy$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle sk_CTLOG_deep_copy$MH = RuntimeHelper.downcallHandle(
        "sk_CTLOG_deep_copy",
        constants$745.sk_CTLOG_deep_copy$FUNC, false
    );
    static final FunctionDescriptor sk_CTLOG_set_cmp_func$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle sk_CTLOG_set_cmp_func$MH = RuntimeHelper.downcallHandle(
        "sk_CTLOG_set_cmp_func",
        constants$745.sk_CTLOG_set_cmp_func$FUNC, false
    );
    static final FunctionDescriptor CT_POLICY_EVAL_CTX_new$FUNC = FunctionDescriptor.of(ADDRESS);
    static final MethodHandle CT_POLICY_EVAL_CTX_new$MH = RuntimeHelper.downcallHandle(
        "CT_POLICY_EVAL_CTX_new",
        constants$745.CT_POLICY_EVAL_CTX_new$FUNC, false
    );
    static final FunctionDescriptor CT_POLICY_EVAL_CTX_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle CT_POLICY_EVAL_CTX_free$MH = RuntimeHelper.downcallHandle(
        "CT_POLICY_EVAL_CTX_free",
        constants$745.CT_POLICY_EVAL_CTX_free$FUNC, false
    );
}


