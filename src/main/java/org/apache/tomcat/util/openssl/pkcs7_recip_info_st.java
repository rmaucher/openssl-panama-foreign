// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class pkcs7_recip_info_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("version"),
        ADDRESS.withName("issuer_and_serial"),
        ADDRESS.withName("key_enc_algor"),
        ADDRESS.withName("enc_key"),
        ADDRESS.withName("cert")
    ).withName("pkcs7_recip_info_st");
    public static MemoryLayout $LAYOUT() {
        return pkcs7_recip_info_st.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return pkcs7_recip_info_st.version$VH;
    }
    public static MemoryAddress version$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_recip_info_st.version$VH.set(seg, x);
    }
    public static MemoryAddress version$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_recip_info_st.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle issuer_and_serial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("issuer_and_serial"));
    public static VarHandle issuer_and_serial$VH() {
        return pkcs7_recip_info_st.issuer_and_serial$VH;
    }
    public static MemoryAddress issuer_and_serial$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.issuer_and_serial$VH.get(seg);
    }
    public static void issuer_and_serial$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_recip_info_st.issuer_and_serial$VH.set(seg, x);
    }
    public static MemoryAddress issuer_and_serial$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.issuer_and_serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void issuer_and_serial$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_recip_info_st.issuer_and_serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key_enc_algor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key_enc_algor"));
    public static VarHandle key_enc_algor$VH() {
        return pkcs7_recip_info_st.key_enc_algor$VH;
    }
    public static MemoryAddress key_enc_algor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.key_enc_algor$VH.get(seg);
    }
    public static void key_enc_algor$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_recip_info_st.key_enc_algor$VH.set(seg, x);
    }
    public static MemoryAddress key_enc_algor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.key_enc_algor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key_enc_algor$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_recip_info_st.key_enc_algor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle enc_key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enc_key"));
    public static VarHandle enc_key$VH() {
        return pkcs7_recip_info_st.enc_key$VH;
    }
    public static MemoryAddress enc_key$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.enc_key$VH.get(seg);
    }
    public static void enc_key$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_recip_info_st.enc_key$VH.set(seg, x);
    }
    public static MemoryAddress enc_key$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.enc_key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enc_key$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_recip_info_st.enc_key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cert$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cert"));
    public static VarHandle cert$VH() {
        return pkcs7_recip_info_st.cert$VH;
    }
    public static MemoryAddress cert$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.cert$VH.get(seg);
    }
    public static void cert$set( MemorySegment seg, MemoryAddress x) {
        pkcs7_recip_info_st.cert$VH.set(seg, x);
    }
    public static MemoryAddress cert$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pkcs7_recip_info_st.cert$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cert$set(MemorySegment seg, long index, MemoryAddress x) {
        pkcs7_recip_info_st.cert$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


