// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class SCRYPT_PARAMS_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("salt"),
        ADDRESS.withName("costParameter"),
        ADDRESS.withName("blockSize"),
        ADDRESS.withName("parallelizationParameter"),
        ADDRESS.withName("keyLength")
    ).withName("SCRYPT_PARAMS_st");
    public static MemoryLayout $LAYOUT() {
        return SCRYPT_PARAMS_st.$struct$LAYOUT;
    }
    static final VarHandle salt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("salt"));
    public static VarHandle salt$VH() {
        return SCRYPT_PARAMS_st.salt$VH;
    }
    public static MemoryAddress salt$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.salt$VH.get(seg);
    }
    public static void salt$set( MemorySegment seg, MemoryAddress x) {
        SCRYPT_PARAMS_st.salt$VH.set(seg, x);
    }
    public static MemoryAddress salt$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.salt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void salt$set(MemorySegment seg, long index, MemoryAddress x) {
        SCRYPT_PARAMS_st.salt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle costParameter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("costParameter"));
    public static VarHandle costParameter$VH() {
        return SCRYPT_PARAMS_st.costParameter$VH;
    }
    public static MemoryAddress costParameter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.costParameter$VH.get(seg);
    }
    public static void costParameter$set( MemorySegment seg, MemoryAddress x) {
        SCRYPT_PARAMS_st.costParameter$VH.set(seg, x);
    }
    public static MemoryAddress costParameter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.costParameter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void costParameter$set(MemorySegment seg, long index, MemoryAddress x) {
        SCRYPT_PARAMS_st.costParameter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blockSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blockSize"));
    public static VarHandle blockSize$VH() {
        return SCRYPT_PARAMS_st.blockSize$VH;
    }
    public static MemoryAddress blockSize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.blockSize$VH.get(seg);
    }
    public static void blockSize$set( MemorySegment seg, MemoryAddress x) {
        SCRYPT_PARAMS_st.blockSize$VH.set(seg, x);
    }
    public static MemoryAddress blockSize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.blockSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blockSize$set(MemorySegment seg, long index, MemoryAddress x) {
        SCRYPT_PARAMS_st.blockSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle parallelizationParameter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parallelizationParameter"));
    public static VarHandle parallelizationParameter$VH() {
        return SCRYPT_PARAMS_st.parallelizationParameter$VH;
    }
    public static MemoryAddress parallelizationParameter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.parallelizationParameter$VH.get(seg);
    }
    public static void parallelizationParameter$set( MemorySegment seg, MemoryAddress x) {
        SCRYPT_PARAMS_st.parallelizationParameter$VH.set(seg, x);
    }
    public static MemoryAddress parallelizationParameter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.parallelizationParameter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parallelizationParameter$set(MemorySegment seg, long index, MemoryAddress x) {
        SCRYPT_PARAMS_st.parallelizationParameter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle keyLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("keyLength"));
    public static VarHandle keyLength$VH() {
        return SCRYPT_PARAMS_st.keyLength$VH;
    }
    public static MemoryAddress keyLength$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.keyLength$VH.get(seg);
    }
    public static void keyLength$set( MemorySegment seg, MemoryAddress x) {
        SCRYPT_PARAMS_st.keyLength$VH.set(seg, x);
    }
    public static MemoryAddress keyLength$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)SCRYPT_PARAMS_st.keyLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keyLength$set(MemorySegment seg, long index, MemoryAddress x) {
        SCRYPT_PARAMS_st.keyLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


