// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$528 {

    static final FunctionDescriptor OPENSSL_LH_new$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_LH_new$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_LH_new",
        constants$528.OPENSSL_LH_new$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_LH_free$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS
    );
    static final MethodHandle OPENSSL_LH_free$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_LH_free",
        constants$528.OPENSSL_LH_free$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_LH_insert$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_LH_insert$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_LH_insert",
        constants$528.OPENSSL_LH_insert$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_LH_delete$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_LH_delete$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_LH_delete",
        constants$528.OPENSSL_LH_delete$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_LH_retrieve$FUNC = FunctionDescriptor.of(ADDRESS,
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_LH_retrieve$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_LH_retrieve",
        constants$528.OPENSSL_LH_retrieve$FUNC, false
    );
    static final FunctionDescriptor OPENSSL_LH_doall$FUNC = FunctionDescriptor.ofVoid(
        ADDRESS,
        ADDRESS
    );
    static final MethodHandle OPENSSL_LH_doall$MH = RuntimeHelper.downcallHandle(
        "OPENSSL_LH_doall",
        constants$528.OPENSSL_LH_doall$FUNC, false
    );
}


