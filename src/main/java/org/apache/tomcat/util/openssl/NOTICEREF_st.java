// Generated by jextract

package org.apache.tomcat.util.openssl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class NOTICEREF_st {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        ADDRESS.withName("organization"),
        ADDRESS.withName("noticenos")
    ).withName("NOTICEREF_st");
    public static MemoryLayout $LAYOUT() {
        return NOTICEREF_st.$struct$LAYOUT;
    }
    static final VarHandle organization$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("organization"));
    public static VarHandle organization$VH() {
        return NOTICEREF_st.organization$VH;
    }
    public static MemoryAddress organization$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)NOTICEREF_st.organization$VH.get(seg);
    }
    public static void organization$set( MemorySegment seg, MemoryAddress x) {
        NOTICEREF_st.organization$VH.set(seg, x);
    }
    public static MemoryAddress organization$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)NOTICEREF_st.organization$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void organization$set(MemorySegment seg, long index, MemoryAddress x) {
        NOTICEREF_st.organization$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle noticenos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("noticenos"));
    public static VarHandle noticenos$VH() {
        return NOTICEREF_st.noticenos$VH;
    }
    public static MemoryAddress noticenos$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)NOTICEREF_st.noticenos$VH.get(seg);
    }
    public static void noticenos$set( MemorySegment seg, MemoryAddress x) {
        NOTICEREF_st.noticenos$VH.set(seg, x);
    }
    public static MemoryAddress noticenos$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)NOTICEREF_st.noticenos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void noticenos$set(MemorySegment seg, long index, MemoryAddress x) {
        NOTICEREF_st.noticenos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


